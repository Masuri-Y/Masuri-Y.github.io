<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>自动化运维之Ansible（一）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--1/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--1/</url>
    <content><![CDATA[<h2 id="自动化运维之Ansible（一）"><a href="#自动化运维之Ansible（一）" class="headerlink" title="自动化运维之Ansible（一）"></a>自动化运维之Ansible（一）</h2><p>工作中经常会面临到机器非常多，所接触到的主机可能是成百上千台以上，所以在管理那么多主机时必须要使用自动化管理工具对其进行管理，此时如果使用手工进行管理将是非常的费时费力的。</p>
<span id="more"></span>

<h3 id="自动化运维应用场景"><a href="#自动化运维应用场景" class="headerlink" title="自动化运维应用场景"></a>自动化运维应用场景</h3><p>自动化运维工具的应用场景通常会涉及到以下几种环境：</p>
<p>文件传输：比如将某软件的配置文件在某台服务器上配置完成，配置完成后要将其配置文件传送到其他的所有服务器上去，让其他的服务器上的软件也实现相同功能。</p>
<p>应用部署：比如说在某些服务器上安装一个数据库、一个web服务器软件或者缓存服务器的软件，对一批服务器进行批量的部署软件</p>
<p>配置管理：软件部署完毕后还需要对软件的配置文件进行批量的配置和管理，对配置文件进行批量的修改。</p>
<p>任务流编排：类似于编写脚本，对任务的顺序进行编排，人工手动执行过于麻烦</p>
<h3 id="常用自动化运维工具"><a href="#常用自动化运维工具" class="headerlink" title="常用自动化运维工具"></a>常用自动化运维工具</h3><p>Ansible：红帽公司的员工所研发，后来被红帽公司收购。使用python编写，ansible是无代理的，无代理表示安装ansible的机器可以对成千上万台机器进行管理，而被管理的软件无需安装客户端就可以被ansible管理，这主要是因为ansible是基于ssh-key验证来实现的，只要ssh-key通过验证就能对其进行管理。</p>
<p>Saltstack：使用python编写，一般需要部署agent，执行效率更高</p>
<p>Puppet：使用ruby编写，适用于超大环境使用，功能强大，配置复杂。</p>
<p>Fabric：python编写，无代理agentless</p>
<p>chef：ruby编写，国内应用少</p>
<p>Cfengine:</p>
<p>func:</p>
<h3 id="Ansible的特性"><a href="#Ansible的特性" class="headerlink" title="Ansible的特性"></a>Ansible的特性</h3><p>模块化：调用特定的模块，完成特定的任务，有Paramiko，Jinja2（模板语言）三个关键模块，支持自定义模块。</p>
<p>部署简单：基于Python和SSH，agentless无代理，安全性高基于OpenSSH。</p>
<p>支持Playbook编排任务。</p>
<p>幂等性：一个任务执行一 次和执行N次的效果相同，不因重复执行而带来以为情况。</p>
<p>YAML格式：编排任务，支持丰富的数据结构，拥有比较强大的多层解决方案。</p>
<h3 id="Ansible的架构"><a href="#Ansible的架构" class="headerlink" title="Ansible的架构"></a>Ansible的架构</h3><p>Host Inventory：我们可以通过多种方式来使用ansible，我们可以通过用户直接使用ansible命令来使用ansible，在使用ansible之前需要配置一份主机清单，在主机清单中列出哪些主机是需要被ansible所管理的。</p>
<p>Public/Priviate Could：用户也可以通过开发接口来管理使用ansible，比如企业内部使用共有云或私有云来管理使用ansible。</p>
<p>Playbooks：企业内部也可以编写playbook，playbook中可以根据规划加入条件判断和循环，其用法类似于脚本。</p>
<p>Core Modules：ansible在使用时其背后还有各种不同的模块，其使用各种不同的模块来支持管理和配置不同的主机上的各种设置。其模块可以理解为各种命令，比如文件操作的命令，用户管理的命令，软件包管理的命令等等。</p>
<p>Custom Modules：ansible还支持自定义的模块，可以由用户自己开发各种模块。</p>
<p>Plugins：ansible支持各种插件，比如邮件、登录、等等。</p>
<p>Connection Plugins：以上所提到的工具最终将通过连接插件连接到被控制的主机上，从而来控制需要管理的主机。</p>
<p><img src="ansible1.png"></p>
<h3 id="Ansible的使用方法"><a href="#Ansible的使用方法" class="headerlink" title="Ansible的使用方法"></a>Ansible的使用方法</h3><p>Ansible的使用方法有两种Ad-Hoc和ansible-playbook。</p>
<p>Ad-Hoc：即ansible命令，主要用于临时命令使用场景</p>
<p>Ansible-playbook：主要用于长期规划好的，大型项目的场景，需要有前期的规划过程</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li><p>执行ansible的主机一般称为主控端，中控，master或堡垒机</p>
</li>
<li><p>主控端Python版本需要2.6或以上</p>
</li>
<li><p>被控端Python版本小于2.4需要安装python-simplejson</p>
</li>
<li><p>被控端如开启SELinux需要安装libselinux-python</p>
</li>
<li><p>windows不能做为主控端</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（十）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--10/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    <content><![CDATA[<h2 id="template中的for和if"><a href="#template中的for和if" class="headerlink" title="template中的for和if"></a>template中的for和if</h2><p>在模板文件中可以使用for和if，来实现对模板文件中的内容进行循环和判断。从而实现一个配置文件中的某一段需要被多次引用，或者做判断某一配置段是否需要。</p>
<span id="more"></span>

<h3 id="template中的for循环"><a href="#template中的for循环" class="headerlink" title="template中的for循环"></a>template中的for循环</h3><p>在ansible的模板文件中可以创建循环，将某配置段中需要变动的值设置为一个变量，将变量中的所有值以列表的形式定义在yaml文件中，当playbook被执行时会从文件中逐个读取值，将配置段进行循环。</p>
<h4 id="template中for的使用"><a href="#template中for的使用" class="headerlink" title="template中for的使用"></a>template中for的使用</h4><p>生成以下文件内容，每个server段的监听端口不同其余都相同</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 81</span><br><span class="line">        server_name www.a.com</span><br><span class="line">        root /app/websitea/</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">        listen 82</span><br><span class="line">        server_name www.a.com</span><br><span class="line">        root /app/websitea/</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">        listen 83</span><br><span class="line">        server_name www.a.com</span><br><span class="line">        root /app/websitea/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.创建模板文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim templates/test1.j2</span></span><br><span class="line">&#123;%<span class="keyword">for</span> i <span class="keyword">in</span> test_ports %&#125;         <span class="comment">#创建for循环段，定义变量列表为test_ports</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen &#123;&#123;i&#125;&#125;            <span class="comment">#将需要改变的port设置为变量</span></span><br><span class="line">        server_name www.a.com</span><br><span class="line">        root /app/websitea</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;%endfor%&#125;              <span class="comment">#for循环结束</span></span><br></pre></td></tr></table></figure>

<p>2.创建yaml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim test1.yaml</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:                 <span class="comment">#定义变量取值的列表</span></span><br><span class="line">    test_ports:</span><br><span class="line">      - 81</span><br><span class="line">      - 82</span><br><span class="line">      - 83</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: tempate</span><br><span class="line">      template: src=test1.j2 dest=/data/test.conf</span><br></pre></td></tr></table></figure>

<p>3.执行脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible-playbook test1.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [tempate] **************************************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>4.验证创建出的内容所监听的端口是否为81，82，83</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># cat /data/test.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 81</span><br><span class="line">        server_name www.a.com</span><br><span class="line">        root /app/websitea</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 82</span><br><span class="line">        server_name www.a.com</span><br><span class="line">        root /app/websitea</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 83</span><br><span class="line">        server_name www.a.com</span><br><span class="line">        root /app/websitea</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="template中for的实战应用"><a href="#template中for的实战应用" class="headerlink" title="template中for的实战应用"></a>template中for的实战应用</h4><p>在上一步中已经实现了让生成的文件中监听端口不相同，在本步骤中需要实现使用for来创建出httpd中的虚拟主机配置段，配置结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 81</span><br><span class="line">        server_name www.a.com</span><br><span class="line">        root /app/websitea</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">        listen 82</span><br><span class="line">        server_name www.b.com</span><br><span class="line">        root /app/websiteb</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">        listen 83</span><br><span class="line">        server_name www.a.com</span><br><span class="line">        root /app/websitec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要实现每个循环中的所有配置都不相同，需要使用字典绑定  </p>
<p>1.修改模板</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim templates/test1.j2</span></span><br><span class="line"></span><br><span class="line">&#123;%<span class="keyword">for</span> i <span class="keyword">in</span> vhosts %&#125;            <span class="comment">#配置变量猎豹</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen &#123;&#123;i.port&#125;&#125;       <span class="comment">#使用以&quot;i.*&quot;的变量，来定义端口，server_name和站点目录</span></span><br><span class="line">        server_name &#123;&#123;i.name&#125;&#125;</span><br><span class="line">        root &#123;&#123;i.dir&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>

<p>2.修改剧本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim test1.yaml</span></span><br><span class="line">---</span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:                 <span class="comment">#在变量中定义字典绑定的关系</span></span><br><span class="line">    vhosts:</span><br><span class="line">      - web1:</span><br><span class="line">        port: 81</span><br><span class="line">        name: www.a.com</span><br><span class="line">        dir: /data/websitea</span><br><span class="line">      - web2:</span><br><span class="line">        port: 82</span><br><span class="line">        name: www.b.com</span><br><span class="line">        dir: /data/websiteb</span><br><span class="line">      - web3:</span><br><span class="line">        port: 83</span><br><span class="line">        name: www.c.com</span><br><span class="line">        dir: /data/websitec</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: tempate</span><br><span class="line">      template: src=test1.j2 dest=/data/test2.conf</span><br></pre></td></tr></table></figure>

<p>3.执行脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible-playbook test1.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [tempate] **************************************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>4.验证所创建出的配置文件是否正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web2 data]<span class="comment"># vi test2.conf</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 81</span><br><span class="line">        server_name www.a.com</span><br><span class="line">        root /data/websitea</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 82</span><br><span class="line">        server_name www.b.com</span><br><span class="line">        root /data/websiteb</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 83</span><br><span class="line">        server_name www.c.com</span><br><span class="line">        root /data/websitec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="template中的if"><a href="#template中的if" class="headerlink" title="template中的if"></a>template中的if</h3><p>if可以判断变量是否定义，定了就引用，若是没有定义则不引用</p>
<h4 id="if的使用方法"><a href="#if的使用方法" class="headerlink" title="if的使用方法"></a>if的使用方法</h4><p>此处依旧以上一部为例，在模板中添加判断来创建出以下配置段：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 81</span><br><span class="line">        root /data/websitea</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 82</span><br><span class="line">        root /data/websiteb</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 83</span><br><span class="line">        server_name www.c.com</span><br><span class="line">        root /data/websitec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要创建出没有server_name的配置段只需要对server_name所对应的变量做判断，判断此变量是否被定义，如果此变量没有被定义则不会应用此变量，输出为空。</p>
<p>1.修改模板</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim templates/test1.j2</span></span><br><span class="line"></span><br><span class="line">&#123;%<span class="keyword">for</span> i <span class="keyword">in</span> vhosts %&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen &#123;&#123;i.port&#125;&#125;</span><br><span class="line">&#123;%<span class="keyword">if</span> i.name is defined %&#125;             <span class="comment">#在server_name段添加判断，判断变量是否被定义</span></span><br><span class="line">        server_name &#123;&#123;i.name&#125;&#125;</span><br><span class="line">&#123;%endif%&#125;</span><br><span class="line">        root &#123;&#123;i.dir&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>

<p>2.修改yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim test1.yaml</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:</span><br><span class="line">    vhosts:</span><br><span class="line">      - web1:</span><br><span class="line">        port: 81</span><br><span class="line">        <span class="comment">#name: www.a.com        #将name注释，此时变相没有设定，将不引用</span></span><br><span class="line">        dir: /data/websitea</span><br><span class="line">      - web2:</span><br><span class="line">        port: 82</span><br><span class="line">        <span class="comment">#name: www.b.com</span></span><br><span class="line">        dir: /data/websiteb</span><br><span class="line">      - web3:</span><br><span class="line">        port: 83</span><br><span class="line">        name: www.c.com</span><br><span class="line">        dir: /data/websitec</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: tempate</span><br><span class="line">      template: src=test1.j2 dest=/data/test2.conf</span><br></pre></td></tr></table></figure>

<p>3.执行剧本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible-playbook test1.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [tempate] **************************************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>验证远程主机上输出的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible webserver -a &quot;cat /data/test2.conf&quot;</span></span><br><span class="line">192.168.73.132 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 81                       <span class="comment">#输出的文件内容中梅有server_name行</span></span><br><span class="line">        root /data/websitea</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 82</span><br><span class="line">        root /data/websiteb</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 83</span><br><span class="line">        server_name www.c.com</span><br><span class="line">        root /data/websitec</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（十一）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--11/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="ansible的roles"><a href="#ansible的roles" class="headerlink" title="ansible的roles"></a>ansible的roles</h2><p>roles用于层次性、结构化地组织playbook。roles能够更具层次结构自动装载变量文件，task以及handlers等。要使用roles只需要在playbook中使用include指令即可，简单来讲，roles就是通过分别将变量、文件、任务、模板以及处理器放置于单独的目录中，并可以便捷地include他们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以时用于构建守护进程等守护场景中。</p>
<p>roles就是按照不同的分类和功能进行目录化，模块化，能够实现代码的复合使用。</p>
<span id="more"></span>

<h3 id="roles的目录结构"><a href="#roles的目录结构" class="headerlink" title="roles的目录结构"></a>roles的目录结构</h3><p>每个角色都有特定的层级目录结构进行组织，每一个roles都必须符合这种结构规范。</p>
<h4 id="roles目录结构及作用"><a href="#roles目录结构及作用" class="headerlink" title="roles目录结构及作用"></a>roles目录结构及作用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">playbook.yml</span><br><span class="line">roles/</span><br><span class="line">└──project/           <span class="comment">#项目名称</span></span><br><span class="line">   ├──tasks/          <span class="comment">#定义task,role的基本元素，至少包含一个名为main.yml的文件</span></span><br><span class="line">   ├──files/          <span class="comment">#存放由copy或script模块等需要模板文件的目录</span></span><br><span class="line">   ├──vars/           <span class="comment">#定义变量，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含</span></span><br><span class="line">   ├──templates/      <span class="comment">#template模块查找所需要模板文件的目录</span></span><br><span class="line">   ├──handlers/       <span class="comment">#至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含</span></span><br><span class="line">   ├──default/        <span class="comment">#设定默认变量时使用此目录中的main.yml文件（不常用）</span></span><br><span class="line">   └──meta/           <span class="comment">#定义当前角色的特殊设定及其依赖关系,至少应该包含一个名为main.yml的文件，其它文件需在此文件中通过include进行包含（不常用）</span></span><br></pre></td></tr></table></figure>

<h4 id="roles的创建步骤"><a href="#roles的创建步骤" class="headerlink" title="roles的创建步骤"></a>roles的创建步骤</h4><ol>
<li><p>创建以roles命名的目录</p>
</li>
<li><p>在roles目录中分别创建以各角色命名的目录</p>
</li>
<li><p>在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录；用不到的目录可以创建为空目录，也可以不创建</p>
</li>
<li><p>在playbook文件中，调用各角色</p>
</li>
</ol>
<h3 id="roles的使用"><a href="#roles的使用" class="headerlink" title="roles的使用"></a>roles的使用</h3><h4 id="创建httpd的roles"><a href="#创建httpd的roles" class="headerlink" title="创建httpd的roles"></a>创建httpd的roles</h4><p>1.创建相应的目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># mkdir -pv roles/httpd/&#123;templates,tasks,files,vars,handlers&#125;      #在roles目录下创建出相应的目录结构</span></span><br><span class="line">mkdir: created directory ‘roles’</span><br><span class="line">mkdir: created directory ‘roles/httpd’</span><br><span class="line">mkdir: created directory ‘roles/httpd/templates’</span><br><span class="line">mkdir: created directory ‘roles/httpd/tasks’</span><br><span class="line">mkdir: created directory ‘roles/httpd/files’</span><br><span class="line">mkdir: created directory ‘roles/httpd/vars’</span><br><span class="line">mkdir: created directory ‘roles/httpd/handlers’</span><br></pre></td></tr></table></figure>

<p>2.创建所需的task</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入到tasks目录下创建任务，原本在playbook中的各个命令全部进行分类拆分，一个类别一个yaml文件。</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/httpd/tasks/install.yaml</span></span><br><span class="line">- name: install httpd</span><br><span class="line">  yum: name=httpd</span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/httpd/tasks/config.yaml</span></span><br><span class="line">- name: config</span><br><span class="line">  copy: src=httpd.conf dest=/etc/httpd.conf</span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/httpd/tasks/html.yaml</span></span><br><span class="line">- name: index.html</span><br><span class="line">  copy: src=index.html dest=/var/www/html</span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/httpd/tasks/service.yaml</span></span><br><span class="line">- name: service start</span><br><span class="line">  service: name=httpd state=started</span><br></pre></td></tr></table></figure>

<p>3.创建task的执行顺序文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在tasks目录下创建一个main.yaml文件里面存放上一步中所创建的各task的执行顺序</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/httpd/tasks/main.yaml</span></span><br><span class="line">- include: install.yaml</span><br><span class="line">- include: config.yaml</span><br><span class="line">- include: html.yaml</span><br><span class="line">- include: service.yaml</span><br></pre></td></tr></table></figure>

<p>4.将所需要用到的配置文件放至file目录下，对配置文件稍做修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将需要添加的文件放置到files目录下，如果所添加的文件为配置文件则将其进行修改，或者使用模板进行配置</span></span><br><span class="line">[root@ansible data]<span class="comment"># cp /etc/httpd/conf/httpd.conf /data/roles/httpd/files/</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/httpd/files/httpd.conf</span></span><br><span class="line">Listen 8080</span><br></pre></td></tr></table></figure>

<p>5.在files目录下创建，index.html文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在files目录下创建出网站的主页</span></span><br><span class="line">[root@ansible data]<span class="comment"># echo &quot;&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;&quot; &gt; roles/httpd/files/index.html</span></span><br></pre></td></tr></table></figure>

<p>6.创建playbook调用文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在与roles平级的目录下创建出playbook的调用文件，在内部定义调用哪个roles。</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim httpd.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#install httpd</span></span><br><span class="line">- hosts: webserver</span><br><span class="line">  </span><br><span class="line">  roles:</span><br><span class="line">    - role: httpd</span><br></pre></td></tr></table></figure>

<p>7.测试检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查是否有语法错误</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -C httpd.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [httpd : install httpd] ***********************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [httpd : config] ******************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [httpd : index.html] **************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [httpd : service start] ***********************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=5    changed=4    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=4    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>8.执行playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook  httpd.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [httpd : install httpd] ***********************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [httpd : config] ******************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [httpd : index.html] **************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [httpd : service start] ***********************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=5    changed=4    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=4    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>9.验证httpd是否被部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用curl命令测试进行访问，查看httpd是否被部署</span></span><br><span class="line">[root@ansible data]<span class="comment"># curl 192.168.73.134:8080</span></span><br><span class="line">&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;</span><br><span class="line">[root@ansible data]<span class="comment"># curl 192.168.73.135:8080</span></span><br><span class="line">&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（十二）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--12/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="roles中template、handler、when及tags的应用"><a href="#roles中template、handler、when及tags的应用" class="headerlink" title="roles中template、handler、when及tags的应用"></a>roles中template、handler、when及tags的应用</h2><p>在ansible的playbook中有template、notify-handler、when、及tags，来控制和管理ansible在部署服务时根据主机的不同，部署上不通的配置文件或者执行不同的操作。同样在roles中也能实现这样的功能，以下将演示这些功能在roles中的使用方法。</p>
<span id="more"></span>

<h3 id="roles中template使用"><a href="#roles中template使用" class="headerlink" title="roles中template使用"></a>roles中template使用</h3><p>roles中可以使用template让部署应用的配置文件进行模板化，可以实现根据需求的不通对各个主机上的配置文件做不同的改变，此处以创建nginx的角色为例来演示如何在roles中使用template</p>
<h4 id="创建Nginx角色"><a href="#创建Nginx角色" class="headerlink" title="创建Nginx角色"></a>创建Nginx角色</h4><p>1.创建相应的角色目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建出nginx的角色目录结构</span></span><br><span class="line">[root@ansible data]<span class="comment"># mkdir -pv roles/nginx/&#123;tasks,templates,files,vars,handlers&#125;</span></span><br><span class="line">mkdir: created directory ‘roles/nginx’</span><br><span class="line">mkdir: created directory ‘roles/nginx/tasks’</span><br><span class="line">mkdir: created directory ‘roles/nginx/templates’</span><br><span class="line">mkdir: created directory ‘roles/nginx/files’</span><br><span class="line">mkdir: created directory ‘roles/nginx/vars’</span><br><span class="line">mkdir: created directory ‘roles/nginx/handlers’</span><br></pre></td></tr></table></figure>

<p>2.将模板文件放入templates目录中，并对模板进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将nginx的配置文件复制到templates目录下添加j2后缀，并对其内部的参数进行修改</span></span><br><span class="line">[root@ansible data]<span class="comment"># cp /etc/nginx/nginx.conf /data/roles/nginx/templates/nginx.conf.j2</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim /data/roles/nginx/templates/nginx.conf.j2</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       &#123;&#123;port&#125;&#125; default_server;             <span class="comment">#此处使用变量代替端口号</span></span><br><span class="line">        listen       [::]:&#123;&#123;port&#125;&#125; default_server;        <span class="comment">#此处使用变量代替端口号</span></span><br></pre></td></tr></table></figure>

<p>3.在vars目录中创建变量的定义文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在vars目录下创建一个main.yaml文件，在内部定义变量和值</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim /data/roles/nginx/vars/main.yaml</span></span><br><span class="line">port: 9527</span><br></pre></td></tr></table></figure>

<p>4.在tasks目录下创建各task</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在tasks目录下创建每一步所需的task</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/nginx/tasks/install.yaml</span></span><br><span class="line">- name: install</span><br><span class="line">  yum: name=nginx</span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/nginx/tasks/config.yaml</span></span><br><span class="line">- name: config</span><br><span class="line">  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/nginx/tasks/html.yaml</span></span><br><span class="line">- name: html</span><br><span class="line">  copy: src=roles/httpd/files/index.html dest=/usr/share/nginx/html/index.html</span><br><span class="line">  </span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/nginx/tasks/service.yaml</span></span><br><span class="line">- name: service</span><br><span class="line">  service: name=nginx state=started</span><br></pre></td></tr></table></figure>

<p>5.在tasks目录下创建执行顺序文件main.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在tasks目录下创建一个main.yaml文件在内部定义各task的执行次序</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/nginx/tasks/main.yaml</span></span><br><span class="line">- include: install.yaml</span><br><span class="line">- include: config.yaml</span><br><span class="line">- include: html.yaml</span><br><span class="line">- include: service.yaml</span><br></pre></td></tr></table></figure>

<p>6.创建roles调用目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建nginx的roles调用文件，在内部定义调用了那个roles。</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim nginx.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#install nginx</span></span><br><span class="line">  - hosts: webserver</span><br><span class="line"></span><br><span class="line">    roles:</span><br><span class="line">      - role: nginx</span><br></pre></td></tr></table></figure>

<p>7.测试检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -C  nginx.yaml</span></span><br><span class="line"> [WARNING]: Found variable using reserved name: port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [nginx : install] *****************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [nginx : config] ******************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [nginx : html] ********************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [nginx : service] *****************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=5    changed=4    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=4    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>8.执行playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook   nginx.yaml</span></span><br><span class="line"> [WARNING]: Found variable using reserved name: port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : install] *****************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : config] ******************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : html] ********************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [nginx : service] *****************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=5    changed=4    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=4    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>9.验证nginx是否被部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用curl命令测试网站是否被部署</span></span><br><span class="line">[root@ansible data]<span class="comment"># curl 192.168.73.134:9527</span></span><br><span class="line">&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;</span><br><span class="line">[root@ansible data]<span class="comment"># curl 192.168.73.135:9527</span></span><br><span class="line">&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h3 id="roles中handler的使用"><a href="#roles中handler的使用" class="headerlink" title="roles中handler的使用"></a>roles中handler的使用</h3><p>在roles中可以使用notify+handler，来触发某一特定的任务，其使用方法类似于playbook中的使用。此处以上一步中创建出的roles为例对其进行修改，让其实现当部署的nginx配置文件发生改变时触发服务重启的操作。</p>
<h4 id="在roles中添加触发器"><a href="#在roles中添加触发器" class="headerlink" title="在roles中添加触发器"></a>在roles中添加触发器</h4><p>1.创建在handlers目录下创建handler</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在handlers目录下创建main.yaml文件，内部定义handler所要执行的动作</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/nginx/handlers/main.yaml</span></span><br><span class="line">- name: restart service</span><br><span class="line">  service: name=nginx state=restarted</span><br></pre></td></tr></table></figure>

<p>2.在tasks中添加触发条件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在tasks目录下定义config</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/nginx/tasks/config.yaml</span></span><br><span class="line">- name: config</span><br><span class="line">  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">  notify: restart service</span><br></pre></td></tr></table></figure>

<p>3.对变量稍作修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim roles/nginx/vars/main.yaml</span></span><br><span class="line">port: 1234</span><br></pre></td></tr></table></figure>

<p>4.检查测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -C  nginx.yaml</span></span><br><span class="line"> [WARNING]: Found variable using reserved name: port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : install] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [nginx : config] ******************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : html] ********************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : service] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [nginx : restart service] **********************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=6    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=6    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>5.执行playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook  nginx.yaml</span></span><br><span class="line"> [WARNING]: Found variable using reserved name: port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : install] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : config] ******************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : html] ********************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : service] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [nginx : restart service] **********************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=6    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=6    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>6.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># curl 192.168.73.134:1234</span></span><br><span class="line">&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;</span><br><span class="line">[root@ansible data]<span class="comment"># curl 192.168.73.135:1234</span></span><br><span class="line">&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h3 id="role中when的使用"><a href="#role中when的使用" class="headerlink" title="role中when的使用"></a>role中when的使用</h3><p>when在roles中的使用方法同playbook相同，使用when来做条件判断，来实现当系统版本不同时，应用不同的配置文件。</p>
<h4 id="when在roles中的应用（一）"><a href="#when在roles中的应用（一）" class="headerlink" title="when在roles中的应用（一）"></a>when在roles中的应用（一）</h4><p>此处以上一节中httpd的角色为例加以修改，将其实现在centos6和centos7上使用不同的配置文件。192.168.73.132为1台centos6主机。</p>
<p>1.将httpd2.2的配置文件存放至file目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># cp ~/httpd6.conf roles/httpd/files/httpd6.conf     #复制httpd2.2的配置文件到files目录下，此为centos6所使用的配置文件。</span></span><br></pre></td></tr></table></figure>

<p>2.在tasks目录下添加centos6的task</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim roles/httpd/tasks/config6.yaml         #添加任务复制配置文件到httpd配置文件目录</span></span><br><span class="line"></span><br><span class="line">- name: config6</span><br><span class="line">  copy: src=httpd6.conf dest=/etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>

<p>3.修改tasks目录下main.yaml的执行次序，加入条件判断</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改tasks目录中的main.yaml文件，对系统做判断当系统为6时执行config6.yaml任务，当系统为7时执行config7.yaml任务，并通知restart service</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/httpd/tasks/main.yaml</span></span><br><span class="line">- include: install.yaml</span><br><span class="line">- include: config.yaml</span><br><span class="line">  when: ansible_distribution_major_version == <span class="string">&quot;7&quot;</span></span><br><span class="line">  notify: restart service</span><br><span class="line">- include: config6.yaml</span><br><span class="line">  when: ansible_distribution_major_version == <span class="string">&quot;6&quot;</span></span><br><span class="line">  notfiy: restart service</span><br><span class="line">- include: html.yaml</span><br><span class="line">- include: service.yaml</span><br></pre></td></tr></table></figure>

<p>4.在handlers目录下加入handler</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在上一步中定义了notify所以此处需要定义，触发所执行的动作是什么，在handler目录下创建main.yaml文件，编写restart service所要执行的任务。</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/httpd/handlers/main.yaml</span></span><br><span class="line">- name: restart service</span><br><span class="line">  service: name=httpd state=restarted</span><br></pre></td></tr></table></figure>

<p>5.检查测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -C httpd.yaml</span></span><br><span class="line">[DEPRECATION WARNING]: Specifying include variables at the top-level of the task is deprecated. Please see:</span><br><span class="line">https://docs.ansible.com/ansible/playbooks_roles.html<span class="comment">#task-include-files-and-encouraging-reuse   for currently</span></span><br><span class="line">supported syntax regarding included files and variables. This feature will be removed <span class="keyword">in</span> version 2.12.</span><br><span class="line">Deprecation warnings can be disabled by setting deprecation_warnings=False <span class="keyword">in</span> ansible.cfg.</span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [httpd : install httpd] ***********************************************************************************</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [httpd : config] ******************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [httpd : config6] *****************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : index.html] **************************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [httpd : service start] ***********************************************************************************</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=5    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=5    changed=0    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>6.执行playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook  httpd.yaml</span></span><br><span class="line">[DEPRECATION WARNING]: Specifying include variables at the top-level of the task is deprecated. Please see:</span><br><span class="line">https://docs.ansible.com/ansible/playbooks_roles.html<span class="comment">#task-include-files-and-encouraging-reuse   for currently</span></span><br><span class="line">supported syntax regarding included files and variables. This feature will be removed <span class="keyword">in</span> version 2.12.</span><br><span class="line">Deprecation warnings can be disabled by setting deprecation_warnings=False <span class="keyword">in</span> ansible.cfg.</span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [httpd : install httpd] ***********************************************************************************</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [httpd : config] ******************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [httpd : config6] *****************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : index.html] **************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : service start] ***********************************************************************************</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=5    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=5    changed=0    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>7.校验centos6主机上的httpd服务是否启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># curl 192.168.73.132:9527</span></span><br><span class="line">&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h4 id="when在roles中的应用（二）"><a href="#when在roles中的应用（二）" class="headerlink" title="when在roles中的应用（二）"></a>when在roles中的应用（二）</h4><p>在上一步骤中将wehn放在了task中实现了不通的系统版本使用不同的配置文件。我们也可以将条件判断放在role调用中，实现根据条件的不同来执行不同的roles。</p>
<p>当系统为centos7时安装nginx，系统为centos6时安装httpd</p>
<p>1.创建roles调用文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在roles调用文件中进行判断，当远程主机的系统版本号为centos6时部署httpd，远程主机的系统版本号为centos7时部署nginx服务。</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim web.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#intsall web</span></span><br><span class="line">- hosts: webserver</span><br><span class="line"></span><br><span class="line">  roles:</span><br><span class="line">    - role: nginx</span><br><span class="line">      when: ansible_distribution_major_version == <span class="string">&quot;7&quot;</span></span><br><span class="line">    - role: httpd</span><br><span class="line">      when: ansible_distribution_major_version == <span class="string">&quot;6&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.检查语法错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -C  web.yaml</span></span><br><span class="line">[DEPRECATION WARNING]: Specifying include variables at the top-level of the task is deprecated. Please see:</span><br><span class="line">https://docs.ansible.com/ansible/playbooks_roles.html<span class="comment">#task-include-files-and-encouraging-reuse   for currently</span></span><br><span class="line">supported syntax regarding included files and variables. This feature will be removed <span class="keyword">in</span> version 2.12.</span><br><span class="line">Deprecation warnings can be disabled by setting deprecation_warnings=False <span class="keyword">in</span> ansible.cfg.</span><br><span class="line"> [WARNING]: Found variable using reserved name: port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : install] *****************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : config] ******************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [nginx : html] ********************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [nginx : service] *****************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [httpd : install httpd] ***********************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : config] ******************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : config6] *****************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : index.html] **************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : service start] ***********************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [nginx : restart service] **********************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=5    changed=3    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=6    changed=5    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=6    changed=5    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>3.执行playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook  web.yaml</span></span><br><span class="line">[DEPRECATION WARNING]: Specifying include variables at the top-level of the task is deprecated. Please see:</span><br><span class="line">https://docs.ansible.com/ansible/playbooks_roles.html<span class="comment">#task-include-files-and-encouraging-reuse   for currently</span></span><br><span class="line">supported syntax regarding included files and variables. This feature will be removed <span class="keyword">in</span> version 2.12.</span><br><span class="line">Deprecation warnings can be disabled by setting deprecation_warnings=False <span class="keyword">in</span> ansible.cfg.</span><br><span class="line"> [WARNING]: Found variable using reserved name: port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : install] *****************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [nginx : config] ******************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [nginx : html] ********************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [nginx : service] *****************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [httpd : install httpd] ***********************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : config] ******************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : config6] *****************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : index.html] **************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [httpd : service start] ***********************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [nginx : restart service] **********************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=5    changed=3    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=6    changed=5    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=6    changed=5    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<h3 id="roles中tags的使用"><a href="#roles中tags的使用" class="headerlink" title="roles中tags的使用"></a>roles中tags的使用</h3><p>在roles的调用中也可以使用tags标签来实现按需调用</p>
<h4 id="tags在roles中的使用"><a href="#tags在roles中的使用" class="headerlink" title="tags在roles中的使用"></a>tags在roles中的使用</h4><p>延用上一步骤中的roles调用文件，对每一个roles打上标签，到需要部署nginx时，只需要运行标签为web1的roles，部署httpd时只需要运行tags为web2的roles就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim web.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#intsall web</span></span><br><span class="line">- hosts: webserver</span><br><span class="line"></span><br><span class="line">  roles:</span><br><span class="line">    - role: nginx</span><br><span class="line">      when: ansible_distribution_major_version == <span class="string">&quot;7&quot;</span></span><br><span class="line">      tags: web1</span><br><span class="line">    - role: httpd</span><br><span class="line">      when: ansible_distribution_major_version == <span class="string">&quot;6&quot;</span></span><br><span class="line">      tags: web2</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（十三）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--13/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Ansible角色的一些实战练习"><a href="#Ansible角色的一些实战练习" class="headerlink" title="Ansible角色的一些实战练习"></a>Ansible角色的一些实战练习</h2><p>本节主要针对一些服务的部署，来创建出其角色。以方便更快的掌握ansible角色的创建和使用。</p>
<h3 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h3><p>建立memcached角色，并实现将内存的1/4当缓存使用</p>
<span id="more"></span>

<p>1.创建角色目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建出memcached角色的结构目录</span></span><br><span class="line">[root@ansible data]<span class="comment"># mkdir -pv roles/memcadhed/&#123;templates,tasks,vars&#125;</span></span><br><span class="line">mkdir: created directory ‘roles/memcadhed’</span><br><span class="line">mkdir: created directory ‘roles/memcadhed/templates’</span><br><span class="line">mkdir: created directory ‘roles/memcadhed/tasks’</span><br><span class="line">mkdir: created directory ‘roles/memcadhed/vars’</span><br></pre></td></tr></table></figure>

<p>2.安装memeche获取配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用yum安装memcached从而获取到memcached配置文件，并将配置文件复制到templates目录下让其变为模板文件</span></span><br><span class="line">[root@ansible data]<span class="comment"># yum install memcached -y</span></span><br><span class="line">[root@ansible data]<span class="comment"># cp /etc/sysconfig/memcached roles/memcadhed/templates/memcached.j2</span></span><br></pre></td></tr></table></figure>

<p>3.修改模板文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对memcached模板文件做修改，对CACHESIZE行做修改，使用系统内置变量ansible_memtotal_mb来代替。</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/memcadhed/templates/memcached.j2</span></span><br><span class="line">PORT=<span class="string">&quot;11211&quot;</span></span><br><span class="line">USER=<span class="string">&quot;memcached&quot;</span></span><br><span class="line">MAXCONN=<span class="string">&quot;1024&quot;</span></span><br><span class="line">CACHESIZE=<span class="string">&quot;&#123;&#123;ansible_memtotal_mb//4&#125;&#125;&quot;</span>  <span class="comment">#缓存大小使用系统内置变量</span></span><br><span class="line">OPTIONS=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>4.在tasks目录下创建各task</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在tasks目录下创建出各个任务</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/memcadhed/tasks/install.yaml</span></span><br><span class="line">- name: install</span><br><span class="line">  yum: name=memcached</span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/memcadhed/tasks/config.yaml</span></span><br><span class="line">- name: config</span><br><span class="line">  template: src=memcached.j2 dest=/etc/sysconfig/memcached</span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/memcadhed/tasks/service.yaml</span></span><br><span class="line">- name: service</span><br><span class="line">  service: name=memcached state=started</span><br></pre></td></tr></table></figure>

<p>5.在tasks目录下创建执行顺序文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在tasks目录下创建出main.yaml文件，并写入各任务的执行次序</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/memcadhed/tasks/main.yaml</span></span><br><span class="line"></span><br><span class="line">- include: install.yaml</span><br><span class="line">- include: config.yaml</span><br><span class="line">- include: service.yaml</span><br></pre></td></tr></table></figure>

<p>6.创建调用role文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在与roles目录平级的目录下创建出roles调用文件，定义调用哪一个roles</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim memcached.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># install memcached</span></span><br><span class="line">- hosts: webserver</span><br><span class="line"></span><br><span class="line">  roles:</span><br><span class="line">    - role: memcached</span><br></pre></td></tr></table></figure>

<p>7.测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -C memcached.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [memcached : install] *************************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [memcached : config] **************************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [memcached : service] *************************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=4    changed=3    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=4    changed=3    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=4    changed=3    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>8.执行roles</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook memcached.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [memcached : install] *************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [memcached : config] **************************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [memcached : service] *************************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=4    changed=3    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=4    changed=3    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=4    changed=3    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<h3 id="练习（二）"><a href="#练习（二）" class="headerlink" title="练习（二）"></a>练习（二）</h3><p>在centos6上时间服务为ntp服务，而在centos7上时间服务为chrony，使用ansible在centos6主机上部署ntp服务，centos7上部署chrony。</p>
<p>1.分别创建ntp和chrony角色目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># mkdir -pv roles/&#123;ntpd,chrony&#125;/&#123;templates,tasks,vars,files,handlers&#125;</span></span><br><span class="line">mkdir: created directory ‘roles/ntpd’</span><br><span class="line">mkdir: created directory ‘roles/ntpd/templates’</span><br><span class="line">mkdir: created directory ‘roles/ntpd/tasks’</span><br><span class="line">mkdir: created directory ‘roles/ntpd/vars’</span><br><span class="line">mkdir: created directory ‘roles/ntpd/files’</span><br><span class="line">mkdir: created directory ‘roles/ntpd/handlers’</span><br><span class="line">mkdir: created directory ‘roles/chrony’</span><br><span class="line">mkdir: created directory ‘roles/chrony/templates’</span><br><span class="line">mkdir: created directory ‘roles/chrony/tasks’</span><br><span class="line">mkdir: created directory ‘roles/chrony/vars’</span><br><span class="line">mkdir: created directory ‘roles/chrony/files’</span><br><span class="line">mkdir: created directory ‘roles/chrony/handlers’</span><br></pre></td></tr></table></figure>

<p>2.准备ntpd配置文件</p>
<p>2.1对ntp配置文件修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># vim /etc/ntp.conf</span></span><br><span class="line"><span class="comment">#修改配置文件中的以下三行，将应用此配置的服务器，部署为ntp服务器</span></span><br><span class="line">restrict default kod nomodify</span><br><span class="line">restrict 192.168.73.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line">server 172.22.0.1 iburst</span><br></pre></td></tr></table></figure>

<p>2.2将ntp配置文件存放至role相关目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将更改后的配置文件放入files目录中</span></span><br><span class="line">[root@ansible data]<span class="comment"># mv ntp.conf roles/ntpd/files/</span></span><br></pre></td></tr></table></figure>

<p>3.准备chrony配置文件</p>
<p>3.1修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line"><span class="comment">#修改配置文件中的以下行，将应用此配置的服务器，部署为chrony服务器</span></span><br><span class="line">server 192.168.73.132 iburst</span><br></pre></td></tr></table></figure>

<p>3.2将chrony配置文件存放至role相关目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># cp /etc/chrony.conf roles/chrony/files/</span></span><br></pre></td></tr></table></figure>

<p>4.创建ntpd的tasks</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据服务部署时所需要的步骤创建出各个任务</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/ntpd/tasks/install.yaml</span></span><br><span class="line">- name: install</span><br><span class="line">  yum: name=ntp</span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/ntpd/tasks/config.yaml       #创建添加配置文件的task</span></span><br><span class="line">- name: config</span><br><span class="line">  copy: src=ntp.conf dest=/etc/ntp.conf</span><br><span class="line">  notify: restart service                                   <span class="comment">#当配置文件发生改变时通知服务重启</span></span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/ntpd/tasks/service.yaml</span></span><br><span class="line">- name: service</span><br><span class="line">  service: name=ntpd state=started</span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/ntpd/tasks/main.yaml         #创建任务执行顺序文件。</span></span><br><span class="line">- include: install.yaml</span><br><span class="line">- include: config.yaml</span><br><span class="line">- include: service.yaml</span><br></pre></td></tr></table></figure>

<p>5.创建ntpd的handler</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在handlers目录中出创建任务执行时，触发什么事情。</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/ntpd/handlers/main.yaml</span></span><br><span class="line">- name: restart service</span><br><span class="line">  service: name=ntpd state=restarted</span><br></pre></td></tr></table></figure>

<p>6.创建chrony的tasks</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按部署chrony服务时所需的步骤创建出各task</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/chrony/tasks/install.yaml</span></span><br><span class="line">- name: install</span><br><span class="line">  yum: name=chrony</span><br><span class="line"></span><br><span class="line">  [root@ansible data]<span class="comment"># vim roles/chrony/tasks/config.yaml               #创建添加配置文件的task</span></span><br><span class="line">- name: config</span><br><span class="line">  copy: src=chrony.conf dest=/etc/chrony.conf</span><br><span class="line">  notify: restart service                                               <span class="comment">#当配置文件发生改变时通知服务重启</span></span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/chrony/tasks/service.yaml</span></span><br><span class="line">- name: service</span><br><span class="line">  service: name=chronyd state=started</span><br><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/chrony/tasks/main.yaml                   #创建任务执行顺序文件。</span></span><br><span class="line">- include: install.yaml</span><br><span class="line">- include: config.yaml</span><br><span class="line">- include: service.yaml</span><br></pre></td></tr></table></figure>

<p>7.创建chrony的handler</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在handlers目录中出创建任务执行时，触发什么事情。</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles/chrony/handlers/main.yaml</span></span><br><span class="line">- name: restart service</span><br><span class="line">  service: name=chronyd state=restarted</span><br></pre></td></tr></table></figure>

<p>8.创建带条件判断的role调用剧本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在roles调用中对系统的版本号做出判断，当版本号为6时部署ntpd，当版本号为7时部署chrony</span></span><br><span class="line">[root@ansible data]<span class="comment"># vim roles_time.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#install ntp chorny</span></span><br><span class="line">- hosts: webserver</span><br><span class="line">  roles:</span><br><span class="line">    - role: ntpd</span><br><span class="line">      when: ansible_distribution_major_version == <span class="string">&quot;6&quot;</span></span><br><span class="line">    - role: chrony</span><br><span class="line">      when: ansible_distribution_major_version == <span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure>

<p>9.测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -C roles_time.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [ntpd : install] ******************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [ntpd : config] *******************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [ntpd : service] ******************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [chrony : install] ****************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [chrony : config] *****************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [chrony : service] ****************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [ntpd : restart service] ***********************************************************************</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=4    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=4    changed=3    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=4    changed=3    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>10.执行roles</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook  roles_time.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ***********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [ntpd : install] ******************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [ntpd : config] *******************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [ntpd : service] ******************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [chrony : install] ****************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [chrony : config] *****************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [chrony : service] ****************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=4    changed=0    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=4    changed=0    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=4    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（二）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--2/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="自动化运维之Ansible（二）"><a href="#自动化运维之Ansible（二）" class="headerlink" title="自动化运维之Ansible（二）"></a>自动化运维之Ansible（二）</h2><p>本文将讲述ansible的各种安装方式以及Ansible的配置文件</p>
<span id="more"></span>

<h2 id="Ansible的安装"><a href="#Ansible的安装" class="headerlink" title="Ansible的安装"></a>Ansible的安装</h2><p>ansible可以通过多种方法进行安装，yum、编译、pip和git，都能安装ansible以下演示ansible的各种安装方式</p>
<h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><p>ansible安装最简单的方法可以使用rpm包进行安装，因为ansible已经被收入到的EPEL源中，在配置好yum源后就可以使用yum命令直接安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置EPEL源</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install epel-release -y</span></span><br><span class="line"><span class="comment">#安装ansible</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install ansible -y</span></span><br></pre></td></tr></table></figure>

<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>编译安装ansible时需要先下载ansible的源码包，然后对其进行进行编译安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载源码包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wget https://releases.ansible.com/ansible/ansible-latest.tar.gz</span></span><br><span class="line"><span class="comment">#安装编译所需的包组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install python-jinja2 PyYAML python-paramiko python-babel python-crypto -y</span></span><br><span class="line"><span class="comment">#解压源码包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar xf ansible-latest.tar.gz -C /usr/src/</span></span><br><span class="line"><span class="comment">#编译安装ansible</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd /usr/src/ansible-2.8.4/</span></span><br><span class="line">[root@localhost ansible-2.8.4]<span class="comment"># python setup.py build</span></span><br><span class="line">[root@localhost ansible-2.8.4]<span class="comment"># python setup.py install</span></span><br><span class="line"><span class="comment">#创建出ansible的配置文件目录</span></span><br><span class="line">[root@localhost ansible-2.8.4]<span class="comment"># mkdir /etc/ansible</span></span><br><span class="line"><span class="comment">#将配置文件复制到ansible配置文件目录下</span></span><br><span class="line">[root@localhost ansible-2.8.4]<span class="comment"># cp -r examples/* /etc/ansible</span></span><br></pre></td></tr></table></figure>

<h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p>使用git命令直接将github上的ansible的项目克隆下来也能进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#克隆项目</span></span><br><span class="line">[root@localhost ~]<span class="comment"># git clone git://github.com/ansible/ansible.git --recursive</span></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd ./ansible</span></span><br><span class="line">[root@localhost ~]<span class="comment"># source ./hacking/env-setup</span></span><br></pre></td></tr></table></figure>

<h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h3><p>由于anisble是基于python所写，所以ansible开可以基于pip来进行安装，pip是安装python包的管理器，其功能类似于yum</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装epel源</span></span><br><span class="line">[root@localhost ~]<span class="comment"># epel-release</span></span><br><span class="line"><span class="comment">#安装pip安装所需要的各种包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install python-pip python-devel gcc glibc-devel zlib-devel rpm-build openssl-devel</span></span><br><span class="line"><span class="comment">#更新pip</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pip install --upgrade pip</span></span><br><span class="line"><span class="comment">#安装ansible</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pip install ansible --upgrade</span></span><br></pre></td></tr></table></figure>

<p>以上就是ansible的各种安装方法，可以任选一种进行安装</p>
<hr>
<h2 id="ansible的配置文件"><a href="#ansible的配置文件" class="headerlink" title="ansible的配置文件"></a>ansible的配置文件</h2><p>ansible安装完毕后将在主机上生成了众多的文件，以下为一些较为重要的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置文件</span></span><br><span class="line">/etc/ansible/ansible.cfg	<span class="comment">#主配置文件，配置ansible工作特性</span></span><br><span class="line">/etc/ansible/hosts	<span class="comment">#主机清单</span></span><br><span class="line">/etc/ansible/roles/	<span class="comment">#存放角色的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#程序</span></span><br><span class="line">/usr/bin/ansible	<span class="comment">#主程序，临时命令执行工具</span></span><br><span class="line">/usr/bin/ansible-doc	<span class="comment">#查看配置文档，模块功能查看工具</span></span><br><span class="line">/usr/bin/ansible-galaxy	<span class="comment">#下载/上传优秀代码或Roles模块的官网平台</span></span><br><span class="line">/usr/bin/ansible-playbook	<span class="comment">#定制自动化任务，编排剧本工具</span></span><br><span class="line">/usr/bin/ansible-pull 	<span class="comment">#远程执行命令的工具</span></span><br><span class="line">/usr/bin/ansible-vault 	<span class="comment">#文件加密工具</span></span><br><span class="line">/usr/bin/ansible-console 	<span class="comment">#基于Console界面与用户交互的执行工具</span></span><br></pre></td></tr></table></figure>

<h3 id="主机清单inventory"><a href="#主机清单inventory" class="headerlink" title="主机清单inventory"></a>主机清单inventory</h3><p>ansible的主要功能在于批量的主机操作，为了便捷地使用其中的部分主机，可以在主机清单中将其分组命名。 默认的主机清单文件为/etc/ansible/hosts文件，主机清单文件可以有多个，也可以通过Dynamic Inventory来动态生成。</p>
<h4 id="主机清单格式"><a href="#主机清单格式" class="headerlink" title="主机清单格式"></a>主机清单格式</h4><p>主机清单文件遵循INI文件风格，中括号中的字符为组名。可以将同一个主机同时归并到多个不同的组中；此外，当目标主机使用了非默认的ssh端口，还可以在主机名称之后使用冒号加端口号来标明。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[websever]                      <span class="comment">#中括号中的字符为组名</span></span><br><span class="line">192.168.73.134</span><br><span class="line">192.168.73.135:9527             <span class="comment">#如果目标主机使用了非标的ssh端口可以在主机名后跟上端口号</span></span><br><span class="line">[appsever]                      </span><br><span class="line">192.168.73.134                  <span class="comment">#同一主机可以归类至不同的组中。</span></span><br><span class="line">192.168.73.[01:10]              <span class="comment">#如果主机名遵循相似的命名模式，还可以使用列表的方式来标识各主机，表示ip地址最后一位01到10的主机</span></span><br></pre></td></tr></table></figure>

<h3 id="ansible配置文件"><a href="#ansible配置文件" class="headerlink" title="ansible配置文件"></a>ansible配置文件</h3><p>ansible的配置文件为/etc/ansible/ansible.cfg，此文件一般不做改动，保持默认配置。</p>
<p>配置文件中主要内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[defaults]</span><br><span class="line"><span class="comment">#inventory      = /etc/ansible/hosts                        #主机列表配置文件</span></span><br><span class="line"><span class="comment">#library        = /usr/share/my_modules/                    #库文件存放目录</span></span><br><span class="line"><span class="comment">#remote_tmp     = ~/.ansible/tmp                            #临时py命令文件存放在远程主机目录</span></span><br><span class="line"><span class="comment">#local_tmp      = ~/.ansible/tmp                            #本机的临时命令执行目录</span></span><br><span class="line"><span class="comment">#forks          = 5                                         #默认的并发数</span></span><br><span class="line"><span class="comment">#sudo_user      = root                                      #默认sudo用户</span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True                                       </span></span><br><span class="line"><span class="comment">#ask_pass      = True                                       #每次执行ansible命令是否询问ssh密码</span></span><br><span class="line"><span class="comment">#remote_port    = 22                                        #目标主机端口默认22</span></span><br><span class="line"><span class="comment">#host_key_checking = False                                  #检查对应服务器的host_key</span></span><br><span class="line"><span class="comment">#log_path = /var/log/ansible.log                            #日志文件</span></span><br><span class="line"><span class="comment">#module_name = command                                      #默认使用模块</span></span><br></pre></td></tr></table></figure>

<p>以上为ansible的配置文件，一般保持默认无需改变，但建议将以下配置做修改(以下所有案例都基于这3项被修改的情况)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">host_key_checking = False                           <span class="comment">#此行注释去除，否则每次将检查主机的host_key</span></span><br><span class="line">log_path = /var/<span class="built_in">log</span>/ansible.log                     <span class="comment">#将日志文件打开，方便查看操作日志</span></span><br><span class="line">module_name = shell                                 <span class="comment">#将默认的模块改为shell，command模块功能太弱</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（三）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--3/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h2 id="自动化运维之Ansible（三）"><a href="#自动化运维之Ansible（三）" class="headerlink" title="自动化运维之Ansible（三）"></a>自动化运维之Ansible（三）</h2><h3 id="Ansible系列命令"><a href="#Ansible系列命令" class="headerlink" title="Ansible系列命令"></a>Ansible系列命令</h3><p>ansible有许多的命令，ansible、ansible-doc、ansible-playbook、ansible-vault、ansible-console、ansible-galaxy、ansible-pull，以下以较常用的几个命令做详细的说明。</p>
<span id="more"></span>

<h3 id="ansible-doc命令"><a href="#ansible-doc命令" class="headerlink" title="ansible-doc命令"></a>ansible-doc命令</h3><p>ansible-doc用来显示ansible中各种模块的简要帮助信息</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-doc [-l|-F|-s] [options] [-t &lt;plugin <span class="built_in">type</span>&gt; ] [plugin]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-l</td>
<td>列出可用模块</td>
</tr>
<tr>
<td>-a</td>
<td>显示所有模块的文档</td>
</tr>
<tr>
<td>-s</td>
<td>显示指定模块的playbook片段</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列出所有模块</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ansible-doc -l</span></span><br><span class="line"><span class="comment">#查看指定模块的用法</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ansible-doc ping</span></span><br><span class="line"><span class="comment">#查看指定模块的简单用法</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ansible-doc -s ping</span></span><br></pre></td></tr></table></figure>

<h3 id="ansible命令"><a href="#ansible命令" class="headerlink" title="ansible命令"></a>ansible命令</h3><p>ansible通过ssh实现配置管理、应用部署、任务执行等功能。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible &lt;host-patten&gt; [-m module_name] [-a args]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">–version</td>
<td align="left">显示版本</td>
</tr>
<tr>
<td align="left">-m module</td>
<td align="left">指定模块，默认为command，可以通过修改配置文件进行修改</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">显示详细过程 -vv -vvv可以显示更加详细的内容</td>
</tr>
<tr>
<td align="left">–list-hosts</td>
<td align="left">显示主机列表，可以缩写–list</td>
</tr>
<tr>
<td align="left">-k</td>
<td align="left">提示输入ssh连接密码，默认KEY验证</td>
</tr>
<tr>
<td align="left">-C</td>
<td align="left">检查不执行</td>
</tr>
<tr>
<td align="left">-T，–timeout=TIMEOUT</td>
<td align="left">执行命令的超时时长</td>
</tr>
<tr>
<td align="left">-u,–user=REMOTE_USER</td>
<td align="left">指定远程执行的用户</td>
</tr>
<tr>
<td align="left">-b，–become</td>
<td align="left">代替旧版的sudo其替换</td>
</tr>
<tr>
<td align="left">–become-user=USERNAME</td>
<td align="left">指定sudo的runas用户，默认为root</td>
</tr>
<tr>
<td align="left">-K,–ask-become-pass</td>
<td align="left">提示输入sudo时的口令</td>
</tr>
</tbody></table>
<h3 id="ansible的模块"><a href="#ansible的模块" class="headerlink" title="ansible的模块"></a>ansible的模块</h3><h4 id="ping模块"><a href="#ping模块" class="headerlink" title="ping模块"></a>ping模块</h4><p>ping 用来测试主机的连通性</p>
<p>使用ansible-doc命令可以查看模块用法，使用-s可以简单的查看简单相关用法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible-doc -s ping</span></span><br><span class="line">- name: Try to connect to host, verify a usable python and <span class="built_in">return</span> `pong<span class="string">&#x27; on success</span></span><br><span class="line"><span class="string">  ping:</span></span><br><span class="line"><span class="string">      data:                  # Data to return for the `ping&#x27;</span> <span class="built_in">return</span> value. If this</span><br><span class="line">                               parameter is <span class="built_in">set</span> to `crash<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                               the module will cause an</span></span><br><span class="line"><span class="string">                               exception.</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>测试1：</p>
<p>使用ping模块进行测试时报错，提示错误，因为默认为key连接由于没有配置key所以报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]# ansible 192.168.73.134 -m ping</span><br><span class="line">192.168.73.134 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,password).&quot;, </span><br><span class="line">    &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试2：</p>
<p>带上-k选项后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.73.134 -m ping -k</span></span><br><span class="line">SSH password: </span><br><span class="line">192.168.73.134 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试3：</p>
<p>使用组名，由于此处只给与一次输入密码，所以要确保被管理的两台主机必须要密码相同</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m ping -k</span></span><br><span class="line">SSH password: </span><br><span class="line">192.168.73.134 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试4：</p>
<p>指定由哪个用户执行操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m ping -u masuri -k</span></span><br><span class="line">SSH password: </span><br><span class="line">192.168.73.135 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.73.134 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试5：</p>
<p>使用-b让普通用户用sudo的方法进行操作，如果没有授予sudo的权限，会失败</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m ping -u masuri -k -b</span></span><br><span class="line">SSH password: </span><br><span class="line">192.168.73.134 | FAILED! =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;module_stderr&quot;</span>: <span class="string">&quot;Shared connection to 192.168.73.134 closed.\r\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;module_stdout&quot;</span>: <span class="string">&quot;sudo: a password is required\r\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;MODULE FAILURE\nSee stdout/stderr for the exact error&quot;</span>, </span><br><span class="line">    <span class="string">&quot;rc&quot;</span>: 1</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | FAILED! =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;module_stderr&quot;</span>: <span class="string">&quot;Shared connection to 192.168.73.135 closed.\r\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;module_stdout&quot;</span>: <span class="string">&quot;sudo: a password is required\r\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;MODULE FAILURE\nSee stdout/stderr for the exact error&quot;</span>, </span><br><span class="line">    <span class="string">&quot;rc&quot;</span>: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试6：</p>
<p>分别授予sudo权限后再次测试，此次带上-K选项，表示输入sudo口令执行命令，若要不输入口令，可以在sudo的配置文件中使用NOPASSWD选项。（一般不常用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m ping -u masuri -k -b -K</span></span><br><span class="line">SSH password: </span><br><span class="line">SUDO password[defaults to SSH password]: </span><br><span class="line">192.168.73.135 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.73.134 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上为基于密钥的验证方法，ansible真正在生产环境中使用时还是需要基于key的验证方法</p>
<p>基于key的验证方法</p>
<p>在ansible主机上创建私钥文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ssh-keygen -t rsa -P &quot;&quot; -f .ssh/id_rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> .ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> .ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:UAFYDd5EBqFIyC81+UYk9DZ3lRDZ3XUkr4K/FetFu+c root@ansible</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|..ooo+*B*+=.o o.=|</span></span><br><span class="line"><span class="string">|.o =++ =...o . +.|</span></span><br><span class="line"><span class="string">|  + =+o...      .|</span></span><br><span class="line"><span class="string">| . ..oo..  .   . |</span></span><br><span class="line"><span class="string">|  . .   S . . o .|</span></span><br><span class="line"><span class="string">|           . . +.|</span></span><br><span class="line"><span class="string">|            . o..|</span></span><br><span class="line"><span class="string">|             + .o|</span></span><br><span class="line"><span class="string">|            . .oE|</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<p>将公钥复制到被管理的主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ssh-copy-id 192.168.73.134</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class="string">&quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">root@192.168.73.134<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Number of key(s) added: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   &quot;ssh &#x27;</span>192.168.73.134<span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@ansible ~]# ssh-copy-id 192.168.73.135</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span></span><br><span class="line"><span class="string">root@192.168.73.135&#x27;</span>s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   <span class="string">&quot;ssh &#x27;192.168.73.135&#x27;&quot;</span></span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure>

<p>测试7：</p>
<p>此时再使用ping模块时不再需要带任何参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m ping </span></span><br><span class="line">192.168.73.134 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a>shell模块</h4><p>shell模块用于执行shell命令</p>
<p>查看shell模块简单用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]# ansible-doc -s shell</span><br><span class="line">- name: Execute commands in nodes.</span><br><span class="line">  shell:</span><br><span class="line">      chdir:                 # cd into this directory before running the command</span><br><span class="line">      creates:               # a filename, when it already exists, this step will *not* be</span><br><span class="line">                               run.</span><br><span class="line">      executable:            # change the shell used to execute the command. Should be an</span><br><span class="line">                               absolute path to the</span><br><span class="line">                               executable.</span><br><span class="line">      free_form:             # (required) The shell module takes a free form command to</span><br><span class="line">                               run, as a string.  There&#x27;s</span><br><span class="line">                               not an actual option named</span><br><span class="line">                               &quot;free form&quot;.  See the</span><br><span class="line">                               examples!</span><br><span class="line">      removes:               # a filename, when it does not exist, this step will *not* be</span><br><span class="line">                               run.</span><br><span class="line">      stdin:                 # Set the stdin of the command directly to the specified</span><br><span class="line">                               value.</span><br><span class="line">      warn:                  # if command warnings are on in ansible.cfg, do not warn about</span><br><span class="line">                               this particular line if set</span><br><span class="line">                               to no/false.</span><br></pre></td></tr></table></figure>

<p>示例1：  </p>
<p>使用shell来修改用户口令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m shell -a &#x27;echo 123456 | passwd --stdin masuri&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">Changing password <span class="keyword">for</span> user masuri.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">Changing password <span class="keyword">for</span> user masuri.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>
<p>示例2：<br>在shell模块中使用变量时参数需要使用单引号，若使用双引号则变量指向的是本机的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#单引号效果</span><br><span class="line">[root@ansible ~]# ansible webserver -m shell -a &#x27;echo $HOSTNAME&#x27;</span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">web1</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">web2</span><br><span class="line">#双引号的效果</span><br><span class="line">[root@ansible ~]# ansible webserver -m shell -a &quot;echo $HOSTNAME&quot;</span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">ansible</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">ansible</span><br></pre></td></tr></table></figure>

<p>示例3：</p>
<p>使用shell重定向</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m shell -a &#x27;chdir=/data echo welcome to magedu &gt; test.log&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看重定向是否成功</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m shell -a &#x27;chdir=/data cat test.log&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">welcome to magedu</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">welcome to magedu</span><br></pre></td></tr></table></figure>

<p>示例4：  </p>
<p>使用sed对文件进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m shell -a &#x27;sed -i &quot;s/welcome to magedu/welcome to mylinuxops/&quot; /data/test.log&#x27;</span></span><br><span class="line"> [WARNING]: Consider using the replace, lineinfile or template module rather than running</span><br><span class="line"><span class="string">&#x27;sed&#x27;</span>.  If you need to use <span class="built_in">command</span> because replace, lineinfile or template is insufficient</span><br><span class="line">you can add <span class="string">&#x27;warn: false&#x27;</span> to this <span class="built_in">command</span> task or <span class="built_in">set</span> <span class="string">&#x27;command_warnings=False&#x27;</span> <span class="keyword">in</span></span><br><span class="line">ansible.cfg to get rid of this message.</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证是否修改</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m shell -a &#x27;cat /data/test.log&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">welcome to mylinuxops</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">welcome to mylinuxops</span><br></pre></td></tr></table></figure>

<h4 id="script模块"><a href="#script模块" class="headerlink" title="script模块"></a>script模块</h4><p>script 模块是在远程主机上运行ansible服务器上的脚本  </p>
<p>示例1：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># vim hello.sh      #构建出一个简单的脚本</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">[root@ansible ~]<span class="comment"># chmod +x hello.sh</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m script -a &#x27;/root/hello.sh&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;rc&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;Shared connection to 192.168.73.134 closed.\r\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stderr_lines&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;Shared connection to 192.168.73.134 closed.&quot;</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;hello world\r\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stdout_lines&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;rc&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;Shared connection to 192.168.73.135 closed.\r\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stderr_lines&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;Shared connection to 192.168.73.135 closed.&quot;</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;hello world\r\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stdout_lines&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h4><p>copy 从主控端复制文件到远程主机</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">src</td>
<td align="left">本机的源文件位置</td>
</tr>
<tr>
<td align="left">dest</td>
<td align="left">目标主机存放文件位置</td>
</tr>
<tr>
<td align="left">owner</td>
<td align="left">修改属主</td>
</tr>
<tr>
<td align="left">group</td>
<td align="left">修改属组</td>
</tr>
<tr>
<td align="left">mode</td>
<td align="left">修改权限</td>
</tr>
<tr>
<td align="left">backup</td>
<td align="left">备份，copy时文件若是存在会直接覆盖</td>
</tr>
<tr>
<td align="left">content</td>
<td align="left">指定生成文件的内容</td>
</tr>
</tbody></table>
<p>示例1：</p>
<p>复制本机文件到远程主机，并修改属主，修改权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m copy -a &#x27;src=/etc/fstab dest=/data/fstab2 owner=masuri mode=666 backup=yes&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;e18dfdc22b5e67945358018dfcca8f1c8b25722c&quot;</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/fstab2&quot;</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;4c98128827229df5554dee614d84d607&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0666&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;masuri&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 595, </span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/root/.ansible/tmp/ansible-tmp-1556157419.7-268980429666588/source&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;e18dfdc22b5e67945358018dfcca8f1c8b25722c&quot;</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/fstab2&quot;</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;4c98128827229df5554dee614d84d607&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0666&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;masuri&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 595, </span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/root/.ansible/tmp/ansible-tmp-1556157419.7-28176178316202/source&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 1000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例2：  </p>
<p>使用content直接生成文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m copy -a &#x27;content=&quot;hello word\nwelcome to mylinuxops\n&quot; dest=/data/test1&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;89b51930dc2793a1ea796637d25b982d1c93aa90&quot;</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/test1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;b16c04a75e320a9862568401301b6b02&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0644&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 33, </span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/root/.ansible/tmp/ansible-tmp-1556158261.88-98867568897388/source&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;89b51930dc2793a1ea796637d25b982d1c93aa90&quot;</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/test1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;b16c04a75e320a9862568401301b6b02&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0644&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 33, </span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/root/.ansible/tmp/ansible-tmp-1556158261.89-218330298518724/source&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -a &#x27;cat /data/test1&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">hello word</span><br><span class="line">welcome to mylinuxops</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">hello word</span><br><span class="line">welcome to mylinuxops</span><br></pre></td></tr></table></figure>

<h4 id="fetch模块"><a href="#fetch模块" class="headerlink" title="fetch模块"></a>fetch模块</h4><p>fetch 从远程主机提取文件至主控端，只能提取文件，若要提取目录可以将目录先打包</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dest</td>
<td align="left">在主控端存放文件的位置</td>
</tr>
<tr>
<td align="left">src</td>
<td align="left">远程主机所要提取的文件</td>
</tr>
</tbody></table>
<p>示例1：</p>
<p>将远程主机的/etc/fstab，抓取至本地的/data</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m fetch -a &#x27;dest=/data src=/etc/fstab&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;e18dfdc22b5e67945358018dfcca8f1c8b25722c&quot;</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/192.168.73.135/etc/fstab&quot;</span>, </span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;4c98128827229df5554dee614d84d607&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remote_checksum&quot;</span>: <span class="string">&quot;e18dfdc22b5e67945358018dfcca8f1c8b25722c&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remote_md5sum&quot;</span>: null</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;e18dfdc22b5e67945358018dfcca8f1c8b25722c&quot;</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/192.168.73.134/etc/fstab&quot;</span>, </span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;4c98128827229df5554dee614d84d607&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remote_checksum&quot;</span>: <span class="string">&quot;e18dfdc22b5e67945358018dfcca8f1c8b25722c&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remote_md5sum&quot;</span>: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<p>将远程/etc/目录抓取至本地的/data</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#抓取目录分两步走，先打包</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -a &#x27;tar Jcf /data/etc.tar.xz /etc&#x27;</span></span><br><span class="line"> [WARNING]: Consider using the unarchive module rather than running <span class="string">&#x27;tar&#x27;</span>.  If you need to</span><br><span class="line">use <span class="built_in">command</span> because unarchive is insufficient you can add <span class="string">&#x27;warn: false&#x27;</span> to this <span class="built_in">command</span></span><br><span class="line">task or <span class="built_in">set</span> <span class="string">&#x27;command_warnings=False&#x27;</span> <span class="keyword">in</span> ansible.cfg to get rid of this message.</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">tar: Removing leading `/<span class="string">&#x27; from member names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span></span><br><span class="line"><span class="string">tar: Removing leading `/&#x27;</span> from member names</span><br><span class="line"></span><br><span class="line"><span class="comment">#提取打包文件</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m fetch -a &#x27;dest=/data  src=/data/etc.tar.xz&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;2c7d756eff60249623f58d2ebec290848c4dea89&quot;</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/192.168.73.135/data/etc.tar.xz&quot;</span>, </span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;b20b3a78bcfd25d09d9ce2c9b7beeba3&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remote_checksum&quot;</span>: <span class="string">&quot;2c7d756eff60249623f58d2ebec290848c4dea89&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remote_md5sum&quot;</span>: null</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;c95913f7a079f6c1fb31016105b524685a21cb2d&quot;</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/192.168.73.134/data/etc.tar.xz&quot;</span>, </span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;e075e6d2681d7dbedaf070ad81ebd3e3&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remote_checksum&quot;</span>: <span class="string">&quot;c95913f7a079f6c1fb31016105b524685a21cb2d&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remote_md5sum&quot;</span>: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="File模块"><a href="#File模块" class="headerlink" title="File模块"></a>File模块</h4><p>File模块可以设置文件的属性</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">access_time</td>
<td align="left">访问时间</td>
</tr>
<tr>
<td align="left">access_time_format</td>
<td align="left">时间格式</td>
</tr>
<tr>
<td align="left">attributes</td>
<td align="left">attr格式</td>
</tr>
<tr>
<td align="left">force</td>
<td align="left">当软连接的源文件不存在时使用</td>
</tr>
<tr>
<td align="left">group</td>
<td align="left">设置文件的属组</td>
</tr>
<tr>
<td align="left">mode</td>
<td align="left">设置文件的权限</td>
</tr>
<tr>
<td align="left">modification_time</td>
<td align="left">文件修改时间</td>
</tr>
<tr>
<td align="left">modification_time_format</td>
<td align="left">文件修改时间格式</td>
</tr>
<tr>
<td align="left">owner</td>
<td align="left">设置文件的属主</td>
</tr>
<tr>
<td align="left">path</td>
<td align="left">被管理的文件路径</td>
</tr>
<tr>
<td align="left">src</td>
<td align="left">指定软硬链接的源文件位置</td>
</tr>
<tr>
<td align="left">state</td>
<td align="left">设置文件的类型，file:文件不存在时不会被创建，link:创建软连接，hard:创建硬连接，absent:删除文件，touch:创建空文件</td>
</tr>
</tbody></table>
<p>示例1：</p>
<p>修改文件的属主，权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m file -a &#x27;path=/data/test1 owner=masuri mode=777&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0777&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;masuri&quot;</span>, </span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/data/test1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 33, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0777&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;masuri&quot;</span>, </span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/data/test1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 33, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看属性</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ls -l /data/test1&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">-rwxrwxrwx 1 masuri root 33 Apr 25 10:11 /data/test1</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">-rwxrwxrwx 1 masuri root 33 Apr 25 10:11 /data/test1</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<p>创建硬连接,state=hard</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m file -a &#x27;src=/data/test1 name=/data/test1.log state=hard&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/test1.log&quot;</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0777&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;masuri&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 33, </span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/data/test1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;hard&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/test1.log&quot;</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0777&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;masuri&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 33, </span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/data/test1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;hard&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#查看文件</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ls -l /data/test1.log&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">-rwxrwxrwx 2 masuri root 33 Apr 25 10:11 /data/test1.log</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">-rwxrwxrwx 2 masuri root 33 Apr 25 10:11 /data/test1.log</span><br></pre></td></tr></table></figure>

<p>示例3：</p>
<p>创建软连接，state=link</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m file -a &#x27;src=/data/test1 name=/data/123 state=link&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/123&quot;</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0777&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 11, </span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/data/test1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;link&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/123&quot;</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0777&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 11, </span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/data/test1&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;link&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ls -l /data/123&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">lrwxrwxrwx 1 root root 11 Apr 25 10:56 /data/123 -&gt; /data/test1</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">lrwxrwxrwx 1 root root 11 Apr 25 10:56 /data/123 -&gt; /data/test1</span><br></pre></td></tr></table></figure>

<p>示例4:</p>
<p>创建空文件，state=touch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m file -a &#x27;path=/data/test2 state=touch&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/test2&quot;</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0644&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/data/test2&quot;</span>, </span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0644&quot;</span>, </span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ls -l /data/test2&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">-rw-r--r-- 1 root root 0 Apr 25 10:59 /data/test2</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">-rw-r--r-- 1 root root 0 Apr 25 10:59 /data/test2</span><br></pre></td></tr></table></figure>

<p>示例5：</p>
<p>删除文件，state=absent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m file -a &#x27;path=/data/test2 state=absent&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/data/test2&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;absent&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/data/test2&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;absent&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ls -l /data/test2&#x27;</span></span><br><span class="line">192.168.73.135 | FAILED | rc=2 &gt;&gt;</span><br><span class="line">ls: cannot access /data/test2: No such file or directorynon-zero <span class="built_in">return</span> code</span><br><span class="line"></span><br><span class="line">192.168.73.134 | FAILED | rc=2 &gt;&gt;</span><br><span class="line">ls: cannot access /data/test2: No such file or directorynon-zero <span class="built_in">return</span> code</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="hostname-模块"><a href="#hostname-模块" class="headerlink" title="hostname 模块"></a>hostname 模块</h4><p>hostname 管理主机名</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">name</td>
<td align="left">设置主机名</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible 192.168.73.134 -m hostname -a &#x27;name=mylinuxops.com&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ansible_domain&quot;</span>: <span class="string">&quot;com&quot;</span>, </span><br><span class="line">        <span class="string">&quot;ansible_fqdn&quot;</span>: <span class="string">&quot;mylinuxops.com&quot;</span>, </span><br><span class="line">        <span class="string">&quot;ansible_hostname&quot;</span>: <span class="string">&quot;mylinuxops&quot;</span>, </span><br><span class="line">        <span class="string">&quot;ansible_nodename&quot;</span>: <span class="string">&quot;mylinuxops.com&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mylinuxops.com&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="cron-模块"><a href="#cron-模块" class="headerlink" title="cron 模块"></a>cron 模块</h4><p>corn 计划任务模块</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">backup</td>
<td align="left">在计划任务创建前先备份</td>
</tr>
<tr>
<td align="left">day</td>
<td align="left">天</td>
</tr>
<tr>
<td align="left">hour</td>
<td align="left">小时</td>
</tr>
<tr>
<td align="left">minute</td>
<td align="left">分钟</td>
</tr>
<tr>
<td align="left">month</td>
<td align="left">月</td>
</tr>
<tr>
<td align="left">weekday</td>
<td align="left">星期</td>
</tr>
<tr>
<td align="left">name</td>
<td align="left">计划任务的名称</td>
</tr>
<tr>
<td align="left">reboot</td>
<td align="left">重启后执行</td>
</tr>
<tr>
<td align="left">state</td>
<td align="left">absent:删除</td>
</tr>
<tr>
<td align="left">job</td>
<td align="left">计划任务的内容</td>
</tr>
<tr>
<td align="left">disabled</td>
<td align="left">启用和禁用</td>
</tr>
</tbody></table>
<p>示例1：</p>
<p>创建计划任务，每天1点备份/etc/目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m cron -a &#x27;name=backupetc hour=1 job=&quot;/usr/bin/cp -a /etc /data/`date +%F`&quot;&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;envs&quot;</span>: [], </span><br><span class="line">    <span class="string">&quot;jobs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;backupetc&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;envs&quot;</span>: [], </span><br><span class="line">    <span class="string">&quot;jobs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;backupetc&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;crontab -l&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="comment">#Ansible: backupetc</span></span><br><span class="line">* 1 * * * /usr/bin/cp -a /etc /data/`date +%F`</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="comment">#Ansible: backupetc</span></span><br><span class="line">* 1 * * * /usr/bin/cp -a /etc /data/`date +%F`</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<p>计划任务的禁用，disabled=true</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m cron -a &#x27;name=backupetc day=* hour=1 job=&quot;/usr/bin/cp -a /etc /data/`date +%F`&quot; disabled=true&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;envs&quot;</span>: [], </span><br><span class="line">    <span class="string">&quot;jobs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;backupetc&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;envs&quot;</span>: [], </span><br><span class="line">    <span class="string">&quot;jobs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;backupetc&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;crontab -l&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="comment">#Ansible: backupetc</span></span><br><span class="line"><span class="comment">#* 1 * * * /usr/bin/cp -a /etc /data/`date +%F`</span></span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="comment">#Ansible: backupetc</span></span><br><span class="line"><span class="comment">#* 1 * * * /usr/bin/cp -a /etc /data/`date +%F`</span></span><br></pre></td></tr></table></figure>

<p>示例3：  </p>
<p>计划任务的启用，disabled=false</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m cron -a &#x27;name=backupetc day=* hour=1 job=&quot;/usr/bin/cp -a /etc /data/`date +%F`&quot; disabled=false&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;envs&quot;</span>: [], </span><br><span class="line">    <span class="string">&quot;jobs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;backupetc&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;envs&quot;</span>: [], </span><br><span class="line">    <span class="string">&quot;jobs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;backupetc&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#验证：</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;crontab -l&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="comment">#Ansible: backupetc</span></span><br><span class="line">* 1 * * * /usr/bin/cp -a /etc /data/`date +%F`</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="comment">#Ansible: backupetc</span></span><br><span class="line">* 1 * * * /usr/bin/cp -a /etc /data/`date +%F</span><br></pre></td></tr></table></figure>

<p>示例4：</p>
<p>删除计划任务，state=absent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m cron -a &#x27;name=backupetc day=* hour=1 job=&quot;/usr/bin/cp -a /etc /data/`date +%F`&quot; state=absent&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;envs&quot;</span>: [], </span><br><span class="line">    <span class="string">&quot;jobs&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;envs&quot;</span>: [], </span><br><span class="line">    <span class="string">&quot;jobs&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;crontab -l&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="yum-模块"><a href="#yum-模块" class="headerlink" title="yum 模块"></a>yum 模块</h4><p>yum 包管理</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">name</td>
<td align="left">包的名字</td>
</tr>
<tr>
<td align="left">state</td>
<td align="left">present:安装(可缺省)，absent:卸载</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>按装httpd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m yum -a &#x27;name=httpd&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">...省略...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;rpm -q httpd&#x27;</span></span><br><span class="line"> [WARNING]: Consider using the yum, dnf or zypper module rather than running <span class="string">&#x27;rpm&#x27;</span>.  If you need to use <span class="built_in">command</span></span><br><span class="line">because yum, dnf or zypper is insufficient you can add <span class="string">&#x27;warn: false&#x27;</span> to this <span class="built_in">command</span> task or <span class="built_in">set</span></span><br><span class="line"><span class="string">&#x27;command_warnings=False&#x27;</span> <span class="keyword">in</span> ansible.cfg to get rid of this message.</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">httpd-2.4.6-88.el7.centos.x86_64</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">httpd-2.4.6-88.el7.centos.x86_64</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<p>卸载httpd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m yum -a &#x27;name=httpd state=absent&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;pkg_mgr&quot;</span>: <span class="string">&quot;yum&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;&quot;</span>, </span><br><span class="line">....省略</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;rpm -q httpd&#x27;</span></span><br><span class="line"> [WARNING]: Consider using the yum, dnf or zypper module rather than running <span class="string">&#x27;rpm&#x27;</span>.  If you need to use <span class="built_in">command</span></span><br><span class="line">because yum, dnf or zypper is insufficient you can add <span class="string">&#x27;warn: false&#x27;</span> to this <span class="built_in">command</span> task or <span class="built_in">set</span></span><br><span class="line"><span class="string">&#x27;command_warnings=False&#x27;</span> <span class="keyword">in</span> ansible.cfg to get rid of this message.</span><br><span class="line"></span><br><span class="line">192.168.73.134 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">package httpd is not installednon-zero <span class="built_in">return</span> code</span><br><span class="line"></span><br><span class="line">192.168.73.135 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">package httpd is not installednon-zero <span class="built_in">return</span> code</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="service-模块"><a href="#service-模块" class="headerlink" title="service 模块"></a>service 模块</h4><p>service 用来管理服务</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">enabled</td>
<td align="left">是否开机启动</td>
</tr>
<tr>
<td align="left">name</td>
<td align="left">服务名称</td>
</tr>
<tr>
<td align="left">runlevel</td>
<td align="left">运行在哪个级别上</td>
</tr>
<tr>
<td align="left">state</td>
<td align="left">started:启动，stopped:停止，reloaded:重读配置文件，restarted:重启服务</td>
</tr>
</tbody></table>
<p>示例1：</p>
<p>启动httpd服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m service -a &#x27;name=httpd state=started&#x27;</span></span><br><span class="line">;^H192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;httpd&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;started&quot;</span>, </span><br><span class="line">    <span class="string">&quot;status&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ActiveEnterTimestampMonotonic&quot;</span>: <span class="string">&quot;0&quot;</span>, </span><br><span class="line">        <span class="string">&quot;ActiveExitTimestampMonotonic&quot;</span>: <span class="string">&quot;0&quot;</span>, </span><br><span class="line">...省略</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible webserver  -a &#x27;ss -tnl | grep 80 &#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128         :::80                      :::*                  </span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128         :::80                      :::*                  </span><br></pre></td></tr></table></figure>

<h4 id="user-模块"><a href="#user-模块" class="headerlink" title="user 模块"></a>user 模块</h4><p>user 用户管理模块</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">name</td>
<td align="left">指定用户名</td>
</tr>
<tr>
<td align="left">system</td>
<td align="left">系统用户</td>
</tr>
<tr>
<td align="left">create_home</td>
<td align="left">创建家目录</td>
</tr>
<tr>
<td align="left">shell</td>
<td align="left">指定shell类型</td>
</tr>
<tr>
<td align="left">group</td>
<td align="left">指定主组</td>
</tr>
<tr>
<td align="left">groups</td>
<td align="left">指定附加组</td>
</tr>
<tr>
<td align="left">remove</td>
<td align="left">删除用户是删除家目录</td>
</tr>
<tr>
<td align="left">state</td>
<td align="left">absent:删除用户</td>
</tr>
<tr>
<td align="left">uid</td>
<td align="left">指定Uid号</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>创建mysql用户，为系统用户，shell类型为/sbin/nologin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m user -a &#x27;name=mysql system=yes shell=/sbin/nologin&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;comment&quot;</span>: <span class="string">&quot;&quot;</span>, </span><br><span class="line">    <span class="string">&quot;create_home&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: 996, </span><br><span class="line">    <span class="string">&quot;home&quot;</span>: <span class="string">&quot;/home/mysql&quot;</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mysql&quot;</span>, </span><br><span class="line">    <span class="string">&quot;shell&quot;</span>: <span class="string">&quot;/sbin/nologin&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;present&quot;</span>, </span><br><span class="line">    <span class="string">&quot;system&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 998</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;comment&quot;</span>: <span class="string">&quot;&quot;</span>, </span><br><span class="line">    <span class="string">&quot;create_home&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;group&quot;</span>: 996, </span><br><span class="line">    <span class="string">&quot;home&quot;</span>: <span class="string">&quot;/home/mysql&quot;</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mysql&quot;</span>, </span><br><span class="line">    <span class="string">&quot;shell&quot;</span>: <span class="string">&quot;/sbin/nologin&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;present&quot;</span>, </span><br><span class="line">    <span class="string">&quot;system&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 998</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -a &#x27;getent passwd mysql&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">mysql:x:998:996::/home/mysql:/sbin/nologin</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">mysql:x:998:996::/home/mysql:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>示例2  </p>
<p>删除账号，删除账号时需要带上remove参数，默认不会删除用户的家目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible webserver -m user -a &#x27;name=mysql remove=yes state=absent&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;force&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mysql&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remove&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;absent&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;userdel: mysql mail spool (/var/spool/mail/mysql) not found\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stderr_lines&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;userdel: mysql mail spool (/var/spool/mail/mysql) not found&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">192.168.73.134 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;force&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mysql&quot;</span>, </span><br><span class="line">    <span class="string">&quot;remove&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;absent&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;userdel: mysql mail spool (/var/spool/mail/mysql) not found\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stderr_lines&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;userdel: mysql mail spool (/var/spool/mail/mysql) not found&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ansible-console"><a href="#ansible-console" class="headerlink" title="ansible-console"></a>ansible-console</h3><p>ansible-console为可交互的ansible工具，使用交互的模式对主机列表中的主机进行操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible-console</span></span><br><span class="line">Welcome to the ansible console.</span><br><span class="line">Type <span class="built_in">help</span> or ? to list commands.</span><br><span class="line"></span><br><span class="line">root@all (2)[f:5]$ </span><br><span class="line"><span class="comment">#all：为当前的所有主机，切换组可以使用cd + 组名 的方式</span></span><br><span class="line"><span class="comment">#2:主机数</span></span><br><span class="line"><span class="comment">#f:5 并行执行数，设置并发数 fork + NUM</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（四）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--4/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--4/</url>
    <content><![CDATA[<h2 id="ansible的playbook"><a href="#ansible的playbook" class="headerlink" title="ansible的playbook"></a>ansible的playbook</h2><p>ansible-playbook为ansible的脚本，其是由yaml语言构成，这种语言对格式的要求非常高。</p>
<span id="more"></span>

<h3 id="yaml语言的格式要求"><a href="#yaml语言的格式要求" class="headerlink" title="yaml语言的格式要求"></a>yaml语言的格式要求</h3><ol>
<li>在单一档案中，可以用连续三个连字号(—)区分多个档案，另外，还有选择性的连续三个点号_(…)来表示档案的结尾  </li>
<li>此行开始正常写playbook的内容，一般建议写明该playbook的功能</li>
<li>使用#注释代码  </li>
<li>缩进必须统一的，不能空格和tab混用  </li>
<li>缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行来实现的  </li>
<li>YAML文件内容是区分大小写的，k/v的值均需大小写敏感  </li>
<li>多个k/v可以同行写也可以换行写，同行使用，分割  </li>
<li>v可以是个字符串，也可以是另一个列表  </li>
<li>一个完整的代码块功能需最少元素包括name和task  </li>
<li>一个name只能包括一个task  </li>
<li>YAML文件扩展名通常为yaml或yml</li>
</ol>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim hello.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#hello world</span></span><br><span class="line">  - host: webserver</span><br><span class="line">    remote_user: root</span><br><span class="line"></span><br><span class="line">    task:</span><br><span class="line">      - name: hello world</span><br><span class="line">        shell: /usr/bin/wall hello world</span><br></pre></td></tr></table></figure>

<h3 id="ansible-playbook示例"><a href="#ansible-playbook示例" class="headerlink" title="ansible-playbook示例"></a>ansible-playbook示例</h3><h4 id="编写部署httpd的playbook"><a href="#编写部署httpd的playbook" class="headerlink" title="编写部署httpd的playbook"></a>编写部署httpd的playbook</h4><p>1.准备好httpd配置文件，http默认的端口为80，此处将其改为8080</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim httpd.conf</span></span><br><span class="line">Listen 8080   <span class="comment">#找到listen行将默认端口修改为8080</span></span><br></pre></td></tr></table></figure>

<p>2.编写yaml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="comment">#install httpd</span></span><br><span class="line">  - hosts: webserver</span><br><span class="line">    remote_user: root</span><br><span class="line"></span><br><span class="line">    tasks:</span><br><span class="line">      - name: install</span><br><span class="line">        yum: name=httpd</span><br><span class="line">      - name: config</span><br><span class="line">        copy: src=/data/httpd.conf dest=/etc/httpd/httpd.conf</span><br><span class="line">      - name: service</span><br><span class="line">        service: name=httpd state=started</span><br><span class="line">      - name: check</span><br><span class="line">        shell: ss -tnl | grep 8080</span><br></pre></td></tr></table></figure>

<p>3.检查是否有语法错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -C httpd.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [install] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [config] ***************************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [service] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=4    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=4    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>4.执行yaml脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook httpd.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [install] **************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [config] ***************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [service] **************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=4    changed=3    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=4    changed=3    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>5.校验</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ss -tnl | grep 8080&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128         :::8080                    :::*</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128         :::8080                    :::*</span><br></pre></td></tr></table></figure>

<h4 id="编写创建MySQL用户的playbook"><a href="#编写创建MySQL用户的playbook" class="headerlink" title="编写创建MySQL用户的playbook"></a>编写创建MySQL用户的playbook</h4><p>1.编写yaml文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> [root@ansible data]<span class="comment"># vim user.yml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#useradd</span></span><br><span class="line">  - hosts: webserver</span><br><span class="line">    remote_user: root</span><br><span class="line"></span><br><span class="line">    tasks:</span><br><span class="line">      - name: create group</span><br><span class="line">        group: name=mysql gid=3306</span><br><span class="line">      - name: create user</span><br><span class="line">        user: name=mysql uid=3306 shell=/sbin/nologlin system=yes group=mysql create_home=no</span><br></pre></td></tr></table></figure>

<p>2.检查语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -C user.yml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [create group] *********************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [create user] **********************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=3    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=3    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>3.执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook  user.yml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [create group] *********************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [create user] **********************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=3    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=3    changed=2    unreachable=0    failed=0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;getent passwd mysql&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">mysql:x:3306:3306::/home/mysql:/sbin/nologlin</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">mysql:x:3306:3306::/home/mysql:/sbin/nologlin</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（五）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--5/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h2 id="playbook中的notify和handler"><a href="#playbook中的notify和handler" class="headerlink" title="playbook中的notify和handler"></a>playbook中的notify和handler</h2><p>当执行一个playbook时，第一次执行和第二次执行效果相同，当服务的配置文件发生变化时再次安装时已经启动的服务不会重启，此时就需要使用到notify。</p>
<p>notify的action可用于在每个play的最后被触发，这样可以避免多次有改变发生时每次都执行指定的操作，仅在所有的变化发生完成后一次性地执行指定操作。  </p>
<p>notify是触发条件，headlers是执行的任务</p>
<span id="more"></span>

<h3 id="notify和handler的使用方法"><a href="#notify和handler的使用方法" class="headerlink" title="notify和handler的使用方法"></a>notify和handler的使用方法</h3><p>此处以上一节中的httpd为例，刚才已经启动了HTTP服务，http的端口为8080，此时再次修改httpd.conf，将端口改为80</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim /data/httpd.conf</span></span><br><span class="line">Listen 80</span><br></pre></td></tr></table></figure>

<p>2.对yaml文件进行修改，增加notify及handlers</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim httpd.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#install httpd</span></span><br><span class="line">  - hosts: webserver</span><br><span class="line">    remote_user: root</span><br><span class="line"></span><br><span class="line">    tasks:</span><br><span class="line">      - name: install</span><br><span class="line">        yum: name=httpd</span><br><span class="line">      - name: config</span><br><span class="line">        copy: src=/data/httpd.conf dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">        notify: restart service         <span class="comment">#此处设置notify当再次执行playbook时，配置文件发生改变，1将触发name为&quot;restart service&quot;的handers</span></span><br><span class="line">      - name: service</span><br><span class="line">        service: name=httpd state=started</span><br><span class="line"></span><br><span class="line">    handlers:</span><br><span class="line">      - name: restart service</span><br><span class="line">        service: name=httpd state=restarted</span><br></pre></td></tr></table></figure>

<p>3.检查语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -C httpd.yaml</span></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [install] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [config] ***************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [service] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [restart service] *******************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=5    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>4.执行playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook  httpd.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [install] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [config] ***************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [service] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [restart service] *******************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=5    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>5.验证远程服务器上的端口是否变为80</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ss -tnl |grep 80&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128         :::80                      :::*  </span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128         :::80                      :::*  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（六）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--6/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h2 id="ansible-playbook中标签的使用-tags"><a href="#ansible-playbook中标签的使用-tags" class="headerlink" title="ansible-playbook中标签的使用 tags"></a>ansible-playbook中标签的使用 tags</h2><p>在某些情况下，我们可能只需要选择性的执行playbook中的某一部分，这时候就需要用到playbook的标签(tags)功能，在playbook中添加标签可以让playbook在运行时选择性的执行被标签的内容。</p>
<span id="more"></span>

<h3 id="playbook中标签的使用"><a href="#playbook中标签的使用" class="headerlink" title="playbook中标签的使用"></a>playbook中标签的使用</h3><p>此处沿用上一节中所使用的httpd的yaml文件，再次将httpd.conf文件进行修改，上一节中httpd的端口从8080改为了80，在这里再次将端口从80改为8080。</p>
<p>修改httpd端口，将其改为8080</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim httpd.conf</span></span><br><span class="line">Listen 8080         <span class="comment">#在配置文件中找到Listen，修改为8080</span></span><br></pre></td></tr></table></figure>

<p>编辑yaml文件，对文件内的内容贴标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim httpd.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#install httpd</span></span><br><span class="line">  - hosts: webserver</span><br><span class="line">    remote_user: root</span><br><span class="line"></span><br><span class="line">    tasks:</span><br><span class="line">      - name: install</span><br><span class="line">        yum: name=httpd</span><br><span class="line">      - name: config</span><br><span class="line">        copy: src=/data/httpd.conf dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">        notify: restart service</span><br><span class="line">        tags: config        <span class="comment">#将config段贴上标签</span></span><br><span class="line">      - name: service</span><br><span class="line">        service: name=httpd state=started</span><br><span class="line"></span><br><span class="line">    handlers:</span><br><span class="line">      - name: restart service</span><br><span class="line">        service: name=httpd state=restarted</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于此时http服务已经安装，不需要再次安装此服务，我们只需要执行被标签的config部分就行，标签的config执行时，触发了handler的重启服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用ansible-playbook -t 选项指定标签名字，就能执行指定的标签</span></span><br><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -t config httpd.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [config] ***************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [restart service] *******************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=3    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=3    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>验证远程服务器端口是否被改为8080</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ss -tnl |grep 8080&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128         :::8080                    :::*</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128         :::8080                    :::*  </span><br></pre></td></tr></table></figure>

<h3 id="playbook多标签的使用"><a href="#playbook多标签的使用" class="headerlink" title="playbook多标签的使用"></a>playbook多标签的使用</h3><p>我们可以在yaml文件中使用多个不同的标签，也可以使用多个相同的标签，让playbook执行标签时一次执行多个不同的操作，从而实现按类来进行执行被标签的内容。</p>
<p>再次修改http端口将其改为80端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@ansible data]<span class="comment"># vim httpd.conf</span></span><br><span class="line">Listen 80</span><br></pre></td></tr></table></figure>

<p>创建yaml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim httpd.yaml</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">#install httpd</span></span><br><span class="line">  - hosts: webserver</span><br><span class="line">    remote_user: root</span><br><span class="line"></span><br><span class="line">    tasks:</span><br><span class="line">      - name: install</span><br><span class="line">        yum: name=httpd</span><br><span class="line">      - name: config</span><br><span class="line">        copy: src=/data/httpd.conf dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">        tags: config        <span class="comment">#对config贴上config标签</span></span><br><span class="line">      - name: service       <span class="comment">#service和restart service的标签相同，不再使用notify和handlers来触发服务的重启</span></span><br><span class="line">        service: name=httpd state=started</span><br><span class="line">        tags: service</span><br><span class="line">      - name: restart service</span><br><span class="line">        service: name=httpd state=restarted</span><br><span class="line">        tags: service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于没有了notify和handlers，再次执行playbook需要将config标签和service标签一起执行，此时playbook就会将service和restart service全部都执行一遍</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -t config -t service httpd.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [config] ***************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [service] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [restart service] ******************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=4    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=4    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>验证端口是否被更改为了80</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ss -tnl |grep 80&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128         :::80                      :::*</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128         :::80                      :::*</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（七）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--7/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Ansible-playbook中的变量"><a href="#Ansible-playbook中的变量" class="headerlink" title="Ansible-playbook中的变量"></a>Ansible-playbook中的变量</h2><p>在ansible的playbook中还可以使用变量，变量的命名必须符合其规则，仅能由字母、数字和下划线组成，且只能以字母开头。</p>
<p>Playbook中变量可以通过以下几种方法进行定义：</p>
<span id="more"></span>

<ol>
<li>Ansible setup facts中已经定义好的变量</li>
<li>主机清单中定义变量</li>
<li>命令行下使用-e选项定义变量</li>
<li>在剧本中定义变量  </li>
<li>变量定义在一个专用的变量文件中</li>
</ol>
<h3 id="ansible-setup-facts-远程主机的所有变量都可直接调用"><a href="#ansible-setup-facts-远程主机的所有变量都可直接调用" class="headerlink" title="ansible setup facts 远程主机的所有变量都可直接调用"></a>ansible setup facts 远程主机的所有变量都可直接调用</h3><p>使用ansible的setup模块可以查看远程主机上的所有变量，然后在yaml文件中直接进行调用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible HOSTLIST -m setup</span><br></pre></td></tr></table></figure>

<p>此命令可以查看远程主机上所有已存在的各种变量，此处查看hostname的变量名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -m setup -a &#x27;filter=*hostname&#x27;</span></span><br><span class="line">192.168.73.134 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ansible_hostname&quot;</span>: <span class="string">&quot;mylinuxops&quot;</span>        <span class="comment">#此处查到hostname的变量名为ansible_hostname，在ansible的playbook中调用变量时就调用此变量名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.73.135 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ansible_hostname&quot;</span>: <span class="string">&quot;web2&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建yaml文件，调用变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim var.yaml</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">#test var</span></span><br><span class="line">    - hosts: webserver</span><br><span class="line">      remote_user: root</span><br><span class="line"></span><br><span class="line">      tasks:</span><br><span class="line">        - name: file</span><br><span class="line">          file: name=&#123;&#123;ansible_hostname&#125;&#125;.<span class="built_in">log</span> state=touch       <span class="comment">#此处以ansible_hostname这个变量名创建出一个文件</span></span><br></pre></td></tr></table></figure>

<p>执行yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook var.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [file] *****************************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>验证，查看远程主机root目录下是否创建出以主机名为文件名的log文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ls  /root&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">mylinuxops.log          <span class="comment">#使用变量创建出的微博华北</span></span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">web2.log                <span class="comment">#使用变量创建出的文件</span></span><br></pre></td></tr></table></figure>

<h3 id="变量定义在主机清单中"><a href="#变量定义在主机清单中" class="headerlink" title="变量定义在主机清单中"></a>变量定义在主机清单中</h3><p>在ansible中变量可以预先定义在主机清单中，而主机清单中的变量又分为两种，普通变量和公共变量。</p>
<p>普通变量：主机组中主机单独定义，优先级高于公共变量  </p>
<p>公共变量：针对主机组中所有主机定义的统一变量  </p>
<p>示例：  </p>
<p>修改主机清单，在主机清单中定义变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim /etc/ansible/hosts</span></span><br><span class="line">[webserver]</span><br><span class="line">192.168.73.134 port=80      <span class="comment">#定义主机134的变量port值为80</span></span><br><span class="line">192.168.73.135 port=8080    <span class="comment">#定义主机135的变量port值为8080</span></span><br><span class="line"></span><br><span class="line">[webserver:vars]    <span class="comment">#通用变量</span></span><br><span class="line">mark=<span class="string">&quot;-&quot;</span>        <span class="comment">#定义通用变量mark的值为-</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim var.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#test var</span></span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: file</span><br><span class="line">      file: name=&#123;&#123;ansible_hostname&#125;&#125;&#123;&#123;mask&#125;&#125;&#123;&#123;port&#125;&#125;.<span class="built_in">log</span> state=touch       <span class="comment">#利用变量创建出一个以&quot;HOSTNAME-PORT.log&quot;这中格式的文件。</span></span><br></pre></td></tr></table></figure>

<p>执行playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook var.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [file] *****************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=2    changed=1    unreachable=0    failed=0  </span><br></pre></td></tr></table></figure>

<p>验证，查看root目录下文件是否被创建出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ls /root&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">web2-8080.log</span><br><span class="line">web2.log</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">mylinuxops-80.log</span><br><span class="line">mylinuxops.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据事先定义好的变量，134的主机名为mylinuxops,port值为80，创建出的文件为mylinuxops-80.log。134的主机名为web2,port值为8080，创建出的文件为mylinuxops-8080.log。</span></span><br></pre></td></tr></table></figure>

<h3 id="命令行下使用-e选项定义变量"><a href="#命令行下使用-e选项定义变量" class="headerlink" title="命令行下使用-e选项定义变量"></a>命令行下使用-e选项定义变量</h3><p>在ansible-playbook中可以使用-e选项来定义变量，</p>
<p>示例：  </p>
<p>此处依旧使用刚才的剧本，直接在命令行添加-e选项来定义变量，此处定义的变量为port，此处注意在主机清单列表中所定义的port变量没有删除，用来观察变量的优先级。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook -e port=1234 var.yaml     #在执行playbook时定义port值为1234</span></span><br><span class="line"> [WARNING]: Found variable using reserved name: port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [file] *****************************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>验证创建出的文件名的port变量的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ls /root&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">web2-1234.log       <span class="comment">#此为新创建出的文件</span></span><br><span class="line">web2-8080.log</span><br><span class="line">web2.log</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">mylinuxops-1234.log     <span class="comment">#此为新创建出的文件</span></span><br><span class="line">mylinuxops-80.log</span><br><span class="line">mylinuxops.log</span><br></pre></td></tr></table></figure>

<p>由此可以发现，通过命令行指定的变量优先级高于主机文件中定义的变量</p>
<h3 id="剧本中定义变量"><a href="#剧本中定义变量" class="headerlink" title="剧本中定义变量"></a>剧本中定义变量</h3><p>playbook的变量可以直接定义在yaml文件中，其定义格式如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vars:  </span><br><span class="line">  -var1:value1  </span><br><span class="line">  -var2:value2  </span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<p>在playbook中定义变量port，此处主机列表中所定义的port变量依旧没有被删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim var.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#test var</span></span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line">  var:</span><br><span class="line">    - port: 4321    <span class="comment">#定义port的值为4321</span></span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: file</span><br><span class="line">      file: name=&#123;&#123;ansible_hostname&#125;&#125;&#123;&#123;mark&#125;&#125;&#123;&#123;port&#125;&#125;.<span class="built_in">log</span> state=touch</span><br></pre></td></tr></table></figure>

<p>执行playbook，创建出文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook  var.yaml</span></span><br><span class="line"> [WARNING]: Found variable using reserved name: port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [file] *****************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>验证port定义的值的文件是否被创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ls /root&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">mylinuxops-1234.log</span><br><span class="line">mylinuxops-4321.log     <span class="comment">#创建出的新文件</span></span><br><span class="line">mylinuxops-80.log</span><br><span class="line">mylinuxops.log</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">web2-1234.log</span><br><span class="line">web2-4321.log          <span class="comment">#创建出的新文件</span></span><br><span class="line">web2-8080.log</span><br><span class="line">web2.log</span><br></pre></td></tr></table></figure>

<p>由于新的文件被创建出来，由此可以得出剧本中的变量优先级高于主机清单中的变量</p>
<h3 id="变量定义在一个专用的变量文件中"><a href="#变量定义在一个专用的变量文件中" class="headerlink" title="变量定义在一个专用的变量文件中"></a>变量定义在一个专用的变量文件中</h3><p>playbook的变量可以定义在一个单独的yaml文件中，然后在剧本中调用此文件从而实现变量的调用。</p>
<p>示例：  </p>
<p>创建一个存放变量的文件，在文件中定义好变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim vars.yml</span></span><br><span class="line">port: 9527      <span class="comment">#定义port的值为9527</span></span><br></pre></td></tr></table></figure>

<p>在playbook中调用变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim var.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#test var</span></span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars_files:       <span class="comment">#使用vars_files来调用vars.yml这个变量文件</span></span><br><span class="line">    - vars.yml</span><br><span class="line">  vars:             <span class="comment">#此处注意上一步中所定义的port变量以及主机列表中所定义的port并没有被清除，用来验证变量的优先级</span></span><br><span class="line">    - port: 4321</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: file</span><br><span class="line">      file: name=&#123;&#123;ansible_hostname&#125;&#125;&#123;&#123;mark&#125;&#125;&#123;&#123;port&#125;&#125;.<span class="built_in">log</span> state=touch</span><br></pre></td></tr></table></figure>

<p>执行playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible-playbook  var.yaml</span></span><br><span class="line"> [WARNING]: Found variable using reserved name: port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [file] *****************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>验证新的文件文件是否被创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible webserver -a &#x27;ls /root&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">web2-1234.log</span><br><span class="line">web2-4321.log</span><br><span class="line">web2-8080.log</span><br><span class="line">web2-9527.log           <span class="comment">#此为新的文件</span></span><br><span class="line">web2.log</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">mylinuxops-1234.log</span><br><span class="line">mylinuxops-4321.log</span><br><span class="line">mylinuxops-80.log</span><br><span class="line">mylinuxops-9527.log     <span class="comment">#此为新的文件</span></span><br><span class="line">mylinuxops.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由此可见使用变量文件定义的变量优先级高于playbook中定义的变量</p>
<p>以上就是playbook中定义变量的各种方法，变量在使用中的优先级关系为：</p>
<p>命令行-e指定 &gt; 变量文件 &gt; playbook指定 &gt; hosts文件</p>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（八）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--8/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h2 id="ansible的模板template"><a href="#ansible的模板template" class="headerlink" title="ansible的模板template"></a>ansible的模板template</h2><p>在某些环境下可能会出现这种情况，比如主机A配置文件中的某个值为1，主机B配置文件中此值为2，现在需要将此值在现有的基础上再加上2，此时ansible的模板就发挥其作用了，template可以根据模块文件动态生成相对应的配置文件。</p>
<h3 id="template的格式要求"><a href="#template的格式要求" class="headerlink" title="template的格式要求"></a>template的格式要求</h3><p>template对文件的存放和命名有要求，template文件必须存放在templates目录下，并且以.j2后缀命名。  </p>
<p>yaml文件需要和templates目录平级，目录结构如下。</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># tree yaml/</span></span><br><span class="line">yaml/</span><br><span class="line">├── hello.yaml</span><br><span class="line">├── httpd.yaml</span><br><span class="line">└── templates</span><br><span class="line">    └── test.conf.j2</span><br></pre></td></tr></table></figure>

<h3 id="template的使用方法"><a href="#template的使用方法" class="headerlink" title="template的使用方法"></a>template的使用方法</h3><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><p>此处以nginx为例，编写playbook为主机列表中的主机安装nginx  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># vim nginx.yml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#install nginx</span></span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: package</span><br><span class="line">      yum: name=nginx</span><br><span class="line">    - name: service</span><br><span class="line">      service: name=nginx state=started enabled=yes</span><br></pre></td></tr></table></figure>

<p>执行playbook，在hosts列表中的主机上部署nginx服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># ansible-playbook nginx.yml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [package] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [service] **************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=3    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=3    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<h4 id="template使用示例一"><a href="#template使用示例一" class="headerlink" title="template使用示例一"></a>template使用示例一</h4><p>基础环境部署完毕，现在需要使用模板文件实现让nginx在运行时创建出cpu个数+2的进程数，模板文件的配置方法如下：  </p>
<p>1.获取nginx的配置文件，并改名为.j2后缀的文件存放在templates目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># mv nginx.conf /data/yaml/templates/nginx.conf.j2</span></span><br></pre></td></tr></table></figure>

<p>2.获取cpu个数的变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># ansible 192.168.73.134 -m setup | grep cpu</span></span><br><span class="line">        <span class="string">&quot;ansible_processor_vcpus&quot;</span>: 1,  <span class="comment">#此为定义cpu的变量</span></span><br></pre></td></tr></table></figure>

<p>3.修改模板文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible data]<span class="comment"># vim yaml/templates/nginx.conf.j2</span></span><br><span class="line">worker_processes &#123;&#123;ansible_processor_vcpus+2&#125;&#125;;  <span class="comment">#此行定义了线程数，改为变量代替</span></span><br></pre></td></tr></table></figure>

<p>4.在playbook中引用模板</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim nginx.yml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#install nginx</span></span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: package</span><br><span class="line">      yum: name=nginx</span><br><span class="line">    - name: config</span><br><span class="line">      template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf        <span class="comment">#在配置文件段引用模板文件。</span></span><br><span class="line">      notify: restart service</span><br><span class="line">    - name: service</span><br><span class="line">      service: name=nginx state=started enabled=yes</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart service</span><br><span class="line">      service: name=nginx state=restarted</span><br></pre></td></tr></table></figure>

<p>5.执行playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible-playbook nginx.yml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [package] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [config] ***************************************************************************************************</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [service] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [restart service] *******************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=5    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>验证线程个数是否改变</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible webserver -a &#x27;cat /etc/nginx/nginx.conf | grep work&#x27;</span></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">worker_processes 3;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">worker_processes 3;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于此处2台主机的cpu核心书都为1，所以显示出的工作线程数为3</span></span><br></pre></td></tr></table></figure>

<h4 id="template使用实例二"><a href="#template使用实例二" class="headerlink" title="template使用实例二"></a>template使用实例二</h4><p>配置刚才所部署的nginx服务，让192.168.73.134主机上的nginx监听在80端口，192.168.73.135主机上的nginx服务监听在8080端口上。</p>
<p>1.修改模板中的端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim templates/nginx.conf.j2</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       &#123;&#123;port&#125;&#125; default_server; 将此处的端口改为变量</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.修改主机文件定义port</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment">#  vim /etc/hosts</span></span><br><span class="line">[webserver]</span><br><span class="line">192.168.73.134 port=80          <span class="comment">#定义192.168.73.134主机的port变量值为80</span></span><br><span class="line">192.168.73.135 port=8080        <span class="comment">#定义192.168.73.135主机的port变量值为8080</span></span><br></pre></td></tr></table></figure>

<p>3.重新执行yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible-playbook nginx.yml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [package] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [config] ***************************************************************************************************</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [service] **************************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [restart service] *******************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.134             : ok=4    changed=0    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>验证两台主机上nginx服务是否监听在模板中所定义的端口上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible webserver -a &#x27;ss -tnl |grep 80&#x27;</span></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128          *:80                       *:*</span><br><span class="line">LISTEN     0      128         :::80                      :::*</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">LISTEN     0      128          *:8080                     *:*</span><br><span class="line">LISTEN     0      128         :::80                      :::*  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维之Ansible（九）</title>
    <url>/2019/03/16/Ansible/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible--9/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B9%8BAnsible%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Ansible-playbook中的流控制"><a href="#Ansible-playbook中的流控制" class="headerlink" title="Ansible-playbook中的流控制"></a>Ansible-playbook中的流控制</h2><p>在ansible中的有各种流控制的机制，本节主要讲ansible流控制中的when和with_item</p>
<span id="more"></span>

<h3 id="流控制when"><a href="#流控制when" class="headerlink" title="流控制when"></a>流控制when</h3><p>在使用ansible做自动化运维的时候，大多数情况下都执行某些任务的时候都需要依赖某个变量的值或者是上一个任务的执行结果。如，根据facts信息中的系统版本相关的信息来确定使用哪种包管理器安装软件。Ansible提供when语句，可以控制任务的执行流程。</p>
<h4 id="playbook中when的使用"><a href="#playbook中when的使用" class="headerlink" title="playbook中when的使用"></a>playbook中when的使用</h4><p>when测试条件：如果需要根据变量、facts或此前任务的执行结果来作为某task执行与否的前提条件时，需要用到条件测试，通过when语句实现，在task中使用，jinja2语法。  </p>
<h4 id="when使用实战"><a href="#when使用实战" class="headerlink" title="when使用实战"></a>when使用实战</h4><p>当系统不同时，httpd的配置文件也不同，根据系统的版本来判断使用哪个httpd的配置文件</p>
<p>1.使用setup模块找远程系统中版本变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible webserver -m setup | grep distribution_major_version</span></span><br><span class="line">        <span class="string">&quot;ansible_distribution_major_version&quot;</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ansible_distribution_major_version&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ansible_distribution_major_version&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br></pre></td></tr></table></figure>

<p>2.根据变量值编写yaml文件，使用when来判断变量的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim httpd.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#install httpd</span></span><br><span class="line">  - hosts: webserver</span><br><span class="line">    remote_user: root</span><br><span class="line"></span><br><span class="line">    tasks:</span><br><span class="line">      - name: install</span><br><span class="line">        yum: name=httpd</span><br><span class="line">      - name: config</span><br><span class="line">        template: src=httpd6.conf.j2 dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">        when: ansible_distribution_major_version == <span class="string">&quot;6&quot;</span>     <span class="comment">#判断系统版本的值当系统版本为6时使用http6.conf.j2的模板</span></span><br><span class="line">        notify: restart service</span><br><span class="line">      - name: config</span><br><span class="line">        template: src=httpd7.conf.j2 dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">        when: ansible_distribution_major_version == <span class="string">&quot;7&quot;</span>     <span class="comment">#判断系统版本的值当系统版本为7时使用http7.conf.j2的模板</span></span><br><span class="line">        notify: restart service</span><br><span class="line">      - name: service</span><br><span class="line">        service: name=httpd state=started</span><br><span class="line"></span><br><span class="line">    handlers:</span><br><span class="line">      - name: restart service</span><br><span class="line">        service: name=httpd state=restarted</span><br></pre></td></tr></table></figure>

<p>3.修改模板文件，将监听的端口改为变量的形式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible templates]<span class="comment"># vi httpd6.conf.j2</span></span><br><span class="line"><span class="comment">#Listen 12.34.56.78:80</span></span><br><span class="line">Listen &#123;&#123;port&#125;&#125;</span><br><span class="line"></span><br><span class="line">[root@ansible templates]<span class="comment"># vi httpd7.conf.j2</span></span><br><span class="line"><span class="comment">#Listen 12.34.56.78:80</span></span><br><span class="line">Listen &#123;&#123;port&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.执行脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible-playbook  httpd.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [install] **************************************************************************************************</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [config] ***************************************************************************************************</span><br><span class="line">skipping: [192.168.73.134]</span><br><span class="line">skipping: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line"></span><br><span class="line">TASK [config] ***************************************************************************************************</span><br><span class="line">skipping: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [service] **************************************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line">changed: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [restart service] *******************************************************************************</span><br><span class="line">changed: [192.168.73.132]</span><br><span class="line">changed: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=5    changed=4    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=4    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=5    changed=4    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>这样在部署httpd服务时候就会更具系统的版本号使用不同的配置文件。</p>
<h3 id="with-items"><a href="#with-items" class="headerlink" title="with_items"></a>with_items</h3><p>迭代：当有需要重复行执行的任务时，可以使用迭代机制</p>
<p>对迭代项的引用，固定变量名为”item”  </p>
<p>要在task中使用with_items给定要迭代的元素列表  </p>
<p>列表格式：字符串、字典</p>
<h4 id="with-items使用示例"><a href="#with-items使用示例" class="headerlink" title="with_items使用示例"></a>with_items使用示例</h4><h5 id="使用with-items创建文件"><a href="#使用with-items创建文件" class="headerlink" title="使用with_items创建文件"></a>使用with_items创建文件</h5><p>在远程主机上创建以下多个文件，可以看出这些文件都有一个特征都是以”.log”结尾，如此只需要将之前的文件使用变量代替，然后使用with_items给定元素列表就能创建出相应的文件了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aaa.log  </span><br><span class="line">bbb.log  </span><br><span class="line">ccc.log  </span><br></pre></td></tr></table></figure>

<p>1.创建剧本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim file.yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#touch file</span></span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: touch file</span><br><span class="line">      file: name=/data/&#123;&#123;item&#125;&#125;.<span class="built_in">log</span> state=touch     <span class="comment">#将需要重复创建的*.log文件的文件名使用item这个变量代替</span></span><br><span class="line">      with_items:     <span class="comment">#hwith_item列表中写入所有需要创建出的文件名。</span></span><br><span class="line">        - aaa</span><br><span class="line">        - bbb</span><br><span class="line">        - ccc</span><br></pre></td></tr></table></figure>

<p>2.执行剧本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible-playbook  file.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line"></span><br><span class="line">TASK [touch file] ***********************************************************************************************</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=aaa)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=aaa)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=aaa)</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=bbb)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=bbb)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=bbb)</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=ccc)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=ccc)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=ccc)</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>校验查看远程主机上的文件是否被创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible webserver -a &#x27;ls /data&#x27;</span></span><br><span class="line">192.168.73.132 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">aaa.log             <span class="comment">#三个文件已经被创建出来</span></span><br><span class="line">bbb.log</span><br><span class="line">ccc.log</span><br><span class="line">lost+found</span><br></pre></td></tr></table></figure>

<h5 id="使用with-items创建用户"><a href="#使用with-items创建用户" class="headerlink" title="使用with_items创建用户"></a>使用with_items创建用户</h5><p>在批量创建用户将账户时也可以使用with_items来创建用户，具体使用方法如下</p>
<p>1.创建yaml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@ansible yaml]<span class="comment"># vim createuser.yml</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#createuser</span></span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: create user</span><br><span class="line">      user: name=&#123;&#123;item&#125;&#125;   <span class="comment">#将用户名使用item变量来代替</span></span><br><span class="line">      with_items:         <span class="comment">#使用with_items来列出所有需要创建的用户</span></span><br><span class="line">        - alice</span><br><span class="line">        - bob</span><br><span class="line">        - clack</span><br></pre></td></tr></table></figure>

<p>2.执行playbook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible-playbook createuser.yml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [create user] **********************************************************************************************</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=alice)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=alice)</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=alice)</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=bob)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=bob)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=bob)</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=clack)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=clack)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=clack)</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=2    changed=1    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=2    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>3.验证远程主机上的用户已经被创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible webserver -a &#x27;getent passwd | tail -3&#x27;</span></span><br><span class="line">192.168.73.132 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">alice:x:500:500::/home/alice:/bin/bash</span><br><span class="line">bob:x:501:501::/home/bob:/bin/bash</span><br><span class="line">clack:x:502:502::/home/clack:/bin/bash</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">alice:x:3307:3307::/home/alice:/bin/bash</span><br><span class="line">bob:x:3308:3308::/home/bob:/bin/bash</span><br><span class="line">clack:x:3309:3309::/home/clack:/bin/bash</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">alice:x:3307:3307::/home/alice:/bin/bash</span><br><span class="line">bob:x:3308:3308::/home/bob:/bin/bash</span><br><span class="line">clack:x:3309:3309::/home/clack:/bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="with-items的高级用法"><a href="#with-items的高级用法" class="headerlink" title="with_items的高级用法"></a>with_items的高级用法</h3><p>当多个类型的item之间有对应的关系时，可以使用字典的形式将多个item项进行关联起来</p>
<h4 id="with-items的字典用法"><a href="#with-items的字典用法" class="headerlink" title="with_items的字典用法"></a>with_items的字典用法</h4><p>创建组和用户的对应关系，将用户关联到对应的用户组下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USER        GROUP</span><br><span class="line">aaa         agroup</span><br><span class="line">bbb         bgroup</span><br><span class="line">ccc         cgroup</span><br></pre></td></tr></table></figure>

<p>1.编辑yaml文件，将用户名和组名做字典对应</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># vim usergroup.yaml</span></span><br><span class="line">---</span><br><span class="line">- hosts: webserver</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: create group</span><br><span class="line">      group: name=&#123;&#123;item&#125;&#125;        <span class="comment">#将组名定义为变量</span></span><br><span class="line">      with_items:           <span class="comment">#将需要创建的组写在with_items下</span></span><br><span class="line">        - agroup  </span><br><span class="line">        - bgroup</span><br><span class="line">        - cgroup</span><br><span class="line">    - name: create user</span><br><span class="line">      user: name=&#123;&#123;item.name&#125;&#125; group=&#123;&#123;item.group&#125;&#125;     <span class="comment">#创建用户并和组进行关联，使用以“item.*&quot;形式的变量将用户和组进行关联起来</span></span><br><span class="line">      with_item:                  <span class="comment">#在with_items写入name和group的字典关系</span></span><br><span class="line">        - &#123; name: <span class="string">&quot;aaa&quot;</span>,group: <span class="string">&quot;agroup&quot;</span>&#125;</span><br><span class="line">        - &#123; name: <span class="string">&quot;bbb&quot;</span>,group: <span class="string">&quot;bgroup&quot;</span>&#125;</span><br><span class="line">        - &#123; name: <span class="string">&quot;ccc&quot;</span>,group: <span class="string">&quot;cgroup&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>2.执行剧本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible-playbook usergroup.yaml</span></span><br><span class="line"></span><br><span class="line">PLAY [webserver] ************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.73.135]</span><br><span class="line">ok: [192.168.73.132]</span><br><span class="line">ok: [192.168.73.134]</span><br><span class="line"></span><br><span class="line">TASK [create group] *********************************************************************************************</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=agroup)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=agroup)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=agroup)</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=bgroup)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=bgroup)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=bgroup)</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=cgroup)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=cgroup)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=cgroup)</span><br><span class="line"></span><br><span class="line">TASK [create user] **********************************************************************************************</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=&#123;u<span class="string">&#x27;group&#x27;</span>: u<span class="string">&#x27;agroup&#x27;</span>, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;aaa&#x27;</span>&#125;)</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=&#123;u<span class="string">&#x27;group&#x27;</span>: u<span class="string">&#x27;agroup&#x27;</span>, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;aaa&#x27;</span>&#125;)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=&#123;u<span class="string">&#x27;group&#x27;</span>: u<span class="string">&#x27;agroup&#x27;</span>, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;aaa&#x27;</span>&#125;)</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=&#123;u<span class="string">&#x27;group&#x27;</span>: u<span class="string">&#x27;bgroup&#x27;</span>, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;bbb&#x27;</span>&#125;)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=&#123;u<span class="string">&#x27;group&#x27;</span>: u<span class="string">&#x27;bgroup&#x27;</span>, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;bbb&#x27;</span>&#125;)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=&#123;u<span class="string">&#x27;group&#x27;</span>: u<span class="string">&#x27;bgroup&#x27;</span>, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;bbb&#x27;</span>&#125;)</span><br><span class="line">changed: [192.168.73.132] =&gt; (item=&#123;u<span class="string">&#x27;group&#x27;</span>: u<span class="string">&#x27;cgroup&#x27;</span>, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;ccc&#x27;</span>&#125;)</span><br><span class="line">changed: [192.168.73.134] =&gt; (item=&#123;u<span class="string">&#x27;group&#x27;</span>: u<span class="string">&#x27;cgroup&#x27;</span>, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;ccc&#x27;</span>&#125;)</span><br><span class="line">changed: [192.168.73.135] =&gt; (item=&#123;u<span class="string">&#x27;group&#x27;</span>: u<span class="string">&#x27;cgroup&#x27;</span>, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;ccc&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.73.132             : ok=3    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.134             : ok=3    changed=2    unreachable=0    failed=0</span><br><span class="line">192.168.73.135             : ok=3    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<p>校验查看远程主机上的用户是否和组进行了关联</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible yaml]<span class="comment"># ansible webserver -a &#x27;id aaa&#x27;</span></span><br><span class="line">192.168.73.132 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">uid=503(aaa) gid=503(agroup) groups=503(agroup)</span><br><span class="line"></span><br><span class="line">192.168.73.134 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">uid=3310(aaa) gid=3310(agroup) groups=3310(agroup)</span><br><span class="line"></span><br><span class="line">192.168.73.135 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">uid=3310(aaa) gid=3310(agroup) groups=3310(agroup)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins+Gitlab实现代码自动部署</title>
    <url>/2019/05/04/CICD/jenkins+gitlab/jenkins+gitlab/</url>
    <content><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><table>
<thead>
<tr>
<th align="left">Hostname</th>
<th align="left">Server</th>
<th align="left">IP</th>
<th align="left">OS</th>
</tr>
</thead>
<tbody><tr>
<td align="left">gitlab</td>
<td align="left">Gitlab</td>
<td align="left">192.168.27.11</td>
<td align="left">ubuntu 18.04.2</td>
</tr>
<tr>
<td align="left">jenkins</td>
<td align="left">Jenkins</td>
<td align="left">192.168.27.12</td>
<td align="left">ubuntu 18.04.2</td>
</tr>
<tr>
<td align="left">haproxy-1</td>
<td align="left">haproxy</td>
<td align="left">192.168.27.21</td>
<td align="left">ubuntu 18.04.2</td>
</tr>
<tr>
<td align="left">haproxy-2</td>
<td align="left">haproxy</td>
<td align="left">192.168.27.22</td>
<td align="left">ubuntu 18.04.2</td>
</tr>
<tr>
<td align="left">tomcat-1</td>
<td align="left">tomcat</td>
<td align="left">192.168.27.31</td>
<td align="left">ubuntu 18.04.2</td>
</tr>
<tr>
<td align="left">tomcat-2</td>
<td align="left">tomcat</td>
<td align="left">192.168.27.32</td>
<td align="left">ubuntu 18.04.2</td>
</tr>
</tbody></table>
<hr>
<h2 id="安装jdk环境"><a href="#安装jdk环境" class="headerlink" title="安装jdk环境"></a>安装jdk环境</h2><p>分别在jenkins、tomcat-1、tomcat-2主机上安装jdk环境</p>
<p>oracle官网下载jdk，上传到本地服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># ls</span></span><br><span class="line">jdk-8u212-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<p>解压jdk到/usr/local/src目录下，做一个软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf jdk-8u212-linux-x64.tar.gz -C /usr/<span class="built_in">local</span>/src/</span><br><span class="line">ln -sv /usr/<span class="built_in">local</span>/src/jdk1.8.0_212 /usr/<span class="built_in">local</span>/jdk</span><br></pre></td></tr></table></figure>

<p>编辑/etc/profile文件添加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&quot;%F %t `whoami` &quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="built_in">export</span> LANG=<span class="string">&quot;en_US.utf-8&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<p>重读环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>使用java命令测试jdk环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java version <span class="string">&quot;1.8.0_212&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_212-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.212-b10, mixed mode)</span><br></pre></td></tr></table></figure>

<p>为java做各软链接，Jenkins需要在/usr/bin/下存在java否则将报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -sv /usr/<span class="built_in">local</span>/jdk/bin/java /usr/bin</span><br></pre></td></tr></table></figure>

<p>jdk环境配置完毕</p>
<h2 id="部署tomcat"><a href="#部署tomcat" class="headerlink" title="部署tomcat"></a>部署tomcat</h2><p>在tomcat-1和tomcat-2主机上部署tomcat服务</p>
<p>下载tomcat二进制包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.43/bin/apache-tomcat-8.5.43.tar.gz</span><br></pre></td></tr></table></figure>

<p>创建启动用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -u 2019 -m -s /bin/bash www</span><br></pre></td></tr></table></figure>

<p>创建apps目录将二进制安装包解压到目录内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /apps</span><br><span class="line">tar xf apache-tomcat-8.5.43.tar.gz -C /apps</span><br></pre></td></tr></table></figure>

<p>创建软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -sv /apps/apache-tomcat-8.5.43 /apps/tomcat</span><br></pre></td></tr></table></figure>

<p>创建appdir和webdir两个目录，appdir用来保存代码的压缩包文件，webdir用来保存解压后的站点文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /data/tomcat/tomcat_&#123;appdir,webdir/myapp&#125; -p</span><br></pre></td></tr></table></figure>

<p>修改tomcat配置文件重新指定代码目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /apps/tomcat/conf/server.xml </span><br><span class="line">      &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;/data/tomcat/tomcat_webdir&quot;</span></span><br><span class="line">            unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>分别在两台主机上创建出测试页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#tomcat-1</span></span><br><span class="line">root@tomcat-1:~<span class="comment"># echo &quot;welcome to mylinuxops.com tomcat-1&quot; &gt; /data/tomcat/tomcat_webdir/myapp/index.html</span></span><br><span class="line"><span class="comment">#tomcat-2</span></span><br><span class="line">root@tomcat-2:~<span class="comment"># echo &quot;welcome to mylinuxops.com tomcat-2&quot; &gt; /data/tomcat/tomcat_webdir/myapp/index.html</span></span><br></pre></td></tr></table></figure>

<p>将tomcat所有的文件属主和属组修改为www用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R www.www /data/tomcat /apps/tomcat /apps/apache-tomcat-8.5.43</span><br></pre></td></tr></table></figure>

<p>使用普通用户启动tomcat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - www -c <span class="string">&quot;/apps/tomcat/bin/catalina.sh start&quot;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问tomcat-1</span></span><br><span class="line">root@tomcat-1:~<span class="comment"># curl 192.168.27.31:8080/myapp/index.html</span></span><br><span class="line">welcome to mylinuxops.com tomcat-1</span><br><span class="line"><span class="comment">#访问tomcat-2</span></span><br><span class="line">root@tomcat-1:~<span class="comment"># curl 192.168.27.32:8080/myapp/index.html</span></span><br><span class="line">welcome to mylinuxops.com tomcat-2</span><br></pre></td></tr></table></figure>

<h2 id="部署keepalived-haproxy"><a href="#部署keepalived-haproxy" class="headerlink" title="部署keepalived+haproxy"></a>部署keepalived+haproxy</h2><p>分别在27.21和27.22主机上安装keepalived和haproxy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install keepalived haproxy -y</span><br></pre></td></tr></table></figure>

<p>编辑keepalived配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@haproxy-1:~<span class="comment"># cp /usr/share/doc/keepalived/samples/keepalived.conf.sample /etc/keepalived/keepalived.conf</span></span><br></pre></td></tr></table></figure>

<h3 id="配置高可用"><a href="#配置高可用" class="headerlink" title="配置高可用"></a>配置高可用</h3><p>修改27.21上keepalived配置文件，配置vip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@haproxy-1:~<span class="comment"># vim /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.27.248 dev eth0 label eth0:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@haproxy-1:~<span class="comment"># systemctl restart keepalived</span></span><br></pre></td></tr></table></figure>

<p>修改27.22主上的keepalived配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@haproxy-2:~<span class="comment"># vim /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">  </span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    priority 80</span><br><span class="line">    advert_int 1</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.27.248 dev eth0 label eth0:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@haproxy-2:~<span class="comment"># systemctl restart keepalived</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试前</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#haproxy-1上有地址</span></span><br><span class="line">root@haproxy-1:~<span class="comment"># ifconfig eth0:0</span></span><br><span class="line">eth0:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.27.248  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        ether 00:0c:29:93:86:2c  txqueuelen 1000  (Ethernet)</span><br><span class="line"><span class="comment">#haproxy-2上没有地址</span></span><br><span class="line">root@haproxy-2:~<span class="comment"># ifconfig eth0:0</span></span><br><span class="line">eth0:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 00:0c:29:47:18:42  txqueuelen 1000  (Ethernet)</span><br></pre></td></tr></table></figure>
<p>将haproxy-1上的keepalived服务停止后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#haproxy-1上没有地址</span></span><br><span class="line">root@haproxy-1:~<span class="comment"># ifconfig eth0:0</span></span><br><span class="line">eth0:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 00:0c:29:93:86:2c  txqueuelen 1000  (Ethernet)</span><br><span class="line"><span class="comment">#地址漂移到haproxy-2上</span></span><br><span class="line">root@haproxy-2:~<span class="comment"># ifconfig eth0:0</span></span><br><span class="line">eth0:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.27.248  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        ether 00:0c:29:47:18:42  txqueuelen 1000  (Ethernet)</span><br></pre></td></tr></table></figure>

<h3 id="配置haproxy"><a href="#配置haproxy" class="headerlink" title="配置haproxy"></a>配置haproxy</h3><p>分别编辑2台haproxy的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@haproxy-2:~<span class="comment"># vim /etc/haproxy/haproxy.cfg </span></span><br><span class="line">listen myapp</span><br><span class="line">        <span class="built_in">bind</span> 192.168.27.248:80</span><br><span class="line">        mode http</span><br><span class="line">        server 192.168.27.31 192.168.27.31:8080 check inter 3s fall 3 rise 5</span><br><span class="line">        server 192.168.27.32 192.168.27.32:8080 check inter 3s fall 3 rise 5</span><br></pre></td></tr></table></figure>

<p>分别在2台haproxy上修改内核参数，启动nolocal_bind</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@haproxy-1:~<span class="comment"># echo &quot;net.ipv4.ip_nolocal_bind = 1&quot; &gt;&gt; /etc/sysctl.conf </span></span><br><span class="line">root@haproxy-1:~<span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@haproxy-2:~<span class="comment"># ss -tnl | grep 80</span></span><br><span class="line">LISTEN   0         2000          192.168.27.248:80              0.0.0.0:*</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># curl 192.168.27.248/myapp/index.html</span></span><br><span class="line">welcome to mylinuxops.com tomcat-1</span><br><span class="line">root@jenkins:~<span class="comment"># curl 192.168.27.248/myapp/index.html</span></span><br><span class="line">welcome to mylinuxops.com tomcat-2</span><br></pre></td></tr></table></figure>

<h2 id="部署jenkins"><a href="#部署jenkins" class="headerlink" title="部署jenkins"></a>部署jenkins</h2><p>下载jenkins安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># wget https://pkg.jenkins.io/debian-stable/binary/jenkins_2.164.3_all.deb</span></span><br></pre></td></tr></table></figure>

<p>安装daemon守护进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># apt install daemon -y</span></span><br></pre></td></tr></table></figure>

<p>安装jenkins</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># dpkg -i jenkins_2.164.3_all.deb</span></span><br></pre></td></tr></table></figure>

<p>修改jenkins配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># vim /etc/default/jenkins</span></span><br><span class="line"><span class="comment">#将启动账号设置为root</span></span><br><span class="line">JENKINS_USER=root</span><br><span class="line">JENKINS_GROUP=root</span><br><span class="line"><span class="comment"># 配置优化选项</span></span><br><span class="line">JAVA_ARGS=<span class="string">&quot;-server -Xms1g -Xmx1g -Xss512k -Xmn1g -XX:CMSInitiatingOccupancyFraction=65 -XX:+UseFastAccessorMethods -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:+DisableExplicitGC -XX:MaxTenuringThreshold=10 -XX:NewSize=2048M -XX:MaxNewSize=2048M -XX:NewRatio=2 -XX:PermSize=128m -XX:MaxPermSize=512m -XX:CMSFullGCsBeforeCompaction=5 -XX:+ExplicitGCInvokesConcurrent -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -Djava.awt.headless=true -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=12345 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=&quot;</span>192.168.27.12<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># systemctl restart jenkins</span></span><br></pre></td></tr></table></figure>

<h3 id="Jenkins简单使用"><a href="#Jenkins简单使用" class="headerlink" title="Jenkins简单使用"></a>Jenkins简单使用</h3><p>使用web登录</p>
<p><img src="jenkins1.png" alt="jenkins1.png"></p>
<p>关于jenkins离线解决方法  </p>
<p>1.修改插件源地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /var/lib/jenkins/hudson.model.UpdateCenter.xml</span><br><span class="line">&lt;?xml version=<span class="string">&#x27;1.1&#x27;</span> encoding=<span class="string">&#x27;UTF-8&#x27;</span>?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">  &lt;site&gt;</span><br><span class="line">    &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;http://updates.jenkins.io/update-center.json&lt;/url&gt;   <span class="comment">#将https改为http</span></span><br><span class="line">  &lt;/site&gt;</span><br><span class="line">&lt;/sites&gt;</span><br></pre></td></tr></table></figure>

<p>2.修改/var/lib/jenkins/updates/default.json文件将第一行的<a href="http://www.google.com改为www.baidu.com/">www.google.com改为www.baidu.com</a>  </p>
<p>3.重启jenkens服务  </p>
<p>安装插件</p>
<p><img src="jenkins2.png" alt="jenkins2.png"></p>
<p><img src="jenkins3.png" alt="jenkins3.png"></p>
<p>创建用户</p>
<p><img src="jenkins4.png" alt="jenkins4.png"></p>
<p><img src="jenkins5.png" alt="jenkins5.png"></p>
<p><img src="jenkins6.png" alt="jenkins6.png"></p>
<p>登录</p>
<p><img src="jenkins7.png" alt="jenkins7.png"></p>
<p>安装插件</p>
<p><img src="plugin1.png" alt="plugin1.png"></p>
<p><img src="plugin2.png" alt="plugin2.png"></p>
<p>按照以上方法分别安装上gitlab和blue ocean插件</p>
<h3 id="Jenkins权限管理"><a href="#Jenkins权限管理" class="headerlink" title="Jenkins权限管理"></a>Jenkins权限管理</h3><p>创建一个用户  </p>
<p><img src="user1.png" alt="user1.png"></p>
<p><img src="user2.png" alt="user2.png"></p>
<p><img src="user3.png" alt="user3.png"></p>
<p>Jenkins默认创建的用户可以执行任何操作，其权限与管理员相同，要将其权限加以控制就需要安装一个插件Role-based Authorization Strategy，将其授权的方式进行更改</p>
<p><img src="plugin3.png" alt="plugin3.png"></p>
<p>重启jenkins服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># systemctl restart jenkins</span></span><br></pre></td></tr></table></figure>

<p>更改授权方式</p>
<p><img src="secrity.png" alt="secrity.png"></p>
<p><img src="secrity1.png" alt="secrity1.png"></p>
<p>创建一个角色</p>
<p><img src="role1.png" alt="role1.png"></p>
<p><img src="role2.png" alt="role2.png"></p>
<p><img src="role3.png" alt="role3.png"></p>
<p><img src="role4.png" alt="role4.png"></p>
<p><img src="role5.png" alt="role5.png"></p>
<h3 id="jenkins邮件通知配置"><a href="#jenkins邮件通知配置" class="headerlink" title="jenkins邮件通知配置"></a>jenkins邮件通知配置</h3><p><img src="mail1.png" alt="mail1.png"></p>
<p><img src="mail2.png" alt="mail2.png"></p>
<p><img src="mail3.png" alt="mail3.png"></p>
<p><img src="mail4.png" alt="mail4.png"></p>
<h3 id="配置jenkins到gitlab拉取代码"><a href="#配置jenkins到gitlab拉取代码" class="headerlink" title="配置jenkins到gitlab拉取代码"></a>配置jenkins到gitlab拉取代码</h3><p>在jenkins服务器上生成ssh的公钥和私钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># ssh-keygen</span></span><br><span class="line"><span class="comment">#取出私钥文件内容</span></span><br><span class="line">root@jenkins:~<span class="comment"># cat .ssh/id_rsa</span></span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEpgIBAAKCAQEAs/F5AHLXxg++0+J5mRmlOUS2fUyvXsge+eHOS4ZpyiOzYucs</span><br><span class="line">O6TtCucct8Gtxe6m/rM/eOOGT5SyKnzuGPpDOBlAqjdspB+5oszEaqW5oGUjbsh1</span><br><span class="line">xTPHe2t6wAnuCf1u8YzuOgzPxnUEdgDvUVygBUYsEoCMAQ3mzjrxdkkNWCwau/1c</span><br><span class="line">mtES0TjRW7S0StqYRc0JGWmSoyb0p7oMoRVU5z1AA+UaZlE183iQOMOGIGvNirwy</span><br><span class="line">mJXy6gVADt8gcCImEfcFbFbtV0ZJymmyWrbEcEpldEjNe2VCxP8i32Cs7J6RPAvi</span><br><span class="line">W/OoVoTY1wC85xwqnawRlc3/ldkQhkP4R4lb1QIDAQABAoIBAQCtilO9WAS7UpIi</span><br><span class="line">vQey3OXY7mjlPODhEzW0ns6bTh2WwomN+A9T0oJ+AlhS7CpQexJ5D5xGVYBCHdEa</span><br><span class="line">YvQqCKptXwVbZCqVurcIyF0h0YTNqNzcSd4y+vYHFKgEr07wOYgW02kpeROlfVN5</span><br><span class="line">Dvu/RwpZK8zzZyAfIC4ZdQVMo7WH8xoaAZB9x663I5MCPJdsw2dM7I+yKhgCPC6A</span><br><span class="line">OC130m1p5kUCIc9dMMIiE4rKBYUGSv93emHvMxBiwnk7GWzml/ncxh32s1hKvXN3</span><br><span class="line">5TurFQLac2WLSn6k4sNfXgZnGpqAyoUggcwzPeAqSaH98YNStiFACsH6Q3mbnIp8</span><br><span class="line">VEyWaI+dAoGBAObfOjtQISd4ypXMFoB8Bf1srT24r0NBxxR/MJzY1FZx8pJCcbCN</span><br><span class="line">RJOIz0qkdNyXbt92bD9X4p84+0fNr2htEKzeVsizxp4HPFDn6GTWonhnikGaG/7Z</span><br><span class="line">Dq4fYRW961xdVp7iMYL2sFfEL5Yd9YpOoixU7QcZfnuPLrmVPcBO6VLvAoGBAMeH</span><br><span class="line">OJIl9EZBYx8+/GjzXXC8V95WpbvZt3TjZCegPLphEub6Ey8jeS1tl0XS+PMIaB1I</span><br><span class="line">p7TnZzxB1YnaWrqj+851LBZirwX7PRUOrtzLYd1j0iCkQMiX9KKMDeOzFEEszTj4</span><br><span class="line">3VKMPSHe7/s/qXRUzl6bpeR6NOfbmADikdEpza17AoGBAMNQKABTqqis7J3LmWG7</span><br><span class="line">Coo5rVng6wx4EkaJz4NxgDldjrwjT/Dvogs6GzvnYyHXTqnnkm4IGKVg3FwDaxhp</span><br><span class="line">5EiKlFqYlDfOoT1E4/qjBbHczj7vdC2mTWALFeQB1qI+KHCjpQVJUyf8xdE2qSoH</span><br><span class="line">mfTtJ9TwwWsgV4QS+Lm/SG6rAoGBAJvDalxdmNcH0LPh3faoljeeMRJ3niaKDngH</span><br><span class="line">1HZC12XAxpreev9/t+fI+CEgVAyWcYD66UGGrMcTtfpKJi4yOi+wtVw8adpHiiXY</span><br><span class="line">MpZXh+znMnEdCR4P0oDayTUK5jMDIKrrTQxWQpsgiUQhLM6OLhUZeWZmKMsgWQfH</span><br><span class="line">2IHrGo/lAoGBANN9mH6rUSCQqJuh462FOMkwwHozj1St37cFXCQrwHUTOV6S22u5</span><br><span class="line">eC5XWixwz3Y3hlHCdDWHQ+e7Ytw0b78Dm+R1szQQFlL6PTSUhBCyMLnlFTbSAy6n</span><br><span class="line">oF+u63iCKGeDbWiP1UGwRdEQFX+nSaU0CLLsLz9ZHKyLmWB0bUROScoD</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line"><span class="comment">#取出公钥文件内容</span></span><br><span class="line">root@jenkins:~<span class="comment"># cat .ssh/id_rsa.pub </span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCz8XkActfGD77T4nmZGaU5RLZ9TK9eyB754c5LhmnKI7Ni5yw7pO0K5xy3wa3F7qb+sz9444ZPlLIqfO4Y+kM4GUCqN2ykH7mizMRqpbmgZSNuyHXFM8d7a3rACe4J/W7xjO46DM/GdQR2AO9RXKAFRiwSgIwBDebOOvF2SQ1YLBq7/Vya0RLRONFbtLRK2phFzQkZaZKjJvSnugyhFVTnPUAD5RpmUTXzeJA4w4Yga82KvDKYlfLqBUAO3yBwIiYR9wVsVu1XRknKabJatsRwSmV0SM17ZULE/yLfYKzsnpE8C+Jb86hWhNjXALznHCqdrBGVzf+V2RCGQ/hHiVvV root@jenkins</span><br></pre></td></tr></table></figure>

<p>在jenkins上配置凭据</p>
<p><img src="private1.png" alt="private1.png"></p>
<p><img src="private2.png" alt="private2.png"></p>
<p><img src="private3.png" alt="private3.png"></p>
<p>在gitlab上添加jenkins服务器的公钥，让jenkins服务器无需输入账户名和密码就能拉取数据</p>
<p><img src="public.png" alt="public.png"></p>
<p>在jenkins服务器上使用git测试能否从gitlab上免用户名和密码clone项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># git clone git@192.168.27.11:mylinuxops/web1.git</span></span><br></pre></td></tr></table></figure>

<p>将jenkins的公钥文件发送给2台tomcat服务器，用来免密要分发代码使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># ssh-copy-id www@192.168.27.31</span></span><br><span class="line">root@jenkins:~<span class="comment"># ssh-copy-id www@192.168.27.32</span></span><br></pre></td></tr></table></figure>

<h3 id="配置代码部署"><a href="#配置代码部署" class="headerlink" title="配置代码部署"></a>配置代码部署</h3><p>在jenkins上创建一个项目，测试能否构建项目</p>
<p><img src="test1.png" alt="test1.png"></p>
<p><img src="test2.png" alt="test2.png"></p>
<p><img src="test3.png" alt="test3.png"></p>
<p><img src="test4.png" alt="test4.png"></p>
<p><img src="test5.png" alt="test5.png"></p>
<p><img src="test6.png" alt="test6.png"></p>
<p><img src="test7.png" alt="test7.png"></p>
<p>更改构建内容测试能否将gitlab上的项目向后端的tomcat上部署</p>
<p><img src="test8.png" alt="test8.png"></p>
<p><img src="test9.png" alt="test9.png"></p>
<p><img src="test10.png" alt="test10.png"></p>
<p>测试访问keepalived</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># curl 192.168.27.248/myapp/index.html</span></span><br><span class="line">welcome to mylinuxops.com   v1</span><br><span class="line">welcome to mylinuxops.com 	v2</span><br><span class="line">welcome to mylinuxops.com 	v3</span><br><span class="line">welcome to mylinuxops.com   v4</span><br><span class="line">welcome to mylinuxops.com   v5</span><br><span class="line"><span class="comment">#内容已变更</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins给脚本传递参数</title>
    <url>/2019/05/05/CICD/jenkins%E5%90%91%E8%84%9A%E6%9C%AC%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/jenkins%E5%90%91%E8%84%9A%E6%9C%AC%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="使用选项参数传递参数"><a href="#使用选项参数传递参数" class="headerlink" title="使用选项参数传递参数"></a>使用选项参数传递参数</h2><p>新建一个任务</p>
<p><img src="arg1.png" alt="arg1.png"></p>
<p><img src="arg2.png" alt="arg2.png"></p>
<p><img src="arg3.png" alt="arg3.png"></p>
<p>编写脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~<span class="comment"># vim test.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-------------------&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> == <span class="string">&quot;GROUP1&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        IP_LIST=<span class="string">&quot;192.168.27.31&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> == <span class="string">&quot;GROUP2&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        IP_LIST=<span class="string">&quot;192.168.27.32&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> == <span class="string">&quot;GROUPALL&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        IP_LIST=<span class="string">&quot;192.168.27.32 192.168.27.31&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;IP_LIST&#125;</span>;<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;node_ip&#125;</span>,<span class="string">&quot;---------&gt;&quot;</span></span><br><span class="line"><span class="keyword">done</span> </span><br></pre></td></tr></table></figure>

<p>构建</p>
<p><img src="build.png" alt="build.png"></p>
<h2 id="使用字符参数传递参数"><a href="#使用字符参数传递参数" class="headerlink" title="使用字符参数传递参数"></a>使用字符参数传递参数</h2><p>修改任务，新增一个字符参数</p>
<p><img src="arg4.png" alt="arg4.png"></p>
<p><img src="arg5.png" alt="arg5.png"></p>
<p><img src="arg6.png" alt="arg6.png"></p>
<p>修改脚本添加从gitlab上克隆哪个分支的项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> == <span class="string">&quot;GROUP1&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        IP_LIST=<span class="string">&quot;192.168.27.31&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> == <span class="string">&quot;GROUP2&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        IP_LIST=<span class="string">&quot;192.168.27.32&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> == <span class="string">&quot;GROUPALL&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        IP_LIST=<span class="string">&quot;192.168.27.32 192.168.27.31&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;IP_LIST&#125;</span>;<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;node_ip&#125;</span>,<span class="string">&quot;---------&gt;&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">branch=<span class="variable">$2</span></span><br><span class="line"><span class="built_in">cd</span> /data/git &amp;&amp; rm -rf web1</span><br><span class="line">git <span class="built_in">clone</span> -b <span class="variable">$&#123;branch&#125;</span> git@192.168.27.11:mylinuxops/web1.git</span><br></pre></td></tr></table></figure>

<p>构建</p>
<p><img src="build1.png" alt="build1.png"></p>
<p>查看控制台输出</p>
<p><img src="log.png" alt="log.png"></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins构建后关联操作</title>
    <url>/2019/05/05/CICD/jenkins%E6%9E%84%E5%BB%BA%E5%90%8E%E5%85%B3%E8%81%94%E6%93%8D%E4%BD%9C/Jenkins%E6%9E%84%E5%BB%BA%E5%90%8E%E5%85%B3%E8%81%94%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>jenkins可以在执行构建后再进行执行相关联的操作，比如发邮件通知、构建下一个任务等等</p>
<p><img src="and.png" alt="and.png"></p>
<h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><p><img src="1.png" alt="1.png"></p>
<p><img src="2.png" alt="2.png"></p>
<p><img src="3.png" alt="3.png"></p>
<p>以下为构建后再构建其他工程为例</p>
<p><img src="4.png" alt="4.png"></p>
<p><img src="5.png" alt="5.png"></p>
<p><img src="6.png" alt="6.png"></p>
<p>再次执行构建任务时，当第一个任务执行完毕后会自动执行相关联的第二个任务，一般在一个大服务中使用，将每个小服务分离开，当第一个服务配置完毕后自动触发下一个服务（酌情使用）。</p>
<p><img src="7.png" alt="7.png"></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins的pipline</title>
    <url>/2019/05/04/CICD/jenkins%E7%9A%84pipline/jenkins%E7%9A%84pipline/</url>
    <content><![CDATA[<h2 id="pipline简介"><a href="#pipline简介" class="headerlink" title="pipline简介"></a>pipline简介</h2><p>官方介绍；<a href="https://jenkins.io/2.0/">https://jenkins.io/2.0/</a></p>
<p>pipline是帮助Jenkins实现CI到CD转变的重要角色，是运行在jenkins2.X版本的核心插件，简单来说Pipline就是一套运行于Jenkins上的工作流框架，将原本独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂发布流程，从而实现单个任务很难实现的复杂流程编排和任务可视化，pipline的实现方式是一套Groovy DSL，任何发布流程都可以表述为一段Groovy脚本。</p>
<h2 id="pipline语法"><a href="#pipline语法" class="headerlink" title="pipline语法"></a>pipline语法</h2><p>Stage：阶段，一个pipline可以划分为若干个stage，每个stage都是一个操作，比如clone代码、代码编译、代码测试和代码部署，阶段是一个逻辑分组，可以跨多个node执行。</p>
<p>Node：节点，每个node都是一个jenkins节点，可以是jenkin smaster也可以是jenkins agent，node是执行step的具体服务器。</p>
<p>Step：步骤，step是jenkinspipline最基本的操作单元，从在服务器创建目录到构建容器镜像，由各类Jenkins插件提供实现，例如：sh “make”</p>
<h2 id="pipline优势"><a href="#pipline优势" class="headerlink" title="pipline优势"></a>pipline优势</h2><p>可持续性：jenkins的重启或者中断后不影响已经执行的PiplineJob</p>
<p>支持暂停：pipline可以选择停止并等待人工输入或批准后再继续执行。</p>
<p>可扩展：通过groovy的编程更容易的扩展插件。</p>
<p>并行执行：通过groovy脚本可以实现step，stage间的并行执行，和更复杂的相互依赖关系。</p>
<h2 id="pipline使用方法"><a href="#pipline使用方法" class="headerlink" title="pipline使用方法"></a>pipline使用方法</h2><h3 id="简单的输出一个hello-world"><a href="#简单的输出一个hello-world" class="headerlink" title="简单的输出一个hello world"></a>简单的输出一个hello world</h3><p><img src="hello1.png" alt="hello1.png"></p>
<p><img src="hello2.png" alt="hello2.png"></p>
<p><img src="hello3.png" alt="hello3.png"></p>
<p><img src="hello4.png" alt="hello4.png"></p>
<p><img src="hello5.png" alt="hello5.png"></p>
<h3 id="测试流水线"><a href="#测试流水线" class="headerlink" title="测试流水线"></a>测试流水线</h3><p>修改流水线脚本，写入以下测试代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    stage(<span class="string">&quot;clone 代码&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;代码 clone&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&quot;代码构建&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;代码构建&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&quot;代码测试&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;代码测试&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&quot;代码部署&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;代码部署&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="pip1.png" alt="pip1.png"></p>
<p>再次进行构建，流水线发生了变化</p>
<p><img src="pip2.png" alt="pip2.png"></p>
<h3 id="流水线语法生成器的使用"><a href="#流水线语法生成器的使用" class="headerlink" title="流水线语法生成器的使用"></a>流水线语法生成器的使用</h3><p><img src="yf1.png" alt="yf1.png"></p>
<p><img src="yf2.png" alt="yf2.png"></p>
<p><img src="yf3.png" alt="yf3.png"></p>
<p>在控制台上查看输出</p>
<p><img src="yf4.png" alt="yf4.png"></p>
<p>去slave-2上查看项目是否被克隆下来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@slave-2:~<span class="comment"># ll /var/lib/jenkins/workspace/pipline-test/</span></span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x 3 root root 4096 Jul 24 05:31 ./</span><br><span class="line">drwxr-xr-x 4 root root 4096 Jul 24 05:31 ../</span><br><span class="line">drwxr-xr-x 8 root root 4096 Jul 24 05:31 .git/</span><br><span class="line">-rw-r--r-- 1 root root  154 Jul 24 05:31 index.html</span><br><span class="line"><span class="comment">#项目已经被克隆</span></span><br></pre></td></tr></table></figure>

<p>继续编写流水线脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node(<span class="string">&quot;jenkins-slave-2&quot;</span>)&#123;       <span class="comment">#将流水线强制指定在某个slave节点上</span></span><br><span class="line">  stage(<span class="string">&quot;clone 代码&quot;</span>)&#123;</span><br><span class="line">    sh <span class="string">&#x27;cd /var/lib/jenkins/workspace/pipline-test &amp;&amp; rm -rf ./*&#x27;</span></span><br><span class="line">    git credentialsId: <span class="string">&#x27;38462a8a-5efd-4d9b-8ed5-06b021bd01e9&#x27;</span>, url: <span class="string">&#x27;git@192.168.27.11:mylinuxops/web1.git&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;代码 clone完成&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stage(<span class="string">&quot;代码打包&quot;</span>)&#123;</span><br><span class="line">    sh <span class="string">&#x27;cd  /var/lib/jenkins/workspace/pipline-test &amp;&amp; tar czvf code.tar.gz  ./index.html&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;代码打包完成&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  stage(<span class="string">&quot;停止tomcat服务&quot;</span>)&#123;</span><br><span class="line">    sh <span class="string">&#x27;ssh www@192.168.27.31 &quot;/etc/init.d/tomcat stop&quot;&#x27;</span></span><br><span class="line">    sh <span class="string">&#x27;ssh www@192.168.27.32 &quot;/etc/init.d/tomcat stop&quot;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  stage(<span class="string">&quot;代码复制&quot;</span>)&#123;</span><br><span class="line">    sh <span class="string">&#x27;cd /var/lib/jenkins/workspace/pipline-test &amp;&amp; scp  code.tar.gz www@192.168.27.31:/data/tomcat/tomcat_appdir/&#x27;</span></span><br><span class="line">    sh <span class="string">&#x27;cd /var/lib/jenkins/workspace/pipline-test &amp;&amp; scp  code.tar.gz www@192.168.27.32:/data/tomcat/tomcat_appdir/&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  stage(<span class="string">&quot;代码部署&quot;</span>)&#123;</span><br><span class="line">    sh <span class="string">&#x27;ssh www@192.168.27.31 &quot;cd /data/tomcat/tomcat_appdir/ &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*  &amp;&amp; tar xvf code.tar.gz -C /data/tomcat/tomcat_webdir/myapp/ &quot;&#x27;</span></span><br><span class="line">    sh <span class="string">&#x27;ssh www@192.168.27.32 &quot;cd /data/tomcat/tomcat_appdir/ &amp;&amp; rm -rf /data/tomcat/tomcat_webdir/myapp/*  &amp;&amp; tar xvf code.tar.gz -C /data/tomcat/tomcat_webdir/myapp/ &quot;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  stage(<span class="string">&quot;启动tomcat服务&quot;</span>)&#123;</span><br><span class="line">    sh <span class="string">&#x27;ssh www@192.168.27.32 &quot;/etc/init.d/tomcat start&quot;&#x27;</span></span><br><span class="line">    sh <span class="string">&#x27;ssh www@192.168.27.32 &quot;/etc/init.d/tomcat start&quot;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于此处使用的是分布式的jenkins还需要做好与后端tomcat的免密钥认证</p>
<p>slave-1与后端服务器做免密钥认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@slave-1:~<span class="comment"># ssh-keygen</span></span><br><span class="line">root@slave-1:~<span class="comment"># ssh-copy-id www@192.168.27.31</span></span><br><span class="line">root@slave-1:~<span class="comment"># ssh-copy-id www@192.168.27.32</span></span><br></pre></td></tr></table></figure>

<p>slave-2与后端tomcat做免密钥认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@slave-2:~<span class="comment"># ssh-keygen</span></span><br><span class="line">root@slave-2:~<span class="comment"># ssh-copy-id www@192.168.27.31</span></span><br><span class="line">root@slave-2:~<span class="comment"># ssh-copy-id www@192.168.27.32</span></span><br></pre></td></tr></table></figure>

<p>将脚本写入流水线脚本中</p>
<p><img src="script.png" alt="script.png"></p>
<p>执行构建</p>
<p><img src="build.png" alt="build.png"></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins分布式部署</title>
    <url>/2019/05/05/CICD/jenkins%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F/Jenkins%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>单台的job数量是有上线的，单台jenkins执行几十上百速度就会慢，此时就会部署一个Master多个node节点，master上配置多个任务，nodes上去执行各个任务，或者让测试环境的job执行在测试的node节点上，生产的job执行在生产的node上及那个其分离开。</p>
<p>node节点在执行job时会先去gitlab上拉取代码，对其进行编译，编译完成打包后向后端web服务器去部署，master不再执行操作，只用来分配各种job。</p>
<h2 id="分布式Jenkins配置方式"><a href="#分布式Jenkins配置方式" class="headerlink" title="分布式Jenkins配置方式"></a>分布式Jenkins配置方式</h2><p>jenkins配置分布式前提条件</p>
<p>1.确保slave的时间必须要和master的时间相同</p>
<p>2.slave上的java环境需要和master上相同</p>
<p>环境准备</p>
<table>
<thead>
<tr>
<th align="left">hostname</th>
<th align="left">ip</th>
<th align="left">os</th>
</tr>
</thead>
<tbody><tr>
<td align="left">master</td>
<td align="left">192.168.27.12</td>
<td align="left">ubuntu 18.04.2</td>
</tr>
<tr>
<td align="left">slave-1</td>
<td align="left">192.168.27.13</td>
<td align="left">ubuntu 18.04.2</td>
</tr>
<tr>
<td align="left">slave-2</td>
<td align="left">192.168.27.14</td>
<td align="left">ubuntu 18.04.2</td>
</tr>
</tbody></table>
<p>在所有的服务器上进行时间同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ntpdate 172.20.0.1</span><br></pre></td></tr></table></figure>
<h3 id="配置2台slave的java环境"><a href="#配置2台slave的java环境" class="headerlink" title="配置2台slave的java环境"></a>配置2台slave的java环境</h3><p>配置java环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@slave-1:~<span class="comment"># ls</span></span><br><span class="line">jdk-8u212-linux-x64.tar.gz</span><br><span class="line">root@slave-1:~<span class="comment"># tar xf jdk-8u212-linux-x64.tar.gz -C /usr/local/src/</span></span><br><span class="line">root@slave-1:~<span class="comment"># ln -sv /usr/local/src/jdk1.8.0_212 /usr/local/jdk</span></span><br></pre></td></tr></table></figure>

<p>配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@slave-1:~<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&quot;%F %T `whoami` &quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="built_in">export</span> LANG=<span class="string">&quot;en_US.utf-8&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<p>jenkins要求在/usr/bin目录下必须有java，创建一个软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@slave-1:~<span class="comment"># ln /usr/local/jdk/bin/java /usr/bin/</span></span><br></pre></td></tr></table></figure>

<h3 id="配置slave"><a href="#配置slave" class="headerlink" title="配置slave"></a>配置slave</h3><p>分别在slave上创建出jenkins的工作目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@slave-1:~<span class="comment"># mkdir -pv /var/lib/jenkins/workspace</span></span><br><span class="line"><span class="comment">#工作目录的位置是在master上的配置文件中指定的</span></span><br><span class="line"><span class="comment">#root@master:~# vim /etc/default/jenkins </span></span><br><span class="line"><span class="comment">#JENKINS_HOME=/var/lib/$NAME</span></span><br></pre></td></tr></table></figure>

<p>在工作目录下配置软连接，slave上线时会检查工作目录下是否有java</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@slave-1:~<span class="comment"># mkdir /var/lib/jenkins/jdk/bin</span></span><br><span class="line">root@slave-1:~<span class="comment"># ln -sv /usr/local/jdk/bin/java /var/lib/jenkins/jdk/bin/</span></span><br></pre></td></tr></table></figure>

<h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><p><img src="1.png" alt="1.png"></p>
<p><img src="2.png" alt="2.png"></p>
<p><img src="3.png" alt="3.png"></p>
<p><img src="4.png" alt="4.png"></p>
<p><img src="5.png" alt="5.png"></p>
<p><img src="6.png" alt="6.png"></p>
<p>按照此方法将slave-2也加入节点</p>
<p><img src="7.png" alt="7.png"></p>
<p>分布式jenkins部署完毕</p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins构建触发器</title>
    <url>/2019/05/04/CICD/jenkins%E8%A7%A6%E5%8F%91%E5%99%A8/Jenkins%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    <content><![CDATA[<p>当gitlab上代码发生变更时，jenkins自动将代码部署到服务器上，常用于测试环境</p>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>在gitlab上创建一个新的开发分支</p>
<p><img src="jenkins1.png" alt="jenkins1.png"></p>
<p><img src="jenkins2.png" alt="jenkins2.png"></p>
<p>在jenkins上安装插件</p>
<p><img src="plugin1.png" alt="plugin1.png"></p>
<p><img src="plugin2.png" alt="plugin2.png"></p>
<p>插件安装完毕后需要对jenkins的配置做一些更改：</p>
<p>1.允许登录用户可以做任何事情</p>
<p>2.关闭跨站伪造保护</p>
<p><img src="config1.png" alt="config1.png"></p>
<p><img src="config2.png" alt="config2.png"></p>
<p>新建一个开发分支的任务</p>
<p><img src="new1.png" alt="new1.png"></p>
<p>生成一个token值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@jenkins:~<span class="comment"># openssl rand -hex 12</span></span><br><span class="line">2d6f3d9475277d20545a4182</span><br></pre></td></tr></table></figure>

<p>填入token值</p>
<p><img src="new2.png" alt="new2.png"></p>
<p><img src="new3.png" alt="new3.png"></p>
<p><img src="new4.png" alt="new4.png"></p>
<p>测试访问连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jenkins的地址、job和token拼出的连接，一旦访问此连接将触发构建</span></span><br><span class="line">root@jenkins:~<span class="comment"># curl 192.168.27.12:8080/job/mylinu_develop/build?token=2d6f3d9475277d20545a4182</span></span><br></pre></td></tr></table></figure>

<p>url测试通过后将其写入gitlab</p>
<p><img src="git1.png" alt="git1.png"></p>
<p><img src="git2.png" alt="git2.png"></p>
<p>在Jenkins上修改构建的脚本</p>
<p><img src="build.png" alt="build.png"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>对开发分克隆</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@gitlab:~<span class="comment"># git clone -b develop http://192.168.27.11/mylinuxops/web1.git</span></span><br><span class="line">Cloning into <span class="string">&#x27;web1&#x27;</span>...</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;http://192.168.27.11&#x27;</span>: masuri</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;http://masuri@192.168.27.11&#x27;</span>: </span><br><span class="line">remote: Enumerating objects: 15, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (15/15), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (8/8), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 15 (delta 1), reused 15 (delta 1)</span><br><span class="line">Unpacking objects: 100% (15/15), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>

<p>重新修改后再次提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@gitlab:~/web1<span class="comment"># cat index.html </span></span><br><span class="line">welcome to mylinuxops.com	v1</span><br><span class="line">welcome to mylinuxops.com	v2</span><br><span class="line">welcome to mylinuxops.com	v3</span><br><span class="line">welcome to mylinuxops.com	v4</span><br><span class="line">welcome to mylinuxops.com	v5</span><br><span class="line">welcome to mylinuxops.com	v6</span><br><span class="line">root@gitlab:~/web1<span class="comment"># git add ./*</span></span><br><span class="line">root@gitlab:~/web1<span class="comment"># git commit -m &quot;v6&quot;</span></span><br><span class="line">[develop 3c3104b] v6</span><br><span class="line"> 1 file changed, 6 insertions(+), 6 deletions(-)</span><br><span class="line">root@gitlab:~/web1<span class="comment"># git push</span></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;http://192.168.27.11&#x27;</span>: masuri</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;http://masuri@192.168.27.11&#x27;</span>: </span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 275 bytes | 275.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: </span><br><span class="line">remote: To create a merge request <span class="keyword">for</span> develop, visit:</span><br><span class="line">remote:   http://192.168.27.11/mylinuxops/web1/merge_requests/new?merge_request%5Bsource_branch%5D=develop</span><br><span class="line">remote: </span><br><span class="line">To http://192.168.27.11/mylinuxops/web1.git</span><br><span class="line">   7b5ebd9..3c3104b  develop -&gt; develop</span><br></pre></td></tr></table></figure>

<p>触发了自动部署，后端服务器上已经变为v6版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@gitlab:~/web1<span class="comment"># curl 192.168.27.248/myapp/index.html</span></span><br><span class="line">welcome to mylinuxops.com	v1</span><br><span class="line">welcome to mylinuxops.com	v2</span><br><span class="line">welcome to mylinuxops.com	v3</span><br><span class="line">welcome to mylinuxops.com	v4</span><br><span class="line">welcome to mylinuxops.com	v5</span><br><span class="line">welcome to mylinuxops.com	v6</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins视图</title>
    <url>/2019/05/05/CICD/jenkins%E8%A7%86%E5%9B%BE/jenkins%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<p>视图可用于归档 job 进行分组显示，比如将一个业务的视图放在一个视图显示</p>
<h2 id="pipeline视图"><a href="#pipeline视图" class="headerlink" title="pipeline视图"></a>pipeline视图</h2><p>pipeline视图需要安装build pipeline插件</p>
<p><img src="view1.png" alt="view1.png"></p>
<p>创建视图</p>
<p><img src="view2.png" alt="view2.png"></p>
<p><img src="view3.png" alt="view3.png"></p>
<p><img src="view4.png" alt="view4.png"></p>
<h2 id="列表视图"><a href="#列表视图" class="headerlink" title="列表视图"></a>列表视图</h2><p>列表视图使用场景比较多，用于将一个业务的job保存至一个列表视图进行分类管理，即不同业务的job放在不同的列表视图中。</p>
<p><img src="list1.png" alt="list1.png"></p>
<p><img src="list2.png" alt="list2.png"></p>
<p>最终job1的视图中有2个任务</p>
<p><img src="list3.png" alt="list3.png"></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins代码质量检测</title>
    <url>/2019/05/05/CICD/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B/Jenkins%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h2 id="代码质量检测"><a href="#代码质量检测" class="headerlink" title="代码质量检测"></a>代码质量检测</h2><p>官方网站：<a href="http://www.sonarqube.org/">http://www.sonarqube.org/</a></p>
<p>SonarQube是一个用于代码质量管理的开放平台，通过插件机制，SonarQube可以集成不同的测试工具，代码分析工具，以及持续集成工具，例如 Hudson/Jenkins 等。</p>
<p>下载地址：<a href="https://www.sonarqube.org/downloads/">https://www.sonarqube.org/downloads/</a></p>
<h3 id="七个维度检测代码质量"><a href="#七个维度检测代码质量" class="headerlink" title="七个维度检测代码质量"></a>七个维度检测代码质量</h3><p>复杂度分布：代码复杂度过高将难以理解</p>
<p>重复代码：程序中包含大量复制、粘贴的代码而导致代码臃肿，sonar 可以展示源码中重复严重的地方</p>
<p>单元测试统计：统计并展示单元测试覆盖率，开发或测试可以清楚测试代码的覆盖情况</p>
<p>代码规则检查：检查代码是否符合规范</p>
<p>注释率：若代码注释过少，特别是人员变动后，其他人接手比较难接手；若过多，又不利于阅读潜在的Bug：检测潜在的 bug</p>
<p>结构与设计：找出循环，展示包与包、类与类之间的依赖、检查程序之间耦合度</p>
<h2 id="sonar-sever端配置"><a href="#sonar-sever端配置" class="headerlink" title="sonar-sever端配置"></a>sonar-sever端配置</h2><p>配置java环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@slave-1:~<span class="comment"># ls</span></span><br><span class="line">jdk-8u212-linux-x64.tar.gz</span><br><span class="line">root@slave-1:~<span class="comment"># tar xf jdk-8u212-linux-x64.tar.gz -C /usr/local/src/</span></span><br><span class="line">root@slave-1:~<span class="comment"># ln -sv /usr/local/src/jdk1.8.0_212 /usr/local/jdk</span></span><br></pre></td></tr></table></figure>

<p>配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@slave-1:~<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&quot;%F %T `whoami` &quot;</span></span><br><span class="line"><span class="built_in">export</span> LANG=<span class="string">&quot;en_US.utf-8&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<p>由于sonarqube 7.9.1LTS不再支持MySQL此处使用sonarqube 6.9lts版</p>
<p>下载安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-6.7.7.zip</span></span><br></pre></td></tr></table></figure>

<p>创建用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># useradd -s /bin/bash -m sonarqube</span></span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># unzip sonarqube-6.7.7.zip -d /usr/local/src/</span></span><br></pre></td></tr></table></figure>

<p>做个软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># ln -sv /usr/local/src/sonarqube-6.7.7 /usr/local/sonarqube</span></span><br></pre></td></tr></table></figure>

<p>修改属主属组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># chown sonarqube.sonarqube /usr/local/src/sonarqube-6.7.7 /usr/local/sonarqube -R</span></span><br></pre></td></tr></table></figure>

<p>修改内核参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># vim /etc/sysctl.conf </span></span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line">fs.file-max = 65536</span><br></pre></td></tr></table></figure>

<p>开启最大限制数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># vim /etc/security/limits.conf </span></span><br><span class="line">sonarqube       -       nofile  65536</span><br><span class="line">sonarqube       -       nproc   2048</span><br></pre></td></tr></table></figure>

<p>重启服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>安装数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># apt install mysql-server -y</span></span><br></pre></td></tr></table></figure>

<p>创建数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;  create database sonar default character <span class="built_in">set</span> utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure>

<p>授权用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON sonar.* TO <span class="string">&#x27;sonar&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;111111&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>测试能否连接数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># mysql -usonar -p111111</span></span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># grep &quot;^[a-Z]&quot; /usr/local/sonarqube/conf/sonar.properties</span></span><br><span class="line">sonar.jdbc.username=sonar</span><br><span class="line">sonar.jdbc.password=111111</span><br><span class="line">sonar.jdbc.url=jdbc:mysql://192.168.27.10:3306/sonar?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=<span class="literal">true</span>&amp;useConfigs=maxPerformance&amp;useSSL=<span class="literal">false</span></span><br><span class="line">sonar.web.host=0.0.0.0</span><br><span class="line">sonar.web.port=9000</span><br></pre></td></tr></table></figure>

<p>切换用户启动sonar</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># su - sonarqube</span></span><br><span class="line">sonarqube@mylinuxops:~$ /usr/<span class="built_in">local</span>/sonarqube/bin/linux-x86-64/sonar.sh start</span><br></pre></td></tr></table></figure>

<p>监控日志确保sonar起来了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/usr/<span class="built_in">local</span>/sonarqube/logs<span class="comment"># tail -f /usr/local/sonarqube/logs/sonar.log </span></span><br><span class="line">2019.07.24 08:49:38 INFO  app[][o.s.a.p.ProcessLauncherImpl] Launch process[[key=<span class="string">&#x27;es&#x27;</span>, ipcIndex=1, logFilenamePrefix=es]] from [/usr/<span class="built_in">local</span>/src/sonarqube-6.7.7/elasticsearch]: /usr/<span class="built_in">local</span>/src/sonarqube-6.7.7/elasticsearch/bin/elasticsearch -Epath.conf=/usr/<span class="built_in">local</span>/src/sonarqube-6.7.7/temp/conf/es</span><br><span class="line">2019.07.24 08:49:38 INFO  app[][o.s.a.SchedulerImpl] Waiting <span class="keyword">for</span> Elasticsearch to be up and running</span><br><span class="line">2019.07.24 08:49:38 INFO  app[][o.e.p.PluginsService] no modules loaded</span><br><span class="line">2019.07.24 08:49:38 INFO  app[][o.e.p.PluginsService] loaded plugin [org.elasticsearch.transport.Netty4Plugin]</span><br><span class="line">2019.07.24 08:49:44 INFO  app[][o.s.a.SchedulerImpl] Process[es] is up</span><br><span class="line">2019.07.24 08:49:44 INFO  app[][o.s.a.p.ProcessLauncherImpl] Launch process[[key=<span class="string">&#x27;web&#x27;</span>, ipcIndex=2, logFilenamePrefix=web]] from [/usr/<span class="built_in">local</span>/src/sonarqube-6.7.7]: /usr/<span class="built_in">local</span>/src/jdk1.8.0_212/jre/bin/java -Djava.awt.headless=<span class="literal">true</span> -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/usr/<span class="built_in">local</span>/src/sonarqube-6.7.7/temp -Xmx512m -Xms128m -XX:+HeapDumpOnOutOfMemoryError -cp ./lib/common/*:./lib/server/*:/usr/<span class="built_in">local</span>/src/sonarqube-6.7.7/lib/jdbc/mysql/mysql-connector-java-5.1.42.jar org.sonar.server.app.WebServer /usr/<span class="built_in">local</span>/src/sonarqube-6.7.7/temp/sq-process2953956436611591567properties</span><br><span class="line">2019.07.24 08:51:00 INFO  app[][o.s.a.SchedulerImpl] Process[web] is up</span><br><span class="line">2019.07.24 08:51:00 INFO  app[][o.s.a.p.ProcessLauncherImpl] Launch process[[key=<span class="string">&#x27;ce&#x27;</span>, ipcIndex=3, logFilenamePrefix=ce]] from [/usr/<span class="built_in">local</span>/src/sonarqube-6.7.7]: /usr/<span class="built_in">local</span>/src/jdk1.8.0_212/jre/bin/java -Djava.awt.headless=<span class="literal">true</span> -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/usr/<span class="built_in">local</span>/src/sonarqube-6.7.7/temp -Xmx512m -Xms128m -XX:+HeapDumpOnOutOfMemoryError -cp ./lib/common/*:./lib/server/*:./lib/ce/*:/usr/<span class="built_in">local</span>/src/sonarqube-6.7.7/lib/jdbc/mysql/mysql-connector-java-5.1.42.jar org.sonar.ce.app.CeServer /usr/<span class="built_in">local</span>/src/sonarqube-6.7.7/temp/sq-process3854353664142540391properties</span><br><span class="line">2019.07.24 08:51:26 INFO  app[][o.s.a.SchedulerImpl] Process[ce] is up          <span class="comment">#确保起来</span></span><br><span class="line">2019.07.24 08:51:26 INFO  app[][o.s.a.SchedulerImpl] SonarQube is up            <span class="comment">#确保起来</span></span><br></pre></td></tr></table></figure>

<p>使用浏览器登录</p>
<p><img src="sonar1.png" alt="sonar1.png"></p>
<p><img src="sonar2.png" alt="sonar2.png"></p>
<p>更改语言为中文</p>
<p><img src="sonar3.png" alt="sonar3.png"></p>
<p>server端配置完成</p>
<h2 id="sonar-scanner配置"><a href="#sonar-scanner配置" class="headerlink" title="sonar-scanner配置"></a>sonar-scanner配置</h2><p>sonar的扫描器需要和jenkins配置在一起</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~<span class="comment"># ls</span></span><br><span class="line">sonar-scanner-cli-4.0.0.1744-linux.zip</span><br></pre></td></tr></table></figure>

<p>解压文件，创建软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~<span class="comment"># unzip sonar-scanner-cli-4.0.0.1744-linux.zip -d /usr/local/src/</span></span><br><span class="line">root@master:~<span class="comment"># ln -sv /usr/local/src/sonar-scanner-4.0.0.1744-linux/ /usr/local/sonar-scanner</span></span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~<span class="comment"># vim /usr/local/sonar-scanner/conf/sonar-scanner.properties </span></span><br><span class="line"><span class="comment">#----- Default SonarQube server</span></span><br><span class="line">sonar.host.url=http://192.168.27.10:9000</span><br><span class="line"></span><br><span class="line"><span class="comment">#----- Default source code encoding</span></span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure>

<p>配置完毕</p>
<h2 id="测试php"><a href="#测试php" class="headerlink" title="测试php"></a>测试php</h2><p>上传演示代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~<span class="comment"># ls</span></span><br><span class="line">sonar-examples-master.zip</span><br><span class="line">root@master:~<span class="comment"># unzip sonar-examples-master.zip </span></span><br></pre></td></tr></table></figure>

<p>测试php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~<span class="comment"># cd sonar-examples-master/projects/languages/php/php-sonar-runner</span></span><br><span class="line">root@master:~/sonar-examples-master/projects/languages/php/php-sonar-runner<span class="comment"># ll</span></span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 3 root root 4096 Jul 25  2016 ./</span><br><span class="line">drwxr-xr-x 4 root root 4096 Jul 25  2016 ../</span><br><span class="line">-rw-r--r-- 1 root root  453 Jul 25  2016 README.md</span><br><span class="line">-rw-r--r-- 1 root root  331 Jul 25  2016 sonar-project.properties       <span class="comment">#此为配置文件，在测试的代码目录下必须要有此文件</span></span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul 25  2016 src/</span><br><span class="line">-rw-r--r-- 1 root root  272 Jul 25  2016 validation.txt</span><br></pre></td></tr></table></figure>

<p>编辑配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~/sonar-examples-master/projects/languages/php/php-sonar-runner<span class="comment"># vim sonar-project.properties </span></span><br><span class="line"><span class="comment"># Required metadata</span></span><br><span class="line">sonar.projectKey=org.sonarqube:php-simple-sq-scanner            </span><br><span class="line">sonar.projectName=PHP :: Simple Project :: SonarQube Scanner</span><br><span class="line">sonar.projectVersion=1.0</span><br><span class="line"><span class="comment"># Comma-separated paths to directories with sources (required)</span></span><br><span class="line">sonar.sources=src       <span class="comment">#代码的目录</span></span><br><span class="line"><span class="comment"># Language</span></span><br><span class="line">sonar.language=php      <span class="comment">#所要检测的语言</span></span><br><span class="line"><span class="comment"># Encoding of the source files</span></span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure>

<p>在当前目录下执行扫描</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~/sonar-examples-master/projects/languages/php/php-sonar-runner<span class="comment"># /usr/local/sonar-scanner/bin/sonar-scanner</span></span><br><span class="line"><span class="comment">#扫描完完成后会生成一个连接</span></span><br><span class="line">INFO: ANALYSIS SUCCESSFUL, you can browse http://192.168.27.10:9000/dashboard/index/org.sonarqube:php-simple-sq-scanner</span><br></pre></td></tr></table></figure>

<p>使用浏览器访问就可以看到代码质量了</p>
<p><img src="sonar4.png" alt="sonar4.png"></p>
<h2 id="使用jenkins自动扫描代码"><a href="#使用jenkins自动扫描代码" class="headerlink" title="使用jenkins自动扫描代码"></a>使用jenkins自动扫描代码</h2><p><img src="project1.png" alt="project1.png"></p>
<p><img src="project2.png" alt="project2.png"></p>
<p>在项目中创建一个文件</p>
<p><img src="project3.png" alt="project3.png"></p>
<p>将像目录克隆到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~<span class="comment"># git clone git@192.168.27.11:mylinuxops/python.git</span></span><br></pre></td></tr></table></figure>

<p>将扫描配置文件和python代码复制到项目目录内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~<span class="comment"># cp sonar-examples-master/projects/languages/python/python-sonar-runner/sonar-project.properties python/</span></span><br><span class="line">root@master:~<span class="comment"># cp -a sonar-examples-master/projects/languages/python/python-sonar-runner/src python/</span></span><br></pre></td></tr></table></figure>

<p>修改扫描配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~/python<span class="comment"># vim sonar-project.properties </span></span><br><span class="line"><span class="comment"># Required metadata</span></span><br><span class="line">sonar.projectKey=python</span><br><span class="line">sonar.projectName=Python</span><br><span class="line">sonar.projectVersion=1.0</span><br><span class="line"><span class="comment"># Comma-separated paths to directories with sources (required)</span></span><br><span class="line">sonar.sources=src</span><br><span class="line"><span class="comment"># Language</span></span><br><span class="line">sonar.language=py</span><br><span class="line"><span class="comment"># Encoding of the source files</span></span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure>

<p>将代码提交到gitlab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master:~/python<span class="comment"># git add ./*</span></span><br><span class="line">root@master:~/python<span class="comment"># git commit -m &quot;v2&quot;</span></span><br><span class="line">root@master:~/python<span class="comment"># git push</span></span><br></pre></td></tr></table></figure>

<p>在jenkins上安装插件</p>
<p><img src="plugin.png" alt="plugin.png"></p>
<p>配置扫描器</p>
<p><img src="config1.png" alt="config1.png"></p>
<p><img src="config2.png" alt="config2.png"></p>
<p><img src="config3.png" alt="config3.png"></p>
<p><img src="config4.png" alt="config4.png"></p>
<p>配置代码质量检测</p>
<p><img src="jc1.png" alt="jc1.png"></p>
<p>扫描器配置参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sonar.projectKey=python</span><br><span class="line">sonar.projectName=python</span><br><span class="line">sonar.projectVersion=1.0</span><br><span class="line">sonar.sources=src</span><br><span class="line">sonar.language=py</span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure>

<p><img src="jc2.png" alt="jc2.png"></p>
<p><img src="jc3.png" alt="jc3.png"></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>apache虚拟主机</title>
    <url>/2019/04/20/Httpd/Apache%20%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%8A%80%E6%9C%AF/Apache%20%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>某些小型公司为了提供站点给用户访问，而去购买了一台服务器，但是站点访问量又不大，这样就造成了资源的浪费。为了避免不必要的资源浪费，大多数的主机供应商，通常将多个访问量较小的站点存放在一台主机上对外进行服务，这里就需要用到虚拟主机的技术。</p>
<p>apache虚拟主机的实现可以基于3种方式实现</p>
<ol>
<li>基于端口的不同实现</li>
<li>基于IP的不同实现</li>
<li>基于虚拟主机头的不同实现<span id="more"></span></li>
</ol>
<hr>
<h2 id="一、基于端口的不同实现虚拟主机"><a href="#一、基于端口的不同实现虚拟主机" class="headerlink" title="一、基于端口的不同实现虚拟主机"></a>一、基于端口的不同实现虚拟主机</h2><p>基于端口就是将每个站点的以端口为标识进行区分开，但是这样做优缺点，访问时需要输入IP加端口号</p>
<h3 id="1-创建配置文件"><a href="#1-创建配置文件" class="headerlink" title="1.创建配置文件"></a>1.创建配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/httpd/conf.d/vhosts.conf</span></span><br><span class="line">Listen 8001                     <span class="comment">#分别建立不同的端口用于给不同的虚拟主机服务</span></span><br><span class="line">Listen 8002</span><br><span class="line">Listen 8003</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:8001&gt;</span><br><span class="line">DocumentRoot <span class="string">&quot;/data/html/a&quot;</span></span><br><span class="line">&lt;directory <span class="string">&quot;/data/html/a&quot;</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:8002&gt;</span><br><span class="line">DocumentRoot <span class="string">&quot;/data/html/b&quot;</span></span><br><span class="line">&lt;directory <span class="string">&quot;/data/html/b&quot;</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:8003&gt;</span><br><span class="line">DocumentRoot <span class="string">&quot;/data/html/c&quot;</span></span><br><span class="line">&lt;directory <span class="string">&quot;/data/html/c&quot;</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-为虚拟主机创建目录及站点主页"><a href="#2-为虚拟主机创建目录及站点主页" class="headerlink" title="2.为虚拟主机创建目录及站点主页"></a>2.为虚拟主机创建目录及站点主页</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/httpd/conf.d/vhosts.conf</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># mkdir /data/html/&#123;a,b,c&#125; -pv</span></span><br><span class="line">mkdir: created directory ‘/data/html’</span><br><span class="line">mkdir: created directory ‘/data/html/a’</span><br><span class="line">mkdir: created directory ‘/data/html/b’</span><br><span class="line">mkdir: created directory ‘/data/html/c’</span><br><span class="line"></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># echo &quot;www.a.com&quot; &gt; /data/html/a/index.html</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># echo &quot;www.b.com&quot; &gt; /data/html/b/index.html</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># echo &quot;www.c.com&quot; &gt; /data/html/c/index.html</span></span><br></pre></td></tr></table></figure>

<h3 id="3-重启服务测试"><a href="#3-重启服务测试" class="headerlink" title="3.重启服务测试"></a>3.重启服务测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># systemctl restart httpd</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># curl 192.168.73.111:8001       #访问8001端口时，访问的站点为a.com</span></span><br><span class="line">www.a.com</span><br><span class="line">[root@mylinuxops ~]<span class="comment"># curl 192.168.73.111:8002       #访问8002端口时，访问的站点为b.com</span></span><br><span class="line">www.b.com</span><br><span class="line">[root@mylinuxops ~]<span class="comment"># curl 192.168.73.111:8003       #访问8003端口时，访问的站点为c.com</span></span><br><span class="line">www.c.com</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、基于IP实现虚拟主机"><a href="#二、基于IP实现虚拟主机" class="headerlink" title="二、基于IP实现虚拟主机"></a>二、基于IP实现虚拟主机</h2><p>基于IP就是将每个站点绑在不同的IP地址上来实现，缺点是需要手上有多个公网的IP</p>
<h3 id="1-为主机配置多个ip地址"><a href="#1-为主机配置多个ip地址" class="headerlink" title="1.为主机配置多个ip地址"></a>1.为主机配置多个ip地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># ip a a 192.168.73.112/24 dev ens33</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># ip a a 192.168.73.113/24 dev ens33</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># ip a show ens33</span></span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:3e:ba:5c brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.73.111/24 brd 192.168.73.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 192.168.73.112/24 scope global secondary ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 192.168.73.113/24 scope global secondary ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fe3e:ba5c/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/httpd/conf.d/vhosts.conf</span></span><br><span class="line">&lt;VirtualHost 192.168.73.111:80&gt;</span><br><span class="line">DocumentRoot <span class="string">&quot;/data/html/a&quot;</span></span><br><span class="line">&lt;directory <span class="string">&quot;/data/html/a&quot;</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 192.168.73.112:80&gt;</span><br><span class="line">DocumentRoot <span class="string">&quot;/data/html/b&quot;</span></span><br><span class="line">&lt;directory <span class="string">&quot;/data/html/b&quot;</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 192.168.73.113:80&gt;</span><br><span class="line">DocumentRoot <span class="string">&quot;/data/html/c&quot;</span></span><br><span class="line">&lt;directory <span class="string">&quot;/data/html/c&quot;</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-重启服务测试-1"><a href="#3-重启服务测试-1" class="headerlink" title="3.重启服务测试"></a>3.重启服务测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># systemctl restart httpd</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># curl 192.168.73.111</span></span><br><span class="line">www.a.com</span><br><span class="line">[root@mylinuxops ~]<span class="comment"># curl 192.168.73.112</span></span><br><span class="line">www.b.com</span><br><span class="line">[root@mylinuxops ~]<span class="comment"># curl 192.168.73.113</span></span><br><span class="line">www.c.com</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、基于虚拟主机头的不同实现"><a href="#三、基于虚拟主机头的不同实现" class="headerlink" title="三、基于虚拟主机头的不同实现"></a>三、基于虚拟主机头的不同实现</h2><p>基于虚拟主机头，是根据http报文头中，ServerName的不同来实现根据不同的访问请求，返回不同的资源。</p>
<h3 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/httpd/conf.d/vhosts.conf</span></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">ServerName www.a.com                    <span class="comment">#在每个虚拟主机的配置中加入ServerName来标识不同</span></span><br><span class="line">DocumentRoot <span class="string">&quot;/data/html/a&quot;</span></span><br><span class="line">&lt;directory <span class="string">&quot;/data/html/a&quot;</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">ServerName www.b.com</span><br><span class="line">DocumentRoot <span class="string">&quot;/data/html/b&quot;</span></span><br><span class="line">&lt;directory <span class="string">&quot;/data/html/b&quot;</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">ServerName www.c.com</span><br><span class="line">DocumentRoot <span class="string">&quot;/data/html/c&quot;</span></span><br><span class="line">&lt;directory <span class="string">&quot;/data/html/c&quot;</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-修改hosts文件，指定DNS"><a href="#2-修改hosts文件，指定DNS" class="headerlink" title="2.修改hosts文件，指定DNS"></a>2.修改hosts文件，指定DNS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.73.111 www.a.com www.b.com www.c.com</span><br></pre></td></tr></table></figure>

<h3 id="3-重启服务测试-2"><a href="#3-重启服务测试-2" class="headerlink" title="3.重启服务测试"></a>3.重启服务测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># curl www.a.com</span></span><br><span class="line">www.a.com</span><br><span class="line">[root@mylinuxops ~]<span class="comment"># curl www.b.com</span></span><br><span class="line">www.b.com</span><br><span class="line">[root@mylinuxops ~]<span class="comment"># curl www.c.com</span></span><br><span class="line">www.c.com</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>http各版本协议区别</title>
    <url>/2019/04/15/Httpd/Http%E5%90%84%E7%89%88%E6%9C%AC%E5%8D%8F%E8%AE%AE%E5%8C%BA%E5%88%AB/Http%E5%90%84%E7%89%88%E6%9C%AC%E5%8D%8F%E8%AE%AE%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="1-0和1-1区别"><a href="#1-0和1-1区别" class="headerlink" title="1.0和1.1区别"></a>1.0和1.1区别</h2><table>
<thead>
<tr>
<th align="left">区别</th>
<th align="left">http1.0</th>
<th align="left">http2.0</th>
</tr>
</thead>
<tbody><tr>
<td align="left">缓存处理</td>
<td align="left">主要使用hearder中的if-Modified-since，Expires（过期时间）来做为缓存判断的标准</td>
<td align="left">则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略</td>
</tr>
<tr>
<td align="left">带宽优化及网络连接的使用</td>
<td align="left">存在一些浪费带宽的现象，例如客户端只是需要某 个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能</td>
<td align="left">在 请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content）， 方便了开发者自由的选择以便于充分利用带宽和连接</td>
</tr>
<tr>
<td align="left">错误通知的管理</td>
<td align="left"></td>
<td align="left">新增24个状态响应码</td>
</tr>
<tr>
<td align="left">Host头处理</td>
<td align="left">在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的 URL并没有传递主机名（hostname）</td>
<td align="left">。HTTP1.1的请 求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）</td>
</tr>
<tr>
<td align="left">长连接</td>
<td align="left">不支持持久连接每次请求都需要要3次握手</td>
<td align="left">在一个tcp连接上可以传送多个http请求和相应</td>
</tr>
</tbody></table>
<h2 id="1-1和2-0区别"><a href="#1-1和2-0区别" class="headerlink" title="1.1和2.0区别"></a>1.1和2.0区别</h2><p>1.头信息和数据体都是二进制，称为头信息帧和数据帧<br>2.支持复用的tcp连接，在一个连接里，客户端和浏览器都可以同时发送请求或回应，并且不用按顺序对应，避免”队头堵塞”，此双方的实施通信称为多工<br>3.引入都信息压缩机制，头信息使用gzip或compress压缩后在发送;客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，不发送同样字段，只发送索引号，提高速度<br>4.允许服务器未经请求，主动向客户端发送资源，即服务器推送。</p>
<h2 id="http工作机制"><a href="#http工作机制" class="headerlink" title="http工作机制"></a>http工作机制</h2><p>客户端发起请求，dns对域名进行解析，获取到IP地址后，客户点和服务器端进行建立起连接，服务器收到请求后对请求进行处理，以get为例，服务器收到get请求，就去硬盘上加载客户端所需要的请求到http服务器中，http在响应客户端时在资源的头部加上http报文头部，构建成响应报文，在响应报文头部封装tcp头，封装ip头，封装数据链路层头然后发至用户，用户得到报文后，拆除所有头部得到http页面，服务器端将刚才用户访问的信息记录至访问日志中。</p>
<h2 id="web服务器响应模型"><a href="#web服务器响应模型" class="headerlink" title="web服务器响应模型"></a>web服务器响应模型</h2><ol>
<li><p>单进程I/O模型:服务器端开启一个进程为客户端进行服务，并且一次只处理一个请求，只有当前一个请求被处理完才会处理下一个请求，多个请求被串行响应。</p>
</li>
<li><p>多进程I/O模型:同时启动多个进程，每个进程响应一个用户请求</p>
</li>
<li><p>复用I/O模型:开启一个进程，同时响应多个请求，复用IO模型又分为多线程模型和事件驱动模型</p>
<p> 多线程模型:一个进程生成多个线程，每个线程响应一个用户请求</p>
<p> 时间驱动：一个进程同时能响应多个用户请求</p>
</li>
<li><p>复用的多进程I/O模型:一次启动多个进程，每个进程又同时启用多个线程来响应用户请求。</p>
</li>
</ol>
<h2 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h2><table>
<thead>
<tr>
<th align="left">响应码</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">200</td>
<td align="left">成功，请求数据通过响应报文的entity-body部分发送;OK</td>
</tr>
<tr>
<td align="left">301</td>
<td align="left">请求的URL指向的资源已经被删除；但在响应报文中通过首部Location指明了资源现在所处的新位置；Moved Permanently</td>
</tr>
<tr>
<td align="left">302</td>
<td align="left">响应报文Location指明资源临时新位置Moved Temporarily</td>
</tr>
<tr>
<td align="left">304</td>
<td align="left">客户端发出了条件式请求，但服务器上的资源未曾发生改变，则通过响应此响应状态码通知客户端；Not Modified</td>
</tr>
<tr>
<td align="left">401</td>
<td align="left">需要输入账号和密码认证方能访问资源；Unauthorized</td>
</tr>
<tr>
<td align="left">403</td>
<td align="left">请求被禁止；Forbidden</td>
</tr>
<tr>
<td align="left">404</td>
<td align="left">服务器无法找到客户端请求的资源；Not Found</td>
</tr>
<tr>
<td align="left">500</td>
<td align="left">服务器内部错误；Internal Server Error</td>
</tr>
<tr>
<td align="left">502</td>
<td align="left">代理服务器从后端服务器收到了一条伪响应，如无法连接到网关；Bad Gateway</td>
</tr>
<tr>
<td align="left">503</td>
<td align="left">服务不可用，临时服务器维护或过载，服务器无法处理请求</td>
</tr>
<tr>
<td align="left">504</td>
<td align="left">网关超时</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网LAMP架构实现（一）</title>
    <url>/2019/04/21/Httpd/LAMP%E9%AB%98%E7%BA%A7%E6%9E%B6%E6%9E%84/LAMP%E9%AB%98%E7%BA%A7%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>在互联网上架构如下图所示，本节将演示如何实现以下架构并安装wordpress，此处以DNS作为高可用和负载均衡。</p>
<span id="more"></span>

<p><img src="lamp.png" alt="lamp.png"></p>
<table>
<thead>
<tr>
<th align="left">主机类型</th>
<th align="left">主机名</th>
<th align="left">系统</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Client</td>
<td align="left">Clinet</td>
<td align="left">Fedora30</td>
<td align="left">192.168.73.153</td>
</tr>
<tr>
<td align="left">DNS</td>
<td align="left">DNS</td>
<td align="left">CentOS7.6</td>
<td align="left">192.168.73.101</td>
</tr>
<tr>
<td align="left">HTTPD+PHP</td>
<td align="left">HTTPD</td>
<td align="left">CentOS7.6</td>
<td align="left">192.168.73.110</td>
</tr>
<tr>
<td align="left">HTTPD+PHP</td>
<td align="left">HTTPD2</td>
<td align="left">CentOS7.6</td>
<td align="left">192.168.73.111</td>
</tr>
<tr>
<td align="left">NFS</td>
<td align="left">nfs</td>
<td align="left">CentOS7.6</td>
<td align="left">192.168.73.120</td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left">Master</td>
<td align="left">CentOS7.6</td>
<td align="left">192.168.73.130</td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left">Slave1</td>
<td align="left">CentOS7.6</td>
<td align="left">192.168.73.131</td>
</tr>
<tr>
<td align="left">MySQL</td>
<td align="left">Slave2</td>
<td align="left">CentOS7.6</td>
<td align="left">192.168.73.132</td>
</tr>
</tbody></table>
<h2 id="一、搭建MySQL主从"><a href="#一、搭建MySQL主从" class="headerlink" title="一、搭建MySQL主从"></a>一、搭建MySQL主从</h2><p>在所有MySQL服务器安装MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mariadb-server -y</span><br></pre></td></tr></table></figure>

<h3 id="Master节点操作"><a href="#Master节点操作" class="headerlink" title="Master节点操作"></a>Master节点操作</h3><p>1.配置主节点服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=1</span><br><span class="line">log-bin=/data/bin/mysql-bin</span><br><span class="line">binlog-format=row</span><br></pre></td></tr></table></figure>

<p>2.创建二进制日志目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># mkdir /data/bin</span></span><br><span class="line">[root@master ~]<span class="comment"># chown -R mysql.mysql /data/bin</span></span><br><span class="line">[root@master ~]<span class="comment"># chmod 700 /data/bin</span></span><br></pre></td></tr></table></figure>

<p>3.启动MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>4.创建一个用来主从复制的账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># mysql -e &quot;GRANT REPLICATION SLAVE ON *.* TO &#x27;repluser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;111111&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<p>5.查看二进制日志，记录日志大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># mysql -e &quot;SHOW MASTER LOGS;&quot;</span></span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |     26753 |</span><br><span class="line">| mysql-bin.000002 |    921736 |</span><br><span class="line">| mysql-bin.000003 |       402 |</span><br><span class="line">+------------------+-----------+</span><br></pre></td></tr></table></figure>

<h3 id="Slave1节点操作"><a href="#Slave1节点操作" class="headerlink" title="Slave1节点操作"></a>Slave1节点操作</h3><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@slave1 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br><span class="line">read-only</span><br></pre></td></tr></table></figure>

<p>2.启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@slave1 ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>3.CHANGE MASTER TO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@slave1 ~]<span class="comment"># mysql</span></span><br><span class="line">MariaDB [(none)]&gt; CHANGE MASTER TO   MASTER_HOST=<span class="string">&#x27;192.168.73.130&#x27;</span>,   MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,   MASTER_PASSWORD=<span class="string">&#x27;111111&#x27;</span>,   MASTER_PORT=3306,   MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000003&#x27;</span>,   MASTER_LOG_POS=402;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>4.查看slave状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 192.168.73.130</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 402</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 402</span><br><span class="line">              Relay_Log_Space: 245</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: No query specified</span><br></pre></td></tr></table></figure>

<p>5.启动复制线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>6.查看slave状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.130</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 402</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 529</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 402</span><br><span class="line">              Relay_Log_Space: 825</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: No query specified</span><br></pre></td></tr></table></figure>

<p>7.测试</p>
<p>主节点导入测试表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># mysql &lt; hellodb_innodb.sql</span></span><br></pre></td></tr></table></figure>

<p>8.slave1节点查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@slave1 ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<p>Slave1节点搭建完毕</p>
<h3 id="Slave2节点操作"><a href="#Slave2节点操作" class="headerlink" title="Slave2节点操作"></a>Slave2节点操作</h3><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@slave2 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=3</span><br><span class="line">read-only</span><br></pre></td></tr></table></figure>

<p>2.启动MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@slave2 ~]<span class="comment"># systemctl restart mariadb</span></span><br></pre></td></tr></table></figure>

<p>3.CHANGE MASTER TO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@slave2 ~]<span class="comment"># mysql</span></span><br><span class="line">MariaDB [(none)]&gt; CHANGE MASTER TO   MASTER_HOST=<span class="string">&#x27;192.168.73.130&#x27;</span>,   MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,   MASTER_PASSWORD=<span class="string">&#x27;111111&#x27;</span>,   MASTER_PORT=3306,   MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000003&#x27;</span>,   MASTER_LOG_POS=402;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>4.查看slave状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 192.168.73.130</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 402</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 402</span><br><span class="line">              Relay_Log_Space: 245</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: No query specified</span><br></pre></td></tr></table></figure>

<p>5.启动复制线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>6.查看数据库是否同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>数据库主从搭建完毕</p>
<h2 id="二、搭建HTTPD-PHP"><a href="#二、搭建HTTPD-PHP" class="headerlink" title="二、搭建HTTPD+PHP"></a>二、搭建HTTPD+PHP</h2><p>分别在两台httpd主机上安装httpd和php-fpm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install httpd php-fpm php-mysql -y</span><br></pre></td></tr></table></figure>

<h3 id="配置httpd服务器"><a href="#配置httpd服务器" class="headerlink" title="配置httpd服务器"></a>配置httpd服务器</h3><p>1.查看fcgi相关模块是否启用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># httpd -M | grep proxy</span></span><br><span class="line"> proxy_module (shared)                      <span class="comment">#已经启用</span></span><br><span class="line"> proxy_ajp_module (shared)</span><br><span class="line"> proxy_balancer_module (shared)</span><br><span class="line"> proxy_connect_module (shared)</span><br><span class="line"> proxy_express_module (shared)</span><br><span class="line"> proxy_fcgi_module (shared)                 <span class="comment">#已经启用</span></span><br><span class="line"> proxy_fdpass_module (shared)</span><br><span class="line"> proxy_ftp_module (shared)</span><br><span class="line"> proxy_http_module (shared)</span><br><span class="line"> proxy_scgi_module (shared)</span><br><span class="line"> proxy_wstunnel_module (shared)</span><br></pre></td></tr></table></figure>

<p>2.修改httpd配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line"></span><br><span class="line">addtype application/x-httpd-php .php</span><br><span class="line">addtype applictaion/x-httpd-php-source .phps</span><br><span class="line">proxyrequests off</span><br><span class="line">proxyPassMatch ^/(.*\.php)$ unix:/var/run/php.sock|fcgi://localhost/data/<span class="built_in">test</span>/<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">&lt;Virtualhost *:80&gt;</span><br><span class="line">servername blog.mylinuxops.com</span><br><span class="line">Documentroot /data/<span class="built_in">test</span></span><br><span class="line">&lt;directory /data/<span class="built_in">test</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;/Virtualhost&gt;</span><br></pre></td></tr></table></figure>

<p>3.修改php-fpm配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># vim /etc/php-fpm.d/www.conf</span></span><br><span class="line">;listen = 127.0.0.1:9000</span><br><span class="line">listen = /var/run/php.sock</span><br><span class="line">listen.mode = 0666</span><br><span class="line">;listen.allowed_clients = 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>4.修改php.ini中时区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># vim /etc/php.ini</span></span><br><span class="line">date.timezone = Asia/Shanghai</span><br></pre></td></tr></table></figure>

<p>5.启动httpd、php-fpm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># systemctl start httpd php-fpm</span></span><br></pre></td></tr></table></figure>

<p>6.创建测试页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># mkdir /data/test</span></span><br><span class="line">[root@httpd ~]<span class="comment"># vim /data/test/index.php</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:host=192.168.73.130;dbname=test&#x27;</span>;</span><br><span class="line"><span class="variable">$username</span>=<span class="string">&#x27;repluser&#x27;</span>; <span class="variable">$passwd</span>=<span class="string">&#x27;111111&#x27;</span>;</span><br><span class="line"><span class="variable">$dbh</span>=new PDO(<span class="variable">$dsn</span>,<span class="variable">$username</span>,<span class="variable">$passwd</span>);</span><br><span class="line">var_dump(<span class="variable">$dbh</span>);</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>7.测试</p>
<p><img src="1.png" alt="1.png"></p>
<h3 id="配置httpd2服务器"><a href="#配置httpd2服务器" class="headerlink" title="配置httpd2服务器"></a>配置httpd2服务器</h3><p>1.从httpd服务器将httpd配置文件及php-fpm配置文件复制至httpd2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># scp /etc/httpd/conf/httpd.conf  192.168.73.111:/etc/httpd/conf/httpd.conf</span></span><br><span class="line">[root@httpd ~]<span class="comment"># scp /etc/php-fpm.d/www.conf 192.168.73.111:/etc/php-fpm.d/www.conf</span></span><br></pre></td></tr></table></figure>

<p>2.启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd2 ~]<span class="comment"># systemctl start httpd php-fpm</span></span><br></pre></td></tr></table></figure>

<p>3.创建测试页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># mkdir /data/test</span></span><br><span class="line">[root@httpd ~]<span class="comment"># vim /data/test/index.php</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:host=192.168.73.130;dbname=test&#x27;</span>;</span><br><span class="line"><span class="variable">$username</span>=<span class="string">&#x27;repluser&#x27;</span>; <span class="variable">$passwd</span>=<span class="string">&#x27;111111&#x27;</span>;</span><br><span class="line"><span class="variable">$dbh</span>=new PDO(<span class="variable">$dsn</span>,<span class="variable">$username</span>,<span class="variable">$passwd</span>);</span><br><span class="line">var_dump(<span class="variable">$dbh</span>);</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>4.测试</p>
<p><img src="2.png" alt="2.png"></p>
<h2 id="配置dns服务器"><a href="#配置dns服务器" class="headerlink" title="配置dns服务器"></a>配置dns服务器</h2><p>1.安装bind服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns ~]<span class="comment"># yum install bind -y</span></span><br></pre></td></tr></table></figure>

<p>2.修改主配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns ~]<span class="comment"># vim /etc/named.conf</span></span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">//      listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line"></span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br></pre></td></tr></table></figure>

<p>3.添加区域记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns ~]<span class="comment"># vim /etc/named.rfc1912.zones</span></span><br><span class="line">zone <span class="string">&quot;mylinuxops.com&quot;</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> master;</span><br><span class="line">        file <span class="string">&quot;mylinuxops.com.zone&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>4.创建区域数据库文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns etc]<span class="comment"># cp -p /var/named/named.localhost /var/named/mylinuxops.com.zone</span></span><br><span class="line">[root@dns etc]<span class="comment"># vim /var/named/mylinuxops.com.zone</span></span><br><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@       IN SOA  master admin.mylinuxops.com (</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      master</span><br><span class="line">master  A       192.168.73.101</span><br><span class="line">www     A       192.168.73.110</span><br><span class="line">www     A       192.168.73.111</span><br></pre></td></tr></table></figure>

<p>5.检查语法错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns etc]<span class="comment"># named-checkconf</span></span><br><span class="line">[root@dns etc]<span class="comment"># named-checkzone mylinuxops.com /var/named/mylinuxops.com.zone</span></span><br><span class="line">zone mylinuxops.com/IN: loaded serial 0</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p>6.启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns etc]<span class="comment"># systemctl start named</span></span><br></pre></td></tr></table></figure>

<p>7.测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns etc]<span class="comment"># dig www.mylinuxops.com @192.168.73.101</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-72.el7 &lt;&lt;&gt;&gt; www.mylinuxops.com @192.168.73.101</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 10093</span></span><br><span class="line"><span class="string">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 4096</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;www.mylinuxops.com.        IN    A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">www.mylinuxops.com.    86400    IN    A    192.168.73.111</span></span><br><span class="line"><span class="string">www.mylinuxops.com.    86400    IN    A    192.168.73.110</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; AUTHORITY SECTION:</span></span><br><span class="line"><span class="string">mylinuxops.com.        86400    IN    NS    master.mylinuxops.com.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ADDITIONAL SECTION:</span></span><br><span class="line"><span class="string">master.mylinuxops.com.    86400    IN    A    192.168.73.101</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 0 msec</span></span><br><span class="line"><span class="string">;; SERVER: 192.168.73.101#53(192.168.73.101)</span></span><br><span class="line"><span class="string">;; WHEN: Fri May 17 06:00:35 CST 2019</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 116</span></span><br></pre></td></tr></table></figure>

<h2 id="配置NFS服务"><a href="#配置NFS服务" class="headerlink" title="配置NFS服务"></a>配置NFS服务</h2><p>1.创建出需要共享的目录，修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /data/test/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -R -m u:nfsnobody:rwx /data/test</span></span><br></pre></td></tr></table></figure>

<p>2.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/exports</span></span><br><span class="line">/data/<span class="built_in">test</span> *(rw)</span><br></pre></td></tr></table></figure>

<p>3.在httpd挂载nfs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># showmount -e 192.168.73.120</span></span><br><span class="line">Export list <span class="keyword">for</span> 192.168.73.120:</span><br><span class="line">/data/<span class="built_in">test</span> *</span><br><span class="line">[root@httpd ~]<span class="comment"># mount 192.168.73.120:/data/test /data/test</span></span><br></pre></td></tr></table></figure>

<p>4.在httpd2上挂载nfs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd2 ~]<span class="comment"># showmount -e 192.168.73.120</span></span><br><span class="line">Export list <span class="keyword">for</span> 192.168.73.120:</span><br><span class="line">/data/<span class="built_in">test</span> *</span><br><span class="line">[root@httpd2 ~]<span class="comment"># mount 192.168.73.120:/data/test /data/test</span></span><br></pre></td></tr></table></figure>

<p>5.在/data/test中创建测试页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:host=192.168.73.130;dbname=test&#x27;</span>;</span><br><span class="line"><span class="variable">$username</span>=<span class="string">&#x27;repluser&#x27;</span>; <span class="variable">$passwd</span>=<span class="string">&#x27;111111&#x27;</span>;</span><br><span class="line"><span class="variable">$dbh</span>=new PDO(<span class="variable">$dsn</span>,<span class="variable">$username</span>,<span class="variable">$passwd</span>);</span><br><span class="line">var_dump(<span class="variable">$dbh</span>);</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h2><p>1.测试DNS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dig www.mylinuxops.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-RedHat-9.11.5-13.P4.fc30 &lt;&lt;&gt;&gt; www.mylinuxops.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 37179</span></span><br><span class="line"><span class="string">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 4096</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;www.mylinuxops.com.        IN    A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">www.mylinuxops.com.    86400    IN    A    192.168.73.111</span></span><br><span class="line"><span class="string">www.mylinuxops.com.    86400    IN    A    192.168.73.110</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; AUTHORITY SECTION:</span></span><br><span class="line"><span class="string">mylinuxops.com.        86400    IN    NS    master.mylinuxops.com.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ADDITIONAL SECTION:</span></span><br><span class="line"><span class="string">master.mylinuxops.com.    86400    IN    A    192.168.73.101</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 0 msec</span></span><br><span class="line"><span class="string">;; SERVER: 192.168.73.101#53(192.168.73.101)</span></span><br><span class="line"><span class="string">;; WHEN: Thu May 16 22:54:46 CST 2019</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 116</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@localhost ~]# dig www.mylinuxops.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-RedHat-9.11.5-13.P4.fc30 &lt;&lt;&gt;&gt; www.mylinuxops.com</span></span><br><span class="line"><span class="string">;; global options: +cmd</span></span><br><span class="line"><span class="string">;; Got answer:</span></span><br><span class="line"><span class="string">;; -&gt;&gt;HEADER&lt;&lt;- opcode</span>: QUERY, status: NOERROR, id: 63256</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 2</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.mylinuxops.com.        IN    A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.mylinuxops.com.    86400    IN    A    192.168.73.110</span><br><span class="line">www.mylinuxops.com.    86400    IN    A    192.168.73.111</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">mylinuxops.com.        86400    IN    NS    master.mylinuxops.com.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">master.mylinuxops.com.    86400    IN    A    192.168.73.101</span><br><span class="line"></span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 192.168.73.101<span class="comment">#53(192.168.73.101)</span></span><br><span class="line">;; WHEN: Thu May 16 22:54:47 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 116</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.测试站点访问</p>
<p><img src="t1.png" alt="t1.png"></p>
<h2 id="测试安装wordpress"><a href="#测试安装wordpress" class="headerlink" title="测试安装wordpress"></a>测试安装wordpress</h2><p>1.解压wordpress到/data/test</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># tar wordpress-5.0.3-zh_CN.tar.gz -C /data/test/</span></span><br></pre></td></tr></table></figure>

<p>2.创建wordpress所需数据库及账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># mysql -e &quot;CREATE DATABASE wordpress&quot;</span></span><br><span class="line">[root@master ~]<span class="comment"># mysql -e &quot;GRANT ALL ON wordpress.* TO &#x27;wpuser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;111111&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<p>3.修改wordpress配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># cp /data/test/wordpress/wp-config-sample.php /data/test/wordpress/wp-config.php</span></span><br><span class="line">[root@httpd ~]<span class="comment"># vim /data/test/wordpress/wp-config.php</span></span><br><span class="line">// ** MySQL 设置 - 具体信息来自您正在使用的主机 ** //</span><br><span class="line">/** WordPress数据库的名称 */</span><br><span class="line">define(<span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span>);</span><br><span class="line"></span><br><span class="line">/** MySQL数据库用户名 */</span><br><span class="line">define(<span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;wpuser&#x27;</span>);</span><br><span class="line"></span><br><span class="line">/** MySQL数据库密码 */</span><br><span class="line">define(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;111111&#x27;</span>);</span><br><span class="line"></span><br><span class="line">/** MySQL主机 */</span><br><span class="line">define(<span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;192.168.73.130&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>4.在客户端测试访问</p>
<p><img src="t2.png" alt="t2.png"></p>
<p><img src="t3.png" alt="t3.png"></p>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>httpd基本配置和参数</title>
    <url>/2019/04/19/Httpd/httpd%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/httpd%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本节将讲述httpd的相关配置文件以及一些常见配置的使用方法</p>
<span id="more"></span>

<h2 id="一、httpd相关的文件和目录"><a href="#一、httpd相关的文件和目录" class="headerlink" title="一、httpd相关的文件和目录"></a>一、httpd相关的文件和目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/httpd/conf.modules.d   <span class="comment">#此目录存放了模块的配置文件，模块是否启用</span></span><br><span class="line">/etc/httpd/conf/httpd.conf  <span class="comment">#httpd的主配置文件</span></span><br><span class="line">/etc/httpd/conf.d           <span class="comment">#httpd配置文件存放目录此目录下以.conf结尾的都为httpd配置文件</span></span><br><span class="line">/usr/lib64/httpd/modules    <span class="comment">#httpd模块相关的文件</span></span><br><span class="line">/usr/sbin/apachectl         <span class="comment">#httpd启动程序，和systemctl start|stop|... httpd相同</span></span><br><span class="line">/usr/sbin/httpd</span><br><span class="line">/var/<span class="built_in">log</span>/httpd              <span class="comment">#存放了httpd的日志，access_log访问日志，error_log错误日志</span></span><br><span class="line">/var/www/html               <span class="comment">#httpd站点网页存放目录</span></span><br><span class="line">/etc/httpd/run/httpd.pid    <span class="comment">#httpd的主进程文件，里面存放了httpd的进程编号</span></span><br></pre></td></tr></table></figure>

<h2 id="二、httpd的帮助文档包"><a href="#二、httpd的帮助文档包" class="headerlink" title="二、httpd的帮助文档包"></a>二、httpd的帮助文档包</h2><p>安装httpd-manual，启动httpd服务口可以在本地查看httpd相关的帮助</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install httpd-manual -y</span></span><br></pre></td></tr></table></figure>

<h2 id="三、httpd常见配置"><a href="#三、httpd常见配置" class="headerlink" title="三、httpd常见配置"></a>三、httpd常见配置</h2><p>httpd安装后启动服务，并配置为开机自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl enable httpd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl start httpd</span></span><br></pre></td></tr></table></figure>

<h3 id="1-ServerTokens"><a href="#1-ServerTokens" class="headerlink" title="1.ServerTokens"></a>1.ServerTokens</h3><p>配置服务器响应报文头部中显示服务器类型和版本号</p>
<table>
<thead>
<tr>
<th align="left">可用选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Full</td>
<td align="left">显示所有信息</td>
</tr>
<tr>
<td align="left">Prod</td>
<td align="left">显示类型</td>
</tr>
<tr>
<td align="left">Major</td>
<td align="left">显示类型，主版本号</td>
</tr>
<tr>
<td align="left">Minor</td>
<td align="left">显示类型，主版本号，次版本号，跟新次数</td>
</tr>
<tr>
<td align="left">OS</td>
<td align="left">显示类型，主版本号，次版本号，跟新次数，系统类型</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>Prod在实际生产环境中显示的越少越好，如果要不显示需要对代码修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">ServerTokens Prod</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl reload httpd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># curl -I 192.168.73.110</span></span><br><span class="line">Server: Apache</span><br></pre></td></tr></table></figure>

<h3 id="2-Listen"><a href="#2-Listen" class="headerlink" title="2.Listen"></a>2.Listen</h3><p>监听的端口和地址，可以监听在多各端口和地址上，需要写多行</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Listen PORT</td>
<td align="left">监听所有地址的某端口</td>
</tr>
<tr>
<td align="left">Listen IP:PORT</td>
<td align="left">监听所有地址的ip和端口</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">Listen 192.168.73.110:80</span><br><span class="line">Listen 172.22.144.83:8080</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart httpd                 #端口修改后需要重启服务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ss -tnl | grep 80</span></span><br><span class="line">LISTEN     0      128    172.22.144.83:8080                     *:*  </span><br><span class="line">LISTEN     0      128    192.168.73.110:80                       *:*  </span><br></pre></td></tr></table></figure>

<h3 id="3-KeepAlive"><a href="#3-KeepAlive" class="headerlink" title="3.KeepAlive"></a>3.KeepAlive</h3><p>持久连接，此选项默认开启，需要和KeepAliveTimeout结合使用</p>
<p>KeepAlive选项</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">On</td>
<td align="left">开启</td>
</tr>
<tr>
<td align="left">Off</td>
<td align="left">关闭</td>
</tr>
</tbody></table>
<p>KeepAliveTimeout num[ms]超时时长默认为5秒  </p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">KeepAlive On</span><br><span class="line">KeepAliveTimeout 10</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl reload httpd</span></span><br></pre></td></tr></table></figure>

<h3 id="4-DocumentRoot-“-path”"><a href="#4-DocumentRoot-“-path”" class="headerlink" title="4.DocumentRoot “/path”"></a>4.DocumentRoot “/path”</h3><p>定义网页文档存放路径</p>
<p>文档路径映射，指向的路径为URL路径的起始位置，默认路径为”/var/www/html”在http2.2上只需修改此项就能访问，2.4以上修改后还需要对目录授权。</p>
<p>示例：将映射路径指向别处</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">DocumentRoot <span class="string">&quot;/data/html&quot;</span></span><br><span class="line">&lt;Directory <span class="string">&quot;/data/html&quot;</span>&gt;       定义对目录授权</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir /data/html</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 755 /data/html/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo &quot;&lt;h1&gt;welcome to www.mylinuxops.com&lt;/h1&gt;&quot; &gt; /data/html/index.html</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart httpd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># curl 192.168.73.110</span></span><br><span class="line">&lt;h1&gt;welcome to www.mylinuxops.com&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-DirectoryIndex-定义站点主页面"><a href="#5-DirectoryIndex-定义站点主页面" class="headerlink" title="5.DirectoryIndex 定义站点主页面"></a>5.DirectoryIndex 定义站点主页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DirectoryIndex index.html   <span class="comment">#当访问某网站时不需要指定文件，默认找index.html</span></span><br></pre></td></tr></table></figure>

<h3 id="6-站点的访问控制机制"><a href="#6-站点的访问控制机制" class="headerlink" title="6.站点的访问控制机制"></a>6.站点的访问控制机制</h3><p>可以基于两种机制指明对哪些资源进行何种访问控制。  </p>
<p>访问控制机制有两种，可以基于客户端来源地址和用户账号。  </p>
<p>可以进行访问控制的资源：  </p>
<p>文件系统路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory <span class="string">&quot;/path&quot;</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;File <span class="string">&quot;/path/file&quot;</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/File&gt;</span><br><span class="line"></span><br><span class="line">&lt;FileMatch <span class="string">&quot;PATTERN&quot;</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/FileMatch&gt;</span><br></pre></td></tr></table></figure>

<p>URL路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Location <span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">&lt;LocationMatch <span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;LocationMatch&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-对资源的访问控制"><a href="#7-对资源的访问控制" class="headerlink" title="7.对资源的访问控制"></a>7.对资源的访问控制</h3><h4 id="7-1-Options"><a href="#7-1-Options" class="headerlink" title="7.1 Options"></a>7.1 Options</h4><p>options后面跟了1个或多个以空白字符分割的选项列表在选项前+，—表示增加或删除指定选项，该选项会应用在目录下的所有子目录，若子目录中有AllowOverRide选项则会由AllowOverRide中定义的选项来覆盖当前的选项。</p>
<table>
<thead>
<tr>
<th align="left">options</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">all</td>
<td align="left">全部允许</td>
</tr>
<tr>
<td align="left">none</td>
<td align="left">全部禁用</td>
</tr>
<tr>
<td align="left">indexes</td>
<td align="left">要访问的URL路径下不存在与定义的主页面资源相符的资源文件时，返回索引列表给用户</td>
</tr>
<tr>
<td align="left">FollowSymlinks</td>
<td align="left">允许访问符号连接文件所指向的源文件</td>
</tr>
</tbody></table>
<p>生产中不建议将indexes启用有安全风险  </p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory <span class="string">&quot;/data/html&quot;</span>&gt;</span><br><span class="line">    options all     <span class="comment">#启用所有选项</span></span><br><span class="line">    Require all grant</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory <span class="string">&quot;/data/html&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    options all -indexes    <span class="comment">#启用所有选项，除了indexes</span></span><br><span class="line">    Require all grant</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory <span class="string">&quot;/data/html&quot;</span>&gt;</span><br><span class="line">    options indexes followsymlinks    <span class="comment">#启用indexes和followSymlinks</span></span><br><span class="line">    Require all grant</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<h4 id="7-2-AllowOverRide"><a href="#7-2-AllowOverRide" class="headerlink" title="7.2 AllowOverRide"></a>7.2 AllowOverRide</h4><p>这个功能需要在目录下创建一个.htaccess的文件，在文件中定义启用哪些访问控制选项，然后使用allowoverride来启用这些选项或禁用这些选项，.htaccess中的选项启用之后会覆盖之前的配置指令</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">all</td>
<td align="left">.htaccess中所有指令都有效</td>
</tr>
<tr>
<td align="left">none</td>
<td align="left">.htaccess中所有中指令都无效</td>
</tr>
<tr>
<td align="left">AuthConfig</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost html]<span class="comment"># cat /data/html/.htaccess</span></span><br><span class="line">options indexes followsymLinks</span><br><span class="line">&lt;Directory <span class="string">&quot;/data/html&quot;</span>&gt;</span><br><span class="line">    AllowOverride all</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<h4 id="7-3-基于ip的访问控制"><a href="#7-3-基于ip的访问控制" class="headerlink" title="7.3 基于ip的访问控制"></a>7.3 基于ip的访问控制</h4><p>无明确授权的目录，默认拒绝  </p>
<p>Require all granted:允许所有访问  </p>
<p>Require all denied:拒绝所有访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory <span class="string">&quot;/data/html&quot;</span>&gt;</span><br><span class="line">options indexes followsymlinks</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<h5 id="控制特定的IP访问"><a href="#控制特定的IP访问" class="headerlink" title="控制特定的IP访问"></a>控制特定的IP访问</h5><p>Require ip IPADDR:授权指定的IP访问  </p>
<p><em><strong>需要将其嵌套在&lt;requireany&gt;…&lt;\requireany&gt;之内定义，先将所有访问拒绝，再允许某ip访问</strong></em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory <span class="string">&quot;/data/html&quot;</span>&gt;</span><br><span class="line">options indexes followsymlinks</span><br><span class="line">&lt;requireany&gt;</span><br><span class="line">Require all denied</span><br><span class="line">Require ip 192.168.73.111</span><br><span class="line">&lt;/requireany&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>Require not ip IPADDR:授权特定ip拒绝访问  </p>
<p><em><strong>需要将其嵌套再&lt;requireall&gt;…&lt;\requireall&gt;之内定义，允许所有访问，然后拒绝某ip访问</strong></em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory <span class="string">&quot;/data/html&quot;</span>&gt;</span><br><span class="line">options indexes followsymlinks</span><br><span class="line">&lt;requireall&gt;</span><br><span class="line">Require all granted</span><br><span class="line">Require not ip  192.168.73.111</span><br><span class="line">&lt;/requireall&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<h5 id="控制特定的主机访问"><a href="#控制特定的主机访问" class="headerlink" title="控制特定的主机访问"></a>控制特定的主机访问</h5><p>用法与控制ip相同</p>
<p>Require host HOSTNAME:授权特定主机访问</p>
<p>Require not host HOSTNAME:拒绝特定主机访问</p>
<p>HOSTNAME可以时特定的主机（FQDN），或指定域名下的所有主机（domin.tld）</p>
<h3 id="8-日志设定"><a href="#8-日志设定" class="headerlink" title="8.日志设定"></a>8.日志设定</h3><p>日志分为访问日志和错误日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/httpd/error_log        <span class="comment">#错误日志</span></span><br><span class="line">/var/<span class="built_in">log</span>/httpd/access_log       <span class="comment">#访问日志</span></span><br></pre></td></tr></table></figure>

<h4 id="8-1错误日志"><a href="#8-1错误日志" class="headerlink" title="8.1错误日志"></a>8.1错误日志</h4><p>错误日志的默认级别为 warn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">ErrorLog <span class="string">&quot;logs/error_log&quot;</span>       <span class="comment">#此行定义了错误日志的位置</span></span><br><span class="line"><span class="comment"># LogLevel: Control the number of messages logged to the error_log.</span></span><br><span class="line"><span class="comment"># Possible values include: debug, info, notice, warn, error, crit,</span></span><br><span class="line"><span class="comment"># alert, emerg.                 #注释行说明了错误日志由低到高的级别，级别越低记录的内容越多。</span></span><br><span class="line">LogLevel warn                   <span class="comment">#此行定义了错误日志的级别</span></span><br></pre></td></tr></table></figure>

<h4 id="8-2访问日志"><a href="#8-2访问日志" class="headerlink" title="8.2访问日志"></a>8.2访问日志</h4><p>在配置文件中定义了可选的各种访问日志格式，可以以选用配置文件中定义的格式也可以自定义访问日志格式。</p>
<p>访问日志需要定义2行</p>
<p>1.Logformat 日志格式 定义名</p>
<p>2.Customlog 定义名</p>
<p>其中格式有多各字段组成</p>
<table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">定义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%h</td>
<td align="left">客户端的IP地址</td>
</tr>
<tr>
<td align="left">%l</td>
<td align="left">远程用户，启用mod_ident才有效，通常为”-“</td>
</tr>
<tr>
<td align="left">%u</td>
<td align="left">验证远程用户，登陆访问时显示，非登录访问时显示”-“</td>
</tr>
<tr>
<td align="left">%t</td>
<td align="left">访问的时间，为GMT时间</td>
</tr>
<tr>
<td align="left">%r</td>
<td align="left">请求的方法，url及版本号</td>
</tr>
<tr>
<td align="left">%&gt;s</td>
<td align="left">相应状态码</td>
</tr>
<tr>
<td align="left">%b</td>
<td align="left">相应报文大小</td>
</tr>
<tr>
<td align="left">%{Referer}i</td>
<td align="left">从哪个连接跳转来</td>
</tr>
<tr>
<td align="left">%{User-Agent}i</td>
<td align="left">使用的什么浏览器</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置文件中定义格式</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">LogFormat <span class="string">&quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot;</span> combined</span><br><span class="line">Customlog combined</span><br><span class="line"><span class="comment">#访问日志中查看格式</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /var/log/httpd/access_log</span></span><br><span class="line">192.168.73.1 - - [10/May/2019:15:18:50 +0800] <span class="string">&quot;GET /doc/ HTTP/1.1&quot;</span> 200 884 <span class="string">&quot;http://192.168.73.110/&quot;</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-AddDefaultCharset"><a href="#9-AddDefaultCharset" class="headerlink" title="9.AddDefaultCharset"></a>9.AddDefaultCharset</h3><p>设定默认字符集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># vim /app/httpd24/conf/httpd.conf</span></span><br><span class="line">AddDefaultCharset utf8mb4                       <span class="comment">#设定默认字符集为utf8mb4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CentOS6 ~]<span class="comment"># curl -I 192.168.73.100</span></span><br><span class="line">...</span><br><span class="line">Content-Type: text/html; charset=utf8mb4        <span class="comment">#显示头部信息为utf8mb4</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="10-alias"><a href="#10-alias" class="headerlink" title="10.alias"></a>10.alias</h3><p>定义路径别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># vim /app/httpd24/conf/httpd.conf</span></span><br><span class="line"><span class="built_in">alias</span> /bbs /data/bbsdir         <span class="comment">#定义/bbs 为/data/bbsdir的别名</span></span><br><span class="line">&lt;directory /data/bbsdir&gt;        <span class="comment">#</span></span><br><span class="line">require all granted</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建相应目录及站点文件</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment"># mkdir /data/bbsdir</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment"># echo &quot;welcome to mylinuxops.com&quot; &gt; /data/bbsdir/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务测试</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment"># apachectl restart</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment"># curl 192.168.73.100/bbs</span></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;301 Moved Permanently&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Moved Permanently&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The document has moved &lt;a href=<span class="string">&quot;http://192.168.73.100/bbs/&quot;</span>&gt;here&lt;/a&gt;.&lt;/p&gt;    <span class="comment">#访问/bbs时跳转到/bbs/</span></span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">[root@CentOS6 ~]<span class="comment"># curl 192.168.73.100/bbs/                                      #访问/bbs/时直接显示</span></span><br><span class="line">welcome to mylinuxops.com</span><br></pre></td></tr></table></figure>

<h3 id="11-用户的访问控制"><a href="#11-用户的访问控制" class="headerlink" title="11.用户的访问控制"></a>11.用户的访问控制</h3><p>用户的访问控制分为两步</p>
<h4 id="11-1认证质询"><a href="#11-1认证质询" class="headerlink" title="11.1认证质询"></a>11.1认证质询</h4><p>认证质询：WWW-Authenticate</p>
<p>响应码：401</p>
<p>先拒绝客户端请求，说明需要客户端提供账号和密码。</p>
<h4 id="11-2认证"><a href="#11-2认证" class="headerlink" title="11.2认证"></a>11.2认证</h4><p>认证Authorization</p>
<p>客户端将账号和密码填入后再次发送请求报文，通过认证，则服务器发送相应的资源</p>
<p>认证的方式分为两种：</p>
<p>basic:明文</p>
<p>digest:消息摘要</p>
<h4 id="11-3安全域"><a href="#11-3安全域" class="headerlink" title="11.3安全域"></a>11.3安全域</h4><p>需要用户认证后方能访问的路径；应该托管过名称对其进行表示，以便于报纸用户认证的原因</p>
<h4 id="11-4用户的账号和密码"><a href="#11-4用户的账号和密码" class="headerlink" title="11.4用户的账号和密码"></a>11.4用户的账号和密码</h4><p>用户的账号用来访问某服务时用到的认证标识</p>
<p>账号和密码可以存放在文本中，sql数据库中，ldap目录，nis等存储中</p>
<p>用户和账号使用htpasswd命令生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">htpasswd [OPTIONS] /PATH/TO/HTPASSWD_FILE username</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">options</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-c</td>
<td align="left">自动创建文件，在第一次创建用户时使用，反复使用会覆盖之前的用户</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">使用明文密码</td>
</tr>
<tr>
<td align="left">-m</td>
<td align="left">使用md5加密格式</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left">CRYPT格式加密（默认）</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">sha格式加密</td>
</tr>
<tr>
<td align="left">-D</td>
<td align="left">删除指定用户</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>基于用户的验证</p>
<p>一、指定哪些用户可以访问</p>
<p>1.创建4个用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># htpasswd -c /etc/httpd/conf.d/.htpasswd tom</span></span><br><span class="line">New password:</span><br><span class="line">Re-type new password:</span><br><span class="line">Adding password <span class="keyword">for</span> user tom</span><br><span class="line">[root@localhost ~]<span class="comment"># htpasswd  /etc/httpd/conf.d/.htpasswd alice</span></span><br><span class="line">New password:</span><br><span class="line">Re-type new password:</span><br><span class="line">Adding password <span class="keyword">for</span> user alice</span><br><span class="line">[root@localhost ~]<span class="comment"># htpasswd  /etc/httpd/conf.d/.htpasswd jack</span></span><br><span class="line">New password:</span><br><span class="line">Re-type new password:</span><br><span class="line">Adding password <span class="keyword">for</span> user jack</span><br><span class="line">[root@localhost ~]<span class="comment"># htpasswd  /etc/httpd/conf.d/.htpasswd masuri</span></span><br><span class="line">New password:</span><br><span class="line">Re-type new password:</span><br><span class="line">Adding password <span class="keyword">for</span> user masuri</span><br></pre></td></tr></table></figure>

<p>2.修改.htpasswd的权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chmod 600 /etc/httpd/conf.d/.htpasswd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -m u:apache:r /etc/httpd/conf.d/.htpasswd</span></span><br></pre></td></tr></table></figure>

<p>3.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf.d/test.conf</span></span><br><span class="line">&lt;Directory <span class="string">&quot;/www/html&quot;</span>&gt;</span><br><span class="line">Authtype basic</span><br><span class="line">AuthName <span class="string">&quot;login&quot;</span></span><br><span class="line">AuthUserFile /etc/httpd/conf.d/.htpasswd</span><br><span class="line">AuthGroupFile /etc/httpd/conf.d/group</span><br><span class="line">Require user tom alice              <span class="comment">#授权tom 和 alice可以通过认证访问</span></span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>4.重启服务测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl restart httpd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># curl -u tom:111111 192.168.73.111</span></span><br><span class="line">this is admin page</span><br><span class="line">[root@localhost ~]<span class="comment"># curl -u alice:111111 192.168.73.111</span></span><br><span class="line">this is admin page</span><br><span class="line">[root@localhost ~]<span class="comment"># curl -u masuri:111111 192.168.73.111        #masuri用户没有授权无法访问</span></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;401 Unauthorized&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Unauthorized&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This server could not verify that you</span><br><span class="line">are authorized to access the document</span><br><span class="line">requested.  Either you supplied the wrong</span><br><span class="line">credentials (e.g., bad password), or your</span><br><span class="line">browser doesn<span class="string">&#x27;t understand how to supply</span></span><br><span class="line"><span class="string">the credentials required.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>二、指定列表内的所用用户都可以访问</p>
<p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf.d/test.conf</span></span><br><span class="line">&lt;Directory <span class="string">&quot;/www/html&quot;</span>&gt;</span><br><span class="line">Authtype basic</span><br><span class="line">AuthName <span class="string">&quot;login&quot;</span></span><br><span class="line">AuthUserFile /etc/httpd/conf.d/.htpasswd</span><br><span class="line">AuthGroupFile /etc/httpd/conf.d/group</span><br><span class="line">Require valid-user                                  <span class="comment">#修改为Require valid-user</span></span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>2.重启读配置文件测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl reload httpd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># curl -u masuri:111111 192.168.73.111</span></span><br><span class="line">this is admin page</span><br><span class="line">[root@localhost ~]<span class="comment"># curl -u alice:111111 192.168.73.111</span></span><br><span class="line">this is admin page</span><br><span class="line">[root@localhost ~]<span class="comment"># curl -u tom:111111 192.168.73.111</span></span><br><span class="line">this is admin page</span><br><span class="line">[root@localhost ~]<span class="comment"># curl -u jack:111111 192.168.73.111</span></span><br><span class="line">this is admin page</span><br></pre></td></tr></table></figure>

<p>基于组的访问控制</p>
<p>在基于用户的访问控制基础上，还能进行基于组的访问，将用户进行分组，让某些组内的成员可以访问。首先需要定义一个组名和组成员相对应的文件，然后在配置文件中授权。</p>
<p>示例：</p>
<p>1.创建组成员对应关系的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf.d/group</span></span><br><span class="line">g1:alice tom</span><br><span class="line">g2:jack masuri</span><br></pre></td></tr></table></figure>

<p>2.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf.d/test.conf</span></span><br><span class="line">&lt;Directory <span class="string">&quot;/www/html&quot;</span>&gt;</span><br><span class="line">Authtype basic</span><br><span class="line">AuthName <span class="string">&quot;login&quot;</span></span><br><span class="line">AuthUserFile /etc/httpd/conf.d/.htpasswd</span><br><span class="line">AuthGroupFile /etc/httpd/conf.d/group                   <span class="comment">#指定组文件对应关系</span></span><br><span class="line">Require group g2                                        <span class="comment">#定义g2组成员可以访问</span></span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>3.重读配置文件测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl reload httpd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># curl -u tom:111111 192.168.73.111</span></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;          <span class="comment">#组1的tom无法访问</span></span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;401 Unauthorized&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Unauthorized&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This server could not verify that you</span><br><span class="line">are authorized to access the document</span><br><span class="line">requested.  Either you supplied the wrong</span><br><span class="line">credentials (e.g., bad password), or your</span><br><span class="line">browser doesn<span class="string">&#x27;t understand how to supply</span></span><br><span class="line"><span class="string">the credentials required.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">[root@localhost ~]# curl -u jack:111111 192.168.73.111</span></span><br><span class="line"><span class="string">this is admin page                                          #组2的jack可以访问</span></span><br></pre></td></tr></table></figure>

<p>其他认证</p>
<p>远程客户端和用户验证的控制</p>
<p>satisfy ALL|ANY</p>
<p>|参数|说明|<br>|all|客户端的IP和用户验证都通过才能访问|<br>|any|客户端的IP和用户验证有一个通过就能访问|</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/httpd/conf.d/test.conf</span></span><br><span class="line">&lt;Directory <span class="string">&quot;/www/html&quot;</span>&gt;</span><br><span class="line">Authtype basic</span><br><span class="line">AuthName <span class="string">&quot;login&quot;</span></span><br><span class="line">AuthUserFile /etc/httpd/conf.d/.htpasswd</span><br><span class="line">Require valid-user</span><br><span class="line">&lt;Requireall&gt;</span><br><span class="line">Require all granted</span><br><span class="line">Require not ip 192.168.73.111</span><br><span class="line">&lt;/Requireall&gt;</span><br><span class="line">satisfy any</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="12-共享家目录"><a href="#12-共享家目录" class="headerlink" title="12.共享家目录"></a>12.共享家目录</h3><p>要共享家目录需要开启模块mod_userdir.so</p>
<p>1.查看模块是否开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># httpd -M | grep userdir</span></span><br><span class="line"> userdir_module (shared)</span><br></pre></td></tr></table></figure>

<p>2.修改与家目录相关的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/httpd/conf.d/userdir.conf</span></span><br><span class="line">&lt;IfModule mod_userdir.c&gt;</span><br><span class="line">    UserDir public_html</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory <span class="string">&quot;/home/masuri/public_html&quot;</span>&gt;</span><br><span class="line">require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>3.创建public_html目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># mkdir /home/masuri/public_html</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># echo &quot;this is masuri&#x27;s home&quot; &gt; /home/masuri/public_html/index.html</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># setfacl -m u:apache:x /home/masuri</span></span><br></pre></td></tr></table></figure>

<p>4.重读配置文件测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># curl -L 192.168.73.111/~masuri</span></span><br><span class="line">this is masuri<span class="string">&#x27;s home</span></span><br></pre></td></tr></table></figure>

<p>安全相关</p>
<p>共享家目录时需要认证登陆，否则谁都能够登陆不够安全</p>
<p>1.在家目录下创建.htaccess文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /home/masuri/public_html/.htaccess</span></span><br><span class="line">AuthType basic</span><br><span class="line">AuthName <span class="string">&quot;login home&quot;</span></span><br><span class="line">AuthUserFile <span class="string">&quot;/home/masuri/public_html/.htpasswd&quot;</span></span><br><span class="line">Require user masuri</span><br><span class="line">~</span><br></pre></td></tr></table></figure>

<p>2.创建可以用于认证的用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># htpasswd -c /home/masuri/public_html/.htpasswd masuri</span></span><br><span class="line">New password:</span><br><span class="line">Re-type new password:</span><br><span class="line">Adding password <span class="keyword">for</span> user masuri</span><br></pre></td></tr></table></figure>

<p>3.修改userdir的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/httpd/conf.d/userdir.conf</span></span><br><span class="line">&lt;Directory <span class="string">&quot;/home/masuri/public_html&quot;</span>&gt;</span><br><span class="line">AllowOverRide authconfig</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>3.重读配置文件测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># curl -L 192.168.73.111/~masuri         #不使用账户名和密码登陆</span></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;401 Unauthorized&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Unauthorized&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This server could not verify that you</span><br><span class="line">are authorized to access the document</span><br><span class="line">requested.  Either you supplied the wrong</span><br><span class="line">credentials (e.g., bad password), or your</span><br><span class="line">browser doesn<span class="string">&#x27;t understand how to supply</span></span><br><span class="line"><span class="string">the credentials required.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@mylinuxops ~]# curl -u masuri:111111 -L 192.168.73.111/~masuri        #使用账户名和密码登陆</span></span><br><span class="line"><span class="string">this is masuri&#x27;</span>s home</span><br></pre></td></tr></table></figure>

<h3 id="13-ServerSignature"><a href="#13-ServerSignature" class="headerlink" title="13.ServerSignature"></a>13.ServerSignature</h3><p>当客户请求的网页不存在时，服务器将产生错误文档，如果打开了ServerSignature选项，错误文档的最后一行将包含服务器的名字、Apache的版本等信息，如果不对为显示这些信息，就可以将这些参数设置为off，设置为Email，将显示ServerAdmin的Email提示</p>
<h3 id="14-status页面"><a href="#14-status页面" class="headerlink" title="14.status页面"></a>14.status页面</h3><p>要查看服务器的状态页面，需要加载mod_status.so模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># httpd -M | grep status</span></span><br><span class="line"> status_module (shared)</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">&lt;Location <span class="string">&quot;/status&quot;</span>&gt;</span><br><span class="line">SetHandler server-status</span><br><span class="line">&lt;/Location&gt;</span><br></pre></td></tr></table></figure>

<p>重启服务访问</p>
<p><img src="httpstatus.png" alt="httpstatus.png"></p>
<p>注意：此页面最好也进行认证登陆</p>
<h3 id="15-httpd的压缩"><a href="#15-httpd的压缩" class="headerlink" title="15.httpd的压缩"></a>15.httpd的压缩</h3><p>网络上的CDN是根据流量来收费的，所以数据需要进行压缩，从而来节省成本</p>
<p>压缩需要mod_deflate模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># httpd -M | grep deflate</span></span><br><span class="line"> deflate_module (shared)</span><br></pre></td></tr></table></figure>

<p>适用场景：<br>(1)节约带宽，额外消耗CPU；同时，可能有些较老浏览器不支持</p>
<p>(2) 压缩适于压缩的资源，例如文本文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LoadModule deflate_module modules/mod_deflate.so</span><br><span class="line">SetOutputFilter DEFLATE SetOutputFilter DEFLATE</span><br><span class="line"><span class="comment"># Restrict compression to these MIME</span></span><br><span class="line">types AddOutputFilterByType DEFLATE text/plain  </span><br><span class="line">AddOutputFilterByType DEFLATE text/html</span><br><span class="line">AddOutputFilterByType DEFLATE application/xhtml+xml</span><br><span class="line">AddOutputFilterByType DEFLATE text/xml</span><br><span class="line">AddOutputFilterByType DEFLATE application/xml</span><br><span class="line">AddOutputFilterByType DEFLATE application/x-javascript</span><br><span class="line">AddOutputFilterByType DEFLATE text/javascript</span><br><span class="line">AddOutputFilterByType DEFLATE text/css</span><br><span class="line">DeflateCompressionLevel 9   <span class="comment">#设定默认压缩级别1-9，9级别最高</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>https及http重定向https</title>
    <url>/2019/04/20/Httpd/https%E5%8F%8A%E9%87%8D%E5%AE%9A%E5%90%91/https%E5%8F%8A%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<p>http在网络上传输时是明文的，很容易被网络上的黑客抓取到敏感信息，由此产生了加密的http称为https(http over ssl)</p>
<p>要使用https服务器端先要去互联网上的CA申请证书，获取证书后对apache服务加以配置就能使用https加密通讯，HTTPS所使用的端口为443</p>
<span id="more"></span>
<p>https的通信过程</p>
<p><img src="https.png" alt="https.png"></p>
<hr>
<h2 id="https的实现"><a href="#https的实现" class="headerlink" title="https的实现"></a>https的实现</h2><p>实验环境</p>
<p>准备主机2台，1台充当CA，1台为https服务器</p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">ip地址</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CA</td>
<td align="left">192.168.73.111</td>
</tr>
<tr>
<td align="left">mylinuxops.com</td>
<td align="left">192.168.73.110</td>
</tr>
</tbody></table>
<h2 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h2><p>1.启用ssl模块</p>
<p>要使用https需要启用ssl模块，系统默认没有启动用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># httpd -M | grep ssl</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># yum install mod_ssl -y</span></span><br></pre></td></tr></table></figure>

<p>2.在CA服务器上为CA创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca ~]<span class="comment"># mkdir /data/ssl</span></span><br><span class="line">[root@ca ~]<span class="comment"># cd /data/ssl</span></span><br></pre></td></tr></table></figure>

<p>3.生成ca的私钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca ssl]<span class="comment"># (umask 066;openssl genrsa 2048 &gt; cakey.pem)</span></span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">.........+++</span><br><span class="line">.+++</span><br><span class="line">e is 65537 (0x10001)</span><br></pre></td></tr></table></figure>

<p>4.ca生成自签名证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca ssl]<span class="comment"># openssl req -new -x509 -key cakey.pem -out cacert.pem -days 3650</span></span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:Beijing</span><br><span class="line">Locality Name (eg, city) [Default City]:Beijing</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:Magedu</span><br><span class="line">Organizational Unit Name (eg, section) []:devops</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:ca.magedu.com</span></span><br><span class="line"><span class="string">Email Address []:</span></span><br></pre></td></tr></table></figure>

<p>5.在CA上为http服务器生成私钥及证书申请</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca ssl]<span class="comment"># openssl req -newkey rsa:1024 -nodes -keyout httpd.key &gt; httpd.csr</span></span><br><span class="line">Generating a 1024 bit RSA private key</span><br><span class="line">...........................++++++</span><br><span class="line">..............................++++++</span><br><span class="line">writing new private key to <span class="string">&#x27;httpd.key&#x27;</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:Beijing</span><br><span class="line">Locality Name (eg, city) [Default City]:Beijing</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:Magedu</span><br><span class="line">Organizational Unit Name (eg, section) []:devops</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:www.mylinuxops.com</span></span><br><span class="line"><span class="string">Email Address []:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please enter the following &#x27;</span>extra<span class="string">&#x27; attributes</span></span><br><span class="line"><span class="string">to be sent with your certificate request</span></span><br><span class="line"><span class="string">A challenge password []:</span></span><br><span class="line"><span class="string">An optional company name []:</span></span><br></pre></td></tr></table></figure>

<p>6.为http服务器签发证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca ssl]<span class="comment"># openssl x509 -req -in httpd.csr -CA cacert.pem -CAkey cakey.pem -set_serial 01 &gt; httpd.crt</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=CN/ST=Beijing/L=Beijing/O=Magedu/OU=devops/CN=www.mylinuxops.com</span><br><span class="line">Getting CA Private Key</span><br></pre></td></tr></table></figure>

<p>7.将http服务器的证书，私钥以及ca的证书传送给http服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca ssl]<span class="comment"># mkdir ssl</span></span><br><span class="line">[root@ca ssl]<span class="comment"># mv cacert.pem ssl</span></span><br><span class="line">[root@ca ssl]<span class="comment"># cp httpd.crt ssl</span></span><br><span class="line">[root@ca ssl]<span class="comment"># cp httpd.key ssl</span></span><br><span class="line"></span><br><span class="line">[root@ca ssl]<span class="comment"># scp -r ssl 192.168.73.110:/etc/httpd/</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.73.110 (192.168.73.110)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:H78OrQs4fEjmzvJWz50ZfCAoneEVPNqdEB2xLho24/A.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:c5:9f:19:c2:3e:63:b0:60:a8:a9:34:46:37:dd:7f:ba.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.73.110<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.73.110&#x27;</span>s password:</span><br><span class="line">cacert.pem                                                                  100% 1330   972.8KB/s   00:00</span><br><span class="line">httpd.crt                                                                   100% 1029   838.1KB/s   00:00</span><br><span class="line">httpd.key                                                                   100%  916     1.5MB/s   00:00</span><br></pre></td></tr></table></figure>

<p>8.配置HTTP服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops httpd]<span class="comment"># vim /etc/httpd/conf.d/ssl.conf</span></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost _default_:443&gt;</span><br><span class="line">    servername www.mylinuxops.com           <span class="comment">#写入servername</span></span><br><span class="line">    documentroot /data/html                 <span class="comment">#站点根路径</span></span><br><span class="line">    &lt;directory /data/html&gt;                  <span class="comment">#授权</span></span><br><span class="line">        require all granted</span><br><span class="line">    &lt;/directory&gt;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    SSLCertificateFile /etc/httpd/ssl/httpd.crt</span><br><span class="line">    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key</span><br><span class="line">    SSLCertificateChainFile /etc/httpd/ssl/cacert.pem</span><br><span class="line">    ...</span><br><span class="line">&lt;/virtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>9.创建站点目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># mkdir /data/html</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># echo &quot;www.mylinuxops.com&quot; &gt; /data/html/index.html</span></span><br></pre></td></tr></table></figure>

<p>10.重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># systemctl restart httpd</span></span><br></pre></td></tr></table></figure>

<p>11.测试</p>
<p>在CA上对http服务器进行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先修改hosts文件，为www.mylinuxops.com做名称解析</span></span><br><span class="line">[root@ca ssl]<span class="comment"># vim /etc/hosts</span></span><br><span class="line"></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.73.110 www.mylinuxops.com</span><br><span class="line"></span><br><span class="line">[root@ca ssl]<span class="comment"># curl --cacert cacert.pem https://www.mylinuxops.com  #带上证书可以访问</span></span><br><span class="line">www.mylinuxops.com</span><br><span class="line">[root@ca ssl]<span class="comment"># curl  https://www.mylinuxops.com     #不带证书报错</span></span><br><span class="line">curl: (60) Peer<span class="string">&#x27;s certificate issuer has been marked as not trusted by the user.</span></span><br><span class="line"><span class="string">More details here: http://curl.haxx.se/docs/sslcerts.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">curl performs SSL certificate verification by default, using a &quot;bundle&quot;</span></span><br><span class="line"><span class="string"> of Certificate Authority (CA) public keys (CA certs). If the default</span></span><br><span class="line"><span class="string"> bundle file isn&#x27;</span>t adequate, you can specify an alternate file</span><br><span class="line"> using the --cacert option.</span><br><span class="line">If this HTTPS server uses a certificate signed by a CA represented <span class="keyword">in</span></span><br><span class="line"> the bundle, the certificate verification probably failed due to a</span><br><span class="line"> problem with the certificate (it might be expired, or the name might</span><br><span class="line"> not match the domain name <span class="keyword">in</span> the URL).</span><br><span class="line">If you<span class="string">&#x27;d like to turn off curl&#x27;</span>s verification of the certificate, use</span><br><span class="line"> the -k (or --insecure) option.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="http重定向"><a href="#http重定向" class="headerlink" title="http重定向"></a>http重定向</h2><p>客户端向服务器端发送一个http请求，服务器端收到http请求后发现客户端请求的地址链接已经发生改变，然后服务器端返回一个301/302的重定向状态码，并把重定向后的地址发送给客户端，客户端取得新的地址后再次使用新的地址访问服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Redirect [status] URL-path URL</span><br><span class="line">status:</span><br><span class="line">    Permanent       <span class="comment">#永久重定向返回状态码301 （表示此URL以后不再使用）</span></span><br><span class="line">    Temp            <span class="comment">#临时重定向放回状态码302</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>将http重定向至https</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/httpd/conf.d/vhost.conf</span></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    servername www.mylinuxops.com</span><br><span class="line">    Documentroot /data/html</span><br><span class="line">    &lt;directory <span class="string">&quot;/data/html&quot;</span>&gt;</span><br><span class="line">        options all</span><br><span class="line">        require all granted</span><br><span class="line">    &lt;/directory&gt;</span><br><span class="line">    redirect temp / https://www.mylinuxops.com/</span><br><span class="line">&lt;/virtualhost&gt;</span><br><span class="line">~</span><br><span class="line">[root@mylinuxops ~]<span class="comment"># systemctl restart httpd</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca ssl]<span class="comment"># curl -kL  http://www.mylinuxops.com</span></span><br><span class="line">www.mylinuxops.com</span><br><span class="line">[root@ca ssl]<span class="comment"># curl   http://www.mylinuxops.com</span></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;302 Found&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Found&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The document has moved &lt;a href=<span class="string">&quot;https://www.mylinuxops.com/&quot;</span>&gt;here&lt;/a&gt;.&lt;/p&gt;               <span class="comment">#服务器返回的跳转的地址</span></span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="HSTS重定向"><a href="#HSTS重定向" class="headerlink" title="HSTS重定向"></a>HSTS重定向</h2><p>当客户端每次重复请求一个已经被重定向的资源时，服务器需要反复的向客户端发送新的地址，这无形中造成了带宽的浪费，于是HSTS就出现了。当服务器端配置支持HSTS后，会给客户端浏览器返回的HTTP首部中携带HSTS字段，浏览器获取到信息后，会将所有的HTTP访问请求在浏览器内部做307跳转，而无需任何网络过程。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/httpd/conf.d/vhost.conf</span></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    servername www.mylinuxops.com</span><br><span class="line">    Documentroot /data/html</span><br><span class="line">    &lt;directory <span class="string">&quot;/data/html&quot;</span>&gt;</span><br><span class="line">        options all</span><br><span class="line">        require all granted</span><br><span class="line">    &lt;/directory&gt;</span><br><span class="line">    <span class="comment">#redirect temp / https://www.mylinuxops.com/</span></span><br><span class="line">    Header always <span class="built_in">set</span> Strict-Transport-Security <span class="string">&quot;max-age=31536000&quot;</span>          <span class="comment">#设定最长保存时间</span></span><br><span class="line">    RewriteEngine on                                                        <span class="comment">#启动引擎</span></span><br><span class="line">    RewriteRule ^(/.*)$ https://%&#123;HTTP_HOST&#125;<span class="variable">$1</span> [redirect=302]               <span class="comment">#定义重定向规则</span></span><br><span class="line">&lt;/virtualhost&gt;</span><br><span class="line">~</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca ssl]<span class="comment"># curl -I http://www.mylinuxops.com</span></span><br><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Date: Mon, 13 May 2019 06:54:57 GMT</span><br><span class="line">Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips</span><br><span class="line">Strict-Transport-Security: max-age=31536000                         <span class="comment">#保存31536000秒</span></span><br><span class="line">Location: https://www.mylinuxops.com/                               <span class="comment">#重定向至https</span></span><br><span class="line">Content-Type: text/html; charset=iso-8859-1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>编译安装LAMP(php-fpm)</title>
    <url>/2019/04/20/Httpd/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85LAMP(php-fpm)/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85LAMP(php-fpm)/</url>
    <content><![CDATA[<h2 id="编译安装LAMP-php-fpm"><a href="#编译安装LAMP-php-fpm" class="headerlink" title="编译安装LAMP(php-fpm)"></a>编译安装LAMP(php-fpm)</h2><p>本节将演示如何以编译的方式实现LAMP(php-fpm)的环境搭建，由于php使用的php-fpm模式所以可以将php和apache服务器分开安装。</p>
<span id="more"></span>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>php主机1台，apache主机1台，MySQL主机1台</p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">系统</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">httpd</td>
<td align="left">centos7</td>
<td align="left">192.168.73.110</td>
</tr>
<tr>
<td align="left">php</td>
<td align="left">centos7</td>
<td align="left">192.168.73.111</td>
</tr>
<tr>
<td align="left">mysql</td>
<td align="left">centos7</td>
<td align="left">192.168.73.112</td>
</tr>
</tbody></table>
<h2 id="一、编译httpd"><a href="#一、编译httpd" class="headerlink" title="一、编译httpd"></a>一、编译httpd</h2><p>安装编译所需的软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># yum install gcc gcc-c++ glibc glibc-devel pcre pcre-devel openssl openssl-devel systemd-devel zlib-devel vim lrzsz tree screen lsof tcpdump wget ntpdate net-tools iotop bc zip unzip nfs-utils expat-devel -y</span></span><br></pre></td></tr></table></figure>

<p>1.解压源码包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># tar xf httpd-2.4.39.tar.bz2</span></span><br><span class="line">[root@httpd ~]<span class="comment"># tar xf apr-util-1.6.1.tar.gz</span></span><br><span class="line">[root@httpd ~]<span class="comment"># tar xf apr-1.7.0.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>2.对apr、apr-util建软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># mv apr-util-1.6.1 httpd-2.4.39/srclib/apr-util</span></span><br><span class="line">[root@httpd ~]<span class="comment"># mv apr-1.7.0 httpd-2.4.39/srclib/apr</span></span><br></pre></td></tr></table></figure>

<p>3.编译httpd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># cd httpd-2.4.39</span></span><br><span class="line">[root@httpd httpd-2.4.39]<span class="comment"># ./configure  --prefix=/app/httpd24  --enable-so  --enable-ssl  --enable-cgi --enable-rewrite  --with-zlib  --with-pcre  --with-included-apr=/root/httpd-2.4.39/srclib/  --enable-modules=most  --enable-mpms-shared=all  --with-mpm=prefork</span></span><br></pre></td></tr></table></figure>

<p>4.安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd httpd-2.4.39]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<p>5.创建apache用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd httpd-2.4.39]<span class="comment"># useradd -r -s /sbin/nologin apache</span></span><br></pre></td></tr></table></figure>

<p>6.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd httpd-2.4.39]<span class="comment"># vim /app/httpd24/conf/httpd.conf</span></span><br><span class="line">User apache</span><br><span class="line">Group apache</span><br></pre></td></tr></table></figure>

<p>7.配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd httpd-2.4.39]<span class="comment"># echo &#x27;PATH=/app/httpd24/bin:$PATH&#x27; &gt; /etc/profile.d/httpd.sh</span></span><br><span class="line">[root@httpd httpd-2.4.39]<span class="comment"># source /etc/profile.d/httpd.sh</span></span><br></pre></td></tr></table></figure>

<p>8.设置开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd httpd-2.4.39]<span class="comment"># echo &quot;/app/httpd24/bin/apachectl start&quot; &gt;&gt; /etc/rc.d/rc.local</span></span><br><span class="line">[root@httpd httpd-2.4.39]<span class="comment"># chmod +x /etc/rc.d/rc.local</span></span><br></pre></td></tr></table></figure>

<h2 id="二、编译安装MySQL"><a href="#二、编译安装MySQL" class="headerlink" title="二、编译安装MySQL"></a>二、编译安装MySQL</h2><p>1.安装编译所需要的软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]<span class="comment"># yum install bison bison-devel zlib-devel libcurl-devel libarchive-devel boostdevel gcc gcc-c++ cmake ncurses-devel gnutls-devel libxml2-devel openssldevel libevent-devel libaio-devel -y</span></span><br></pre></td></tr></table></figure>

<p>2.解压缩源码包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]<span class="comment"># tar xf mariadb-10.2.23.tar.gz -C /data</span></span><br></pre></td></tr></table></figure>

<p>3.编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]<span class="comment"># cd /data/mariadb-10.2.23/</span></span><br><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># cmake . \</span></span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/app/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/data/mysql/ \</span><br><span class="line">-DSYSCONFDIR=/etc/mysql \</span><br><span class="line">-DMYSQL_USER=mysql \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITHOUT_MROONGA_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_DEBUG=0 \</span><br><span class="line">-DWITH_READLINE=1 \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DWITH_ZLIB=system \</span><br><span class="line">-DWITH_LIBWRAP=0 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/data/mysql/mysql.sock \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci</span><br></pre></td></tr></table></figure>

<p>4.安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<p>5.创建用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]<span class="comment"># useradd -r -s /sbin/nologin mysql</span></span><br></pre></td></tr></table></figure>

<p>6.创建数据库目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># mkdir /data/mysql</span></span><br><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># chown -R mysql.mysql /data/mysql</span></span><br><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># chmod 700 /data/mysql</span></span><br></pre></td></tr></table></figure>

<p>7.初始化数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># /app/mysql/scripts/mysql_install_db --user=mysql --datadir=/data/mysql</span></span><br></pre></td></tr></table></figure>

<p>8.复制配置文件并修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># mkdir /etc/mysql</span></span><br><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># cp /app/mysql/support-files/my-huge.cnf /etc/mysql/my.cnf</span></span><br><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># vim /etc/mysql/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">datadir=/data/mysql</span><br></pre></td></tr></table></figure>

<p>9.配置开机启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># cp support-files/mysql.server /etc/init.d/mysqld</span></span><br><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># chmod +x /etc/init.d/mysqld</span></span><br><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># chkconfig --add mysqld</span></span><br></pre></td></tr></table></figure>

<p>10.为MySQL配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql mariadb-10.2.23]<span class="comment"># echo &#x27;PATH=/app/mysql/bin:$PATH&#x27; &gt; /etc/profile.d/mysql.sh</span></span><br><span class="line">[root@mysql mariadb-10.2.23]<span class="comment">#. /etc/profile.d/mysql.sh</span></span><br></pre></td></tr></table></figure>

<h2 id="三、编译安装php-fpm"><a href="#三、编译安装php-fpm" class="headerlink" title="三、编译安装php-fpm"></a>三、编译安装php-fpm</h2><p>安装编译所需软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@php php-7.3.5]<span class="comment"># yum install libxml2-devel -y</span></span><br></pre></td></tr></table></figure>

<p>1.解压php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@php ~]<span class="comment"># tar xf php-7.3.5.tar.bz2</span></span><br></pre></td></tr></table></figure>

<p>2.编译php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@php ~]<span class="comment"># cd php-7.3.5</span></span><br><span class="line">[root@php php-7.3.5]<span class="comment"># ./configure</span></span><br><span class="line">--prefix=/app/php  </span><br><span class="line">--enable-mysqlnd  </span><br><span class="line">--with-mysqli=mysqlnd  </span><br><span class="line">--with-pdo-mysql=mysqlnd  </span><br><span class="line">--with-openssl  </span><br><span class="line">--with-freetype-dir  </span><br><span class="line">--with-jpeg-dir  </span><br><span class="line">--with-png-dir  </span><br><span class="line">--with-zlib  </span><br><span class="line">--with-libxml-dir=/usr  </span><br><span class="line">--with-config-file-path=/etc  </span><br><span class="line">--with-config-file-scan-dir=/etc/php.d  </span><br><span class="line">--enable-mbstring</span><br><span class="line">--enable-xml  </span><br><span class="line">--enable-sockets  </span><br><span class="line">--enable-fpm</span><br><span class="line">--enable-maintainer-zts  </span><br><span class="line">--disable-fileinfo</span><br></pre></td></tr></table></figure>

<p>3.安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@php php-7.3.5]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<p>4.复制配置文件模板并修改时区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@php php-7.3.5]<span class="comment"># cp php.ini-production /etc/php.ini</span></span><br><span class="line">[root@php ~]<span class="comment"># sed -i &#x27;/;date.tim/s@.*@data.timezone = &quot;Asia/Shanghai&quot;@&#x27; /etc/php.ini </span></span><br></pre></td></tr></table></figure>

<p>5.复制服务脚本模板，修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@php php-7.3.5]<span class="comment"># cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span></span><br><span class="line">[root@php php-7.3.5]<span class="comment"># chmod +x /etc/init.d/php-fpm</span></span><br></pre></td></tr></table></figure>

<p>6.复制配置文件模板</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cp /app/php/etc/php-fpm.conf.default /app/php/etc/php-fpm.conf</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp /app/php/etc/php-fpm.d/www.conf.default /app/php/etc/php-fpm.d/www.conf</span></span><br></pre></td></tr></table></figure>

<h3 id="LAMP配置"><a href="#LAMP配置" class="headerlink" title="LAMP配置"></a>LAMP配置</h3><p>1、修改httpd配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@httpd ~]<span class="comment"># sed -i &#x27;/mod_proxy.so/s/#\(.*\)/\1/&#x27; /app/httpd24/conf/httpd.conf</span></span><br><span class="line">[root@httpd ~]<span class="comment"># sed -i &#x27;/fcgi.so/s/#\(.*\)/\1/&#x27; /app/httpd24/conf/httpd.conf</span></span><br><span class="line">[root@httpd ~]<span class="comment"># cat &lt; EOF &gt;&gt; /app/httpd24/conf/httpd.conf</span></span><br><span class="line">&gt; addtype application/x-httpd-php .php</span><br><span class="line">&gt; addtype application/x-httpd-php-source .phps</span><br><span class="line">&gt; ProxyRequests Off</span><br><span class="line">&gt; ProxyPassMatch ^/(.*\.php)$ fcgi://192.168.73.111:9000/data/<span class="built_in">test</span>/<span class="variable">$1</span></span><br><span class="line">&gt; EOF</span><br><span class="line">[root@localhost ~]<span class="comment"># sed -i &#x27;/  DirectoryIndex/s/.*/    DirectoryIndex index.php index.html/p&#x27; /app/httpd24/conf/httpd.conf</span></span><br></pre></td></tr></table></figure>

<p>2.修改php配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sed -i &#x27;/^listen/s/.*/listen = 9000/&#x27; /app/php/etc/php-fpm.d/www.conf</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed -i &#x27;/listen.allow/s/\(.*\)/;\1/&#x27; /app/php/etc/php-fpm.d/www.conf</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>基于UDS的LAMP</title>
    <url>/2019/04/19/Httpd/%E5%9F%BA%E4%BA%8EUDS%E7%9A%84LAMP/%E5%9F%BA%E4%BA%8EUDS%E7%9A%84LAMP/</url>
    <content><![CDATA[<p>本节将演示如何基于UDS(Uninx Domain Socket)来配置LAMP</p>
<h2 id="UDS-Unix-Domain-Socket"><a href="#UDS-Unix-Domain-Socket" class="headerlink" title="UDS(Unix Domain Socket)"></a>UDS(Unix Domain Socket)</h2><p>Unix domain socket 又叫 IPC(inter-process communication 进程间通信) socket，用于实现同一主机上的进程间通信。socket 原本是为网络通讯设计的，但后来在 socket 的框架上发展出一种 IPC 机制，就是 UNIX domain socket。虽然网络 socket 也可用于同一台主机的进程间通讯(通过 loopback 地址 127.0.0.1)，但是 UNIX domain socket 用于 IPC 更有效率：不需要经过网络协议栈，不需要打包拆包、计算校验和、维护序号和应答等，只是将应用层数据从一个进程拷贝到另一个进程。这是因为，IPC 机制本质上是可靠的通讯，而网络协议是为不可靠的通讯设计的。</p>
<p>UNIX domain socket 是全双工的，API 接口语义丰富，相比其它 IPC 机制有明显的优越性，目前已成为使用最广泛的 IPC 机制，比如 X Window 服务器和 GUI 程序之间就是通过 UNIX domain socket 通讯的。</p>
<p>Unix domain socket 是 POSIX 标准中的一个组件，所以不要被名字迷惑，linux 系统也是支持它的。</p>
<span id="more"></span>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>准备2台主机</p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">IP</th>
<th align="left">APP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">192.168.73.110</td>
<td align="left">http php-fpm</td>
</tr>
<tr>
<td align="left">B</td>
<td align="left">192.168.73.111</td>
<td align="left">mariadb</td>
</tr>
</tbody></table>
<h2 id="安装LAMP"><a href="#安装LAMP" class="headerlink" title="安装LAMP"></a>安装LAMP</h2><p>1.在主机A上安装http、php-fpm、php-mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install httpd php-fpm php-mysql -y</span></span><br></pre></td></tr></table></figure>

<p>2.确保proxy_modules.so和fcgi_mod是启用的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># httpd -M | grep proxy</span></span><br><span class="line"> proxy_module (shared)</span><br><span class="line"> proxy_fcgi_module (shared)</span><br></pre></td></tr></table></figure>

<p>3.修改http配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DirectoryIndex index.php index.html</span><br><span class="line">Addtype application/x-httpd-php .php</span><br><span class="line">addtype application/x-httpd-php-source .phps</span><br><span class="line">Proxyrequests off</span><br><span class="line">ProxyPassMatch ^/(.*\.php)$ unix:/var/run/php.sock|fcgi://localhost/data/<span class="built_in">test</span>/<span class="variable">$1</span>   <span class="comment">#当远程主机访问.php结尾的文件时，httpd通过php套接文件转发给本机的php-fpm</span></span><br></pre></td></tr></table></figure>

<p>4.修改php-fpm配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/php-fpm.d/www.conf</span></span><br><span class="line">;listen = 127.0.0.1:9000</span><br><span class="line">listen = /var/run/php.sock  <span class="comment">#由于httpd和php-fpm在同一台主机所以监听在sock接口上</span></span><br><span class="line"></span><br><span class="line">;listen.allowed_clients = 127.0.0.1</span><br><span class="line"></span><br><span class="line">listen.mode = 0666</span><br><span class="line"></span><br><span class="line">user = apache</span><br><span class="line">group = apache</span><br></pre></td></tr></table></figure>

<p>5.启动php-fpm和httpd服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start php-fpm httpd</span></span><br></pre></td></tr></table></figure>

<p>6.创建测试页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /data/test</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /data/test/index.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>7.测试</p>
<p><img src="UDS.png" alt="UDS.png"></p>
<p>8.在B主机上安装MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install mariadb-server -y</span></span><br></pre></td></tr></table></figure>

<p>9.启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start mariadb-server</span></span><br></pre></td></tr></table></figure>

<p>10.创建测试用账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; grant all on *.* to <span class="built_in">test</span>@<span class="string">&#x27;192.168.73.110&#x27;</span> identified by <span class="string">&#x27;111111&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>11.在http服务器上创建测试页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /data/test/index.php</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:host=192.168.73.111;dbname=test&#x27;</span>;</span><br><span class="line"><span class="variable">$username</span>=<span class="string">&#x27;test&#x27;</span>; <span class="variable">$passwd</span>=<span class="string">&#x27;111111&#x27;</span>;</span><br><span class="line"><span class="variable">$dbh</span>=new PDO(<span class="variable">$dsn</span>,<span class="variable">$username</span>,<span class="variable">$passwd</span>);</span><br><span class="line">var_dump(<span class="variable">$dbh</span>);</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>编译安装httpd2.4</title>
    <url>/2019/04/18/Httpd/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85httpd2.4/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85httpd2.4/</url>
    <content><![CDATA[<h2 id="源码编译安装httpd2-4"><a href="#源码编译安装httpd2-4" class="headerlink" title="源码编译安装httpd2.4"></a>源码编译安装httpd2.4</h2><p>由于在CentOS6上默认安装的httpd版本为2.2，并且所使用的apr及apr-util版本也过老，所以在CentOS6上安装httpd时需要对其进行编译安装，以下将演示编译安装httpd，以及使用ansible来编译安装httpd2.4两种方法。</p>
<span id="more"></span>

<h2 id="CentOS-6-10源码编译httpd2-4-39"><a href="#CentOS-6-10源码编译httpd2-4-39" class="headerlink" title="CentOS 6.10源码编译httpd2.4.39"></a>CentOS 6.10源码编译httpd2.4.39</h2><h3 id="编译环境准备"><a href="#编译环境准备" class="headerlink" title="编译环境准备"></a>编译环境准备</h3><table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">系统</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">centos6.10</td>
</tr>
</tbody></table>
<p>编译所需的httpd、apr、apr-util</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apr-1.7.0.tar.gz</span><br><span class="line">apr-util-1.6.1.tar.gz</span><br><span class="line">httpd-2.4.39.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="编译安装httpd2-4"><a href="#编译安装httpd2-4" class="headerlink" title="编译安装httpd2.4"></a>编译安装httpd2.4</h3><p>1.安装编译所需要的软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># yum install gcc gcc-c++ glibc glibc-devel pcre pcre-devel openssl openssl-devel systemd-devel zlib-devel vim lrzsz tree screen lsof tcpdump wget ntpdate net-tools iotop bc zip unzip nfs-utils expat-devel -y</span></span><br></pre></td></tr></table></figure>

<p>2.解压所有压缩包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># tar -xf apr-util-1.6.1.tar.gz</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment"># tar -xf apr-1.7.0.tar.gz</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment"># tar -xf httpd-2.4.39.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>3.将apr及apr-util复制到httpd-2.4.39/srclib目录中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># cp -a apr-1.7.0 httpd-2.4.39/srclib/apr</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment"># cp -a apr-util-1.6.1 httpd-2.4.39/srclib/apr-util</span></span><br></pre></td></tr></table></figure>

<p>4.编译httpd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># cd httpd-2.4.39</span></span><br><span class="line">[root@CentOS6 httpd-2.4.39]<span class="comment"># ./configure  --prefix=/app/httpd24  --enable-so  --enable-ssl  --enable-cgi --enable-rewrite  --with-zlib  --with-pcre  --with-included-apr=/root/httpd-2.4.39/srclib/  --enable-modules=most  --enable-mpms-shared=all  --with-mpm=prefork</span></span><br></pre></td></tr></table></figure>

<p>5.安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 httpd-2.4.39]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<p>6.为httpd创建系统用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># useradd -r -s /sbin/nologin apache</span></span><br></pre></td></tr></table></figure>

<p>7.修改配置文件，将httpd运行的用户和组改为apache</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># vim /app/httpd24/conf/httpd.conf</span></span><br><span class="line">User apache</span><br><span class="line">Group apache</span><br></pre></td></tr></table></figure>

<p>8.配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># echo &quot;PATH=/app/httpd24/bin:$PATH&quot; &gt; /etc/profile.d/httpd24.sh</span></span><br></pre></td></tr></table></figure>

<p>9.设置为开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment"># vim /etc/rc.d/rc.local</span></span><br><span class="line">/app/httpd24/bin/apachectl start</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="ansible-编译安装httpd"><a href="#ansible-编译安装httpd" class="headerlink" title="ansible 编译安装httpd"></a>ansible 编译安装httpd</h2><h3 id="一、创建角色目录结构"><a href="#一、创建角色目录结构" class="headerlink" title="一、创建角色目录结构"></a>一、创建角色目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost data]<span class="comment"># mkdir -pv roles/httpd2.4/&#123;tasks,files,vars,templates,handlers&#125;</span></span><br><span class="line">mkdir: created directory ‘roles’</span><br><span class="line">mkdir: created directory ‘roles/httpd2.4’</span><br><span class="line">mkdir: created directory ‘roles/httpd2.4/tasks’</span><br><span class="line">mkdir: created directory ‘roles/httpd2.4/files’</span><br><span class="line">mkdir: created directory ‘roles/httpd2.4/vars’</span><br><span class="line">mkdir: created directory ‘roles/httpd2.4/templates’</span><br><span class="line">mkdir: created directory ‘roles/httpd2.4/handlers’</span><br></pre></td></tr></table></figure>

<h3 id="二、创建task"><a href="#二、创建task" class="headerlink" title="二、创建task"></a>二、创建task</h3><p>进入tasks目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /data/roles/httpd2.4/tasks/</span></span><br></pre></td></tr></table></figure>

<p>1.为httpserver创建安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim createdir.yaml</span></span><br><span class="line">- name: Create dir</span><br><span class="line">  file: path=/app state=directory</span><br></pre></td></tr></table></figure>

<p>2.解压httpd,apr,apr-util到远程主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim ungzhttpd.yaml</span></span><br><span class="line">- name: ungz httpd24</span><br><span class="line">  unarchive: src=httpd.tar.gz dest=/app copy=yes</span><br><span class="line">- name: ungz apr to srclib</span><br><span class="line">  unarchive: src=apr.tar.gz dest=/app/httpd-2.4.39/srclib copy=yes</span><br><span class="line">- name: ungz apr-util to srclib</span><br><span class="line">  unarchive: src=apr-util.tar.gz dest=/app/httpd-2.4.39/srclib copy=yes</span><br></pre></td></tr></table></figure>

<p>3.对解压后的apr.tar.gz及apr-util.tar.gz做软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim links.yaml</span></span><br><span class="line">- name: link apr-util</span><br><span class="line">  file: src=/app/httpd-2.4.39/srclib/apr-util-1.6.1 dest=/app/httpd-2.4.39/srclib/apr-util state=link</span><br><span class="line">- name: link apr</span><br><span class="line">  file: src=/app/httpd-2.4.39/srclib/apr-1.7.0 dest=/app/httpd-2.4.39/srclib/apr state=link</span><br></pre></td></tr></table></figure>

<p>4.编译httpd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim configure.yaml</span></span><br><span class="line">- name: configer httpd</span><br><span class="line">  shell: /app/httpd-2.4.39/configure  --prefix=/app/httpd24  --enable-so  --enable-ssl  --enable-cgi --enable-rewrite  --with-zlib  --with-pcre  --with-included-apr=/root/httpd-2.4.39/srclib/  --enable-modules=most  --enable-mpms-shared=all  --with-mpm=prefork</span><br></pre></td></tr></table></figure>

<p>5.make</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim make.yaml</span></span><br><span class="line">- name: make</span><br><span class="line">  shell: make</span><br></pre></td></tr></table></figure>

<p>6.make install</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim install.yaml</span></span><br><span class="line">- name: install</span><br><span class="line">  shell: make install</span><br></pre></td></tr></table></figure>

<p>7.设置开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim chkconf.yaml</span></span><br><span class="line">- name: chkconfig</span><br><span class="line">  lineinfile: path=/etc/rc.d/rc.local insertafter=<span class="string">&quot;^touch.*&quot;</span> line=<span class="string">&quot;/app/httpd24/bin/apachectl start&quot;</span></span><br></pre></td></tr></table></figure>

<p>8.添加apache用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim useradd.yaml</span></span><br><span class="line">- name: add user</span><br><span class="line">  user: name=apache  system=yes shell=/sbin/nologin create_home=no</span><br></pre></td></tr></table></figure>

<p>9.调用模板文件生成环境变量及httpd配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim template.yaml</span></span><br><span class="line">- name: httpd config</span><br><span class="line">  template: src=httpd.conf.j2 dest=/app/httpd24/conf/httpd.conf</span><br><span class="line">- name: Path</span><br><span class="line">  template: src=httpd.sh.j2 dest=/etc/profile.d/httpd.sh</span><br></pre></td></tr></table></figure>

<p>10.读取环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim source.yaml</span></span><br><span class="line">- name: <span class="built_in">source</span> path</span><br><span class="line">  shell: <span class="built_in">source</span> /etc/profile.d/httpd.sh</span><br></pre></td></tr></table></figure>

<p>11.启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim service.yaml</span></span><br><span class="line">- name: start service</span><br><span class="line">  shell: apachectl start</span><br></pre></td></tr></table></figure>

<p>12.创建main.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tasks]<span class="comment"># vim main.yaml</span></span><br><span class="line">- include: createdir.yaml</span><br><span class="line">- include: ungzhttpd.yaml</span><br><span class="line">- include: links.yaml</span><br><span class="line">- include: configure.yaml</span><br><span class="line">- include: make.yaml</span><br><span class="line">- include: install.yaml</span><br><span class="line">- include: chkconf.yaml</span><br><span class="line">- include: useradd.yaml</span><br><span class="line">- include: template.yaml</span><br><span class="line">- include: source.yaml</span><br><span class="line">- include: service.yaml</span><br></pre></td></tr></table></figure>

<h3 id="三、创建playbook"><a href="#三、创建playbook" class="headerlink" title="三、创建playbook"></a>三、创建playbook</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost data]<span class="comment"># vim role_httpd.yaml</span></span><br><span class="line">[root@localhost tasks]<span class="comment"># cd /data</span></span><br><span class="line">[root@localhost data]<span class="comment"># vim role_httpd.yaml</span></span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line"></span><br><span class="line">  roles:</span><br><span class="line">    - role: httpd2.4</span><br></pre></td></tr></table></figure>

<h3 id="四、目录结构"><a href="#四、目录结构" class="headerlink" title="四、目录结构"></a>四、目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost data]<span class="comment"># tree /data</span></span><br><span class="line">/data</span><br><span class="line">├── role_httpd.yaml</span><br><span class="line">└── roles</span><br><span class="line">    └── httpd2.4</span><br><span class="line">        ├── files                           <span class="comment">#此目录下存放所有需要解压的包，注意去掉版本号</span></span><br><span class="line">        │   ├── apr.tar.gz</span><br><span class="line">        │   ├── apr-util.tar.gz</span><br><span class="line">        │   └── httpd.tar.gz</span><br><span class="line">        ├── handlers</span><br><span class="line">        ├── tasks</span><br><span class="line">        │   ├── chkconf.yaml</span><br><span class="line">        │   ├── configure.yaml</span><br><span class="line">        │   ├── createdir.yaml</span><br><span class="line">        │   ├── install.yaml</span><br><span class="line">        │   ├── links.yaml</span><br><span class="line">        │   ├── main.yaml</span><br><span class="line">        │   ├── make.yaml</span><br><span class="line">        │   ├── service.yaml</span><br><span class="line">        │   ├── source.yaml</span><br><span class="line">        │   ├── template.yaml</span><br><span class="line">        │   ├── ungzhttpd.yaml</span><br><span class="line">        │   └── useradd.yaml</span><br><span class="line">        ├── templates                       <span class="comment">#此目录下存放配置文件和环境变量的模板文件</span></span><br><span class="line">        │   ├── httpd.conf.j2</span><br><span class="line">        │   └── httpd.sh.j2</span><br><span class="line">        └── vars</span><br></pre></td></tr></table></figure>

<h3 id="五、执行playbook"><a href="#五、执行playbook" class="headerlink" title="五、执行playbook"></a>五、执行playbook</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ansible]<span class="comment"># ansible-playbook role_httpd.yaml</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS服务</title>
    <url>/2019/03/14/Linux%E5%9F%BA%E7%A1%80/DNS%E6%9C%8D%E5%8A%A1/DNS%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h2><p>DNS全称为Domain Name Service 应用层协议，其架构为C/S架构，在tcp和udp的53号端口。</p>
<p>DNS的实现是BIND(Bekerley Internat Name Domain)</p>
<p>DNS的作用是把域名解析为ip地址，在本地的/etc/hosts文件也能做到域名解析的作用，但不方便管理，只适合小型的企业环境和集群的环境中使用。</p>
<span id="more"></span>

<h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>DNS的查询类型分为两种：递归查询和迭代查询</p>
<p>递归查询：当主机去访问网络中的dns服务器时，其查询的类型为递归查询</p>
<p>迭代查询：当网路中的服务器向dns服务查询FQDN时，dns服务器会从先去向根服务器查询，根服务器会传回一个顶级域所在的位置，然后dns服务器再向顶级域进行查询，顶级域再传回一个二级域的地址，dns服务器再去向二级域查询，最后获得所要查询的FQDN对应的主机的ip地址。这个过程为迭代查询</p>
<p>名称服务器：用来解析本域内的名称的主机，全世界共有13组根服务器。</p>
<h3 id="Bind的相关配置文件"><a href="#Bind的相关配置文件" class="headerlink" title="Bind的相关配置文件"></a>Bind的相关配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/named.conf			<span class="comment">#服务器的配置文件</span></span><br><span class="line">/var/named				<span class="comment">#DNS数据库路径</span></span><br><span class="line">/usr/lib/systemd/system/named.service		<span class="comment">#服务文件</span></span><br><span class="line">/var/named/named.ca		<span class="comment">#互联网上13个根DNS服务器地址</span></span><br></pre></td></tr></table></figure>

<p>DNS服务虽然监听在tcp和udp的53号端口，但却依赖于udp的53号端口。</p>
<h3 id="DNS配置文件"><a href="#DNS配置文件" class="headerlink" title="DNS配置文件"></a>DNS配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/named.conf </span></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// named.conf</span><br><span class="line">//</span><br><span class="line">// Provided by Red Hat <span class="built_in">bind</span> package to configure the ISC BIND named(8) DNS</span><br><span class="line">// server as a caching only nameserver (as a localhost DNS resolver only).</span><br><span class="line">//</span><br><span class="line">// See /usr/share/doc/<span class="built_in">bind</span>*/sample/ <span class="keyword">for</span> example named configuration files.</span><br><span class="line">//</span><br><span class="line">// See the BIND Administrator<span class="string">&#x27;s Reference Manual (ARM) for details about the</span></span><br><span class="line"><span class="string">// configuration located in /usr/share/doc/bind-&#123;version&#125;/Bv9ARM.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">options &#123;</span></span><br><span class="line"><span class="string">        listen-on port 53 &#123; localhost; &#125;;           #此行为监听的ip地址，使用any或注释此行表示监听所有ip地址</span></span><br><span class="line"><span class="string">        listen-on-v6 port 53 &#123; ::1; &#125;;</span></span><br><span class="line"><span class="string">        directory       &quot;/var/named&quot;;               #此外数据库文件</span></span><br><span class="line"><span class="string">        dump-file       &quot;/var/named/data/cache_dump.db&quot;;</span></span><br><span class="line"><span class="string">        statistics-file &quot;/var/named/data/named_stats.txt&quot;;</span></span><br><span class="line"><span class="string">        memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;</span></span><br><span class="line"><span class="string">        recursing-file  &quot;/var/named/data/named.recursing&quot;;</span></span><br><span class="line"><span class="string">        secroots-file   &quot;/var/named/data/named.secroots&quot;;</span></span><br><span class="line"><span class="string">        allow-query     &#123; localhost; &#125;;             #此行表示的是允许网络中的哪些主机来进行DNS查询。使用any或注释表示允许所有主机来查询。也可以将其设置成网段，来允许网络中某网段来查询。0.0.0.0/0 格式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /* </span></span><br><span class="line"><span class="string">         - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.</span></span><br><span class="line"><span class="string">         - If you are building a RECURSIVE (caching) DNS server, you need to enable </span></span><br><span class="line"><span class="string">           recursion. </span></span><br><span class="line"><span class="string">         - If your recursive DNS server has a public IP address, you MUST enable access </span></span><br><span class="line"><span class="string">           control to limit queries to your legitimate users. Failing to do so will</span></span><br><span class="line"><span class="string">           cause your server to become part of large scale DNS amplification </span></span><br><span class="line"><span class="string">           attacks. Implementing BCP38 within your network would greatly</span></span><br><span class="line"><span class="string">           reduce such attack surface </span></span><br><span class="line"><span class="string">        */</span></span><br><span class="line"><span class="string">        recursion yes;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        dnssec-enable yes;</span></span><br><span class="line"><span class="string">        dnssec-validation yes;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /* Path to ISC DLV key */</span></span><br><span class="line"><span class="string">        bindkeys-file &quot;/etc/named.iscdlv.key&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        managed-keys-directory &quot;/var/named/dynamic&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        pid-file &quot;/run/named/named.pid&quot;;</span></span><br><span class="line"><span class="string">        session-keyfile &quot;/run/named/session.key&quot;;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">logging &#123;</span></span><br><span class="line"><span class="string">        channel default_debug &#123;</span></span><br><span class="line"><span class="string">                file &quot;data/named.run&quot;;</span></span><br><span class="line"><span class="string">                severity dynamic;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">zone &quot;.&quot; IN &#123;</span></span><br><span class="line"><span class="string">        type hint;</span></span><br><span class="line"><span class="string">        file &quot;named.ca&quot;;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">include &quot;/etc/named.rfc1912.zones&quot;;</span></span><br><span class="line"><span class="string">include &quot;/etc/named.root.key&quot;;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS转发</title>
    <url>/2019/03/14/Linux%E5%9F%BA%E7%A1%80/DNS%E8%BD%AC%E5%8F%91/DNS%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h2 id="DNS转发"><a href="#DNS转发" class="headerlink" title="DNS转发"></a>DNS转发</h2><p>dns转发分为2种，全局转发和特定区域转发。</p>
<p>全局转发是对非本机所负责解析区域的请求，全部转发给指定的服务器。</p>
<p>特定区域转发是仅转发对特定的区域的请求，比全局转发优先级高。</p>
<p>转发分为2种模式：first和only  </p>
<p>first模式：先到本地DNS查找，若本地dns查找不到记录，去其他的dns服务器查找，若其他dns服务器也没有，直接去根服务器查找   </p>
<p>only模式：先到本地DNS查找，若本地dns查找不到记录，去其他的dns服务器查找，若其他dns服务器也没有，直接放弃。</p>
<span id="more"></span>

<hr>
<h3 id="全局转发的only模式"><a href="#全局转发的only模式" class="headerlink" title="全局转发的only模式"></a>全局转发的only模式</h3><p>准备客户机一台，dns服务器两台，将dns1服务器的转发地址者设置为dns2，dns1有两个网卡一个是内网，一个是外网，dns2只有一个连接内网的网卡</p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">ip</th>
</tr>
</thead>
<tbody><tr>
<td align="left">client</td>
<td align="left">192.168.73.120</td>
</tr>
<tr>
<td align="left">dns1</td>
<td align="left">192.168.73.10    172.22.145.220</td>
</tr>
<tr>
<td align="left">dns2</td>
<td align="left">192.168.73.30</td>
</tr>
</tbody></table>
<p>分别在dns1、dns2上配置dns服务  </p>
<p>在dns2上部署配置dns</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns2 ~]<span class="comment"># yum install bind -y</span></span><br><span class="line">[root@dns2 ~]<span class="comment"># vim /etc/named.conf </span></span><br><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;       <span class="comment">#此行注释</span></span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;         <span class="comment">#此行注释</span></span><br></pre></td></tr></table></figure>

<p>dns2启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns2 ~]<span class="comment"># systemctl start named</span></span><br></pre></td></tr></table></figure>

<p>dns1主机上部署dns服务并设置dns转发，转发模式为only</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;           <span class="comment">#注释</span></span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;             <span class="comment">#注释</span></span><br><span class="line">        forward         only;                       <span class="comment">#转发模式设置为only</span></span><br><span class="line">        forwarders      &#123;192.168.73.30;&#125;;           <span class="comment">#转发地址设置为dns2主机</span></span><br><span class="line"></span><br><span class="line">        dnssec-enable no;                           <span class="comment">#设置转发时需要关闭dnssec相关</span></span><br><span class="line"></span><br><span class="line">        dnssec-validation no;                       <span class="comment">#设置转发时需要关闭dnssec相关</span></span><br></pre></td></tr></table></figure>

<p>在client主机上去解析<a href="http://www.baidu.com/">www.baidu.com</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># dig www.baidu.com @192.168.192.10</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-72.el7 &lt;&lt;&gt;&gt; www.baidu.com @192.168.192.10</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; connection timed out; no servers could be reached</span><br></pre></td></tr></table></figure>

<p>转发模式为only的情况下，无法解析到<a href="http://www.baidu.com的地址./">www.baidu.com的地址。</a></p>
<hr>
<h3 id="全局转发的first模式"><a href="#全局转发的first模式" class="headerlink" title="全局转发的first模式"></a>全局转发的first模式</h3><p>将dns1设置为first模式下的转发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns1 ~]<span class="comment"># vim /etc/named.conf </span></span><br><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br><span class="line">        forward         first;                  <span class="comment">#修改为first</span></span><br><span class="line">        forwarders      &#123;192.168.73.30;&#125;;</span><br></pre></td></tr></table></figure>

<p>重读配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@dns1 ~]<span class="comment"># rndc reload</span></span><br><span class="line">server reload successful</span><br></pre></td></tr></table></figure>

<p>在client上进行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># dig www.baidu.com @192.168.73.10</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-72.el7 &lt;&lt;&gt;&gt; www.baidu.com @192.168.73.10</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 44783</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 5, ADDITIONAL: 6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 4096</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;www.baidu.com.			IN	A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">www.baidu.com.		1200	IN	CNAME	www.a.shifen.com.</span></span><br><span class="line"><span class="string">www.a.shifen.com.	300	IN	A	61.135.169.121</span></span><br><span class="line"><span class="string">www.a.shifen.com.	300	IN	A	61.135.169.125</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; AUTHORITY SECTION:</span></span><br><span class="line"><span class="string">a.shifen.com.		1199	IN	NS	ns2.a.shifen.com.</span></span><br><span class="line"><span class="string">a.shifen.com.		1199	IN	NS	ns5.a.shifen.com.</span></span><br><span class="line"><span class="string">a.shifen.com.		1199	IN	NS	ns4.a.shifen.com.</span></span><br><span class="line"><span class="string">a.shifen.com.		1199	IN	NS	ns3.a.shifen.com.</span></span><br><span class="line"><span class="string">a.shifen.com.		1199	IN	NS	ns1.a.shifen.com.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ADDITIONAL SECTION:</span></span><br><span class="line"><span class="string">ns1.a.shifen.com.	1199	IN	A	61.135.165.224</span></span><br><span class="line"><span class="string">ns2.a.shifen.com.	1199	IN	A	220.181.57.142</span></span><br><span class="line"><span class="string">ns3.a.shifen.com.	1199	IN	A	112.80.255.253</span></span><br><span class="line"><span class="string">ns4.a.shifen.com.	1199	IN	A	14.215.177.229</span></span><br><span class="line"><span class="string">ns5.a.shifen.com.	1199	IN	A	180.76.76.95</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 2835 msec</span></span><br><span class="line"><span class="string">;; SERVER: 192.168.73.10#53(192.168.73.10)</span></span><br><span class="line"><span class="string">;; WHEN: Tue Apr 23 23:30:16 CST 2019</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 271</span></span><br></pre></td></tr></table></figure>

<p>此时服务器返回的为dns1从网络上其他dns所解析到的地址</p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Inode Table</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/Inode%E8%A1%A8/inode_table/</url>
    <content><![CDATA[<h1 id="Inode-Table"><a href="#Inode-Table" class="headerlink" title="Inode Table"></a>Inode Table</h1><p>inode表内存储了文件的元数据，包括文件权限、属主属组、文件大小、访问时间、修改时间、元数据变更时间和真正的数据存储位置的指向。</p>
<span id="more"></span>

<p><img src="inode.jpg" alt="inode结构表"></p>
<h3 id="执行cp、rm、mv操做文件在磁盘上的变化"><a href="#执行cp、rm、mv操做文件在磁盘上的变化" class="headerlink" title="执行cp、rm、mv操做文件在磁盘上的变化"></a>执行cp、rm、mv操做文件在磁盘上的变化</h3><p>cp：分配一个空的inode号，在inode表中生成新条目在目录中创建一个目录项，将名称与inode编号关联拷贝数据生成新文件  </p>
<p>rm：链接数递减，释放inode号，把数据块标记为空闲。删除目录项，数据不会马上被删除，当另一个文件使用数据块时将被覆盖  </p>
<p>mv：移动的目标和源在同一文件系统，用新的文件名创建相对应的新目录项，删除旧的文件名，不影响磁盘上的数据位置，若源和目标不在同一文件系统，mv执行效果相当于cp+rm</p>
<h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><p>硬链接就是在同一文件系统内，不同名字，inode号和磁盘数据位置相同的一种文件。当硬链接被创建时文件的链接数+1，当文件被删除时，链接数-1，当链接数为0时，该文件被删除，硬链接不能跨分区。</p>
<p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln filename [linkname]</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># ll passwd</span></span><br><span class="line">-rw-r--r-- 1 root root 2265 Mar  9 13:32 passwd     链接数为1</span><br><span class="line">[root@centos7 data]<span class="comment"># ln passwd passwd1</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ll passwd passwd1</span></span><br><span class="line">-rw-r--r-- 2 root root 2265 Mar  9 13:32 passwd</span><br><span class="line">-rw-r--r-- 2 root root 2265 Mar  9 13:32 passwd1    链接数为2，其余都一样</span><br></pre></td></tr></table></figure>

<h3 id="软链接："><a href="#软链接：" class="headerlink" title="软链接："></a>软链接：</h3><p>软链接是一个链接指向另一个文件，他可以对目录进行链接，也可以跨分区创建，其文件大小为指向的路径字符串的长度，创建或删除不会增加或减少目标文件inode的引用计数。  </p>
<p>命令格式：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s filename [linkname]</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># ln -s ../data/passwd /passwd</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ll passwd /passwd</span></span><br><span class="line">-rw-r--r-- 2 root root 2265 Mar  9 13:32 passwd</span><br><span class="line">lrwxrwxrwx 1 root root    6 Mar  9 19:53 /passwd -&gt; ../data/passwd     </span><br></pre></td></tr></table></figure>

<p>注意：软链接使用相对路径时，是相对于链接文件的相对路径，Linux系统内的软链接都是相对路径，所以在创建软链接时推荐使用相对路径。</p>
<p>软硬链接的区别:</p>
<table>
<thead>
<tr>
<th align="left">区别</th>
<th align="left">软链接</th>
<th align="left">硬链接</th>
</tr>
</thead>
<tbody><tr>
<td align="left">文件</td>
<td align="left">不同的文件</td>
<td align="left">同一个文件</td>
</tr>
<tr>
<td align="left">inode号</td>
<td align="left">不同</td>
<td align="left">相同</td>
</tr>
<tr>
<td align="left">能否跨分区</td>
<td align="left">能</td>
<td align="left">不能</td>
</tr>
<tr>
<td align="left">链接数</td>
<td align="left">不增加</td>
<td align="left">增加</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>LVM逻辑卷和文件系统</title>
    <url>/2019/03/05/Linux%E5%9F%BA%E7%A1%80/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="LVM逻辑卷和文件系统"><a href="#LVM逻辑卷和文件系统" class="headerlink" title="LVM逻辑卷和文件系统"></a>LVM逻辑卷和文件系统</h2><p>逻辑卷的组成是，集成各种空间组合成物理卷，然后集合物理卷组合成一个卷组，然后在卷组上创建逻辑卷。</p>
<p>所以要创建逻辑卷首先需要创建物理卷，然后组合物理卷创建卷组，最后创建可以使用的逻辑卷。</p>
<span id="more"></span>  

<hr>
<h2 id="逻辑卷创建方式"><a href="#逻辑卷创建方式" class="headerlink" title="逻辑卷创建方式"></a>逻辑卷创建方式</h2><p>以下为逻辑卷的创建方式</p>
<h3 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h3><p>1.一个mbr分区的5G空间(sdb1)<br>2.一个gpt分区的5G空间(sdc1)<br>3.一个未分区的磁盘(sdd)  </p>
<h3 id="创建实验环境"><a href="#创建实验环境" class="headerlink" title="创建实验环境"></a>创建实验环境</h3><p>1.建立一个mbr分区的5G空间(sdb1)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># fdisk /dev/sdb</span></span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x8898f839.</span><br><span class="line"><span class="comment">#选择n创建一个5G新分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): </span><br><span class="line">Using default response p</span><br><span class="line">Partition number (1-4, default 1): </span><br><span class="line">First sector (2048-20971519, default 2048): </span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-20971519, default 20971519): +5G</span><br><span class="line">Partition 1 of <span class="built_in">type</span> Linux and of size 5 GiB is <span class="built_in">set</span></span><br><span class="line"><span class="comment">#将标签设置为LVM</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (<span class="built_in">type</span> L to list all codes): 8e</span><br><span class="line">Changed <span class="built_in">type</span> of partition <span class="string">&#x27;Linux&#x27;</span> to <span class="string">&#x27;Linux LVM&#x27;</span></span><br><span class="line"><span class="comment">#查看将要生成的设备</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x8898f839</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048    10487807     5242880   8e  Linux LVM</span><br><span class="line"><span class="comment">#确认无误写入磁盘</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br><span class="line"><span class="comment">#查看是否同步到内存中</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0  200G  0 disk </span><br><span class="line">├─sda1   8:1    0    1G  0 part /boot</span><br><span class="line">├─sda2   8:2    0  100G  0 part /</span><br><span class="line">├─sda3   8:3    0   50G  0 part /data</span><br><span class="line">├─sda4   8:4    0    1K  0 part </span><br><span class="line">└─sda5   8:5    0    2G  0 part [SWAP]</span><br><span class="line">sdb      8:16   0   10G  0 disk </span><br><span class="line">└─sdb1   8:17   0    5G  0 part </span><br><span class="line">sdc      8:32   0   10G  0 disk </span><br><span class="line">sdd      8:48   0   10G  0 disk </span><br><span class="line">sr0     11:0    1   10G  0 rom  </span><br><span class="line"><span class="comment">#mbr分区的5G空间创建完毕</span></span><br></pre></td></tr></table></figure>

<p>2.建立一个gpt分区的5G空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用gdisk创建gpt分区</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># gdisk /dev/sdc</span></span><br><span class="line">GPT fdisk (gdisk) version 0.8.10</span><br><span class="line"></span><br><span class="line">Partition table scan:</span><br><span class="line">  MBR: not present</span><br><span class="line">  BSD: not present</span><br><span class="line">  APM: not present</span><br><span class="line">  GPT: not present</span><br><span class="line"></span><br><span class="line">Creating new GPT entries.</span><br><span class="line"><span class="comment">#创建一个新分区</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition number (1-128, default 1): </span><br><span class="line">First sector (34-20971486, default = 2048) or &#123;+-&#125;size&#123;KMGTP&#125;: </span><br><span class="line">Last sector (2048-20971486, default = 20971486) or &#123;+-&#125;size&#123;KMGTP&#125;: +5G</span><br><span class="line">Current <span class="built_in">type</span> is <span class="string">&#x27;Linux filesystem&#x27;</span></span><br><span class="line"><span class="comment">#调整分区标签为LVM</span></span><br><span class="line">Hex code or GUID (L to show codes, Enter = 8300): 8e00 </span><br><span class="line">Changed <span class="built_in">type</span> of partition to <span class="string">&#x27;Linux LVM&#x27;</span></span><br><span class="line"><span class="comment">#查看下将要创建的分区信息</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line">Disk /dev/sdc: 20971520 sectors, 10.0 GiB</span><br><span class="line">Logical sector size: 512 bytes</span><br><span class="line">Disk identifier (GUID): 56C9AA2B-2D21-45A5-A422-882476BA60A6</span><br><span class="line">Partition table holds up to 128 entries</span><br><span class="line">First usable sector is 34, last usable sector is 20971486</span><br><span class="line">Partitions will be aligned on 2048-sector boundaries</span><br><span class="line">Total free space is 10485693 sectors (5.0 GiB)</span><br><span class="line"></span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1            2048        10487807   5.0 GiB     8E00  Linux LVM</span><br><span class="line"><span class="comment">#将信息写入磁盘</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"></span><br><span class="line">Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING</span><br><span class="line">PARTITIONS!!</span><br><span class="line"></span><br><span class="line">Do you want to proceed? (Y/N): y</span><br><span class="line">OK; writing new GUID partition table (GPT) to /dev/sdc.</span><br><span class="line">The operation has completed successfully.</span><br><span class="line"><span class="comment">#查看设置是否同步入内存</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0  200G  0 disk </span><br><span class="line">├─sda1   8:1    0    1G  0 part /boot</span><br><span class="line">├─sda2   8:2    0  100G  0 part /</span><br><span class="line">├─sda3   8:3    0   50G  0 part /data</span><br><span class="line">├─sda4   8:4    0    1K  0 part </span><br><span class="line">└─sda5   8:5    0    2G  0 part [SWAP]</span><br><span class="line">sdb      8:16   0   10G  0 disk </span><br><span class="line">└─sdb1   8:17   0    5G  0 part </span><br><span class="line">sdc      8:32   0   10G  0 disk </span><br><span class="line">└─sdc1   8:33   0    5G  0 part </span><br><span class="line">sdd      8:48   0   10G  0 disk </span><br><span class="line">sr0     11:0    1   10G  0 rom  </span><br><span class="line"><span class="comment">#gpt分区sd1的5G空间创建完毕</span></span><br></pre></td></tr></table></figure>

<p>3.一个未分区的磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#未分区磁盘sdd已经存在无需创建</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0  200G  0 disk </span><br><span class="line">├─sda1   8:1    0    1G  0 part /boot</span><br><span class="line">├─sda2   8:2    0  100G  0 part /</span><br><span class="line">├─sda3   8:3    0   50G  0 part /data</span><br><span class="line">├─sda4   8:4    0    1K  0 part </span><br><span class="line">└─sda5   8:5    0    2G  0 part [SWAP]</span><br><span class="line">sdb      8:16   0   10G  0 disk </span><br><span class="line">└─sdb1   8:17   0    5G  0 part </span><br><span class="line">sdc      8:32   0   10G  0 disk </span><br><span class="line">└─sdc1   8:33   0    5G  0 part </span><br><span class="line">sdd      8:48   0   10G  0 disk </span><br><span class="line">sr0     11:0    1   10G  0 rom  </span><br></pre></td></tr></table></figure>

<p><em><strong>至此实验环境搭建完毕</strong></em></p>
<hr>
<h3 id="创建LVM"><a href="#创建LVM" class="headerlink" title="创建LVM"></a>创建LVM</h3><ul>
<li>1.创建物理卷（PV）</li>
</ul>
<p>将3块磁盘空间全部转换为物理卷（PV）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># pvcreate /dev/sd&#123;b1,c1,d&#125;</span></span><br><span class="line">  Physical volume <span class="string">&quot;/dev/sdb1&quot;</span> successfully created.</span><br><span class="line">  Physical volume <span class="string">&quot;/dev/sdc1&quot;</span> successfully created.</span><br><span class="line">  Physical volume <span class="string">&quot;/dev/sdd&quot;</span> successfully created.</span><br><span class="line">  [root@centos7 data]<span class="comment"># pvs</span></span><br><span class="line">  PV         VG  Fmt  Attr PSize  PFree </span><br><span class="line">  /dev/sdb1  vg0 lvm2 a--  &lt;5.00g &lt;5.00g</span><br><span class="line">  /dev/sdc1  vg0 lvm2 a--  &lt;5.00g &lt;5.00g</span><br><span class="line">  /dev/sdd       lvm2 ---  10.00g 10.00g</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>2.创建卷组（vg）</li>
</ul>
<p>出于后期增加卷组考虑此处先使用2块磁盘空间组成vg  </p>
<p>将mbr分区的sdb1和gpt分区的sdc1组成卷组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># vgcreate vg0 /dev/sd&#123;b1,c1&#125;</span></span><br><span class="line">  Volume group <span class="string">&quot;vg0&quot;</span> successfully created</span><br><span class="line">[root@centos7 data]<span class="comment"># vgs</span></span><br><span class="line">  VG  <span class="comment">#PV #LV #SN Attr   VSize VFree</span></span><br><span class="line">  vg0   2   0   0 wz--n- 9.99g 9.99g</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>3.创建逻辑卷（lv）</li>
</ul>
<p>1.创建一个6G的逻辑卷,一个3G的逻辑卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># lvcreate -n test1 -L 6G vg0</span></span><br><span class="line">  Logical volume <span class="string">&quot;test1&quot;</span> created.</span><br><span class="line">[root@centos7 data]<span class="comment"># lvcreate -n test2 -L 3G vg0</span></span><br><span class="line">  Logical volume <span class="string">&quot;test2&quot;</span> created.</span><br><span class="line">[root@centos7 data]<span class="comment"># lvs</span></span><br><span class="line">  LV    VG  Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  test1 vg0 -wi-a----- 6.00g                                                    </span><br><span class="line">  test2 vg0 -wi-a----- 3.00g            </span><br></pre></td></tr></table></figure>

<p><em><strong>至此2个逻辑卷已经创建完成。接下来需要在逻辑卷上创建文件系统了</strong></em></p>
<hr>
<h3 id="创建文件系统"><a href="#创建文件系统" class="headerlink" title="创建文件系统"></a>创建文件系统</h3><p>文件系统有很多种类，此处以xfs和ext4为例进行建立  </p>
<h4 id="ext4文件系统"><a href="#ext4文件系统" class="headerlink" title="ext4文件系统"></a>ext4文件系统</h4><p>1.在/dev/vg0/test1上建立ext4</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># mkfs.ext4 -L &#x27;test1&#x27; /dev/vg0/test1</span></span><br><span class="line">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem label=test1</span><br><span class="line">OS <span class="built_in">type</span>: Linux</span><br><span class="line">Block size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Fragment size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">393216 inodes, 1572864 blocks</span><br><span class="line">78643 blocks (5.00%) reserved <span class="keyword">for</span> the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=1610612736</span><br><span class="line">48 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8192 inodes per group</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">	32768, 98304, 163840, 229376, 294912, 819200, 884736</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span>                            </span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (32768 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.将ext4文件系统挂载至/data/test1下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># mkdir test1</span></span><br><span class="line">[root@centos7 data]<span class="comment"># mount /dev/vg0/test1 /data/test1/</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cd /data/test1/</span></span><br><span class="line">[root@centos7 test1]<span class="comment"># ls</span></span><br><span class="line">lost+found</span><br><span class="line">[root@centos7 test1]<span class="comment"># findmnt /data/test1</span></span><br><span class="line">TARGET      SOURCE                FSTYPE OPTIONS</span><br><span class="line">/data/test1 /dev/mapper/vg0-test1 ext4   rw,relatime,data=ordered</span><br></pre></td></tr></table></figure>

<h4 id="xfs文件系统"><a href="#xfs文件系统" class="headerlink" title="xfs文件系统"></a>xfs文件系统</h4><p>1.在/dev/vg0/tset2上建立xfs文件系统。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 test1]<span class="comment"># findmnt /data/test1</span></span><br><span class="line">TARGET      SOURCE                FSTYPE OPTIONS</span><br><span class="line">/data/test1 /dev/mapper/vg0-test1 ext4   rw,relatime,data=ordered</span><br><span class="line">[root@centos7 test1]<span class="comment"># mkfs.xfs -L &quot;test2&quot; /dev/vg0/test2</span></span><br><span class="line">meta-data=/dev/vg0/test2         isize=512    agcount=4, agsize=196608 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0, sparse=0</span><br><span class="line">data     =                       bsize=4096   blocks=786432, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line"><span class="built_in">log</span>      =internal <span class="built_in">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>
<p>2.将文件系统挂载至/data/test2下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 test1]<span class="comment"># mkdir /data/test2</span></span><br><span class="line">[root@centos7 test1]<span class="comment"># mount /dev/vg0/test2 /data/test2</span></span><br><span class="line">[root@centos7 test1]<span class="comment"># findmnt /data/test2</span></span><br><span class="line">TARGET      SOURCE                FSTYPE OPTIONS</span><br><span class="line">/data/test2 /dev/mapper/vg0-test2 xfs    rw,relatime,attr2,inode64,noquota</span><br></pre></td></tr></table></figure>

<p><em><strong>2个文件系统已经创建完毕,由于后续实验需求现在两个磁盘上分别创建几个文件</strong></em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 test1]<span class="comment"># touch file&#123;1..10&#125;</span></span><br><span class="line">[root@centos7 test1]<span class="comment"># ls</span></span><br><span class="line">file1  file10  file2  file3  file4  file5  file6  file7  file8  file9  lost+found</span><br><span class="line">[root@centos7 test1]<span class="comment"># cd ../test2</span></span><br><span class="line">[root@centos7 test2]<span class="comment"># touch file&#123;a..j&#125;</span></span><br><span class="line">[root@centos7 test2]<span class="comment"># ls</span></span><br><span class="line">filea  fileb  filec  filed  filee  filef  fileg  fileh  filei  filej</span><br></pre></td></tr></table></figure>

<h3 id="逻辑卷的容量增加和减少"><a href="#逻辑卷的容量增加和减少" class="headerlink" title="逻辑卷的容量增加和减少"></a>逻辑卷的容量增加和减少</h3><h4 id="一、分别对逻辑卷test1及test2增加1G容量"><a href="#一、分别对逻辑卷test1及test2增加1G容量" class="headerlink" title="一、分别对逻辑卷test1及test2增加1G容量"></a>一、分别对逻辑卷test1及test2增加1G容量</h4><p>1.查看卷组的相关信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 test2]<span class="comment"># vgdisplay</span></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               vg0</span><br><span class="line">  System ID             </span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        2</span><br><span class="line">  Metadata Sequence No  3</span><br><span class="line">  VG Access             <span class="built_in">read</span>/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                2</span><br><span class="line">  Open LV               2</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                2</span><br><span class="line">  Act PV                2</span><br><span class="line">  VG Size               9.99 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              2558</span><br><span class="line">  Alloc PE / Size       2304 / 9.00 GiB</span><br><span class="line">  Free  PE / Size       254 / 1016.00 MiB</span><br><span class="line">  VG UUID               4CadZ4-W3dV-kjNa-leu2-u6jd-YMeq-o54JVU</span><br></pre></td></tr></table></figure>

<p><em><strong>此时卷组中只剩下不足1G容量需要增加物理卷才能满足需求</strong></em>  </p>
<p>2.对vg0增加物理卷，将刚才未加入卷组的sdd加入卷组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 test2]<span class="comment"># vgextend vg0 /dev/sdd</span></span><br><span class="line">  Volume group <span class="string">&quot;vg0&quot;</span> successfully extended</span><br><span class="line"><span class="comment">#查看卷组情况，此时已经有10.99G空闲</span></span><br><span class="line">[root@centos7 test2]<span class="comment"># vgs</span></span><br><span class="line">  VG  <span class="comment">#PV #LV #SN Attr   VSize   VFree  </span></span><br><span class="line">  vg0   3   2   0 wz--n- &lt;19.99g &lt;10.99g</span><br></pre></td></tr></table></figure>

<p>3.对ext文件系统的逻辑卷test1进行扩容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 test2]<span class="comment"># lvextend -r -L +1G /dev/vg0/test1</span></span><br><span class="line">  Size of logical volume vg0/test1 changed from 6.00 GiB (1536 extents) to 7.00 GiB (1792 extents).</span><br><span class="line">  Logical volume vg0/test1 successfully resized.</span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem at /dev/mapper/vg0-test1 is mounted on /data/test1; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 1</span><br><span class="line">The filesystem on /dev/mapper/vg0-test1 is now 1835008 blocks long.</span><br><span class="line"><span class="comment">#查看是否成功</span></span><br><span class="line">[root@centos7 test2]<span class="comment"># lvs</span></span><br><span class="line">  LV    VG  Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  test1 vg0 -wi-ao---- 7.00g                                                    </span><br><span class="line">  test2 vg0 -wi-ao---- 3.00g      </span><br></pre></td></tr></table></figure>

<p>4.对xfs文件系统的逻辑卷test2进行扩容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 test2]<span class="comment"># lvextend -r -L +1G /dev/vg0/test2</span></span><br><span class="line">  Size of logical volume vg0/test2 changed from 3.00 GiB (768 extents) to 4.00 GiB (1024 extents).</span><br><span class="line">  Logical volume vg0/test2 successfully resized.</span><br><span class="line">meta-data=/dev/mapper/vg0-test2  isize=512    agcount=4, agsize=196608 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=786432, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line"><span class="built_in">log</span>      =internal               bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 786432 to 1048576</span><br><span class="line"><span class="comment">#查看是否扩容成空</span></span><br><span class="line">[root@centos7 test2]<span class="comment"># lvs</span></span><br><span class="line">  LV    VG  Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  test1 vg0 -wi-ao---- 7.00g                                                    </span><br><span class="line">  test2 vg0 -wi-ao---- 4.00g    </span><br></pre></td></tr></table></figure>

<p>5.查看文件系统内的文件是否丢失</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 test2]<span class="comment"># cd /data</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ls test1 test2</span></span><br><span class="line">test1:</span><br><span class="line">file1  file10  file2  file3  file4  file5  file6  file7  file8  file9  lost+found</span><br><span class="line"></span><br><span class="line">test2:</span><br><span class="line">filea  fileb  filec  filed  filee  filef  fileg  fileh  filei  filej</span><br></pre></td></tr></table></figure>

<p><em><strong>对逻辑卷做扩容可以在线操作并且不会造成数据丢失的</strong></em></p>
<h4 id="二、对逻辑卷做缩减"><a href="#二、对逻辑卷做缩减" class="headerlink" title="二、对逻辑卷做缩减"></a>二、对逻辑卷做缩减</h4><p>逻辑卷是否能缩减取决于文件系统是否支持，XFS文件系统不支持缩减，所以此处以ext4为例，将逻辑卷test1缩减至4G，<em><strong>对文件系统做缩减需要先对其内的数据做备份防止数据丢失</strong></em>  </p>
<p>1.逻辑卷缩减首先要将设备离线</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># umount /data/test1</span></span><br></pre></td></tr></table></figure>

<p>2.对逻辑卷缩减前首先先要将文件系统的空间缩减</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#缩减文件系统至4G</span></span><br><span class="line">[root@centos7 data]<span class="comment"># resize2fs /dev/vg0/test1 4G</span></span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Please run <span class="string">&#x27;e2fsck -f /dev/vg0/test1&#x27;</span> first.</span><br><span class="line"><span class="comment">#缩减文件前需要先对文件系统做检查，所以此处提示先对文件系统做检查</span></span><br><span class="line">[root@centos7 data]<span class="comment"># e2fsck -f /dev/vg0/test1</span></span><br><span class="line">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class="line">Pass 1: Checking inodes, blocks, and sizes</span><br><span class="line">Pass 2: Checking directory structure</span><br><span class="line">Pass 3: Checking directory connectivity</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">Pass 5: Checking group summary information</span><br><span class="line">test1: 21/458752 files (0.0% non-contiguous), 68479/1835008 blocks</span><br><span class="line">[root@centos7 data]<span class="comment"># resize2fs /dev/vg0/test1 4G</span></span><br><span class="line">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Resizing the filesystem on /dev/vg0/test1 to 1048576 (4k) blocks.</span><br><span class="line">The filesystem on /dev/vg0/test1 is now 1048576 blocks long.</span><br><span class="line"><span class="comment">#缩减成功</span></span><br></pre></td></tr></table></figure>

<p>3.对逻辑卷进行缩减</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># lvreduce -L 4G /dev/vg0/test1 </span></span><br><span class="line">  WARNING: Reducing active logical volume to 4.00 GiB.</span><br><span class="line">  THIS MAY DESTROY YOUR DATA (filesystem etc.)</span><br><span class="line">Do you really want to reduce vg0/test1? [y/n]: y</span><br><span class="line">  Size of logical volume vg0/test1 changed from 7.00 GiB (1792 extents) to 4.00 GiB (1024 extents).</span><br><span class="line">  Logical volume vg0/test1 successfully resized.</span><br><span class="line"><span class="comment">#逻辑卷缩减成功</span></span><br></pre></td></tr></table></figure>

<p>4.挂载文件系统，查看内部数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># mount /dev/vg0/test1 /data/test1</span></span><br><span class="line">[root@centos7 data]<span class="comment"># findmnt /data/test1</span></span><br><span class="line">TARGET      SOURCE                FSTYPE OPTIONS</span><br><span class="line">/data/test1 /dev/mapper/vg0-test1 ext4   rw,relatime,data=ordered</span><br><span class="line">[root@centos7 data]<span class="comment"># cd test1</span></span><br><span class="line">[root@centos7 test1]<span class="comment"># ls</span></span><br><span class="line">file1  file10  file2  file3  file4  file5  file6  file7  file8  file9  lost+found</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础命令</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h2><span id="more"></span>

<h3 id="1-alias-命令别名"><a href="#1-alias-命令别名" class="headerlink" title="1. alias 命令别名"></a>1. alias 命令别名</h3><p>命令格式：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> [-p] [name[=value] ...]</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># alias cdnet=&#x27;cd /etc/sysconfig/network-scripts/&#x27;</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cdnet</span></span><br><span class="line">[root@centos7 network-scripts]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>注意：alias命令所定义的别名只在当先shell环境内有效，退出后就会自动失效，若要使别名永久有效需要将其写入用户家目录下的.bashrc或者/etc/bashrc（此文件对全局有效不推荐）文件中。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim .bashrc </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> cp=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> mv=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> cdnet=<span class="string">&#x27;cd /etc/sysconfig/network-scripts/&#x27;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">        . /etc/bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>注意：取消别名方法unalias COMMAND</p>
<h3 id="2-bc-计算器"><a href="#2-bc-计算器" class="headerlink" title="2. bc 计算器"></a>2. bc 计算器</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bc [ -hlwsqv ] [long-options] [  file ... ]</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># bc</span></span><br><span class="line">bc 1.06.95</span><br><span class="line">Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.</span><br><span class="line">This is free software with ABSOLUTELY NO WARRANTY.</span><br><span class="line">For details <span class="built_in">type</span> `warranty<span class="string">&#x27;. </span></span><br><span class="line"><span class="string">1+2                 输入需要计算的数字</span></span><br><span class="line"><span class="string">3                   显示结果</span></span><br><span class="line"><span class="string">obase=2             输出2进制，做2进制转换</span></span><br><span class="line"><span class="string">10                  </span></span><br><span class="line"><span class="string">1010                </span></span><br><span class="line"><span class="string">obase=16            输出16进制</span></span><br><span class="line"><span class="string">ibase=10            输入10进制</span></span><br><span class="line"><span class="string">16</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">^C                  ctrl+c退出bc计算器</span></span><br><span class="line"><span class="string">(interrupt) Exiting bc.</span></span><br></pre></td></tr></table></figure>

<h3 id="3-cal-显示当前月份"><a href="#3-cal-显示当前月份" class="headerlink" title="3. cal 显示当前月份"></a>3. cal 显示当前月份</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cal [options] [[[day] month] year</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cal           不带参数显示当前月</span></span><br><span class="line">     March 2019     </span><br><span class="line">Su Mo Tu We Th Fr Sa</span><br><span class="line">                1  2</span><br><span class="line"> 3  4  5  6  7  8  9</span><br><span class="line">10 11 12 13 14 15 16</span><br><span class="line">17 18 19 20 21 22 23</span><br><span class="line">24 25 26 27 28 29 30</span><br><span class="line">31</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># cal 2019       带年份显示全年月份</span></span><br><span class="line">                               2019                               </span><br><span class="line"></span><br><span class="line">       January               February                 March       </span><br><span class="line">Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa</span><br><span class="line">       1  2  3  4  5                   1  2                   1  2</span><br><span class="line"> 6  7  8  9 10 11 12    3  4  5  6  7  8  9    3  4  5  6  7  8  9</span><br><span class="line">13 14 15 16 17 18 19   10 11 12 13 14 15 16   10 11 12 13 14 15 16</span><br><span class="line">20 21 22 23 24 25 26   17 18 19 20 21 22 23   17 18 19 20 21 22 23</span><br><span class="line">27 28 29 30 31         24 25 26 27 28         24 25 26 27 28 29 30</span><br><span class="line">                                              31</span><br><span class="line">        April                   May                   June        </span><br><span class="line">Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa</span><br><span class="line">    1  2  3  4  5  6             1  2  3  4                      1</span><br><span class="line"> 7  8  9 10 11 12 13    5  6  7  8  9 10 11    2  3  4  5  6  7  8</span><br><span class="line">14 15 16 17 18 19 20   12 13 14 15 16 17 18    9 10 11 12 13 14 15</span><br><span class="line">21 22 23 24 25 26 27   19 20 21 22 23 24 25   16 17 18 19 20 21 22</span><br><span class="line">28 29 30               26 27 28 29 30 31      23 24 25 26 27 28 29</span><br><span class="line">                                              30</span><br><span class="line">        July                  August                September     </span><br><span class="line">Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa</span><br><span class="line">    1  2  3  4  5  6                1  2  3    1  2  3  4  5  6  7</span><br><span class="line"> 7  8  9 10 11 12 13    4  5  6  7  8  9 10    8  9 10 11 12 13 14</span><br><span class="line">14 15 16 17 18 19 20   11 12 13 14 15 16 17   15 16 17 18 19 20 21</span><br><span class="line">21 22 23 24 25 26 27   18 19 20 21 22 23 24   22 23 24 25 26 27 28</span><br><span class="line">28 29 30 31            25 26 27 28 29 30 31   29 30</span><br><span class="line"></span><br><span class="line">       October               November               December      </span><br><span class="line">Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa</span><br><span class="line">       1  2  3  4  5                   1  2    1  2  3  4  5  6  7</span><br><span class="line"> 6  7  8  9 10 11 12    3  4  5  6  7  8  9    8  9 10 11 12 13 14</span><br><span class="line">13 14 15 16 17 18 19   10 11 12 13 14 15 16   15 16 17 18 19 20 21</span><br><span class="line">20 21 22 23 24 25 26   17 18 19 20 21 22 23   22 23 24 25 26 27 28</span><br><span class="line">27 28 29 30 31         24 25 26 27 28 29 30   29 30 31</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># cal 5 2019        显示指定年月</span></span><br><span class="line">      May 2019      </span><br><span class="line">Su Mo Tu We Th Fr Sa</span><br><span class="line">          1  2  3  4</span><br><span class="line"> 5  6  7  8  9 10 11</span><br><span class="line">12 13 14 15 16 17 18</span><br><span class="line">19 20 21 22 23 24 25</span><br><span class="line">26 27 28 29 30 31</span><br></pre></td></tr></table></figure>

<h3 id="4-clock-显示硬件时间同hwclock"><a href="#4-clock-显示硬件时间同hwclock" class="headerlink" title="4. clock 显示硬件时间同hwclock"></a>4. clock 显示硬件时间同hwclock</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hwclock [<span class="keyword">function</span>] [option...]  </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-s</td>
<td align="left">以硬件时间为准修改系统时间</td>
</tr>
<tr>
<td align="left">-w</td>
<td align="left">以系统时间为准修改硬件时间</td>
</tr>
</tbody></table>
<p>示例：  </p>
<p>以硬件时间为准修改系统时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># date</span></span><br><span class="line">Tue Mar  5 14:30:30 CST 2019</span><br><span class="line">[root@centos7 ~]<span class="comment"># clock</span></span><br><span class="line">Fri 08 Mar 2019 02:33:42 PM CST  -0.758330 seconds</span><br><span class="line">[root@centos7 ~]<span class="comment"># clock -s</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># date</span></span><br><span class="line">Fri Mar  8 14:34:04 CST 2019</span><br></pre></td></tr></table></figure>

<p>以系统时间为准修改硬件时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># date &quot;030212102019.20&quot;</span></span><br><span class="line">Sat Mar  2 12:10:20 CST 2019</span><br><span class="line">[root@centos7 ~]<span class="comment"># clock -w</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># clock</span></span><br><span class="line">Sat 02 Mar 2019 12:10:55 PM CST  -0.678871 seconds</span><br></pre></td></tr></table></figure>

<h3 id="5-date-系统时间"><a href="#5-date-系统时间" class="headerlink" title="5. date 系统时间"></a>5. date 系统时间</h3><p>命令格式：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date [OPTION]... [+FORMAT]</span><br><span class="line">date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-d</td>
<td align="left">显示指定的日期</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">设置系统时间</td>
</tr>
<tr>
<td align="left">%F</td>
<td align="left">显示格式为 年-月-日</td>
</tr>
<tr>
<td align="left">%T</td>
<td align="left">显示格式为 小时:分钟:秒</td>
</tr>
<tr>
<td align="left">%H</td>
<td align="left">显示小时0-24</td>
</tr>
<tr>
<td align="left">%M</td>
<td align="left">显示分钟0-60</td>
</tr>
<tr>
<td align="left">%S</td>
<td align="left">显示秒0-60</td>
</tr>
<tr>
<td align="left">%m</td>
<td align="left">显示月份1-12</td>
</tr>
<tr>
<td align="left">%y</td>
<td align="left">显示两位年份</td>
</tr>
<tr>
<td align="left">%Y</td>
<td align="left">显示四位年份</td>
</tr>
<tr>
<td align="left">%D</td>
<td align="left">显示时间为 日/月/年</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">显示从1970年1月1日至今的秒数</td>
</tr>
</tbody></table>
<p>示例：    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># date +&quot;%Y-%m-%d %H:%M:%S&quot;     分别用参数显示</span></span><br><span class="line">2019-03-02 12:41:58</span><br><span class="line">[root@centos7 ~]<span class="comment"># date +&quot;%F %T&quot;                 用%F和%T显示</span></span><br><span class="line">2019-03-02 12:44:11</span><br><span class="line">[root@centos7 ~]<span class="comment"># date -s &quot;2019-03-08 15:19:20&quot;</span></span><br><span class="line">Fri Mar  8 15:19:20 CST 2019</span><br></pre></td></tr></table></figure>

<h3 id="6-cat-查看文本文件内容"><a href="#6-cat-查看文本文件内容" class="headerlink" title="6. cat 查看文本文件内容"></a>6. cat 查看文本文件内容</h3><p>命令格式：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat /etc/issue</span></span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line">on  \l</span><br><span class="line">hostname is \n</span><br><span class="line">time9 is \t</span><br></pre></td></tr></table></figure>

<h3 id="7-enable-启用和禁用内部命令"><a href="#7-enable-启用和禁用内部命令" class="headerlink" title="7. enable 启用和禁用内部命令"></a>7. enable 启用和禁用内部命令</h3><p>命令格式： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span> [-a] [-dnps] [-f filename] [name ...]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-n command</td>
<td align="left">禁用内部命令</td>
</tr>
<tr>
<td align="left">command</td>
<td align="left">启用内部命令</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">查看所有禁用命令</td>
</tr>
</tbody></table>
<p>示例：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># enable -n type        禁用type</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># type ytpe             type命令已经无法使用</span></span><br><span class="line">bash: <span class="built_in">type</span>: <span class="built_in">command</span> not found...</span><br><span class="line">[root@centos7 ~]<span class="comment"># enable -n             查看被禁用的命令</span></span><br><span class="line"><span class="built_in">enable</span> -n <span class="built_in">type</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># enable type           启用type</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># type type</span></span><br><span class="line"><span class="built_in">type</span> is a shell <span class="built_in">builtin</span></span><br></pre></td></tr></table></figure>

<h3 id="8-echo-回显命令"><a href="#8-echo-回显命令" class="headerlink" title="8. echo 回显命令"></a>8. echo 回显命令</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> [SHORT-OPTION]... [STRING]...</span><br><span class="line"><span class="built_in">echo</span> LONG-OPTION</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-n</td>
<td align="left">不自动换行</td>
</tr>
<tr>
<td align="left">-e</td>
<td align="left">对字符进行转义</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo -n &quot;hello world&quot;         回显后不换行</span></span><br><span class="line">hello world[root@centos7 ~]<span class="comment"># </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># echo -e &quot;hello\tworld&quot;        将\t进行转义</span></span><br><span class="line">hello	world</span><br></pre></td></tr></table></figure>

<h3 id="9-hash-显示hash缓存"><a href="#9-hash-显示hash缓存" class="headerlink" title="9. hash 显示hash缓存"></a>9. hash 显示hash缓存</h3><p>命令格式： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span> [-lr] [-p filename] [-dt] [name]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">–l</td>
<td align="left">显示hash缓存，可作为输入使用</td>
</tr>
<tr>
<td align="left">–p path name</td>
<td align="left">将命令全路径path起别名为name</td>
</tr>
<tr>
<td align="left">–t name</td>
<td align="left">打印缓存中name的路径</td>
</tr>
<tr>
<td align="left">–d name</td>
<td align="left">清除name缓存</td>
</tr>
<tr>
<td align="left">–r</td>
<td align="left">清除缓存</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># hash -l                       显示hash缓存</span></span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/bin/cat cat</span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/bin/date date</span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/bin/man man</span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">hash</span> -p /usr/bin/<span class="built_in">cd</span> <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># hash -p /usr/bin/cd cd1       将cd1定义成cd的别名</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cd1 /</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cd /boot</span></span><br><span class="line">[root@centos7 boot]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line">[root@centos7 boot]<span class="comment"># hash -t cd                 打印哈希表中的cd路径</span></span><br><span class="line">/usr/bin/<span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line">[root@centos7 boot]<span class="comment"># hash                       </span></span><br><span class="line">hits	<span class="built_in">command</span></span><br><span class="line">   2	/usr/bin/cat</span><br><span class="line">  10	/usr/bin/date</span><br><span class="line">   4	/usr/bin/man</span><br><span class="line">   1	/usr/bin/<span class="built_in">cd</span></span><br><span class="line">   3	/usr/bin/ls</span><br><span class="line">   2	/usr/bin/<span class="built_in">cd</span></span><br><span class="line">[root@centos7 boot]<span class="comment"># hash -d ls                 删除哈希表中的ls命令</span></span><br><span class="line">[root@centos7 boot]<span class="comment"># hash</span></span><br><span class="line">hits	<span class="built_in">command</span></span><br><span class="line">   2	/usr/bin/cat</span><br><span class="line">  10	/usr/bin/date</span><br><span class="line">   4	/usr/bin/man</span><br><span class="line">   1	/usr/bin/<span class="built_in">cd</span></span><br><span class="line">   2	/usr/bin/<span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line">[root@centos7 boot]<span class="comment"># hash -r                    清空哈希表</span></span><br><span class="line">[root@centos7 boot]<span class="comment"># hash</span></span><br><span class="line"><span class="built_in">hash</span>: <span class="built_in">hash</span> table empty</span><br></pre></td></tr></table></figure>

<p>注意：系统初始hash表为空，当外部命令执行时，默认会从PATH路径下寻找该命令，找到后会将这条命令的路径记录到hash表中，当再次使用该命令时，shell解释器首先会查看hash表，存在将执行之，如果不存在，将会去PATH路径下寻找，利用hash缓存表可大大提高命令的调用速率</p>
<h3 id="10-hostname-显示当前主机名"><a href="#10-hostname-显示当前主机名" class="headerlink" title="10. hostname 显示当前主机名"></a>10. hostname 显示当前主机名</h3><p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 boot]<span class="comment"># hostname</span></span><br><span class="line">centos7.localdomain</span><br></pre></td></tr></table></figure>

<h3 id="11-id-显示用户id号"><a href="#11-id-显示用户id号" class="headerlink" title="11. id 显示用户id号"></a>11. id 显示用户id号</h3><p>命令格式：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">id [OPTION]... [USER]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-u</td>
<td align="left">显示用户uid</td>
</tr>
<tr>
<td align="left">-g</td>
<td align="left">显示用户gid</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># id -u root            显示用户id</span></span><br><span class="line">0</span><br><span class="line">[root@centos7 ~]<span class="comment"># id -g root            显示用用户组id</span></span><br><span class="line">0</span><br><span class="line">[root@centos7 ~]<span class="comment"># id root               显示用户所有id号信息</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="12-ifconfig-查看网络信息"><a href="#12-ifconfig-查看网络信息" class="headerlink" title="12. ifconfig 查看网络信息"></a>12. ifconfig 查看网络信息</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig [-v] [-a] [-s] [interface]</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ifconfig ens33    </span></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.172.133  netmask 255.255.255.0  broadcast 192.168.172.255</span><br><span class="line">        inet6 fe80::e15f:40c5:2115:bc3c  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:63:21:a6  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 7540  bytes 619380 (604.8 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 4780  bytes 647319 (632.1 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

<h3 id="13-shutdown-关机"><a href="#13-shutdown-关机" class="headerlink" title="13. shutdown 关机"></a>13. shutdown 关机</h3><p>命令格式：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown [OPTIONS...] [TIME] [WALL...]</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>关机、重启、断电</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-H</td>
<td align="left">断电</td>
</tr>
<tr>
<td align="left">-P</td>
<td align="left">关机</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">重启</td>
</tr>
<tr>
<td align="left">-K</td>
<td align="left">不关机、重启、或断电仅发送消息</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">取消</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># shutdown -H 5 &quot;5分钟后断电&quot;</span></span><br><span class="line">Shutdown scheduled <span class="keyword">for</span> Sat 2019-03-09 20:15:21 CST, use <span class="string">&#x27;shutdown -c&#x27;</span> to cancel.</span><br><span class="line">[root@centos7 data]<span class="comment">#</span></span><br><span class="line">Broadcast message from root@centos7.localdomain (Sat 2019-03-09 20:10:21 CST):</span><br><span class="line"></span><br><span class="line">5分钟后断电</span><br><span class="line">The system is going down <span class="keyword">for</span> system halt at Sat 2019-03-09 20:15:21 CST!</span><br><span class="line"></span><br><span class="line">[root@centos7 data]<span class="comment"># shutdown -c</span></span><br><span class="line">[root@centos7 data]<span class="comment">#</span></span><br><span class="line">Broadcast message from root@centos7.localdomain (Sat 2019-03-09 20:10:55 CST):</span><br><span class="line"></span><br><span class="line">The system shutdown has been cancelled at Sat 2019-03-09 20:11:55 CST!</span><br></pre></td></tr></table></figure>

<h3 id="14-screen"><a href="#14-screen" class="headerlink" title="14. screen"></a>14. screen</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen [ -options ] [ cmd [ args ] ]</span><br><span class="line">screen -r [[pid.]tty[.host]]</span><br><span class="line">screen -r sessionowner/[[pid.]tty[.host]]</span><br></pre></td></tr></table></figure>

<p>说明：  </p>
<p>开启一个终端</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-S</td>
<td align="left">创建一个会话</td>
</tr>
<tr>
<td align="left">-X</td>
<td align="left">加入会话</td>
</tr>
<tr>
<td align="left">-ls</td>
<td align="left">查看当前开启的会话</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">返回暂离的会话</td>
</tr>
</tbody></table>
<p>示例：  </p>
<p>创建一个help的会话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># screen -S help</span></span><br></pre></td></tr></table></figure>

<p>显示已创建的会话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># screen -ls</span></span><br><span class="line">There is a screen on:</span><br><span class="line">        55725.help      (Attached)</span><br><span class="line">1 Socket <span class="keyword">in</span> /var/run/screen/S-root.</span><br></pre></td></tr></table></figure>

<p>暂离会话  </p>
<p>按ctrl+a,d</p>
<p>返回help会话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># screen -r help</span></span><br></pre></td></tr></table></figure>

<h3 id="15-timedatectl-时区设置"><a href="#15-timedatectl-时区设置" class="headerlink" title="15. timedatectl 时区设置"></a>15. timedatectl 时区设置</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl [OPTIONS...] &#123;COMMAND&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>查看设置修改时区</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">status</td>
<td align="left">状态</td>
</tr>
<tr>
<td align="left">set-timezone</td>
<td align="left">设置时区</td>
</tr>
<tr>
<td align="left">list-timezone</td>
<td align="left">显示所有时区</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>显示时区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># timedatectl status</span></span><br><span class="line">      Local time: Sat 2019-03-09 21:10:04 CST</span><br><span class="line">  Universal time: Sat 2019-03-09 13:10:04 UTC</span><br><span class="line">        RTC time: Sun 2019-03-03 10:37:44</span><br><span class="line">       Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">     NTP enabled: no</span><br><span class="line">NTP synchronized: no</span><br><span class="line"> RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: no</span><br><span class="line">      DST active: n/a</span><br></pre></td></tr></table></figure>

<p>显示所有时区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># timedatectl list-timezones </span></span><br><span class="line">Africa/Abidjan</span><br><span class="line">Africa/Accra</span><br><span class="line">Africa/Addis_Ababa</span><br><span class="line">Africa/Algiers</span><br><span class="line">Africa/Asmara</span><br><span class="line">Africa/Bamako</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>设置时区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># timedatectl set-timezone Africa/Abidjan</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># timedatectl status </span></span><br><span class="line">      Local time: Sat 2019-03-09 13:13:53 GMT</span><br><span class="line">  Universal time: Sat 2019-03-09 13:13:53 UTC</span><br><span class="line">        RTC time: Sun 2019-03-03 10:41:33</span><br><span class="line">       Time zone: Africa/Abidjan (GMT, +0000)</span><br><span class="line">     NTP enabled: no</span><br><span class="line">NTP synchronized: no</span><br><span class="line"> RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: no</span><br><span class="line">      DST active: n/a</span><br></pre></td></tr></table></figure>

<h3 id="16-touch-创建空文件"><a href="#16-touch-创建空文件" class="headerlink" title="16. touch 创建空文件"></a>16. touch 创建空文件</h3><p>命令格式：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch [OPTION]... FILE...</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>创建空文件</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-a</td>
<td align="left">仅改变atime和ctime</td>
</tr>
<tr>
<td align="left">-m</td>
<td align="left">仅改变mtime和ctime</td>
</tr>
<tr>
<td align="left">-t [[CC]YY]MMDDhhmm[.ss]</td>
<td align="left">指定atime和mtime的时间戳</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">如果文件不存在，则不予创建</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>改变atime和ctime</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># stat passwd</span></span><br><span class="line">  File: ‘passwd’</span><br><span class="line">  Size: 2265      	Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: 803h/2051d	Inode: 1051        Links: 2</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2019-03-09 05:32:01.845537779 +0000</span><br><span class="line">Modify: 2019-03-09 05:32:01.845537779 +0000</span><br><span class="line">Change: 2019-03-09 11:43:48.513061240 +0000</span><br><span class="line"> Birth: -</span><br><span class="line">[root@centos7 data]<span class="comment"># touch -a passwd</span></span><br><span class="line">[root@centos7 data]<span class="comment"># stat passwd</span></span><br><span class="line">  File: ‘passwd’</span><br><span class="line">  Size: 2265      	Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: 803h/2051d	Inode: 1051        Links: 2</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2019-03-09 13:34:38.486974628 +0000</span><br><span class="line">Modify: 2019-03-09 05:32:01.845537779 +0000</span><br><span class="line">Change: 2019-03-09 13:34:38.486974628 +0000</span><br><span class="line"> Birth: -</span><br></pre></td></tr></table></figure>

<p>改变mtime和ctime</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># touch -m passwd</span></span><br><span class="line">[root@centos7 data]<span class="comment"># stat passwd</span></span><br><span class="line">  File: ‘passwd’</span><br><span class="line">  Size: 2265      	Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: 803h/2051d	Inode: 1051        Links: 2</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2019-03-09 13:34:38.486974628 +0000</span><br><span class="line">Modify: 2019-03-09 13:37:00.490969902 +0000</span><br><span class="line">Change: 2019-03-09 13:37:00.490969902 +0000</span><br><span class="line"> Birth: -</span><br></pre></td></tr></table></figure>

<p>修改atime和mtime</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># stat passwd</span></span><br><span class="line">  File: ‘passwd’</span><br><span class="line">  Size: 2265      	Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: 803h/2051d	Inode: 1051        Links: 2</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2019-01-01 10:10:00.000000000 +0000</span><br><span class="line">Modify: 2019-01-01 10:10:00.000000000 +0000</span><br><span class="line">Change: 2019-03-09 13:38:54.820966097 +0000</span><br><span class="line"> Birth: -</span><br></pre></td></tr></table></figure>

<h3 id="17-type"><a href="#17-type" class="headerlink" title="17.type"></a>17.type</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> COMMAND</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>查看命令是内部或外部命令</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># type man</span></span><br><span class="line">man is hashed (/usr/bin/man)</span><br><span class="line">[root@centos7 data]<span class="comment"># type type</span></span><br><span class="line"><span class="built_in">type</span> is a shell <span class="built_in">builtin</span></span><br></pre></td></tr></table></figure>

<h3 id="18-tty"><a href="#18-tty" class="headerlink" title="18.tty"></a>18.tty</h3><p>命令格式：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tty [OPTION]...</span><br></pre></td></tr></table></figure>

<p>打印当前终端名称</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># tty</span></span><br><span class="line">/dev/pts/1</span><br></pre></td></tr></table></figure>

<h3 id="19-uname"><a href="#19-uname" class="headerlink" title="19.uname"></a>19.uname</h3><p>命令格式： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname [OPTION]...</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>显示系统信息</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>显示所有信息</td>
</tr>
<tr>
<td>-r</td>
<td>显示内核信息</td>
</tr>
<tr>
<td></td>
<td>显示所有信息</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># uname -a</span></span><br><span class="line">Linux centos7.localdomain 3.10.0-957.el7.x86_64 <span class="comment">#1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@centos7 data]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-957.el7.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="20-who"><a href="#20-who" class="headerlink" title="20.who"></a>20.who</h3><p>命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">who [OPTION]... [ FILE | ARG1 ARG2 ]</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>查看有哪些用户登录  </p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># who</span></span><br><span class="line">root     tty1         2019-03-08 05:08</span><br><span class="line">root     pts/0        2019-03-09 11:42 (192.168.1.188)</span><br><span class="line">root     pts/1        2019-03-09 12:54 (192.168.172.1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="21-w"><a href="#21-w" class="headerlink" title="21.w"></a>21.w</h3><p>命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w [options] user [...]</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>显示当前有哪些用户登录并且在干什么</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># w</span></span><br><span class="line"> 14:07:04 up 19:45,  3 users,  load average: 0.00, 0.01, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     tty1                      Fri05    2:25m  1.62s  1.62s -bash</span><br><span class="line">root     pts/0    192.168.1.188    11:42    1:56m  0.13s  0.13s -bash</span><br><span class="line">root     pts/1    192.168.172.1    12:54    0.00s  0.25s  0.01s w</span><br></pre></td></tr></table></figure>

<h3 id="22-which"><a href="#22-which" class="headerlink" title="22.which"></a>22.which</h3><p>命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which [options] [--] programname [...]</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>查看命令全路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># which man</span></span><br><span class="line">/usr/bin/man</span><br></pre></td></tr></table></figure>

<h3 id="23-whereis"><a href="#23-whereis" class="headerlink" title="23.whereis"></a>23.whereis</h3><p>命令格式：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis [options] [-BMS directory... -f] name...</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>查看二级制程序路径和帮助手册</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># whereis who</span></span><br><span class="line">who: /usr/bin/who /usr/share/man/man1/who.1.gz /usr/share/man/man1p/who.1p.gz</span><br></pre></td></tr></table></figure>

<h3 id="24-whoami"><a href="#24-whoami" class="headerlink" title="24.whoami"></a>24.whoami</h3><p>命令格式: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami [OPTION]...</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>打印当前用户名</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux帮助获取</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/Linux%E5%B8%AE%E5%8A%A9%E8%8E%B7%E5%8F%96/Linux%E5%B8%AE%E5%8A%A9%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<p>Linxu帮助获取方法有许多种类,在获取帮助信息时，内部命令和外部命令的获取方式是有区别的：  </p>
<span id="more"></span>

<p>内部命令：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">help COMMAND</span><br></pre></td></tr></table></figure>

<p>外部命令：有以下几种途径  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 通过命令自带的帮助信息  </span><br><span class="line">   COMMAND --<span class="built_in">help</span>  </span><br><span class="line">   COMMAND -h</span><br><span class="line">2. 使用手册(manual)  </span><br><span class="line">   man COMMAND</span><br><span class="line">3. 信息页</span><br><span class="line">   info COMMAND 支持信息页中的超链接。</span><br><span class="line">4. 程序自身的帮助文档，有README、INSTALL、Changelog等。  </span><br><span class="line">   此类文档目录：/usr/share/doc</span><br><span class="line">5. 程序的官方文档</span><br><span class="line">6. 发行版官方文档</span><br><span class="line">7. google</span><br></pre></td></tr></table></figure>

<h3 id="man命令的使用方法"><a href="#man命令的使用方法" class="headerlink" title="man命令的使用方法"></a><em><strong>man命令的使用方法</strong></em></h3><p>命令格式：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">man [章节] COMMAND  </span><br></pre></td></tr></table></figure>

<p>章节共有9个每个章节代表不同的内容  </p>
<table>
<thead>
<tr>
<th align="center">章节号</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">用户命令（使用者在shell环境中可以操作的指令）</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">系统调用（系统核心可以调用的函数和工具）</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">c库调用（常用的函数和函数库）</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">设备文件及特殊文件</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">配置文件格式</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">游戏</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">杂项</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">管理类的命令</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">Linux内核API</td>
</tr>
</tbody></table>
<p>man的内容分成几个部分   </p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">说名</th>
</tr>
</thead>
<tbody><tr>
<td align="left">NAME</td>
<td align="left">简单的指令名称及说明</td>
</tr>
<tr>
<td align="left">SYNOPSIS</td>
<td align="left">指令的语法</td>
</tr>
<tr>
<td align="left">DESCRIPTION</td>
<td align="left">指令的完整说明</td>
</tr>
<tr>
<td align="left">OPTIONS</td>
<td align="left">指令的相关选项及说明</td>
</tr>
<tr>
<td align="left">COMMANDS</td>
<td align="left">程序在执行时可下达的指令</td>
</tr>
<tr>
<td align="left">FILES</td>
<td align="left">这个程序资料可以参考的其他档案</td>
</tr>
<tr>
<td align="left">SEE ALSO</td>
<td align="left">一些可以参考的和指令相关的其他内容</td>
</tr>
<tr>
<td align="left">EXAMPLE</td>
<td align="left">一些可以参考的范例</td>
</tr>
</tbody></table>
<p>man命令的一些简单操作方法  </p>
<table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">空格</td>
<td align="left">向文件尾部翻一屏</td>
</tr>
<tr>
<td align="left">b</td>
<td align="left">向文件首部翻一屏</td>
</tr>
<tr>
<td align="left">d</td>
<td align="left">向文件尾部翻半屏</td>
</tr>
<tr>
<td align="left">u</td>
<td align="left">向文件首部翻半屏</td>
</tr>
<tr>
<td align="left">j</td>
<td align="left">向文件尾部翻一行</td>
</tr>
<tr>
<td align="left">k</td>
<td align="left">向文件首部翻一行</td>
</tr>
<tr>
<td align="left">q</td>
<td align="left">退出</td>
</tr>
<tr>
<td align="left">数字#</td>
<td align="left">跳转到第#行</td>
</tr>
<tr>
<td align="left">1G</td>
<td align="left">跳转到文件首部</td>
</tr>
<tr>
<td align="left">G</td>
<td align="left">跳转到文件尾部</td>
</tr>
</tbody></table>
<p>man文件内搜索关键字的方法  </p>
<table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/KEYWORD</td>
<td align="left">在文档内从当前位置向尾部搜索KEYWORD关键字，并且不区分大小写</td>
</tr>
<tr>
<td align="left">?KEYWORD</td>
<td align="left">在文档内从当前位置向首部搜索KEYWORD关键字，兵器不区分大小写</td>
</tr>
<tr>
<td align="left">n</td>
<td align="left">按照与搜索关键字方向相同的方法，查找下一个关键字</td>
</tr>
<tr>
<td align="left">N</td>
<td align="left">按照与搜索关键字方向相反的方向，查找下一个关键字</td>
</tr>
</tbody></table>
<p>man命令的一些相关选项  </p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-f COMMAND</td>
<td>搜索系统中哪些与COMMAND相关的章节</td>
</tr>
<tr>
<td>-k COMMAND</td>
<td>搜索与关键字有关的帮助文件</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># man -f passwd   此命令同whatis passwd</span></span><br><span class="line">passwd (1)           - update user<span class="string">&#x27;s authentication tokens</span></span><br><span class="line"><span class="string">sslpasswd (1ssl)     - compute password hashes</span></span><br><span class="line"><span class="string">passwd (5)           - password file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@centos7 ~]# man -k passwd    </span></span><br><span class="line"><span class="string">chpasswd (8)         - update passwords in batch mode</span></span><br><span class="line"><span class="string">fgetpwent_r (3)      - get passwd file entry reentrantly</span></span><br><span class="line"><span class="string">getpwent_r (3)       - get passwd file entry reentrantly</span></span><br><span class="line"><span class="string">gpasswd (1)          - administer /etc/group and /etc/gshadow</span></span><br><span class="line"><span class="string">grub2-mkpasswd-pbkdf2 (1) - Generate a PBKDF2 password hash.</span></span><br><span class="line"><span class="string">lpasswd (1)          - Change group or user password</span></span><br></pre></td></tr></table></figure>

<p>注意：<br>使用-k,-f选项时首先需要建立资料库才行，此时需要执行mandb(Centos7),makewhatis(makewhatis)</p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件的查找</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/Linux%E6%96%87%E4%BB%B6%E7%9A%84%E6%9F%A5%E6%89%BE/Linux%E6%96%87%E4%BB%B6%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h2 id="Linux文件查找"><a href="#Linux文件查找" class="headerlink" title="Linux文件查找"></a>Linux文件查找</h2><p>在windows中文件的查找可以通过资源管理器进行查找，在Linux中则需要使用命令行进行查找，命令行中的查找命令有2种locate和find</p>
<span id="more"></span>

<hr>
<h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p>locate 命令查找的是数据库文件并非实时查找需要updatedb更新数据库文件。</p>
<p>命令语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locate [OPTION]... PATTERN...</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">不区分大小写</td>
</tr>
<tr>
<td align="left">-n N</td>
<td align="left">只列举前N个匹配项目</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">使用基本正则表达式</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 etc]<span class="comment"># locate -n 5 .conf</span></span><br><span class="line">/etc/GeoIP.conf</span><br><span class="line">/etc/GeoIP.conf.default</span><br><span class="line">/etc/asound.conf</span><br><span class="line">/etc/brltty.conf</span><br><span class="line">/etc/chrony.conf</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>find命令不同于locate是实时查找文件，通过遍历路径来查找文件</p>
<p>命令语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find [-H] [-L] [-P] [-D debugopts] [-Olevel] [path...] [expression]</span><br></pre></td></tr></table></figure>

<h4 id="常用选项类型"><a href="#常用选项类型" class="headerlink" title="常用选项类型"></a>常用选项类型</h4><ul>
<li>根据属主、属组查找：</li>
</ul>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-user USERNAME</td>
<td align="left">查找属主为指定用户(UID)的文件</td>
</tr>
<tr>
<td align="left">-group GRPNAME</td>
<td align="left">查找属组为指定组(GID)的文件</td>
</tr>
<tr>
<td align="left">-uid UserID</td>
<td align="left">查找属主为指定的UID号的文件</td>
</tr>
<tr>
<td align="left">-gid GroupID</td>
<td align="left">查找属组为指定的GID号的文件</td>
</tr>
<tr>
<td align="left">-nouser</td>
<td align="left">查找没有属主的文件</td>
</tr>
<tr>
<td align="left">-nogroup</td>
<td align="left">查找没有属组的文件</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>查找/var目录下属主为root，且属组为mail的所有文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># find /var -user root -group mail -ls</span></span><br><span class="line"> 26050    0 drwxrwxr-x   2 root     mail           31 Mar  5 21:13 /var/spool/mail</span><br></pre></td></tr></table></figure>

<ul>
<li>根据文件类型查找:</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-type TYPE</td>
<td>按问文件的类型进行查找</td>
</tr>
</tbody></table>
<h4 id="文件类型："><a href="#文件类型：" class="headerlink" title="文件类型："></a>文件类型：</h4><table>
<thead>
<tr>
<th>TYPE</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>f</td>
<td>普通文件</td>
</tr>
<tr>
<td>d</td>
<td>目录文件</td>
</tr>
<tr>
<td>l</td>
<td>符号链接文件</td>
</tr>
<tr>
<td>s</td>
<td>套接字文件</td>
</tr>
<tr>
<td>b</td>
<td>块设备文件</td>
</tr>
<tr>
<td>c</td>
<td>块设备文件</td>
</tr>
<tr>
<td>p</td>
<td>管道文件</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>显⽰/etc下的所有⽬录⽂件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /etc -typd d</span><br><span class="line">[root@centos7 ~]<span class="comment"># find /etc -type d</span></span><br><span class="line">/etc</span><br><span class="line">/etc/fonts</span><br><span class="line">/etc/fonts/conf.d</span><br><span class="line">/etc/grub.d</span><br><span class="line">/etc/X11</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="组合条件："><a href="#组合条件：" class="headerlink" title="组合条件："></a>组合条件：</h4><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>与</td>
</tr>
<tr>
<td>-o</td>
<td>或</td>
</tr>
<tr>
<td>-not或!</td>
<td>非</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>查找/var目录下不属于root、lp、gdm的所有文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># find /var -not \( -user root -o -user lp -o -user gdm \)</span></span><br><span class="line">/var/tmp/abrt</span><br><span class="line">/var/lib/colord</span><br><span class="line">/var/lib/colord/icc</span><br><span class="line">/var/lib/colord/mapping.db</span><br><span class="line">/var/lib/colord/storage.db</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="根据文件大小来查找："><a href="#根据文件大小来查找：" class="headerlink" title="根据文件大小来查找："></a>根据文件大小来查找：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-size [+|-]<span class="comment">#UNIT  </span></span><br><span class="line"><span class="comment"># 常用单位：k, M, G，c（byte）  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#UNIT: (#-1, #]  </span></span><br><span class="line"><span class="comment"># 如：6k 表示(5k,6k]  </span></span><br><span class="line"></span><br><span class="line">-<span class="comment">#UNIT：[0,#-1]  </span></span><br><span class="line"><span class="comment"># 如：-6k 表示[0,5k]  </span></span><br><span class="line"></span><br><span class="line">+<span class="comment">#UNIT：(#,∞)  </span></span><br><span class="line"><span class="comment"># 如：+6k 表示(6k,∞)  </span></span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<p>查找/etc目录下大于1M且类型为普通文件的所有文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># find /etc -size +1M  -type f</span></span><br><span class="line">/etc/selinux/targeted/active/policy.kern</span><br><span class="line">/etc/selinux/targeted/contexts/files/file_contexts.bin</span><br><span class="line">/etc/selinux/targeted/policy/policy.31</span><br><span class="line">/etc/udev/hwdb.bin</span><br><span class="line">/etc/brltty/zh-tw.ctb</span><br></pre></td></tr></table></figure>

<h4 id="根据时间戳："><a href="#根据时间戳：" class="headerlink" title="根据时间戳："></a>根据时间戳：</h4><p>以“天”为单位  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-atime [+|-]<span class="comment">#,  </span></span><br><span class="line"><span class="comment">#: [#,#+1)  </span></span><br><span class="line">+<span class="comment">#: [#+1,∞]  </span></span><br><span class="line">-<span class="comment">#: [0,#)  </span></span><br><span class="line">-mtime  </span><br><span class="line">-ctime </span><br></pre></td></tr></table></figure>

<p>以“分钟”为单位  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-amin  </span><br><span class="line">-mmin  </span><br><span class="line">-cmin </span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<p>查找当前系统上没有属主或属组，且最近一个周内曾被访问过的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># userdel masuri</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># find / -atime -7 -nouser -nogroup</span></span><br><span class="line">find: ‘/proc/58064/task/58064/fd/5’: No such file or directory</span><br><span class="line">find: ‘/proc/58064/task/58064/fdinfo/5’: No such file or directory</span><br><span class="line">find: ‘/proc/58064/fd/6’: No such file or directory</span><br><span class="line">find: ‘/proc/58064/fdinfo/6’: No such file or directory</span><br><span class="line">/home/masuri</span><br><span class="line">/home/masuri/.mozilla</span><br><span class="line">/home/masuri/.mozilla/extensions</span><br><span class="line">/home/masuri/.mozilla/plugins</span><br></pre></td></tr></table></figure>

<h4 id="根据权限查找："><a href="#根据权限查找：" class="headerlink" title="根据权限查找："></a>根据权限查找：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-perm [/|-]MODE  </span><br><span class="line">MODE: 精确权限匹配  </span><br><span class="line">/MODE：任何一类(u,g,o)对象的权限中只要能一位匹配即可，或关系，+从centos7开始淘汰  </span><br><span class="line">-MODE：每一类对象都必须同时拥有指定权限，与关系</span><br><span class="line"> 0 表示不关注  </span><br></pre></td></tr></table></figure>

<p>示例：  </p>
<p>查找/etc目录下所有用户都没有写权限的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># find /etc -not -perm /222 -ls</span></span><br></pre></td></tr></table></figure>

<p>查找/etc目录下至少有一类用户没有写权限的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># find /etc -not -perm -222 -ls</span></span><br></pre></td></tr></table></figure>

<p>查找/etc目录下，所有用户都有写行权限的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># find /etc -perm -222 -ls</span></span><br><span class="line">316079    0 lrwxrwxrwx   1 root     root           20 Mar  5 21:08 /etc/rc.d/rc0.d/K50netconsole -&gt; ../init.d/netconsole</span><br><span class="line">68345130    0 lrwxrwxrwx   1 root     root           17 Mar  5 21:08 /etc/rc.d/rc1.d/K90network -&gt; ../init.d/network</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>查找/etc目录下任何一类用户有写权限的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># find /etc -perm /222 -ls</span></span><br><span class="line">1100932    8 -rwxr-xr-x   1 root     root         5861 Apr 11  2018 /etc/smartmontools/smartd_warning.sh</span><br><span class="line">135846118    4 -rw-r--r--   1 root     root            1 Oct 31 01:10 /etc/at.deny</span><br><span class="line">202851786    0 drwxr-xr-x   3 root     root           24 Mar  5 21:10 /etc/kernel</span><br><span class="line">1100988    0 drwxr-xr-x   2 root     root           42 Mar  5 21:10 /etc/kernel/postinst.d</span><br><span class="line">1100989    4 -rwxr-xr-x   1 root     root         1676 Nov  3 01:40 /etc/kernel/postinst.d/51-dracut-rescue-postinst.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a>处理动作</h4><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-print</td>
<td>默认的处理动作，显示至屏幕</td>
</tr>
<tr>
<td>-ls</td>
<td>类似于对查找到的文件执行“ls -l”命令</td>
</tr>
<tr>
<td>-delete</td>
<td>删除查找到的文件</td>
</tr>
<tr>
<td>-fls file</td>
<td>查找到的所有文件的长格式信息保存至指定文件中</td>
</tr>
<tr>
<td>-ok COMMAND {} ;</td>
<td>对查找到的每个文件执行由COMMAND指定的命令，对于每个文件执行命令之前，都会交互式要求用户确认</td>
</tr>
<tr>
<td>-exec COMMAND {} ;</td>
<td>对查找到的每个文件执行由COMMAND指定的命令</td>
</tr>
<tr>
<td>{}</td>
<td>用于引用查找到的文件名称自身</td>
</tr>
</tbody></table>
<p>find传递查找到的文件至后面指定的命令时，查找到所有符合条件的文件一次性传递给后面的命令</p>
<p>示例:  </p>
<p>查看当前⽬录下30天以前.log结尾、⼤于1G的⽂件，并把它移动到/tmp下？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -ctime +30 -size +1G -name <span class="string">&quot;*.log&quot;</span> -<span class="built_in">exec</span> mv &#123;&#125; /tmp \;</span><br></pre></td></tr></table></figure>

<p>参数替换xargs  </p>
<p>由于很多命令不支持管道|来传递参数，xargs用于产生某个命令的参数，xargs</p>
<p>可以读入 stdin 的数据，并且以空格符或回车符将 stdin 的数据分隔成为参数</p>
<p>许多命令不能接受过多参数，命令执行可能会失败，xargs可以解决  </p>
<p>注意：文件名或者是其他意义的名词内含有空格符的情况  </p>
<p>find和xargs的组合：find | xargs COMMAND  </p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件系统</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="Linux文件系统结构"><a href="#Linux文件系统结构" class="headerlink" title="Linux文件系统结构"></a>Linux文件系统结构</h2><p>Linux的文件系统为一个单根的倒置树状结构，文件系统从根目录下开始。</p>
<p>如下图所示：</p>
<span id="more"></span>

<p><img src="2.png"></p>
<p>Linux文件系统严格区分字符大小写，abcd,Abcd,ABCD,此类文件名所指的是各不相同的文件。  </p>
<h3 id="Linux文件系统中的文件类型"><a href="#Linux文件系统中的文件类型" class="headerlink" title="Linux文件系统中的文件类型"></a>Linux文件系统中的文件类型</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">含义</th>
<th align="center">颜色</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-</td>
<td align="center">普通文件</td>
<td align="center">白色</td>
</tr>
<tr>
<td align="center">d</td>
<td align="center">目录文件</td>
<td align="center">蓝色</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">块文件</td>
<td align="center">黄色</td>
</tr>
<tr>
<td align="center">c</td>
<td align="center">字符设备</td>
<td align="center">黄色</td>
</tr>
<tr>
<td align="center">l</td>
<td align="center">符号链接文件</td>
<td align="center">浅蓝色</td>
</tr>
<tr>
<td align="center">p</td>
<td align="center">管道文件</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">套接字文件</td>
<td align="center">紫色</td>
</tr>
</tbody></table>
<p>修改此类文件颜色方法：编辑/etc/DIR_COLORS  </p>
<h3 id="Linux文件系统结构-LSB-Linux-Standard-Base"><a href="#Linux文件系统结构-LSB-Linux-Standard-Base" class="headerlink" title="Linux文件系统结构(LSB Linux Standard Base)"></a>Linux文件系统结构(LSB Linux Standard Base)</h3><table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/boot</td>
<td>用来存放内核，引导加载器的目录</td>
</tr>
<tr>
<td>/bin</td>
<td>所有用户使用的命令</td>
</tr>
<tr>
<td>/sbin</td>
<td>管理类命令存放的位置</td>
</tr>
<tr>
<td>/lib</td>
<td>存放库文件以及内核模块文件</td>
</tr>
<tr>
<td>/lib64</td>
<td>存放64位库文件</td>
</tr>
<tr>
<td>/etc</td>
<td>配置文件存放的目录</td>
</tr>
<tr>
<td>/home</td>
<td>存放普通用户家目录的位置</td>
</tr>
<tr>
<td>/root</td>
<td>管理员的家目录</td>
</tr>
<tr>
<td>/media</td>
<td>便携式设备的挂载点</td>
</tr>
<tr>
<td>/mnt</td>
<td>临时文件系统的挂载点</td>
</tr>
<tr>
<td>/dev</td>
<td>设备文件及特殊文件位置</td>
</tr>
<tr>
<td>/opt</td>
<td>第三方应用程序安装位置</td>
</tr>
<tr>
<td>/srv</td>
<td>系统上运行服务所用到的数据</td>
</tr>
<tr>
<td>/tmp</td>
<td>临时文件存放位置</td>
</tr>
<tr>
<td>/usr</td>
<td>二级根目录此目录内文件与根下大致相同</td>
</tr>
<tr>
<td>/var</td>
<td>用来存放可变的数据</td>
</tr>
<tr>
<td>/proc</td>
<td>用于输出内核与进程信息相关的虚拟文件系统</td>
</tr>
<tr>
<td>/sys</td>
<td>用于输出当前系统上硬件设备相关信息的虚拟翁建系统</td>
</tr>
<tr>
<td>/selinux</td>
<td>安全策略信息的存放位置</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7网卡名修改</title>
    <url>/2019/03/07/Linux%E5%9F%BA%E7%A1%80/centos7%E7%BD%91%E5%8D%A1%E5%90%8D%E6%9B%B4%E6%94%B9/centos7%E7%BD%91%E5%8D%A1%E5%90%8D%E6%9B%B4%E6%94%B9/</url>
    <content><![CDATA[<h2 id="CentOS-7网卡名修改"><a href="#CentOS-7网卡名修改" class="headerlink" title="CentOS 7网卡名修改"></a>CentOS 7网卡名修改</h2><p>CentOS7网卡名与CentOS6不同，然而7的早期版本与最新的版本的网卡名又有所不同，在生产环境中，为了实现自动化管理，首先要实现全部标准化，所以要将网卡名同一设置为和CentOS6相同的ethN的格式，具体的修改方法如下：  </p>
<span id="more"></span>

<p>1.首先修改/etc/default/grub文件,在GRUB_CMDLINE_LINUX行最后添加net.ifnames=0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># vim /etc/default/grub </span></span><br><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=<span class="string">&quot;<span class="subst">$(sed &#x27;s, release .*$,,g&#x27; /etc/system-release)</span>&quot;</span></span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_DISABLE_SUBMENU=<span class="literal">true</span></span><br><span class="line">GRUB_TERMINAL_OUTPUT=<span class="string">&quot;console&quot;</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;crashkernel=auto rhgb quiet net.ifnames=0&quot;</span></span><br><span class="line">GRUB_DISABLE_RECOVERY=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.使用grub2-mkconfig命令重新生成/boot/grub2/grub.cfg文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]<span class="comment"># grub2-mkconfig -o /boot/grub2/grub.cfg </span></span><br><span class="line">Generating grub configuration file ...</span><br><span class="line">Found linux image: /boot/vmlinuz-3.10.0-957.el7.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-3.10.0-957.el7.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-0-rescue-30905c0f8bf344f4af5b53a826370629</span><br><span class="line">Found initrd image: /boot/initramfs-0-rescue-30905c0f8bf344f4af5b53a826370629.img</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>3.重启后主机网卡已改为传统的ethN模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@mylinuxops ~]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.172.130  netmask 255.255.255.0  broadcast 192.168.172.255</span><br><span class="line">        inet6 fe80::68e7:2a55:44f4:593  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:63:21:a6  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 4  bytes 806 (806.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 37  bytes 5389 (5.2 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>cobbler自动化安装操作系统</title>
    <url>/2019/03/10/Linux%E5%9F%BA%E7%A1%80/cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%89%E8%A3%85/cobbler%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="cobbler自动安装操作系统"><a href="#cobbler自动安装操作系统" class="headerlink" title="cobbler自动安装操作系统"></a>cobbler自动安装操作系统</h2><p>cobbler是快速网络安装linux操作系统的服务，支持众多的Linux发行版：Red Hat、Fedora、CentOS、Debian、Ubuntu和SuSE，也可以支持网络安装windows</p>
<span id="more"></span>

<h3 id="一、配置yum源"><a href="#一、配置yum源" class="headerlink" title="一、配置yum源"></a>一、配置yum源</h3><p>cobbler所在的源是epel源所以先配置yum源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/yum.repos.d/base.repo</span></span><br><span class="line">[base]</span><br><span class="line">name=base</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">gpgcheck=0</span><br><span class="line">[epel]</span><br><span class="line">name=epel</span><br><span class="line">baseurl=http://mirrors.sohu.com/fedora-epel/7/x86_64</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>

<h3 id="二、安装cobbler和dhcp服务"><a href="#二、安装cobbler和dhcp服务" class="headerlink" title="二、安装cobbler和dhcp服务"></a>二、安装cobbler和dhcp服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># yum install cobbler dhcp -y</span></span><br></pre></td></tr></table></figure>

<h3 id="三、启动相关服务并设置为开机启动"><a href="#三、启动相关服务并设置为开机启动" class="headerlink" title="三、启动相关服务并设置为开机启动"></a>三、启动相关服务并设置为开机启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># systemctl enable rsyncd httpd tftp cobblerd dhcpd</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl start rsyncd httpd tftp cobblerd</span></span><br></pre></td></tr></table></figure>

<h3 id="四、配置cobbler"><a href="#四、配置cobbler" class="headerlink" title="四、配置cobbler"></a>四、配置cobbler</h3><p>1.使用cobbler check查看所需配置的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@centos7 ~]<span class="comment"># cobbler check</span></span><br><span class="line">The following are potential configuration items that you may want to fix:</span><br><span class="line"></span><br><span class="line">1 : The <span class="string">&#x27;server&#x27;</span> field <span class="keyword">in</span> /etc/cobbler/settings must be <span class="built_in">set</span> to something other than localhost, or kickstarting features will not work.  This should be a resolvable hostname or IP <span class="keyword">for</span> the boot server as reachable by all machines that will use it.</span><br><span class="line">2 : For PXE to be functional, the <span class="string">&#x27;next_server&#x27;</span> field <span class="keyword">in</span> /etc/cobbler/settings must be <span class="built_in">set</span> to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network.</span><br><span class="line">3 : change <span class="string">&#x27;disable&#x27;</span> to <span class="string">&#x27;no&#x27;</span> <span class="keyword">in</span> /etc/xinetd.d/tftp</span><br><span class="line">4 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run <span class="string">&#x27;cobbler get-loaders&#x27;</span> to download them, or, <span class="keyword">if</span> you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files <span class="keyword">in</span> this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The <span class="string">&#x27;cobbler get-loaders&#x27;</span> <span class="built_in">command</span> is the easiest way to resolve these requirements.</span><br><span class="line">5 : debmirror package is not installed, it will be required to manage debian deployments and repositories</span><br><span class="line">6 : The default password used by the sample templates <span class="keyword">for</span> newly installed machines (default_password_crypted <span class="keyword">in</span> /etc/cobbler/settings) is still <span class="built_in">set</span> to <span class="string">&#x27;cobbler&#x27;</span> and should be changed, try: <span class="string">&quot;openssl passwd -1 -salt &#x27;random-phrase-here&#x27; &#x27;your-password-here&#x27;&quot;</span> to generate new one</span><br><span class="line">7 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class="line"></span><br><span class="line">Restart cobblerd and <span class="keyword">then</span> run <span class="string">&#x27;cobbler sync&#x27;</span> to apply changes.</span><br></pre></td></tr></table></figure>

<p>2.在/etc/cobbler/setting文件中查找到以下几项并进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server: 192.168.73.120                  <span class="comment">#cobbler的服务器地址</span></span><br><span class="line">next_server: 192.168.73.120             <span class="comment">#tftp服务器地址</span></span><br><span class="line">default_password_crypted: <span class="string">&quot;$1$JZoCUmJG<span class="variable">$PaPdl</span>.tq3OW6KEXZbUaBP.&quot;</span>      <span class="comment">#修改默认密码</span></span><br><span class="line">manage_dhcp: 1                          <span class="comment">#dhcpg管理设置为1</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">3.下载boot-loaders</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@centos7 ~]<span class="comment"># cobbler get-loaders</span></span><br></pre></td></tr></table></figure>

<p>4.修改cobbler的dhcp模板文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/cobbler/dhcp.template</span></span><br><span class="line">...上面省略...</span><br><span class="line">subnet 192.168.73.0 netmask 255.255.255.0 &#123;                       <span class="comment">#修改网段</span></span><br><span class="line">     option routers             192.168.73.254;                   <span class="comment">#指定网关</span></span><br><span class="line">     option domain-name-servers 1.1.1.1;                          <span class="comment">#指定dns</span></span><br><span class="line">     option subnet-mask         255.255.255.0;                    <span class="comment">#指定子网掩码</span></span><br><span class="line">     range dynamic-bootp        192.168.73.1 192.168.73.100;      <span class="comment">#指定地址池</span></span><br><span class="line">     default-lease-time         21600;</span><br><span class="line">     max-lease-time             43200;</span><br><span class="line">     next-server                <span class="variable">$next_server</span>;</span><br><span class="line">     class <span class="string">&quot;pxeclients&quot;</span> &#123;</span><br><span class="line">          match <span class="keyword">if</span> substring (option vendor-class-identifier, 0, 9) = <span class="string">&quot;PXEClient&quot;</span>;</span><br><span class="line">          <span class="keyword">if</span> option pxe-system-type = 00:02 &#123;</span><br><span class="line">                  filename <span class="string">&quot;ia64/elilo.efi&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> option pxe-system-type = 00:06 &#123;</span><br><span class="line">                  filename <span class="string">&quot;grub/grub-x86.efi&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> option pxe-system-type = 00:07 &#123;</span><br><span class="line">                  filename <span class="string">&quot;grub/grub-x86_64.efi&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> option pxe-system-type = 00:09 &#123;</span><br><span class="line">                  filename <span class="string">&quot;grub/grub-x86_64.efi&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  filename <span class="string">&quot;pxelinux.0&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">...下面省略...</span><br></pre></td></tr></table></figure>

<p>5.将cobbler的DHCP文件进行同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cobbler sync</span></span><br></pre></td></tr></table></figure>

<p>6.重启cobbler服务以及DHCP服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># systemctl restart cobblerd</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl start dhcpd</span></span><br></pre></td></tr></table></figure>

<h3 id="五、为cobbler配置系统镜像文件"><a href="#五、为cobbler配置系统镜像文件" class="headerlink" title="五、为cobbler配置系统镜像文件"></a>五、为cobbler配置系统镜像文件</h3><p>1.将光盘挂载至一个空目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mount /dev/sr0 /mnt</span></span><br></pre></td></tr></table></figure>

<p>2.将光盘内文件复制入cobbler，此步骤是将光盘的的文件复制至/var/www/cobbler/ks_mirror/目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cobbler import --path=/mnt --name=Centos-6.10 --arch=x86_64</span></span><br></pre></td></tr></table></figure>

<p>由于cobbler自带了KS文件，所以现在已经能够实现自动化安装系统了，若要实现使用自己定制的KS文件，来实现自动化安装看下面的补充。</p>
<hr>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在实际生产环境中可能需要安装各种不同的定制化的系统，此时就需要准备各种不同的ks文件，并将文件与相对应的系统关联起来。</p>
<h3 id="一、准备ks文件"><a href="#一、准备ks文件" class="headerlink" title="一、准备ks文件"></a>一、准备ks文件</h3><p>1.ks文件可以在图形化界面通过system-config-kickstart进行生成，也手写(不建议)或使用已经装好的系统中，/root/anaconda-ks.cfg进行修改。此处以最小化安装ks文件为例。</p>
<p>此处需要注意的是在ks文件中使用network安装，要将url的路径设置为cobbler的内置变量$tree</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use network installation</span></span><br><span class="line">url --url=<span class="variable">$tree</span></span><br></pre></td></tr></table></figure>

<p>2.ks6mini.cfg文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim ks6.cfg</span></span><br><span class="line"><span class="comment">#platform=x86, AMD64, or Intel EM64T</span></span><br><span class="line"><span class="comment">#version=DEVEL</span></span><br><span class="line"><span class="comment"># Firewall configuration</span></span><br><span class="line">firewall --disabled</span><br><span class="line"><span class="comment"># Install OS instead of upgrade</span></span><br><span class="line">install</span><br><span class="line"><span class="comment"># Use network installation</span></span><br><span class="line">url --url=<span class="variable">$tree</span></span><br><span class="line"><span class="comment"># Root password</span></span><br><span class="line">rootpw --iscrypted $1$6oVXZR1R<span class="variable">$QOASc6inirmHCZmQ</span>.W9Hg0</span><br><span class="line"><span class="comment"># System authorization information</span></span><br><span class="line">auth  --useshadow  --passalgo=sha512</span><br><span class="line"><span class="comment"># Use text mode install</span></span><br><span class="line">text</span><br><span class="line"><span class="comment"># System keyboard</span></span><br><span class="line">keyboard us</span><br><span class="line"><span class="comment"># System language</span></span><br><span class="line">lang en_US</span><br><span class="line"><span class="comment"># SELinux configuration</span></span><br><span class="line">selinux --disabled</span><br><span class="line"><span class="comment"># Do not configure the X Window System</span></span><br><span class="line">skipx</span><br><span class="line"><span class="comment"># Installation logging level</span></span><br><span class="line">logging --level=info</span><br><span class="line"><span class="comment"># Reboot after installation</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># System timezone</span></span><br><span class="line">timezone  Asia/Shanghai</span><br><span class="line"><span class="comment"># Network information</span></span><br><span class="line">network  --bootproto=dhcp --device=eth0 --onboot=on</span><br><span class="line"><span class="comment"># System bootloader configuration</span></span><br><span class="line">bootloader --location=mbr</span><br><span class="line"><span class="comment"># Clear the Master Boot Record</span></span><br><span class="line">zerombr</span><br><span class="line"><span class="comment"># Partition clearing information</span></span><br><span class="line">clearpart --all --initlabel </span><br><span class="line"><span class="comment"># Disk partitioning information</span></span><br><span class="line">part /boot --fstype=<span class="string">&quot;ext4&quot;</span> --size=200</span><br><span class="line">part / --fstype=<span class="string">&quot;ext4&quot;</span> --size=20000</span><br><span class="line">part swap --fstype=<span class="string">&quot;swap&quot;</span> --size=1024</span><br><span class="line"></span><br><span class="line">%packages</span><br><span class="line">@core</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure>

<h3 id="二、将ks文件复制到cobbler的ks的仓库中"><a href="#二、将ks文件复制到cobbler的ks的仓库中" class="headerlink" title="二、将ks文件复制到cobbler的ks的仓库中"></a>二、将ks文件复制到cobbler的ks的仓库中</h3><p>cobbler有自带的ks仓库，其目录在/var/lib/cobbler/kickstarts/，将所准备好的ks文件复制到此目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cp ks6mini.cfg /var/lib/cobbler/kickstarts/</span></span><br></pre></td></tr></table></figure>

<h3 id="三、将ks文件与cobbler中的系统镜像相关联"><a href="#三、将ks文件与cobbler中的系统镜像相关联" class="headerlink" title="三、将ks文件与cobbler中的系统镜像相关联"></a>三、将ks文件与cobbler中的系统镜像相关联</h3><p>1.首先查看下cobbler仓库中的ks文件关联列表以及cobbler中所存在的系统镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cobbler profile list          #此命令可以查看ks关联安装列表</span></span><br><span class="line">   Centos-6.10-x86_64                           <span class="comment">#此为刚才创建的安装列表</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cobbler distro list           #此命令可以查看所存在的系统镜像</span></span><br><span class="line">   Centos-6.10-x86_64                           <span class="comment">#此为刚才导入的镜像</span></span><br></pre></td></tr></table></figure>

<p>2.将ks6mini.cfg文件进行关联</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cobbler profile add --name=Centos-6.10-mini-x86_64 --distro=Centos-6.10-x86_64 --ks=/var/lib/cobbler/kickstarts/ks6mini.cfg</span></span><br><span class="line"><span class="comment">#--name:指定新的安装列表的名称</span></span><br><span class="line"><span class="comment">#--distro:指定所要关联的镜像名称</span></span><br><span class="line"><span class="comment">#--ks:指定ks文件所在的路径</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cobbler profile list          #查看安装列表</span></span><br><span class="line">   Centos-6.10-mini-x86_64                      <span class="comment">#此为刚才所关联的项</span></span><br><span class="line">   Centos-6.10-x86_64</span><br></pre></td></tr></table></figure>

<p>3.删除ks关联</p>
<p>由于cobbler所自带的关联安装方法，并不是我们想要的，所以我们需要将其从列表中删除，删除方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cobbler profile remove --name=Centos-6.10-x86_64      #删除列表</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cobbler profile list</span></span><br><span class="line">   Centos-6.10-mini-x86_64                                              <span class="comment">#此时只剩下mini</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="基于web的cobbler管理"><a href="#基于web的cobbler管理" class="headerlink" title="基于web的cobbler管理"></a>基于web的cobbler管理</h2><p>由于文本形式的cobbler的管理不太友好，我们也可以使用基于web的管理方法</p>
<h3 id="一、安装cobbler-web"><a href="#一、安装cobbler-web" class="headerlink" title="一、安装cobbler-web"></a>一、安装cobbler-web</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 mnt]<span class="comment"># yum install cobbler-web -y</span></span><br></pre></td></tr></table></figure>

<h3 id="二、重启httpd服务"><a href="#二、重启httpd服务" class="headerlink" title="二、重启httpd服务"></a>二、重启httpd服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 mnt]<span class="comment"># systemctl restart httpd</span></span><br></pre></td></tr></table></figure>

<h3 id="三、此时已经能访问cobbler的web界面"><a href="#三、此时已经能访问cobbler的web界面" class="headerlink" title="三、此时已经能访问cobbler的web界面"></a>三、此时已经能访问cobbler的web界面</h3><p>cobbler_web是基于ssl的，所以需要使用https协议，访问地址为：<a href="https://xxx.xxx.xxx.xxx/cobbler_web">https://XXX.XXX.XXX.XXX/cobbler_web</a></p>
<p><img src="cobbler_web.png" alt="cobbler_web.png"></p>
<h2 id="cobbler-web的账户和密码"><a href="#cobbler-web的账户和密码" class="headerlink" title="cobbler_web的账户和密码"></a>cobbler_web的账户和密码</h2><p>cobbler默认账户和密码都为cobbler，此密码不够安全，我们需要对其加以修改。  </p>
<h3 id="一、authn-configfile验证方法"><a href="#一、authn-configfile验证方法" class="headerlink" title="一、authn_configfile验证方法"></a>一、authn_configfile验证方法</h3><p>cobbler的验证文件存放在/etc/cobbler/modules.conf内部详细的说明了各种验证方法，默认的验证方法为configfile。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 mnt]<span class="comment"># cat /etc/cobbler/modules.conf</span></span><br><span class="line"><span class="comment"># cobbler module configuration file</span></span><br><span class="line"><span class="comment"># =================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># authentication: </span></span><br><span class="line"><span class="comment"># what users can log into the WebUI and Read-Write XMLRPC?</span></span><br><span class="line"><span class="comment"># choices:</span></span><br><span class="line"><span class="comment">#    authn_denyall    -- no one (default)</span></span><br><span class="line"><span class="comment">#    authn_configfile -- use /etc/cobbler/users.digest (for basic setups)</span></span><br><span class="line"><span class="comment">#    authn_passthru   -- ask Apache to handle it (used for kerberos)</span></span><br><span class="line"><span class="comment">#    authn_ldap       -- authenticate against LDAP</span></span><br><span class="line"><span class="comment">#    authn_spacewalk  -- ask Spacewalk/Satellite (experimental)</span></span><br><span class="line"><span class="comment">#    authn_pam        -- use PAM facilities</span></span><br><span class="line"><span class="comment">#    authn_testing    -- username/password is always testing/testing (debug)</span></span><br><span class="line"><span class="comment">#    (user supplied)  -- you may write your own module</span></span><br><span class="line"><span class="comment"># WARNING: this is a security setting, do not choose an option blindly.</span></span><br><span class="line"><span class="comment"># for more information:</span></span><br><span class="line"><span class="comment"># https://github.com/cobbler/cobbler/wiki/Cobbler-web-interface</span></span><br><span class="line"><span class="comment"># https://github.com/cobbler/cobbler/wiki/Security-overview</span></span><br><span class="line"><span class="comment"># https://github.com/cobbler/cobbler/wiki/Kerberos</span></span><br><span class="line"><span class="comment"># https://github.com/cobbler/cobbler/wiki/Ldap</span></span><br><span class="line"></span><br><span class="line">[authentication]</span><br><span class="line">module = authn_configfile</span><br></pre></td></tr></table></figure>

<p>添加用户和删除用户</p>
<p>auth_confile的用户名和密码存放在/etc/cobbler/users.digest中使用一下命令可以创建Cobbler的用户和密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 mnt]<span class="comment"># htdigest /etc/cobbler/users.digest Cobbler admin   #注意此处Cobbler的C必须为大写</span></span><br><span class="line">Adding user admin <span class="keyword">in</span> realm cobbler</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br></pre></td></tr></table></figure>

<p>Cobbler删除用户只需要在/etc/cobbler/users.digest中找到用户相对应的行将其删除。</p>
<h3 id="二、authn-pam的验证方法"><a href="#二、authn-pam的验证方法" class="headerlink" title="二、authn_pam的验证方法"></a>二、authn_pam的验证方法</h3><p>1.修改验证文件/etc/cobbler/modules.conf中的authentication项，pam验证方法的用户名和密码存放在/etc/cobbler/users.conf文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[authentication]</span><br><span class="line">module = authn_pam</span><br></pre></td></tr></table></figure>

<p>2.基于pam验证的用户名和密码的创建</p>
<p>创建一个Linux用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 mnt]<span class="comment"># useradd -s /sbin/nologin cobbleradmin</span></span><br><span class="line">[root@centos7 mnt]<span class="comment"># echo 111111 | passwd --stdin cobbleradmin</span></span><br><span class="line">Changing password <span class="keyword">for</span> user cobbleradmin.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>

<p>此时可以使用Linxu账户进行登陆cobbler_web</p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>自动化安装系统</tag>
      </tags>
  </entry>
  <entry>
    <title>fstab排错</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/fstab%E6%8E%92%E9%94%99/fstab%E6%8E%92%E9%94%99/</url>
    <content><![CDATA[<h2 id="Fstab排错"><a href="#Fstab排错" class="headerlink" title="Fstab排错"></a>Fstab排错</h2><p>fstab文件中所配置的挂载设备出现配置出错时将导致系统无法启动，以下分别演示centos6 和centos7挂载出错时的修复方法</p>
<span id="more"></span>

<h3 id="一、CentOS6环境"><a href="#一、CentOS6环境" class="headerlink" title="一、CentOS6环境"></a>一、CentOS6环境</h3><p>1.创建错误环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Tue Mar  5 13:07:05 2019</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">UUID=3fa49288-1c40-4e74-ad2c-a32fefedf20f /                       ext4    defaults        1 1</span><br><span class="line">UUID=5f0da078-420b-be5b-95ce5a8a2efc /boot                   ext4    defaults        1 2           此行的UUID原本为5f0da078-2991-420b-be5b-95ce5a8a2efc</span><br><span class="line">UUID=bf0d1aa-83e5-4127-9e59-a4fc7aa9dbb9 /data                   ext4    defaults        1 2      此行的UUID原本为5bf0d1aa-83e5-4127-9e59-a4fc7aa9dbb9</span><br><span class="line">UUID=07895eae-ecf4-4a48-9c4a-668e407fc70a swap                    swap    defaults        0 0</span><br><span class="line">tmpfs                   /dev/shm                tmpfs   defaults        0 0</span><br><span class="line">devpts                  /dev/pts                devpts  gid=5,mode=620  0 0</span><br><span class="line">sysfs                   /sys                    sysfs   defaults        0 0</span><br><span class="line">proc                    /proc                   proc    defaults        0 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>保存退出重启  </p>
<p>2.排错</p>
<p>此时两行uuid报错，要求输入root口令登录排错</p>
<p><img src="1.png" alt="1.png"></p>
<p>登录后进入/etc/fstab对文件进行修改，发现此时文件处于只读状态。</p>
<p><img src="3.png" alt="3.png"></p>
<p>CentOS6在对根挂载时默认使用的是只读挂载，所以需要对/重新挂载并设置读写属性</p>
<p><img src="4.png" alt="4.png"></p>
<p>重新进入fstab对UUID进行修复。</p>
<p><img src="5.png" alt="5.png"></p>
<p>重启后重新进入系统</p>
<p>注意：此处实验使用的是将文件直接修复，也可以把错误的行注销，或者将最后一位检查次序设置为0不做检查。等进入系统后再做修复。</p>
<h3 id="二、CentOS7环境"><a href="#二、CentOS7环境" class="headerlink" title="二、CentOS7环境"></a>二、CentOS7环境</h3><p>1.创建环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Tue Mar  5 21:07:19 2019</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">UUID=45490aa4-cf29-420d-a606-af32688b6707 /                       xfs     defaults        0 0</span><br><span class="line">UUID=x15dcd896-b7cf-48d0-b8bd-4c0b0f2c62b2 /boot                   xfs     defaults        0 0       此处正确UUID为 15dcd896-b7cf-48d0-b8bd-4c0b0f2c62b2</span><br><span class="line">UUID=4b6e1813-2c46-402a-869a-02cbbcb76ade /data                   xfs     defaults        0 0</span><br><span class="line">UUID=0995b444-48c1-4423-92bc-2deda0d3c082 swap                    swap    defaults        0 0                                       </span><br></pre></td></tr></table></figure>

<p>保存重启</p>
<p>2.排错</p>
<p>重启后已出现错误</p>
<p><img src="c1.png" alt="c1.png"></p>
<p>输入root口令，登录系统</p>
<p><img src="c2.png" alt="c2.png"></p>
<p>修改/etc/fstab，直接将错误的那行注释掉</p>
<p><img src="c3.png" alt="c3.png"></p>
<p>保存重启，此时已经能够正常进入系统</p>
<p><img src="c4.png" alt="c4.png"></p>
<p>登录系统后将/etc/fstab的参数修改正确</p>
<p><img src="c5.png" alt="c5.png"></p>
<p>注意：CentOS7与6的区别在于emergency模式下，7是可读可写，6只能读需要重新挂载，7的fstab最后一位检查次序设置为0时没有用无法让系统不检查需要直接注释掉错误行或者直接修复错误。</p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>系统修复</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh服务</title>
    <url>/2019/03/12/Linux%E5%9F%BA%E7%A1%80/openssh/openssh/</url>
    <content><![CDATA[<h2 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h2><p>ssh名字为secure shell，目前使用的版本号为2，所使用的端口号为tcp的22号端口，可以实现安全的远程登录。  </p>
<p>ssh协议版本有v1版和v2版本:  </p>
<p>v1是基于CRC-32做MAC，不安全，无法防止中间人攻击。  </p>
<p>V2版本双方主机协议选择安全的MAC方式基于DH算法做密钥交换，基于RSA或DSA实现身份认证  </p>
<p>ssh具体的软件实现为：Openssh和dropbear</p>
<span id="more"></span>

<hr>
<h2 id="OpenSSH"><a href="#OpenSSH" class="headerlink" title="OpenSSH"></a>OpenSSH</h2><p>openssh是ssh的一种实现，它能允许远程系统经验证地加密安全访问。当用户远程连接ssh服务器时，会复制ssh服务器/etc/ssh/ssh_host_ecdsa_key.pub文件中的公钥到客户机的~/.ssh/know_hosts中。下次连接时会自动匹配相应私钥，不能匹配的将拒绝连接  </p>
<p>ssh软件的组成  </p>
<p>openssh是由openssh、openssh-clients、openssh-server这几个包组成。  </p>
<p>由于ssh是基于C/S结构，所以它分别有客户端的配置和服务器端的配置。</p>
<h2 id="openssh客户端"><a href="#openssh客户端" class="headerlink" title="openssh客户端"></a>openssh客户端</h2><h3 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h3><p>ssh客户端的配置存放在/etc/ssh/ssh_config文件内，一般客户端的配置文件不做修改，使用默认配置，但其中有几项选项稍作了解。</p>
<p>1.StrictHostKeyChecking</p>
<p>当客户端第一次访问服务器时，客户端会询问所访问的主机是否是你真正想想要访问的主机。默认是每次都会询问，当设置为no时，不会再询问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">StrictHostKeyChecking no</span><br></pre></td></tr></table></figure>

<p>2.port</p>
<p>此项为连接服务器时的端口号。默认为22号端口，当服务器的ssh服务的端口为非标时，将配置文件的port进行修改，也可以使用ssh -p PORT来指定端口号。</p>
<p>修改配置文件方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 9527    <span class="comment">#找到port行修改为指定端口</span></span><br></pre></td></tr></table></figure>
<p>手动指定端口号方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssh root@192.168.73.133 -p 9527</span></span><br></pre></td></tr></table></figure>

<h3 id="二、ssh的用户登陆方式"><a href="#二、ssh的用户登陆方式" class="headerlink" title="二、ssh的用户登陆方式"></a>二、ssh的用户登陆方式</h3><p>ssh有2中登录方式，一种是基于口令的登陆方式，另一种是基于Key的登登录方式。</p>
<h4 id="基于口令的登陆方式"><a href="#基于口令的登陆方式" class="headerlink" title="基于口令的登陆方式"></a>基于口令的登陆方式</h4><p>基于口令的登陆方式依赖于ssh命令</p>
<p>ssh的使用方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh [option] [user@]host [COMMAND]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-p port</td>
<td align="left">指定远程服务器监听的端口</td>
</tr>
<tr>
<td align="left">-b</td>
<td align="left">指定连接的源IP</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">调试模式</td>
</tr>
<tr>
<td align="left">-C</td>
<td align="left">压缩方式</td>
</tr>
<tr>
<td align="left">-X</td>
<td align="left">支持x11转发</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">强制伪tty分配</td>
</tr>
</tbody></table>
<p>常用选项示例:  </p>
<p>-p：可以用来指定连接远程主机的端口号，常用在服务器端口号为非标的情况下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssh root@192.168.73.133 -p 9527</span></span><br></pre></td></tr></table></figure>

<p>-C:压缩方法连接，常用在带宽较小的情况下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssh -C root@192.168.73.133</span></span><br></pre></td></tr></table></figure>

<p>-X:支持x11转发功能  </p>
<p>x11转发功能可以实现将远程的主机的图形化桌面拉取到本机，从而实现图形操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssh -X root@192.168.73.133</span></span><br></pre></td></tr></table></figure>

<p>-t:强制伪tty分配  </p>
<p>强制伪tty分配使用的场合为有a、b、c、d,4台主机，a要去连接d，但d,c,b只能通过单线去连接，a无法直接连接到的d,需要b,c上依次登录才能登录到d,使用-t选项可以实现一条命令直接登录至d主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssh -t 192.168.73.132 ssh -t 192.168.73.133 ssh 192.168.73.134</span></span><br><span class="line">root@192.168.73.132<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">The authenticity of host &#x27;</span>192.168.73.133 (192.168.73.133)<span class="string">&#x27; can&#x27;</span>t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:YNlH0VBV0kp4lAClVvfMWVx/bHcbKKHXQwyd13d+MME.</span><br><span class="line">ECDSA key fingerprint is MD5:8a:1c:3d:c2:04:b1:be:05:95:33:9e:16:e8:ad:6c:25.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added <span class="string">&#x27;192.168.73.133&#x27;</span> (ECDSA) to the list of known hosts.</span><br><span class="line">root@192.168.73.133<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">The authenticity of host &#x27;</span>192.168.73.134 (192.168.73.134)<span class="string">&#x27; can&#x27;</span>t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:YNlH0VBV0kp4lAClVvfMWVx/bHcbKKHXQwyd13d+MME.</span><br><span class="line">ECDSA key fingerprint is MD5:8a:1c:3d:c2:04:b1:be:05:95:33:9e:16:e8:ad:6c:25.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added <span class="string">&#x27;192.168.73.134&#x27;</span> (ECDSA) to the list of known hosts.</span><br><span class="line">root@192.168.73.134<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Last failed login: Tue Apr 16 11:41:25 CST 2019 from 192.168.73.133 on ssh:notty</span></span><br><span class="line"><span class="string">There was 1 failed login attempt since the last successful login.</span></span><br><span class="line"><span class="string">Last login: Tue Apr 16 07:15:03 2019 from 192.168.73.1</span></span><br></pre></td></tr></table></figure>

<h3 id="基于密钥方式的登录"><a href="#基于密钥方式的登录" class="headerlink" title="基于密钥方式的登录"></a>基于密钥方式的登录</h3><h4 id="一、交互式方法实现密钥登录"><a href="#一、交互式方法实现密钥登录" class="headerlink" title="一、交互式方法实现密钥登录"></a>一、交互式方法实现密钥登录</h4><p>1.先在本机生成私钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssh-keygen</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:7s3nPNrHugMdkip+8ozUvE2pYeUnvGGhylzVHMhaPMk root@centos7.localdomain</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|         + o     |</span></span><br><span class="line"><span class="string">|          E..    |</span></span><br><span class="line"><span class="string">|         oo+..   |</span></span><br><span class="line"><span class="string">|        S.+oo.   |</span></span><br><span class="line"><span class="string">|      .+.*.o.    |</span></span><br><span class="line"><span class="string">|     ...O O...   |</span></span><br><span class="line"><span class="string">|     +oB.X B+ o  |</span></span><br><span class="line"><span class="string">|      =+* *+**   |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<p>2.将密钥文件发送给远端的主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssh-copy-id root@192.168.73.132</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class="string">&quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">root@192.168.73.132<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">root@192.168.73.132&#x27;</span>s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   <span class="string">&quot;ssh &#x27;root@192.168.73.132&#x27;&quot;</span></span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure>
<h4 id="二、非交互式方法实现密钥登陆"><a href="#二、非交互式方法实现密钥登陆" class="headerlink" title="二、非交互式方法实现密钥登陆"></a>二、非交互式方法实现密钥登陆</h4><p>1.生成密钥，存放在~/.ssh/id_rsa</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssth-keygen - rsa -N &quot;&quot; -f ~/.ssh/id_rs</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:q+dIP5AXsmfJT71CleOlW8pR27c/SBdDJaRBK/n3ibo root@centos7.localdomain</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|           .o.o o|</span></span><br><span class="line"><span class="string">|           . + o |</span></span><br><span class="line"><span class="string">|          o o..  |</span></span><br><span class="line"><span class="string">|      . .  o+ oo |</span></span><br><span class="line"><span class="string">|       =So +.=.oo|</span></span><br><span class="line"><span class="string">|      + *.o =o+o+|</span></span><br><span class="line"><span class="string">|      .=.+ ..Bo.+|</span></span><br><span class="line"><span class="string">|     . +o o *. o |</span></span><br><span class="line"><span class="string">|      ooo. E.   +|</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<p>2.复制密钥至远程主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssh-copy-id 192.168.73.128</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class="string">&quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">root@192.168.73.128<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Number of key(s) added: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   &quot;ssh &#x27;</span>192.168.73.128<span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br></pre></td></tr></table></figure>

<p>注意：key验证必须保证key的安全，若私钥文件被偷走，别人可以利用私钥文件进行免密登陆，为防止密钥被别人盗走后被别人免密登陆，可以对私钥进行加密。</p>
<p>3.密钥的加密</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 .ssh]<span class="comment"># ssh-keygen -t rsa -P &quot;111111&quot; -f ~/.ssh/id_rsa     #创建密钥时对密钥进行加密</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:+kwhjUafA73ra7CoTaR59wemYBSGMummrZbHwubPUlI root@centos7.localdomain</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">| . .             |</span></span><br><span class="line"><span class="string">|+ . o  .         |</span></span><br><span class="line"><span class="string">|.o . .o .        |</span></span><br><span class="line"><span class="string">| o E.. = o       |</span></span><br><span class="line"><span class="string">|o.... + S        |</span></span><br><span class="line"><span class="string">|...=o..oo+       |</span></span><br><span class="line"><span class="string">|..B.ooo=o.       |</span></span><br><span class="line"><span class="string">|.B.*..o*. .      |</span></span><br><span class="line"><span class="string">|+.*+.  .*o       |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@centos7 .ssh]# ssh-copy-id 192.168.73.128                         #将密钥复制到远程主机</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line"><span class="string">The authenticity of host &#x27;</span>192.168.73.128 (192.168.73.128)<span class="string">&#x27; can&#x27;</span>t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:YNlH0VBV0kp4lAClVvfMWVx/bHcbKKHXQwyd13d+MME.</span><br><span class="line">ECDSA key fingerprint is MD5:8a:1c:3d:c2:04:b1:be:05:95:33:9e:16:e8:ad:6c:25.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)? yes</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">root@192.168.73.128<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Number of key(s) added: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   &quot;ssh &#x27;</span>192.168.73.128<span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@centos7 .ssh]# ssh 192.168.73.128</span></span><br><span class="line"><span class="string">Enter passphrase for key &#x27;</span>/root/.ssh/id_rsa<span class="string">&#x27;:                       #再次登陆时要求输入密钥的密码</span></span><br><span class="line"><span class="string">Last login: Tue Apr 16 21:15:58 2019 from 192.168.73.132</span></span><br></pre></td></tr></table></figure>
<p>由于每次需要输入密码太过麻烦，也可以使用代理，先输一次密码，只有所有登陆时所需要的输入的密码都由代理来输入，达到免密的方法<br>4.ssh-agent代理的使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 .ssh]<span class="comment"># ssh-agent bash         #运行代理</span></span><br><span class="line">[root@centos7 .ssh]<span class="comment"># ssh-add                #将密钥通过命令添加给代理</span></span><br><span class="line">Enter passphrase <span class="keyword">for</span> /root/.ssh/id_rsa: </span><br><span class="line">Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)</span><br><span class="line">[root@centos7 .ssh]<span class="comment"># ssh 192.168.73.128</span></span><br><span class="line">Last login: Tue Apr 16 21:21:40 2019 from 192.168.73.128        <span class="comment">#再次实现免密登陆</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<h4 id="三、集群模式下的基于key验证。"><a href="#三、集群模式下的基于key验证。" class="headerlink" title="三、集群模式下的基于key验证。"></a>三、集群模式下的基于key验证。</h4><p>假设有3台设备，要实现相互间key验证登陆，那我们就需要依次坐在每台主机上，执行创建密钥和公钥分发的操作，由于此方法过于繁琐，有没有更加便捷的方法呢？  </p>
<p>实现思路：3台主机公用一个公私钥</p>
<p>1.现在一台主机上创建私钥文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mkdir .ssh</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ssh-keygen -P &quot;&quot; -t rsa  -f .ssh/id_rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> .ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> .ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:+pUkZANYvXQPGCF2VC5dpF7FNnZvLVyZZRNg7Av33f8 root@centos7.localdomain</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|     o=o==..++ooB|</span></span><br><span class="line"><span class="string">|    .. ++ooo.o=++|</span></span><br><span class="line"><span class="string">|       .=o+oo+ +o|</span></span><br><span class="line"><span class="string">|       o.+ o.oo +|</span></span><br><span class="line"><span class="string">|        S o o ooo|</span></span><br><span class="line"><span class="string">|       . o . . .o|</span></span><br><span class="line"><span class="string">|      .   o     .|</span></span><br><span class="line"><span class="string">|       . .      .|</span></span><br><span class="line"><span class="string">|        .       E|</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<p>2.对自己创建authorized_keys文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssh-copy-id 192.168.73.128</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class="string">&quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.73.128 (192.168.73.128)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:YNlH0VBV0kp4lAClVvfMWVx/bHcbKKHXQwyd13d+MME.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:8a:1c:3d:c2:04:b1:be:05:95:33:9e:16:e8:ad:6c:25.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span></span><br><span class="line"><span class="string">root@192.168.73.128&#x27;</span>s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   <span class="string">&quot;ssh &#x27;192.168.73.128&#x27;&quot;</span></span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure>
<p>3.将整个.ssh目录分发给另外两台主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># scp -rp .ssh 192.168.73.132:/root/</span></span><br><span class="line">root@192.168.73.132<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">id_rsa                                                                 100% 1675     1.3MB/s   00:00    </span></span><br><span class="line"><span class="string">id_rsa.pub                                                             100%  406   389.1KB/s   00:00    </span></span><br><span class="line"><span class="string">known_hosts                                                            100%  352   536.8KB/s   00:00    </span></span><br><span class="line"><span class="string">authorized_keys                                                        100%  406   660.1KB/s   00:00    </span></span><br><span class="line"><span class="string">[root@centos7 ~]# scp .ssh 192.168.73.133:/root/</span></span><br><span class="line"><span class="string">The authenticity of host &#x27;</span>192.168.73.133 (192.168.73.133)<span class="string">&#x27; can&#x27;</span>t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:YNlH0VBV0kp4lAClVvfMWVx/bHcbKKHXQwyd13d+MME.</span><br><span class="line">ECDSA key fingerprint is MD5:8a:1c:3d:c2:04:b1:be:05:95:33:9e:16:e8:ad:6c:25.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added <span class="string">&#x27;192.168.73.133&#x27;</span> (ECDSA) to the list of known hosts.</span><br><span class="line">root@192.168.73.133<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">.ssh: not a regular file</span></span><br><span class="line"><span class="string">[root@centos7 ~]# scp -rp .ssh 192.168.73.133:/root/</span></span><br><span class="line"><span class="string">root@192.168.73.133&#x27;</span>s password: </span><br><span class="line">id_rsa                                                                 100% 1675     1.2MB/s   00:00    </span><br><span class="line">id_rsa.pub                                                             100%  406   365.0KB/s   00:00    </span><br><span class="line">known_hosts                                                            100%  528     1.1MB/s   00:00    </span><br><span class="line">authorized_keys                                                        100%  406   619.8KB/s   00:00    </span><br></pre></td></tr></table></figure>
<p>4.登录测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ssh 192.168.73.133</span></span><br><span class="line">Last login: Tue Apr 16 06:23:20 2019</span><br><span class="line">[root@centos7 ~]<span class="comment"># ssh 192.168.73.132</span></span><br><span class="line">Last login: Tue Apr 16 13:50:51 2019 from 192.168.73.1</span><br><span class="line">[root@centos7 ~]<span class="comment"># ssh 192.168.73.128</span></span><br><span class="line">Last login: Tue Apr 16 21:50:38 2019 from 192.168.73.1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>OpenSSH</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH端口转发</title>
    <url>/2019/03/12/Linux%E5%9F%BA%E7%A1%80/openssh%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/openssh%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h2 id="SSH端口转发"><a href="#SSH端口转发" class="headerlink" title="SSH端口转发"></a>SSH端口转发</h2><p>SSH会自动加密和解密所有SSH客户端与服务端之间的网络数据。但是ssh还能够将其他TCP端口的网络数据通过SSH连接来转发，并自动提供了相应的加密及解密服务。这一过程也被叫做隧道，这是应为SSH为其他TCP链接提供了一个安全的通道来进行传输而得名。例如，Telnet,SMTP,LDAP这些TCP应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而于此同时，如果工作环境中的防火请限制了一些些网络端口的使用，但是允许SSh的连接，也能够通过将tcp端口转发来使用ssh进行通讯。</p>
<span id="more"></span>

<p>SSH端口转发能够提供两大功能：</p>
<p>1.加密SSH Client端至SSH Server端之间的通讯数据。</p>
<p>2.突破防火墙的限制完成一些之前无法家里的TCP连接。</p>
<hr>
<p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -L localport: remotehost:remotehostport sshserver</span><br><span class="line">ssh -R localport:remotehost:remotehostport sshserver</span><br><span class="line">ssh -D localport root@sshserver -fNg</span><br><span class="line"></span><br><span class="line">localport:本地端口  </span><br><span class="line">remotehost:目标主机  </span><br><span class="line">remotehostport:目标主机端口  </span><br><span class="line">sshserver:ssh服务器  </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-f</td>
<td align="left">后台启用</td>
</tr>
<tr>
<td align="left">-N</td>
<td align="left">不打开远程shell,处于等待状态</td>
</tr>
<tr>
<td align="left">-g</td>
<td align="left">启用网关功能</td>
</tr>
<tr>
<td align="left">-L</td>
<td align="left">本地转发</td>
</tr>
<tr>
<td align="left">-R</td>
<td align="left">远程转发</td>
</tr>
<tr>
<td align="left">-D</td>
<td align="left">动态端口转发</td>
</tr>
</tbody></table>
<hr>
<h2 id="本地转发实现"><a href="#本地转发实现" class="headerlink" title="本地转发实现"></a>本地转发实现</h2><p>有A、B、C三台主机，主机C为telnet服务器且只能由主机B去连接，主机B为ssh服务器，实现坐在主机A上通过telnet服务直接去连接主机C</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">192.168.73.128</td>
</tr>
<tr>
<td align="left">B</td>
<td align="left">192.168.73.132</td>
</tr>
<tr>
<td align="left">C</td>
<td align="left">192.168.73.133</td>
</tr>
</tbody></table>
<p>在主机C上安装telnet服务并启用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostc ~]<span class="comment"># yum install telnet-server -y</span></span><br><span class="line">[root@hostc ~]<span class="comment"># systemctl start telnet.socket </span></span><br></pre></td></tr></table></figure>

<p>在主机C上将主机A加入防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostc ~]<span class="comment"># iptables -A INPUT -s 192.168.73.128 -j REJECT</span></span><br></pre></td></tr></table></figure>

<p>环境准备完毕</p>
<h3 id="配置本地转发"><a href="#配置本地转发" class="headerlink" title="配置本地转发"></a>配置本地转发</h3><p>在主机A上执行下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hosta ~]<span class="comment">#  ssh -L 12345:192.168.73.133:23 192.168.73.132 -fN</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hosta ~]<span class="comment"># telnet 127.0.0.1 12345</span></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Kernel 3.10.0-957.el7.x86_64 on an x86_64</span><br><span class="line">hostc login: masuri</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Apr 17 00:55:35 from ::ffff:192.168.73.132</span><br><span class="line">[masuri@hostc ~]$ </span><br></pre></td></tr></table></figure>

<hr>
<h2 id="远程转发实现"><a href="#远程转发实现" class="headerlink" title="远程转发实现"></a>远程转发实现</h2><p>主机A被防火墙阻挡无法直接访问主机B和主机C，主机B可以访问主机A和主机C，此时主机A若要访问主机C，就需要主机B先去访问主机A为其建立起通道。</p>
<h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">192.168.73.128</td>
</tr>
<tr>
<td align="left">B</td>
<td align="left">192.168.73.132</td>
</tr>
<tr>
<td align="left">C</td>
<td align="left">192.168.73.133</td>
</tr>
</tbody></table>
<p>在主机C上将主机A加入防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostc ~]<span class="comment"># iptables -A INPUT -s 192.168.73.128 -j REJECT</span></span><br></pre></td></tr></table></figure>

<p>在主机B上将主机A加入防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostb ~]<span class="comment"># iptables -A INPUT -s 192.168.73.128 -j REJECT</span></span><br></pre></td></tr></table></figure>

<p>实验环境准备完毕</p>
<h3 id="配置远程转发"><a href="#配置远程转发" class="headerlink" title="配置远程转发"></a>配置远程转发</h3><p>在主机B上去访问主机A，为其建立起通道</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostb ~]<span class="comment"># ssh -R 9527:192.168.73.133:23 192.168.73.128 -fN</span></span><br><span class="line">root@192.168.73.128<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">[root@hostb ~]# </span></span><br><span class="line"><span class="string">#此时本机的9527和A主机的9527端口已经建立起连接</span></span><br></pre></td></tr></table></figure>

<p>在主机A上使用telenet访问本机的9527端口来连接主机C</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hosta ~]<span class="comment"># telnet 127.0.0.1 9527</span></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Kernel 3.10.0-957.el7.x86_64 on an x86_64</span><br><span class="line">hostc login: masuri</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Apr 17 01:01:49 from ::ffff:192.168.73.132</span><br><span class="line">[masuri@hostc ~]$ </span><br></pre></td></tr></table></figure>

<hr>
<h2 id="动态端口转发（适用于Linux翻墙）"><a href="#动态端口转发（适用于Linux翻墙）" class="headerlink" title="动态端口转发（适用于Linux翻墙）"></a>动态端口转发（适用于Linux翻墙）</h2><p>当访问本机的1080端口号，自动将请求发送给虚拟机，虚拟机带为转发请求去访问网站，网站接受到请求，返回页面给虚拟机，虚拟机再转发给本机。</p>
<h3 id="环境准备-2"><a href="#环境准备-2" class="headerlink" title="环境准备"></a>环境准备</h3><p>主机A无法访问到主机C，主机A能和主机B，主机B能访问主机C</p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">192.168.73.128</td>
</tr>
<tr>
<td align="left">B</td>
<td align="left">192.168.73.132</td>
</tr>
<tr>
<td align="left">C</td>
<td align="left">192.168.73.133</td>
</tr>
</tbody></table>
<p>在主机C上将主机A加入防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostc ~]<span class="comment"># iptables -A INPUT -s 192.168.73.128 -j REJECT</span></span><br></pre></td></tr></table></figure>

<p>在主机C上建立http服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostc ~]<span class="comment"># yum install httpd -y</span></span><br><span class="line">[root@hostc html]<span class="comment"># echo &quot;www.mylinuxops.com&quot; &gt; index.html</span></span><br><span class="line">[root@hostc html]<span class="comment"># systemctl start httpd</span></span><br></pre></td></tr></table></figure>

<p>在主机A上访问主机C</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hosta ~]<span class="comment"># curl 192.168.73.133</span></span><br><span class="line">curl: (7) Failed connect to 192.168.73.133:80; Connection refused</span><br></pre></td></tr></table></figure>

<p>环境预备完毕</p>
<h3 id="配置动态端口转发"><a href="#配置动态端口转发" class="headerlink" title="配置动态端口转发"></a>配置动态端口转发</h3><p>在主机A上将主机B设置为代理服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hosta ~]<span class="comment"># ssh -D 1080 root@192.168.73.132 -fNg</span></span><br><span class="line">root@192.168.73.132<span class="string">&#x27;s password: </span></span><br></pre></td></tr></table></figure>

<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>在主机A使用本机的1080端口位去访问主机C的httpd服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hosta ~]<span class="comment"># curl --socks5 127.0.0.1:1080 192.168.73.133</span></span><br><span class="line">www.mylinuxops.com</span><br></pre></td></tr></table></figure>

<p>此方法可以实现翻墙，不过仅限于主机b和主机C为linux系统，以下实现当主机A为windows系统时也能访问主机C</p>
<hr>
<h2 id="动态端口转发（适用于windows翻墙）"><a href="#动态端口转发（适用于windows翻墙）" class="headerlink" title="动态端口转发（适用于windows翻墙）"></a>动态端口转发（适用于windows翻墙）</h2><h3 id="环境准备-3"><a href="#环境准备-3" class="headerlink" title="环境准备"></a>环境准备</h3><p>主机A无法访问到主机C，主机A能和主机B，主机B能访问主机C</p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">192.168.73.128</td>
</tr>
<tr>
<td align="left">B</td>
<td align="left">192.168.73.132</td>
</tr>
<tr>
<td align="left">C</td>
<td align="left">192.168.73.133</td>
</tr>
</tbody></table>
<p>在主机C上将主机A加入防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostc ~]<span class="comment"># iptables -A INPUT -s 192.168.73.128 -j REJECT</span></span><br></pre></td></tr></table></figure>

<p>在主机C上建立http服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostc ~]<span class="comment"># yum install httpd -y</span></span><br><span class="line">[root@hostc html]<span class="comment"># echo &quot;www.mylinuxops.com&quot; &gt; index.html</span></span><br><span class="line">[root@hostc html]<span class="comment"># systemctl start httpd</span></span><br></pre></td></tr></table></figure>

<p>在主机A上访问主机C</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hosta ~]<span class="comment"># curl 192.168.73.133</span></span><br><span class="line">curl: (7) Failed connect to 192.168.73.133:80; Connection refused</span><br></pre></td></tr></table></figure>

<p>环境预备完毕</p>
<h3 id="配置动态端口转发-1"><a href="#配置动态端口转发-1" class="headerlink" title="配置动态端口转发"></a>配置动态端口转发</h3><p>在主机B上开启sshd的网关功</p>
<p>修改/etc/ssh/sshd_config文件，将GatewayPorts项修改为yes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostb ~]<span class="comment"># vim /etc/ssh/sshd_config </span></span><br><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure>

<p>在主机B上打开本地端口作为网关实现端口转发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostb ~]<span class="comment"># vim /etc/ssh/sshd_config </span></span><br><span class="line">[root@hostb ~]<span class="comment"># ssh -gD 9527 localhost</span></span><br><span class="line">root@localhost<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Last failed login: Wed Apr 17 03:25:53 CST 2019 from 192.168.73.128 on ssh:notty</span></span><br><span class="line"><span class="string">There was 1 failed login attempt since the last successful login.</span></span><br><span class="line"><span class="string">Last login: Wed Apr 17 03:12:13 2019 from 192.168.73.1</span></span><br><span class="line"><span class="string">[root@hostb ~]#</span></span><br></pre></td></tr></table></figure>

<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>在主机A上将主机B作为代理服务器去访问A</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hosta ~]<span class="comment"># curl --socks5 192.168.73.132:9527 192.168.73.133 </span></span><br><span class="line">www.mylinuxops.com</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>OpenSSH</tag>
      </tags>
  </entry>
  <entry>
    <title>pxe自动化安装系统</title>
    <url>/2019/03/11/Linux%E5%9F%BA%E7%A1%80/pxe%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/pxe%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="pxe自动化安装系统"><a href="#pxe自动化安装系统" class="headerlink" title="pxe自动化安装系统"></a>pxe自动化安装系统</h2><p>pxe自动化安装，所需要的服务有：dhcp服务器，tftp服务器，http服务器 </p>
<p>pxe自动化安装，所需要的包组及相关安装文件有：syslinux以及自动化安装系统所需的应答文件selinux</p>
<span id="more"></span>

<hr>
<p>实验说明： </p>
<p>本次实验以一台CentOS7作为dhcp服务器，tftp服务器，以及http服务器向本网段内的主机提供自动化安装CentOS系统  </p>
<p>准备工作：  </p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">系统</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CentOS7</td>
<td align="left">CentOS7</td>
<td align="left">192.168.73.120</td>
</tr>
</tbody></table>
<hr>
<h3 id="一、安装dhcp服务、tftp-server服务、httpd服务及syslinux包组"><a href="#一、安装dhcp服务、tftp-server服务、httpd服务及syslinux包组" class="headerlink" title="一、安装dhcp服务、tftp-server服务、httpd服务及syslinux包组"></a>一、安装dhcp服务、tftp-server服务、httpd服务及syslinux包组</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># yum install dhcp tftp-server httpd syslinux -y</span></span><br></pre></td></tr></table></figure>
<h3 id="二、创建应答文件"><a href="#二、创建应答文件" class="headerlink" title="二、创建应答文件"></a>二、创建应答文件</h3><p>1.使用system-config-kickstart生成ks6.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># system-config-kickstart</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># vim ks6.cfg</span></span><br><span class="line"><span class="comment">#platform=x86, AMD64, or Intel EM64T</span></span><br><span class="line"><span class="comment">#version=DEVEL</span></span><br><span class="line"><span class="comment"># Firewall configuration</span></span><br><span class="line">firewall --disabled</span><br><span class="line"><span class="comment"># Install OS instead of upgrade</span></span><br><span class="line">install</span><br><span class="line"><span class="comment"># Use network installation</span></span><br><span class="line">url --url=<span class="string">&quot;http://192.168.73.120/centos/6/os/x86_64&quot;</span></span><br><span class="line"><span class="comment"># Root password</span></span><br><span class="line">rootpw --iscrypted $1$6oVXZR1R<span class="variable">$QOASc6inirmHCZmQ</span>.W9Hg0</span><br><span class="line"><span class="comment"># System authorization information</span></span><br><span class="line">auth  --useshadow  --passalgo=sha512</span><br><span class="line"><span class="comment"># Use text mode install</span></span><br><span class="line">text</span><br><span class="line"><span class="comment"># System keyboard</span></span><br><span class="line">keyboard us</span><br><span class="line"><span class="comment"># System language</span></span><br><span class="line">lang en_US</span><br><span class="line"><span class="comment"># SELinux configuration</span></span><br><span class="line">selinux --disabled</span><br><span class="line"><span class="comment"># Do not configure the X Window System</span></span><br><span class="line">skipx</span><br><span class="line"><span class="comment"># Installation logging level</span></span><br><span class="line">logging --level=info</span><br><span class="line"><span class="comment"># Reboot after installation</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># System timezone</span></span><br><span class="line">timezone  Asia/Shanghai</span><br><span class="line"><span class="comment"># Network information</span></span><br><span class="line">network  --bootproto=dhcp --device=eth0 --onboot=on</span><br><span class="line"><span class="comment"># System bootloader configuration</span></span><br><span class="line">bootloader --location=mbr</span><br><span class="line"><span class="comment"># Clear the Master Boot Record</span></span><br><span class="line">zerombr</span><br><span class="line"><span class="comment"># Partition clearing information</span></span><br><span class="line">clearpart --all --initlabel </span><br><span class="line"><span class="comment"># Disk partitioning information</span></span><br><span class="line">part /boot --fstype=<span class="string">&quot;ext4&quot;</span> --size=200</span><br><span class="line">part / --fstype=<span class="string">&quot;ext4&quot;</span> --size=20000</span><br><span class="line">part swap --fstype=<span class="string">&quot;swap&quot;</span> --size=1024</span><br><span class="line"></span><br><span class="line">%packages</span><br><span class="line">@core</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure>

<p>2.复制ks6.cfg为ks7.cfg，并修改部分参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cp ks6.cfg ks7.cfg</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># vim ks7.cfg</span></span><br><span class="line"><span class="comment">#platform=x86, AMD64, or Intel EM64T</span></span><br><span class="line"><span class="comment">#version=DEVEL</span></span><br><span class="line"><span class="comment"># Firewall configuration</span></span><br><span class="line">firewall --disabled</span><br><span class="line"><span class="comment"># Install OS instead of upgrade</span></span><br><span class="line">install</span><br><span class="line"><span class="comment"># Use network installation</span></span><br><span class="line">url --url=<span class="string">&quot;http://192.168.73.120/centos/7/os/x86_64&quot;</span>    <span class="comment">#将url改为7的url</span></span><br><span class="line"><span class="comment"># Root password</span></span><br><span class="line">rootpw --iscrypted $1$6oVXZR1R<span class="variable">$QOASc6inirmHCZmQ</span>.W9Hg0</span><br><span class="line"><span class="comment"># System authorization information</span></span><br><span class="line">auth  --useshadow  --passalgo=sha512</span><br><span class="line"><span class="comment"># Use text mode install</span></span><br><span class="line">text</span><br><span class="line"><span class="comment"># System keyboard</span></span><br><span class="line">keyboard us</span><br><span class="line"><span class="comment"># System language</span></span><br><span class="line">lang en_US</span><br><span class="line"><span class="comment"># SELinux configuration</span></span><br><span class="line">selinux --disabled</span><br><span class="line"><span class="comment"># Do not configure the X Window System</span></span><br><span class="line">skipx</span><br><span class="line"><span class="comment"># Installation logging level</span></span><br><span class="line">logging --level=info</span><br><span class="line"><span class="comment"># Reboot after installation</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># System timezone</span></span><br><span class="line">timezone  Asia/Shanghai</span><br><span class="line"><span class="comment"># Network information</span></span><br><span class="line">network  --bootproto=dhcp --device=ens33 --onboot=on      <span class="comment">#将网卡名修改为ens33</span></span><br><span class="line"><span class="comment"># System bootloader configuration</span></span><br><span class="line">bootloader --location=mbr</span><br><span class="line"><span class="comment"># Clear the Master Boot Record</span></span><br><span class="line">zerombr</span><br><span class="line"><span class="comment"># Partition clearing information</span></span><br><span class="line">clearpart --all --initlabel </span><br><span class="line"><span class="comment"># Disk partitioning information</span></span><br><span class="line">part /boot --fstype=<span class="string">&quot;ext4&quot;</span> --size=200</span><br><span class="line">part / --fstype=<span class="string">&quot;ext4&quot;</span> --size=20000</span><br><span class="line">part swap --fstype=<span class="string">&quot;swap&quot;</span> --size=1024</span><br><span class="line"></span><br><span class="line">%packages</span><br><span class="line">@core</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure>

<h3 id="三、配置httpd服务"><a href="#三、配置httpd服务" class="headerlink" title="三、配置httpd服务"></a>三、配置httpd服务</h3><p>1.创建http目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mkdir -pv /var/www/html/&#123;centos/&#123;6,7&#125;/os/x86_64,ksdir&#125;</span></span><br><span class="line">mkdir: created directory ‘/var/www/html/centos’</span><br><span class="line">mkdir: created directory ‘/var/www/html/centos/6’</span><br><span class="line">mkdir: created directory ‘/var/www/html/centos/6/os’</span><br><span class="line">mkdir: created directory ‘/var/www/html/centos/6/os/x86_64’</span><br><span class="line">mkdir: created directory ‘/var/www/html/centos/7’</span><br><span class="line">mkdir: created directory ‘/var/www/html/centos/7/os’</span><br><span class="line">mkdir: created directory ‘/var/www/html/centos/7/os/x86_64’</span><br><span class="line">mkdir: created directory ‘/var/www/html/ksdir’</span><br></pre></td></tr></table></figure>

<p>2.将CentOS6及7的光盘文件挂在至相关的目录下(工作中可以直接将光盘镜像复制至目录下)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># lsblk | grep sr</span></span><br><span class="line">sr0     11:0    1   10G  0 rom  /mnt</span><br><span class="line">sr1     11:1    1  3.7G  0 rom  </span><br><span class="line">[root@centos7 ~]<span class="comment"># mount /dev/sr0 /var/www/html/centos/7/os/x86_64/</span></span><br><span class="line">mount: /dev/sr0 is write-protected, mounting read-only</span><br><span class="line">[root@centos7 ~]<span class="comment"># mount /dev/sr1 /var/www/html/centos/6/os/x86_64/</span></span><br><span class="line">mount: /dev/sr1 is write-protected, mounting read-only</span><br><span class="line">[root@centos7 ~]<span class="comment"># lsblk | grep sr</span></span><br><span class="line">sr0     11:0    1   10G  0 rom  /var/www/html/centos/7/os/x86_64</span><br><span class="line">sr1     11:1    1  3.7G  0 rom  /var/www/html/centos/6/os/x86_64</span><br></pre></td></tr></table></figure>

<p>3.将准备好的应答文件复制至目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cp ks6.cfg /var/www/html/ksdir</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cp ks7.cfg /var/www/html/ksdir</span></span><br></pre></td></tr></table></figure>

<p>4.启动httpd服务，并设置为开机自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># systemctl start httpd</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl enable httpd</span></span><br></pre></td></tr></table></figure>

<h3 id="四、配置tftp服务器"><a href="#四、配置tftp服务器" class="headerlink" title="四、配置tftp服务器"></a>四、配置tftp服务器</h3><p>1.在tftp工作目录下创建出相关的文件目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mkdir -pv /var/lib/tftpboot/&#123;kernel&#123;6,7&#125;,pxelinux.cfg&#125;</span></span><br><span class="line">mkdir: created directory ‘/var/lib/tftpboot/kernel6’</span><br><span class="line">mkdir: created directory ‘/var/lib/tftpboot/kernel7’</span><br><span class="line">mkdir: created directory ‘/var/lib/tftpboot/pxelinux.cfg’</span><br></pre></td></tr></table></figure>

<p>2.将centos6和centos7的内核及虚拟文件系统复制至tftp工作目录下的相对应kernel目录中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 tftpboot]<span class="comment"># cd /var/lib/tftpboot/kernel6</span></span><br><span class="line">[root@centos7 kernel6]<span class="comment"># cp /var/www/html/centos/6/os/x86_64/isolinux/vmlinuz .</span></span><br><span class="line">[root@centos7 kernel6]<span class="comment"># cp /var/www/html/centos/6/os/x86_64/isolinux/initrd.img .</span></span><br><span class="line">[root@centos7 kernel6]<span class="comment"># cd /var/lib/tftpboot/kernel7</span></span><br><span class="line">[root@centos7 kernel7]<span class="comment"># cp /var/www/html/centos/7/os/x86_64/isolinux/vmlinuz .</span></span><br><span class="line">[root@centos7 kernel7]<span class="comment"># cp /var/www/html/centos/7/os/x86_64/isolinux/initrd.img .</span></span><br></pre></td></tr></table></figure>

<p>3.复制启动相关的文件至tftp工作目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 kernel7]<span class="comment"># cd /var/lib/tftpboot/</span></span><br><span class="line">[root@centos7 tftpboot]<span class="comment"># cp /usr/share/syslinux/menu.c32 .</span></span><br><span class="line">[root@centos7 tftpboot]<span class="comment"># cp /usr/share/syslinux/pxelinux.0 .</span></span><br></pre></td></tr></table></figure>

<p>4.复制光盘上的菜单文件至/var/lib/tftpboot/pxelinux.cfg目录下改名为default，修改此文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 tftpboot]<span class="comment"># cp /var/www/html/centos/7/os/x86_64/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default</span></span><br><span class="line">[root@centos7 tftpboot]<span class="comment"># vim /var/lib/tftpboot/pxelinux.cfg/default</span></span><br><span class="line">default menu.c32            <span class="comment">#将此行改为menu.c32</span></span><br><span class="line">timeout 600</span><br><span class="line"></span><br><span class="line">menu title CentOS install</span><br><span class="line"></span><br><span class="line">label linux 6</span><br><span class="line">  menu label Install CentOS ^6</span><br><span class="line">  kernel kernel6/vmlinuz    <span class="comment">#此处为centos6内核所在的路径</span></span><br><span class="line">  append initrd=kernel6/initrd.img ks=http://192.168.73.120/ksdir/ks6.cfg               <span class="comment">#指定KS文件在网络中的位置</span></span><br><span class="line"></span><br><span class="line">label linux 7</span><br><span class="line">  menu label Install CentOS ^7</span><br><span class="line">  kernel kernel7/vmlinuz    <span class="comment">#此处为centos7内核所在的路径</span></span><br><span class="line">  append initrd=kernel7/initrd.img ks=http://192.168.73.120/ksdir/ks7.cfg               <span class="comment">#指定KS文件在网路中的位置</span></span><br><span class="line"></span><br><span class="line">label <span class="built_in">local</span></span><br><span class="line">  menu label Boot from ^<span class="built_in">local</span> drive</span><br><span class="line">  localboot 0xffff</span><br></pre></td></tr></table></figure>

<p>5.查看下目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 tftpboot]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── centos6</span><br><span class="line">│   ├── initrd.img</span><br><span class="line">│   └── vmlinuz</span><br><span class="line">├── centos7</span><br><span class="line">│   ├── initrd.img</span><br><span class="line">│   └── vmlinuz</span><br><span class="line">├── menu.c32</span><br><span class="line">├── pxelinux.0</span><br><span class="line">└── pxelinux.cfg</span><br><span class="line">    └── default</span><br></pre></td></tr></table></figure>

<p>6.启动tftp服务，并设置为开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># systemctl start tftp</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl enable tftp</span></span><br></pre></td></tr></table></figure>

<h3 id="五、配置dhcp服务"><a href="#五、配置dhcp服务" class="headerlink" title="五、配置dhcp服务"></a>五、配置dhcp服务</h3><p>1.由于dhcpd默认的配置文件为空，此处将dhcpd的样板配置文件复制后加以修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cp /usr/share/doc/dhcp-4.2.5/dhcpd.conf.example /etc/dhcp/dhcpd.conf</span></span><br><span class="line">cp: overwrite ‘/etc/dhcp/dhcpd.conf’? y</span><br></pre></td></tr></table></figure>

<p>2.配置dhcp服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/dhcp/dhcpd.conf</span></span><br><span class="line"><span class="comment"># option definitions common to all supported networks...</span></span><br><span class="line">option domain-name <span class="string">&quot;mylinuxops.com&quot;</span>;                <span class="comment">#指定预添加域名</span></span><br><span class="line">option domain-name-servers 114.114.114.114;         <span class="comment">#指定DNS服务器</span></span><br><span class="line"></span><br><span class="line">default-lease-time 6000;</span><br><span class="line">max-lease-time 72000;</span><br><span class="line"></span><br><span class="line">...中间省略...</span><br><span class="line"></span><br><span class="line"><span class="comment"># No service will be given on this subnet, but declaring it helps the </span></span><br><span class="line"><span class="comment"># DHCP server to understand the network topology.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#subnet 10.152.187.0 netmask 255.255.255.0 &#123;    #注释</span></span><br><span class="line"><span class="comment">#&#125;                                              #注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a very basic subnet declaration.</span></span><br><span class="line"></span><br><span class="line">subnet 192.168.73.0 netmask 255.255.255.224 &#123;</span><br><span class="line">  range 192.168.73.1 192.168.73.100;        <span class="comment">#指定dhcp地址池</span></span><br><span class="line">  option routers 192.168.73.254;            <span class="comment">#指定网关</span></span><br><span class="line">  filename <span class="string">&quot;pxelinux.0&quot;</span>;                    <span class="comment">#指定启动文件</span></span><br><span class="line">  next-server 192.168.73.120;               <span class="comment">#指定tftp服务器路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.启动dhcp服务器，并设置为开机自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># systemctl start dhcpd</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl enable dhcpd</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/dhcpd.service to /usr/lib/systemd/system/dhcpd.service.</span><br></pre></td></tr></table></figure>

<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>以上为pxe自动化安装的全过程，有几点细节需要注意：</p>
<p>1.所有服务部署完毕，进行测试之前，确保网络中没有其他的DHCP服务，避免产生干扰。</p>
<p>2.centos7在自动化安装时需要1G以上的内存空间。</p>
<p>3.安装时注意物理磁盘的大小以及ks文件中的磁盘大小 ，确保有足够的空间进行安装。</p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>自动化安装系统</tag>
      </tags>
  </entry>
  <entry>
    <title>sshd的配置和优化</title>
    <url>/2019/03/12/Linux%E5%9F%BA%E7%A1%80/sshd%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/sshd%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="sshd的配置和优化"><a href="#sshd的配置和优化" class="headerlink" title="sshd的配置和优化"></a>sshd的配置和优化</h2><p>sshd服务器端的配置文件为/etc/ssh_config  </p>
<span id="more"></span>

<h3 id="配置文件中的一些常用参数"><a href="#配置文件中的一些常用参数" class="headerlink" title="配置文件中的一些常用参数"></a>配置文件中的一些常用参数</h3><table>
<thead>
<tr>
<th align="left">常用参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">port</td>
<td align="left">监听端口号</td>
</tr>
<tr>
<td align="left">ListenAddress ip</td>
<td align="left">监听的IP地址</td>
</tr>
<tr>
<td align="left">LoginGraceTime</td>
<td align="left">发起连接后多少时间内必须登录超时断开连接</td>
</tr>
<tr>
<td align="left">PermitRootLogin</td>
<td align="left">是否允许root登录</td>
</tr>
<tr>
<td align="left">StrictModes</td>
<td align="left">检查.ssh/文件的所有者，权限等</td>
</tr>
<tr>
<td align="left">MaxAuthTries</td>
<td align="left">最大密码尝试次数</td>
</tr>
<tr>
<td align="left">MaxSessions</td>
<td align="left">同一连接的最大绘会话数</td>
</tr>
<tr>
<td align="left">PubkeyAuthentication</td>
<td align="left">基于Key验证</td>
</tr>
<tr>
<td align="left">PermitEmptyPasswords</td>
<td align="left">是否使用空口令登录</td>
</tr>
<tr>
<td align="left">PasswordAuthentication</td>
<td align="left">基于口令验证</td>
</tr>
<tr>
<td align="left">GatewayPorts</td>
<td align="left">ssh服务监听所使用的端口当网关使用</td>
</tr>
<tr>
<td align="left">ClientAliveInterval</td>
<td align="left">间隔多久客户端和服务器端没有操作就断开连接</td>
</tr>
<tr>
<td align="left">ClientAliveCountMax</td>
<td align="left">和上面那项一起使用为检查的次数</td>
</tr>
<tr>
<td align="left">UseDNS</td>
<td align="left">是否使用名称解析</td>
</tr>
<tr>
<td align="left">GSSAPIAuthentication</td>
<td align="left">GSSAPI的认证</td>
</tr>
<tr>
<td align="left">MaxStartups</td>
<td align="left">未验证的最大连接数</td>
</tr>
<tr>
<td align="left">Banner</td>
<td align="left">登录前提示</td>
</tr>
<tr>
<td align="left">AllowUsers</td>
<td align="left">允许哪些用户登录（白名单）</td>
</tr>
<tr>
<td align="left">DenyUsers</td>
<td align="left">不允许哪些用户登录（黑名单）</td>
</tr>
<tr>
<td align="left">AllowGroups</td>
<td align="left">允许哪些组登录（白名单）</td>
</tr>
<tr>
<td align="left">DenyGroups</td>
<td align="left">不允许哪些组登录（黑名单）</td>
</tr>
</tbody></table>
<h3 id="配置详细用法"><a href="#配置详细用法" class="headerlink" title="配置详细用法"></a>配置详细用法</h3><p>1.port  </p>
<p>在生产环境中建议将此端口改为非标准端口，防止被人恶意猜测密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line">Port 2222</span><br><span class="line">[root@HostA ~]<span class="comment"># service sshd restart</span></span><br><span class="line">Stopping sshd:                                             [  OK  ]</span><br><span class="line">Starting sshd:                                             [  OK  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时sshd服务已经监听在2222端口上</span></span><br><span class="line">[root@HostA ~]<span class="comment"># lsof -i:2222</span></span><br><span class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">sshd    2424 root    3u  IPv4  13945      0t0  TCP *:EtherNet/IP-1 (LISTEN)</span><br><span class="line">sshd    2424 root    4u  IPv6  13947      0t0  TCP *:EtherNet/IP-1 (LISTEN)</span><br></pre></td></tr></table></figure>

<p>2.LinstenAddress  </p>
<p>若本机有多个ip地址，可以指定用哪个地址提供sshd服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">Port 2222</span><br><span class="line">ListenAddress 172.22.27.12</span><br><span class="line">[root@HostA ~]<span class="comment"># service sshd restart</span></span><br><span class="line">Stopping sshd:                                             [  OK  ]</span><br><span class="line">Starting sshd:                                             [  OK  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时sshd服务监听在172.22.27.124的2222端口上</span></span><br><span class="line">[root@HostA ~]<span class="comment"># ss -tnl |grep 2222</span></span><br><span class="line">LISTEN     0      128           172.22.27.124:2222                     *:*  </span><br></pre></td></tr></table></figure>

<p>3.LoginGraceTime  </p>
<p>此项表示有多少用户发起ssh连接后多少时间内必须输入密码登录，否则断开连接默认为2分钟</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#LoginGraceTime 2m</span></span><br></pre></td></tr></table></figure>

<p>4.PermitRootLogin</p>
<p>是否允许root用户登录，在生产环境中，最好禁止root用户直接登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line">Port 2222</span><br><span class="line">ListenAddress 172.22.27.12</span><br><span class="line">PermitRootLogin no </span><br><span class="line"></span><br><span class="line">重启sshd服务</span><br><span class="line">[root@HostA ~]<span class="comment"># service sshd restart</span></span><br><span class="line">Stopping sshd:                                             [  OK  ]</span><br><span class="line">Starting sshd:                                             [  OK  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时使用root账户已经无法登录</span></span><br><span class="line">[root@HostA ~]<span class="comment"># ssh -p 2222 root@172.22.27.124</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;[172.22.27.124]:2222 ([172.22.27.124]:2222)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 46:d8:67:07:f3:51:87:95:2c:d7:4b:27:ce:85:a2:ed.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>[172.22.27.124]:2222<span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@172.22.27.124&#x27;</span>s password: </span><br><span class="line">Permission denied, please try again.</span><br><span class="line">root@172.22.27.124<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">root@172.22.27.124&#x27;</span>s password: </span><br><span class="line">Permission denied (publickey,password).</span><br></pre></td></tr></table></figure>

<p>5.MaxAuthTries</p>
<p>最大密码尝试次数默认为3次，尝试次数为此项后的值的一半</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment">#MaxAuthTries 6</span></span><br></pre></td></tr></table></figure>

<p>6.MaxSessions</p>
<p>同一连接的最大会话个数，默认为10个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line">MaxSessions 3</span><br><span class="line"></span><br><span class="line">重启服务</span><br><span class="line">[root@HostA ~]<span class="comment"># service sshd restart</span></span><br><span class="line">Stopping sshd:                                             [  OK  ]</span><br><span class="line">Starting sshd:                                             [  OK  ]</span><br><span class="line">此时克隆会话时最多只能克隆3个在多就会拒绝</span><br></pre></td></tr></table></figure>

<p>7.PubkeyAuthentication</p>
<p>基于Key验证，登录时使用密钥验证，此项默认开启生产环境中最好使用key验证。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment">#PubkeyAuthentication yes</span></span><br></pre></td></tr></table></figure>

<p>8.PermitEmptyPasswords</p>
<p>是否使用空口令登录，生产环境中使用空口令登录是非常危险的，所以此处默认也是禁止的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment">#PermitEmptyPasswords no</span></span><br></pre></td></tr></table></figure>

<p>9.PasswordAuthentication</p>
<p>基于口令验证，默认为开启。生产环境中建议禁用口令登录。只开启密钥登陆</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>

<p>10.GatewayPorts  </p>
<p>ssh服务监听所使用的端口当网关使用  </p>
<p>此项用法可参考端口转发</p>
<p>11.ClientAliveInterval和ClientAliveCountMax</p>
<p>ClientAliveInterval:连接后多久没有操作则断开</p>
<p>ClientAliveCountMax:检测几次后发现没有操作断开，此项和上一项结合一起使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment">#ClientAliveInterval 0             #0表示不限制时间</span></span><br><span class="line"><span class="comment">#ClientAliveCountMax 3</span></span><br></pre></td></tr></table></figure>

<p>11.UseDNS和GSSAPIAuthentication  </p>
<p>此处2项建议关闭，能加速ssh的连接速度</p>
<p>12.MaxStartups  </p>
<p>未验证的最大连接数，默认的10:30:100表示，ssh连接进入前10个链接能全部连接上，当连接数大于10个就以30%的纪律随机拒绝登陆，连接数超过100个全部拒绝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line">MaxStartups 10:30:100</span><br></pre></td></tr></table></figure>

<p>12.Banner  </p>
<p>登录前提示，在选项后跟上路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line">Banner /data/hello</span><br><span class="line">[root@HostA ~]<span class="comment"># echo hello &gt; /data/hello    #创建一个hello的文件</span></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">[root@HostA ~]<span class="comment"># service sshd restart</span></span><br><span class="line">Stopping sshd:                                             [  OK  ]</span><br><span class="line">Starting sshd:                                             [  OK  ]</span><br><span class="line">[root@HostA ~]<span class="comment"># ssh -p 2222 masuri@172.22.27.124</span></span><br><span class="line">hello                                       <span class="comment">#所创建的登录前提示</span></span><br><span class="line">masuri@172.22.27.124<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>13、AllowUsers、DenyUsers、AllowGroups、DenyGroups  </p>
<p>此处4项为用户和组的黑白名单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ssh/sshd_config </span></span><br><span class="line">DenyUsers wang                      <span class="comment">#将wang用户加入黑名单</span></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">[root@HostA ~]<span class="comment"># service sshd restart</span></span><br><span class="line">Stopping sshd:                                             [  OK  ]</span><br><span class="line">Starting sshd:                                             [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@HostA ~]<span class="comment"># useradd wang</span></span><br><span class="line">[root@HostA ~]<span class="comment"># echo 111111 | passwd --stdin wang</span></span><br><span class="line">Changing password <span class="keyword">for</span> user wang.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"><span class="comment">#此时wang用户无法登陆</span></span><br><span class="line">[root@HostA ~]<span class="comment"># ssh -p 2222  wang@172.22.27.124</span></span><br><span class="line">hello</span><br><span class="line">wang@172.22.27.124<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">wang@172.22.27.124&#x27;</span>s password: </span><br><span class="line">Permission denied, please try again.</span><br><span class="line">wang@172.22.27.124<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Permission denied (publickey,password).</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="生产环境中ssh服务最佳实践"><a href="#生产环境中ssh服务最佳实践" class="headerlink" title="生产环境中ssh服务最佳实践"></a>生产环境中ssh服务最佳实践</h2><p>1.建议使用非默认端口  </p>
<p>修改port    </p>
<p>2.禁止使用protocol version 1   </p>
<p>Protocol 2  </p>
<p>3.限制可登录用户</p>
<p>AllowUsers、DenyUsers、AllowGroups、DenyGroups   </p>
<p>4.设定空闲会话超时时长  </p>
<p>ClientAliveInterval和ClientAliveCountMax  </p>
<p>5.利用防火墙设置ssh访问策略  </p>
<p>设置iptables策略  </p>
<p>6.仅监听特定的IP地址  </p>
<p>修改Listen  </p>
<p>7.基于口令认证时，使用强密码策略  </p>
<p>使用难以猜测的随机口令，长度越长约好，并定期修改。  </p>
<p>8.使用基于密钥的认证  </p>
<p>使用密钥登陆，不使用口令  </p>
<p>9.禁止使用空密码  </p>
<p>PermitEmptyPasswords no  </p>
<p>10.禁止root用户直接登录  </p>
<p>PermitRootLogin  </p>
<p>11.限制ssh的访问频度和并发在线数    </p>
<p>MaxStartups   </p>
<p>12.经常分析日志    </p>
<p>sshd的日志文件为/var/log/secure </p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>OpenSSH</tag>
      </tags>
  </entry>
  <entry>
    <title>swap分区</title>
    <url>/2019/03/05/Linux%E5%9F%BA%E7%A1%80/swap%E5%88%86%E5%8C%BA/swap%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h2 id="swap分区"><a href="#swap分区" class="headerlink" title="swap分区"></a>swap分区</h2><p>swap交换分区是系统RAM的补充，Swap分区支持虚拟内存。当没有足够的RAM保存系统处理的数据时会将数据写入swap分区，当系统缺乏swap空间时，内核会因RAM内存耗尽而终止进程。配置过多swap空间会造成存储设备处于分配状态但闲置，造成浪费，过多swap空间还会掩盖内存泄露，所以swap分区可以根据物理内存的大小来分配，物理内存过小时可以设置为物理内存的2倍，随着物理内存的逐渐增大，swap的倍数可以逐渐递减。</p>
<span id="more"></span>

<p>在实际生产中不建议使用swap分区来当内存使用，毕竟磁盘的性能要弱于内存数倍</p>
<p>以下为演示swap分区的各种创建方法：</p>
<h2 id="一、将分区创建为swap"><a href="#一、将分区创建为swap" class="headerlink" title="一、将分区创建为swap"></a>一、将分区创建为swap</h2><h3 id="1-划分分区"><a href="#1-划分分区" class="headerlink" title="1.划分分区"></a>1.划分分区</h3><p>新增一块硬盘sdb，对sdb进行分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># fdisk /dev/sdb</span></span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x9446b510.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): </span><br><span class="line">Using default response p</span><br><span class="line">Partition number (1-4, default 1): </span><br><span class="line">First sector (2048-41943039, default 2048): </span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-41943039, default 41943039): +1G</span><br><span class="line">Partition 1 of <span class="built_in">type</span> Linux and of size 1 GiB is <span class="built_in">set</span></span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (<span class="built_in">type</span> L to list all codes): 82</span><br><span class="line">Changed <span class="built_in">type</span> of partition <span class="string">&#x27;Linux&#x27;</span> to <span class="string">&#x27;Linux swap / Solaris&#x27;</span></span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>

<h3 id="2-创建swap文件系统"><a href="#2-创建swap文件系统" class="headerlink" title="2.创建swap文件系统"></a>2.创建swap文件系统</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mkswap /dev/sdb1</span></span><br><span class="line">Setting up swapspace version 1, size = 1048572 KiB</span><br><span class="line">no label, UUID=7d411e84-9e3e-416a-99a1-b81973b0001b</span><br></pre></td></tr></table></figure>

<h3 id="3-将swap文件系统写入fstab"><a href="#3-将swap文件系统写入fstab" class="headerlink" title="3.将swap文件系统写入fstab"></a>3.将swap文件系统写入fstab</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Tue Mar  5 21:07:19 2019</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">UUID=45490aa4-cf29-420d-a606-af32688b6707 /                       xfs     defaults        0 0</span><br><span class="line">UUID=17dcd896-b7cf-48d0-b8bd-4c0b0f2c62b2 /boot                   xfs     defaults        0 0</span><br><span class="line">UUID=4b6e1813-2c46-402a-869a-02cbbcb76ade /data                   xfs     defaults        0 0</span><br><span class="line">UUID=0995b444-48c1-4423-92bc-2deda0d3c082 swap                    swap    defaults        0 0</span><br><span class="line">UUID=7d411e84-9e3e-416a-99a1-b81973b0001b swap                  swap    defaults   0 0</span><br></pre></td></tr></table></figure>

<p>注意：pri=5为swap分区的优先级，由于此处使用的为新硬盘，磁盘最外圈的读写速度为最快所以将优先级调为5，比系统安装时的swap等级高</p>
<h3 id="4-挂载swap"><a href="#4-挂载swap" class="headerlink" title="4.挂载swap"></a>4.挂载swap</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># swapon /dev/sdb1</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># swapon -s</span></span><br><span class="line">Filename				Type		Size	Used	Priority</span><br><span class="line">/dev/sda5                              	partition	2097148	0	-2</span><br><span class="line">/dev/sdb1                              	partition	1048572	0	-3</span><br></pre></td></tr></table></figure>

<p>注意：由于此处使用的为新硬盘，磁盘最外圈的读写速度最快所以将优先级调至比sda5高，此处数字越大优先级越高</p>
<h3 id="5-调优先级"><a href="#5-调优先级" class="headerlink" title="5.调优先级"></a>5.调优先级</h3><p>首先需要将挂载的swap卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># swapoff /dev/sdb1</span></span><br></pre></td></tr></table></figure>

<p>修改/etc/fstab文件,将default修改为5，比sda5的-2高就行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UUID=7d411e84-9e3e-416a-99a1-b81973b0001b swap                  swap    pri=5   0 0</span><br></pre></td></tr></table></figure>

<p>重新挂载swap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># swapon -a</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># swapon -s</span></span><br><span class="line">Filename				Type		Size	Used	Priority</span><br><span class="line">/dev/sda5                              	partition	2097148	0	-2</span><br><span class="line">/dev/sdb1                              	partition	1048572	0	5</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、将文件创建为swap"><a href="#二、将文件创建为swap" class="headerlink" title="二、将文件创建为swap"></a>二、将文件创建为swap</h2><p>由于某些场景下系统在创建时没有创建swap分区，并且系统上也没有多余的空间创建swap分区，此时可以考虑使用用文件来创建swap分区，具体操作方法如下：</p>
<h3 id="1-创建一个文件"><a href="#1-创建一个文件" class="headerlink" title="1.创建一个文件"></a>1.创建一个文件</h3><p>使用dd创建一个文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># dd if=/dev/zero of=swapfile bs=1M count=1024</span></span><br><span class="line">1024+0 records <span class="keyword">in</span></span><br><span class="line">1024+0 records out</span><br><span class="line">1073741824 bytes (1.1 GB) copied, 5.02973 s, 213 MB/s</span><br></pre></td></tr></table></figure>

<h3 id="2-对swapfile文件创建swap文件系统"><a href="#2-对swapfile文件创建swap文件系统" class="headerlink" title="2.对swapfile文件创建swap文件系统"></a>2.对swapfile文件创建swap文件系统</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mkswap swapfile </span></span><br><span class="line">Setting up swapspace version 1, size = 1048572 KiB</span><br><span class="line">no label, UUID=c7c8d93d-862b-48b1-aeb3-1390dbf2d6db</span><br></pre></td></tr></table></figure>

<h3 id="3-挂载swapfile文件"><a href="#3-挂载swapfile文件" class="headerlink" title="3.挂载swapfile文件"></a>3.挂载swapfile文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># swapon -a</span></span><br><span class="line">swapon: /root/swapfile: insecure permissions 0644, 0600 suggested.</span><br><span class="line">[root@centos7 ~]<span class="comment"># swapon -s</span></span><br><span class="line">Filename				Type		Size	Used	Priority</span><br><span class="line">/dev/sda5                              	partition	2097148	0	-2</span><br><span class="line">/dev/sdb1                              	partition	1048572	0	5</span><br><span class="line">/root/swapfile                         	file	1048572	0	-3</span><br></pre></td></tr></table></figure>

<p>注意：此处的报警为权限问题，0644的权限会造成其他用户可以读其中的内容所以此处需要将其权限设置为600</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># chmod 600 swapfile </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ll swapfile </span></span><br><span class="line">-rw------- 1 root root 1073741824 Mar 26 05:48 swapfile</span><br></pre></td></tr></table></figure>

<p>注意：由于使用的是文件来作为swap，在使用到swap时系统需要先去磁盘上找到此文件，所以速度较慢，另外文件在磁盘上所在的位置是未知的，所以所创建的Swap的性能未必有创建系统时所建的swap性能好，</p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP的三次握手和四次分手</title>
    <url>/2019/03/06/Linux%E5%9F%BA%E7%A1%80/tcp%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E5%88%86%E6%89%8B/tcp%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E5%88%86%E6%89%8B/</url>
    <content><![CDATA[<h2 id="tcp连接三次握手"><a href="#tcp连接三次握手" class="headerlink" title="tcp连接三次握手"></a>tcp连接三次握手</h2><p>客户端发起链接SYN置为1其余5位置为0，并发送序号seq=x，客户端状态从close变为SYN-SENT</p>
<p>服务器端收到客户端的请求返回SYN=1，ACK=1，发送序号seq=y和确认序号ack=x+1，服务器状态由LISTEN变为SYN-RCVD。</p>
<p>客户端收到服务器端的相应后 返回ACK=1,seq=x+1，确认序号ack=y+1,客户端状态从SYN-SENT变为ESTAB-LISHED，服务器端收到客户端的回应后状态也变为ESTAB-LISTHED双方建立链接。</p>
<p><img src="%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png"></p>
<h2 id="tcp连接断开时的四次分手"><a href="#tcp连接断开时的四次分手" class="headerlink" title="tcp连接断开时的四次分手"></a>tcp连接断开时的四次分手</h2><p>建立连接后，客户端和服务器都处于ESTABLISED状态。这时，客户端发起断开连接的请求：</p>
<ol>
<li><p>客户端向服务器发送 FIN 数据包，进入FIN_WAIT_1状态。表示完成任务需要断开连接。</p>
</li>
<li><p>服务器收到数据包后，检测到设置了 FIN 标志位，知道要断开连接，于是向客户端发送“确认包”，进入CLOSE_WAIT状态。</p>
</li>
</ol>
<p>注意：服务器收到请求后并不是立即断开连接，而是先向客户端发送“确认包”，告诉它我知道了，我需要准备一下才能断开连接。</p>
<ol start="3">
<li><p>客户端收到“确认包”后进入FIN_WAIT_2状态，等待服务器准备完毕后再次发送数据包。</p>
</li>
<li><p>等待片刻后，服务器准备完毕，可以断开连接，于是再主动向客户端发送 FIN 包，告诉它我准备好了，断开连接吧。然后进入LAST_ACK状态。</p>
</li>
<li><p>客户端收到服务器的 FIN 包后，再向服务器发送 ACK 包，告诉它你断开连接吧。然后进入TIME_WAIT状态。</p>
</li>
<li><p>服务器收到客户端的 ACK 包后，就断开连接，关闭套接字，进入CLOSED状态。</p>
</li>
</ol>
<p><img src="%E5%9B%9B%E6%AC%A1%E5%88%86%E6%89%8B.png"></p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>主机名修改</title>
    <url>/2019/03/07/Linux%E5%9F%BA%E7%A1%80/%E4%B8%BB%E6%9C%BA%E5%90%8D%E4%BF%AE%E6%94%B9/%E4%B8%BB%E6%9C%BA%E5%90%8D%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<h2 id="Linux主机名修改"><a href="#Linux主机名修改" class="headerlink" title="Linux主机名修改"></a>Linux主机名修改</h2><p>由于CentOS6和CentOS7修改主机名的方法是不同的所以此处分别展示如何在CentOS6 和 CentOS7上分别修改主机名。  </p>
<p>生产环境中通常需要使用不同的主机名来区分生产环境中的不同主机，此时就涉及到了主机名的修改，由于CentOS6和CentOS7修改主机名的方法是不同的，此处分别展示如何在CentOS6 和 CentOS7上分别修改主机名。  </p>
<span id="more"></span>

<p>此处以将主机名修改为mylinuxops.com为例 </p>
<h3 id="一、CentOS6修改主机名"><a href="#一、CentOS6修改主机名" class="headerlink" title="一、CentOS6修改主机名"></a>一、CentOS6修改主机名</h3><p>1.修改配置文件/etc/sysconfig/network</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># vim /etc/sysconfig/network</span></span><br><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=mylinuxops.com</span><br></pre></td></tr></table></figure>

<p>2.修改/etc/hosts在127.0.0.1后添加主机名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># vim /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 mylinuxops.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br></pre></td></tr></table></figure>

<p>3.若要使主机名临时有效可以使用hostname HOSTNAME 来修改，但此命令执行后命令提示符所显示的不会马上生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># hostname mylinuxops.com</span></span><br></pre></td></tr></table></figure>

<p>4.若要使其立即生效可以使用exec bash 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># exec bash</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h3 id="二、CentOS7修改主机名"><a href="#二、CentOS7修改主机名" class="headerlink" title="二、CentOS7修改主机名"></a>二、CentOS7修改主机名</h3><p>CentOS7修改主机名的方法与CentOS6不同可以直接通过hostnamectl命令去修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># hostnamectl set-hostname mylinuxops.com</span></span><br><span class="line"><span class="comment">#hostnameclt命令修改主机名后不会直接生效</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># hostname</span></span><br><span class="line">mylinuxops.com</span><br><span class="line"><span class="comment">#若要立即生效可以使用exec bash</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># exec bash</span></span><br><span class="line">[root@mylinuxops ~]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>破解root口令</title>
    <url>/2019/03/09/Linux%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9root%E5%8F%A3%E4%BB%A4/%E7%A0%B4%E8%A7%A3root%E5%8F%A3%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="破解root口令"><a href="#破解root口令" class="headerlink" title="破解root口令"></a>破解root口令</h2><p>在生产环境中有时可能会遇到root口令丢失，遗忘挥着前任没有交接密码的情况，此时就需要进行破解root密码，centos6和centos7的口令破解方法略微不同，以下为演示6和7上破解密码的方法。</p>
<span id="more"></span>

<h3 id="centos6破解口令"><a href="#centos6破解口令" class="headerlink" title="centos6破解口令"></a>centos6破解口令</h3><p>centos6破解口令比较简单，由于单用户模式不需要密码就能登录root账户，所以只需要使用单用户模式登录就能轻易破解</p>
<p>1.重启机器在内核选择么模式下选中要启动的内核然后按a</p>
<p><img src="1.png" alt="1.png"></p>
<p>2.在行的尾部追加一个1，s，S，或者single，进入单用户模式</p>
<p><img src="2.png" alt="2.png"></p>
<p>3.进入单用户模式后修改密码</p>
<p><img src="3.png" alt="3.png"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>由于centos6破解root账户的方法过于简单，可以在选择内核界面时设置密码，不让普通用户可以随意选择启动模式。具体操作方法如下:  </p>
<p>1.先使用grub-md5-crypt创建相应的密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># grub-md5-crypt</span></span><br><span class="line">Password: </span><br><span class="line">Retype password: </span><br><span class="line">$1$tjgZK0<span class="variable">$LWWBkM5dUP7EilY4</span>/8AgE1</span><br></pre></td></tr></table></figure>

<p>2.对/boot/grub/grub.conf文件进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /boot/grub/grub.con</span><br><span class="line">default=0</span><br><span class="line">timeout=5</span><br><span class="line">password --md5 $1$tjgZK0<span class="variable">$LWWBkM5dUP7EilY4</span>/8AgE1     <span class="comment">#添加password参数指定加密方式 然后将刚才加密后的密码写后面</span></span><br><span class="line">splashimage=(hd0,0)/grub/splash.xpm.gz</span><br><span class="line">hiddenmenu</span><br><span class="line">title CentOS 6 (2.6.32-754.el6.x86_64)</span><br><span class="line">        root (hd0,0)</span><br><span class="line">        kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=UUID=3fa49288-1c40-4e74-ad2c-a32fefedf20f rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</span><br><span class="line">        initrd /initramfs-2.6.32-754.el6.x86_64.img                                                  </span><br></pre></td></tr></table></figure>

<p>3.重启  </p>
<p>再次进入内核选择的界面，此时按a键已经没有反应，提示按p键输入密码</p>
<p><img src="4.png" alt="4.png"></p>
<hr>
<h3 id="破解centos7口令"><a href="#破解centos7口令" class="headerlink" title="破解centos7口令"></a>破解centos7口令</h3><p>1.重启在内核选择界面按下e进行修改</p>
<p><img src="5.png" alt="5.png"></p>
<p>2.在linux16这行输入rd.bread执行打断的操作</p>
<p><img src="6.png" alt="6.png"></p>
<p>3.查看挂载信息</p>
<p><img src="7.png" alt="7.png"></p>
<p>4.由于是只读模式挂载的所以需要重新进行挂载</p>
<p><img src="8.png" alt="8.png"></p>
<p>5.切根然后更改密码</p>
<p><img src="9.png" alt="9.png"></p>
<p>此处需要注意，如果开启了SElinux则需要在最后加上touch /.autorelable 命令</p>
<h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>CentOS7和CentOS6相同也可以在内核选择界面进行加密，加密方法如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># grub2-setpassword </span></span><br><span class="line">Enter password: </span><br><span class="line">Confirm password: </span><br></pre></td></tr></table></figure>
<p>重启查看效果</p>
<p><img src="10.png" alt="10.png"></p>
<p><img src="11.png" alt="11.png"></p>
<p>使用grub2-setpassword加密是在/boot/grub2/目录下建了一个user.cfg的文件，里面存放了加密后的密码，如果要取消加密可以直接删除此文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat /boot/grub2/user.cfg </span></span><br><span class="line">GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.9CBEDC98BA0FD021487FCB20848F01CFB6A5D9F0446AD090DB4B4D23FEC9E176783A0870EA874F031457F0F4D63306BB5752BAC208C9FF75AAB9CFF65192CF7A.F57E4253D3A42A08A08CBF99EB61E97A135134818F79ADB67A9470B62091C43E93BCEF49BC5EECCFD14FD910C6CACECFC97E7C5AE6BA7AD5AD8C55011AA21AAF</span><br><span class="line">[root@centos7 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>/boot目录删除恢复</title>
    <url>/2019/03/07/Linux%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4boot/%E5%88%A0%E9%99%A4boot/</url>
    <content><![CDATA[<h2 id="boot目录删除恢复"><a href="#boot目录删除恢复" class="headerlink" title="boot目录删除恢复"></a>boot目录删除恢复</h2><p>以下为分别演示在CentOS 6和CentOS 7上boot目录被删除后出现的报错以及修复的方法</p>
<span id="more"></span>

<h3 id="CentOS6删除-boot"><a href="#CentOS6删除-boot" class="headerlink" title="CentOS6删除/boot"></a>CentOS6删除/boot</h3><p>一、删除/boot目录下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># rm -rf /boot/</span></span><br><span class="line">rm: cannot remove `/boot<span class="string">&#x27;: Device or resource busy</span></span><br><span class="line"><span class="string">[root@centos6 boot]# sync</span></span><br></pre></td></tr></table></figure>
<p>二、查看错误状态</p>
<p><img src="1.png" alt="1.png"></p>
<p>三、修复</p>
<p>修复思路，由于/boot下存放的文件为开机启动所需要的内核、虚拟文件系统、以及grub的1，1.5，以及2阶段的文件，所以修复时需要将这些文件全部创建出来。</p>
<p>1.使用救援光盘登录系统。  </p>
<p>此步骤省略</p>
<p>2.切换根至硬盘根目录下，挂载光盘至/mnt目录下 </p>
<p><img src="2.png" alt="2.png"> </p>
<p>3.复制内核文件至/boot目录下，并在/boot目录下创建虚拟文件系统。  </p>
<p><img src="3.png" alt="3.png"></p>
<p>4.修复GRUB的各个阶段  </p>
<p><img src="4.png" alt="4.png"></p>
<p>5.由于grub-install修复了grub的各阶段但没有grub的配置文件，所以需要手动写配置文件。</p>
<p><img src="5.png" alt="5.png"></p>
<p><img src="6.png" alt="6.png"></p>
<p>注意：kenerl和initrd次序绝对不能错，次序错误会导致系统不能正常启动  </p>
<p>修复完毕，重启能正常进入系统</p>
<p><img src="7.png" alt="7.png"></p>
<hr>
<h3 id="CentOS7-删除boot恢复"><a href="#CentOS7-删除boot恢复" class="headerlink" title="CentOS7 删除boot恢复"></a>CentOS7 删除boot恢复</h3><p>一、执行破坏操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 /]<span class="comment"># rm -rf boot</span></span><br><span class="line">rm: cannot remove ‘boot’: Device or resource busy</span><br><span class="line">[root@centos7 boot]<span class="comment"># sync</span></span><br></pre></td></tr></table></figure>

<p>二、重启查看效果</p>
<p><img src="8.png" alt="8.png"></p>
<p>三、修复  </p>
<p>1.重启进入救援模式  </p>
<p>由于救援模式下把系统的根挂载至了/mnt/sysroot下所以需要先切换根，然后挂载光盘文件至mnt目录下，安装内核。在使用grub2-install安装grub2。</p>
<p><img src="9.png" alt="9.png"></p>
<p>grub2安装完毕此时还缺少启动所需要的grub.cfg文件，所以需要使用grub2-mkconfig来生成此文件</p>
<p><img src="10.png" alt="10.png"></p>
<p>重启后正常进入系统</p>
<p><img src="11.png" alt="11.png"></p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>grub修复</tag>
      </tags>
  </entry>
  <entry>
    <title>fstab和boot目录删除及恢复方法</title>
    <url>/2019/03/07/Linux%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4fstab%E5%8F%8Aboot/%E5%88%A0%E9%99%A4fstab%E5%8F%8Aboot/</url>
    <content><![CDATA[<h2 id="fstab和boot目录删除及恢复方法"><a href="#fstab和boot目录删除及恢复方法" class="headerlink" title="fstab和boot目录删除及恢复方法"></a>fstab和boot目录删除及恢复方法</h2><p>以下为演示当fstab和boot都丢失时的错误状态以及恢复的方法</p>
<span id="more"></span>

<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>删除/etc/fstab,/boot目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># rm -rf /etc/fstab /boot</span></span><br><span class="line">rm: cannot remove `/boot<span class="string">&#x27;: Device or resource busy</span></span><br><span class="line"><span class="string">[root@centos6 ~]# sync</span></span><br></pre></td></tr></table></figure>

<p>重启查看故障状态</p>
<p><img src="1.png" alt="1.png"></p>
<h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>1.启动光盘救援模式</p>
<p>由于/etc/fstab文件被删除此时系统找不到硬盘相对应的挂载位置所以此处提示没有Linux分区</p>
<p><img src="2.png" alt="2.png"></p>
<p>2.查看下所有硬盘分区信息</p>
<p>发现所有磁盘分区信息均能看见，此时可以判断/dev/sda1为boot目录，/dev/sda2为根目录。</p>
<p><img src="3.png" alt="3.png"></p>
<p>3.手动将硬盘分区挂载</p>
<p><img src="4.png" alt="4.png"></p>
<p>4.将根切换至硬盘的根目录，并创建fstab文件</p>
<p><img src="5.png" alt="5.png"></p>
<p><img src="6.png" alt="6.png"></p>
<p>5.重启后再次进入救援模式，查看系统的根目录是否能被正常找到。</p>
<p><img src="7.png" alt="7.png"></p>
<p>此时救援光盘上的系统已经能够正常识别磁盘的根文件系统系统</p>
<hr>
<p>接下来要执行的为修复内核和grub的过程：</p>
<p>1.切换根至硬盘目录下，挂载光盘至/mnt目录下 </p>
<p><img src="a.png" alt="a.png"> </p>
<p>2.复制内核文件至/boot目录下，并在/boot目录下创建虚拟文件系统。  </p>
<p><img src="b.png" alt="b.png"></p>
<p>3.修复GRUB的各个阶段  </p>
<p><img src="c.png" alt="c.png"></p>
<p>4.由于grub-install修复了grub的各阶段但没有grub的配置文件，所以需要手动写配置文件。</p>
<p><img src="d.png" alt="d.png"></p>
<p><img src="e.png" alt="e.png"></p>
<p>注意：kenerl和initrd次序绝对不能错，次序错误会导致系统不能正常启动  </p>
<p>修复完毕，重启能正常进入系统</p>
<p><img src="f.png" alt="f.png"></p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>grub修复</tag>
      </tags>
  </entry>
  <entry>
    <title>删除initramfs修复</title>
    <url>/2019/03/07/Linux%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4initramfs/%E5%88%A0%E9%99%A4initramfs-xxx.img/</url>
    <content><![CDATA[<h2 id="删除initramfs修复"><a href="#删除initramfs修复" class="headerlink" title="删除initramfs修复"></a>删除initramfs修复</h2><p>以下操作为演示initramfs被删除后的报错，以及修复的方法。</p>
<span id="more"></span>

<h3 id="一、删除initramfs文件"><a href="#一、删除initramfs文件" class="headerlink" title="一、删除initramfs文件"></a>一、删除initramfs文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 boot]<span class="comment"># rm initramfs-2.6.32-754.el6.x86_64.img </span></span><br><span class="line">rm: remove regular file `initramfs-2.6.32-754.el6.x86_64.img<span class="string">&#x27;? y</span></span><br><span class="line"><span class="string">[root@centos6 boot]# ls</span></span><br><span class="line"><span class="string">config-2.6.32-754.el6.x86_64  lost+found                        vmlinuz-2.6.32-754.el6.x86_64</span></span><br><span class="line"><span class="string">efi                           symvers-2.6.32-754.el6.x86_64.gz</span></span><br><span class="line"><span class="string">grub                          System.map-2.6.32-754.el6.x86_64</span></span><br></pre></td></tr></table></figure>

<h3 id="二、重启查看报错。"><a href="#二、重启查看报错。" class="headerlink" title="二、重启查看报错。"></a>二、重启查看报错。</h3><p><img src="initramfs.png" alt="initramfs.png"></p>
<h3 id="三、修复错误"><a href="#三、修复错误" class="headerlink" title="三、修复错误"></a>三、修复错误</h3><p>1.进入救援模式</p>
<p><img src="cs6.png" alt="cs6.png"></p>
<p><img src="cs62.png" alt="cs62.png"></p>
<p><img src="cs63.png" alt="cs63.png"></p>
<p><img src="cs64.png" alt="cs64.png"></p>
<p><img src="cs65.png" alt="cs65.png"></p>
<p><img src="cs66.png" alt="cs66.png"></p>
<p><img src="cs67.png" alt="cs67.png"></p>
<p>2.修复错误 </p>
<p>切换根目录至硬盘目录</p>
<p><img src="%E4%BF%AE%E5%A4%8D1.png" alt="修复1.png"></p>
<p>cd至/boot目录下，然后使用mkinitrd命令对initramfs文件进行修复，mkinitrd命令需要带上系统内核的版本号所以此处使用<code>uname -r</code>来获取版本号</p>
<p><img src="%E4%BF%AE%E5%A4%8D2.png" alt="修复2.png"></p>
<p>重启机器</p>
<p><img src="%E4%BF%AE%E5%A4%8D3.png" alt="修复3.png"></p>
<h3 id="四、重启后正常进入系统"><a href="#四、重启后正常进入系统" class="headerlink" title="四、重启后正常进入系统"></a>四、重启后正常进入系统</h3><p><img src="%E6%AD%A3%E5%B8%B8.png" alt="正常.png"></p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>grub修复</tag>
      </tags>
  </entry>
  <entry>
    <title>删除vmlinuz-xxx.img修复</title>
    <url>/2019/03/07/Linux%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4vmlinuz/%E5%88%A0%E9%99%A4vmlinuz-xxx/</url>
    <content><![CDATA[<h2 id="删除vmlinuz-xxx-img修复"><a href="#删除vmlinuz-xxx-img修复" class="headerlink" title="删除vmlinuz-xxx.img修复"></a>删除vmlinuz-xxx.img修复</h2><p>以下为演示vmlinuz内核文件丢失后的报错以及修复的过程</p>
<span id="more"></span>

<h3 id="一、删除vmlinuz-xxx-img"><a href="#一、删除vmlinuz-xxx-img" class="headerlink" title="一、删除vmlinuz-xxx.img"></a>一、删除vmlinuz-xxx.img</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># rm /boot/vmlinuz-2.6.32-754.el6.x86_64</span></span><br><span class="line">rm: remove regular file `/boot/vmlinuz-2.6.32-754.el6.x86_64<span class="string">&#x27;? y</span></span><br><span class="line"><span class="string">[root@centos6 ~]# ls /boot</span></span><br><span class="line"><span class="string">config-2.6.32-754.el6.x86_64  initramfs-2.6.32-754.el6.x86_64.img  System.map-2.6.32-754.el6.x86_64</span></span><br><span class="line"><span class="string">efi                           lost+found</span></span><br><span class="line"><span class="string">grub                          symvers-2.6.32-754.el6.x86_64.gz</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h3 id="二、重启后查看报错"><a href="#二、重启后查看报错" class="headerlink" title="二、重启后查看报错"></a>二、重启后查看报错</h3><p>内核丢失报错状态为下图</p>
<p><img src="%E6%8A%A5%E9%94%99%E7%8A%B6%E6%80%81.png" alt="报错状态.png"></p>
<h3 id="三、修复"><a href="#三、修复" class="headerlink" title="三、修复"></a>三、修复</h3><p>1.进入光盘救援模式  </p>
<p>2.修复错误</p>
<p>修复方法，由于内核文件光盘上也存有一份，所以将光盘下的内核文件复制一份至boot就可以恢复。</p>
<p><img src="%E4%BF%AE%E5%A4%8D.png"></p>
<p>3.重启 </p>
<p>重启后已经正常进入系统</p>
<p><img src="%E6%AD%A3%E5%B8%B8.png" alt="正常.png"></p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>grub修复</tag>
      </tags>
  </entry>
  <entry>
    <title>加密和安全</title>
    <url>/2019/03/09/Linux%E5%9F%BA%E7%A1%80/%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8/%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h2 id="加密和安全"><a href="#加密和安全" class="headerlink" title="加密和安全"></a>加密和安全</h2><p>常见的加密算法有和协议有对称加密，公钥加密，单向加密和认证协议</p>
<span id="more"></span>

<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>对称加密，在加密和解密时使用的是同一个密钥</p>
<p>常见的对称加密有：DES,3DES,AES,Blowfish,Twofish,IDEA,RC6,CAST5</p>
<h4 id="对称密钥加密和解密的过程："><a href="#对称密钥加密和解密的过程：" class="headerlink" title="对称密钥加密和解密的过程："></a>对称密钥加密和解密的过程：</h4><p>数据发送方A和数据接收方B在发送数据前先通过某种渠道约定好密钥，然后A将明文的数据使用对称密钥进行加密，然后将加密后的数据发送给B，B接受到数据后使用相同的密钥对数据进行解密然后获取相应的数据  </p>
<h4 id="通过上述的加密和解密过程可以了解到这种加密的方法有以以下这些特点："><a href="#通过上述的加密和解密过程可以了解到这种加密的方法有以以下这些特点：" class="headerlink" title="通过上述的加密和解密过程可以了解到这种加密的方法有以以下这些特点："></a>通过上述的加密和解密过程可以了解到这种加密的方法有以以下这些特点：</h4><p>1.数据加密和解密时使用同一组密钥  </p>
<p>2.数据加密和机密时使用时间短效率高  </p>
<p>3.将原始数据分割成固定大小的块，逐个进行加密  </p>
<h4 id="不难看出对称加密的缺点也是非常的明显："><a href="#不难看出对称加密的缺点也是非常的明显：" class="headerlink" title="不难看出对称加密的缺点也是非常的明显："></a>不难看出对称加密的缺点也是非常的明显：</h4><p>1.密钥过多:每一个数据对应的都需要使用一个不同的密钥进行加密，产生过多的密钥  </p>
<p>2.密钥分发:密钥在分发的过程种存在安全性问题  </p>
<p>3.数据的来源无法确认:由于谁都能对数据加同一密钥所以数据的来源性无法确认  </p>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>非对称加密的密钥是成对的出现的，其分为公钥和私钥  </p>
<p>公钥(Public key):公开给所有人  </p>
<p>私钥(Secret key):自己留存，必须保证其私密性  </p>
<p>常见的非对称加密的算法有：RSA(加密，数字签名)，DSA(数字签名)，ELGaml  </p>
<h4 id="非对称加密的加解密和实现数字签名的过程："><a href="#非对称加密的加解密和实现数字签名的过程：" class="headerlink" title="非对称加密的加解密和实现数字签名的过程："></a>非对称加密的加解密和实现数字签名的过程：</h4><p>数据的发送方A和接收方B各生成一队密钥:A方公钥Pa、私钥Sa，B方公钥Pb、私钥Sb  </p>
<p>A方在传送明文数据前先使用自己的私钥(Sa)对数据进行加密，再使用B方的公钥(Pb)对加密后的数据再次加密，然后将数据传送给B，B方接受到数据后，先使用自己的私钥(Sb)对加密的数据进行解密，然后再使用A的公钥(Pa)再次对数据进行解密以此来确认数据确实是由A发送而来。  </p>
<h4 id="通过该流程可以发现非对称加密有以下特点："><a href="#通过该流程可以发现非对称加密有以下特点：" class="headerlink" title="通过该流程可以发现非对称加密有以下特点："></a>通过该流程可以发现非对称加密有以下特点：</h4><p>用公钥加密的数据，只能由与之相对应的私钥进行解密，反之亦然。  </p>
<p>通过其特性可以实现以下功能：  </p>
<p>1.可以实现数字签名，让接受可以确认数据发送方的身份  </p>
<p>2.可以实现对称密钥的交换，发送方可以使用对方的公钥加密一个对称密钥然后发送给对方  </p>
<p>3.由于非对称加密的解密的时间比较长，所以只适合较小数据的加密  </p>
<h4 id="由此可见其缺点是非常明显的："><a href="#由此可见其缺点是非常明显的：" class="headerlink" title="由此可见其缺点是非常明显的："></a>由此可见其缺点是非常明显的：</h4><p>1.非对称密钥的长度非常的长。  </p>
<p>2.非对称加密在解密时的效率非常的低下  </p>
<h3 id="单向散列-hash算法"><a href="#单向散列-hash算法" class="headerlink" title="单向散列(hash算法)"></a>单向散列(hash算法)</h3><p>hash算法又叫数据摘要，这种算法无法被逆推，可以确保数据的完整性，确保数据没有被篡改，用来做完整性校验。hash算法类似于指纹。  </p>
<p>常见算法: md5: 128bits、sha1: 160bits、sha224、sha256、sha384、sha512  </p>
<p>示例：  </p>
<p>将一窜字符定向给file1，然后对file1进行一系列操作并用md5sum进行提取指纹信息查看。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo abcdefg &gt; file1</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># md5sum file1                  </span></span><br><span class="line">020861c8c3fe177da19a7e9539a5dbac  file1     <span class="comment">#对刚创建的file1文件提取数据摘要</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cp file1 file2</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># md5sum file2</span></span><br><span class="line">020861c8c3fe177da19a7e9539a5dbac  file2     <span class="comment">#复制file1命名为file2再提取数据摘要与file1做比较</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># echo 1 &gt;&gt; file2</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># md5sum file2</span></span><br><span class="line">7f01eb26bac5f3a716b77cb702d85184  file2     <span class="comment">#给file2添加点数据然后提取数据摘要再次和上一次的file2的数据摘要作比较</span></span><br></pre></td></tr></table></figure>
<p>通过上述示例可以发现，文件名的改变对数据的摘要信息毫无影响，但当数据的内容发生改变时，所提取出来的数据摘要将发生天翻地覆的变法。数据的完整性校验就是通过此种方法来实现的。 </p>
<h4 id="所以单向散列有以下的特点："><a href="#所以单向散列有以下的特点：" class="headerlink" title="所以单向散列有以下的特点："></a>所以单向散列有以下的特点：</h4><p>1.任意长度输入，固定长度输出  </p>
<p>2.若修改数据，指纹也会改变  </p>
<p>3.无法从指纹中重新生成数据  </p>
<p>根据其特点可以实现数据完整性这一功能。  </p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>通过上述3种加密方法的特点，我们可以实现出一种既能进行加密又能确保解密高效性，并且缺保数据的完整性的方法，这种方法称为数字签名。</p>
<h4 id="数字签名的实现方法："><a href="#数字签名的实现方法：" class="headerlink" title="数字签名的实现方法："></a>数字签名的实现方法：</h4><p>发送数据发送方用hash算法从数据中生成数据摘要,然后用自己的私人密钥对这个摘要进行加密，这个加密后的摘要将作为数据数字签名和报文一起发送给接收方，接收方首先用与发送方一样的hash算法从接收到的原始数据中计算出数据摘要，接着再用发送方的公用密钥来对数据附加的数字签名进行解密，如果这两个摘要相同、那么接收方就能确认该数字签名是发送方的。  </p>
<h4 id="数字签名有两种功效："><a href="#数字签名有两种功效：" class="headerlink" title="数字签名有两种功效："></a>数字签名有两种功效：</h4><p>1.能确定数据确实是由发送方签名并发出来的，因为别人假冒不了发送方的签名。  </p>
<p>2.数字签名能确定数据的完整性。因为数字签名的特点是它代表了数据的特征，数据如果发生改变，数字摘要的值也将发生变化。不同的数据将得到不同的数字摘要。 一次数字签名涉及到一个hash算法、发送者的公钥、发送者的私钥。</p>
<hr>
<h2 id="非对称密钥实验"><a href="#非对称密钥实验" class="headerlink" title="非对称密钥实验"></a>非对称密钥实验</h2><p>实验目的：</p>
<p>对文件进行非对称加解密  </p>
<p>实验准备：</p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">OS</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">CentOS7</td>
<td align="left">192.168.172.134</td>
</tr>
<tr>
<td align="left">B</td>
<td align="left">CentOS7</td>
<td align="left">192.168.172.134</td>
</tr>
</tbody></table>
<hr>
<h3 id="一、分别在2台主机上生成公钥和私钥"><a href="#一、分别在2台主机上生成公钥和私钥" class="headerlink" title="一、分别在2台主机上生成公钥和私钥"></a>一、分别在2台主机上生成公钥和私钥</h3><p>1.在主机A上生成公私钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostA ~]<span class="comment"># gpg --gen-key</span></span><br><span class="line">gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">gpg: directory `/root/.gnupg<span class="string">&#x27; created</span></span><br><span class="line"><span class="string">gpg: new configuration file `/root/.gnupg/gpg.conf&#x27;</span> created</span><br><span class="line">gpg: WARNING: options <span class="keyword">in</span> `/root/.gnupg/gpg.conf<span class="string">&#x27; are not yet active during this run</span></span><br><span class="line"><span class="string">gpg: keyring `/root/.gnupg/secring.gpg&#x27;</span> created</span><br><span class="line">gpg: keyring `/root/.gnupg/pubring.gpg<span class="string">&#x27; created</span></span><br><span class="line"><span class="string">Please select what kind of key you want:</span></span><br><span class="line"><span class="string">   (1) RSA and RSA (default)</span></span><br><span class="line"><span class="string">   (2) DSA and Elgamal</span></span><br><span class="line"><span class="string">   (3) DSA (sign only)</span></span><br><span class="line"><span class="string">   (4) RSA (sign only)</span></span><br><span class="line"><span class="string">Your selection? 1                                   #选择所要生成的非对称密钥类型</span></span><br><span class="line"><span class="string">RSA keys may be between 1024 and 4096 bits long.</span></span><br><span class="line"><span class="string">What keysize do you want? (2048) 1024               #先择密钥的长度</span></span><br><span class="line"><span class="string">Requested keysize is 1024 bits</span></span><br><span class="line"><span class="string">Please specify how long the key should be valid.</span></span><br><span class="line"><span class="string">         0 = key does not expire</span></span><br><span class="line"><span class="string">      &lt;n&gt;  = key expires in n days</span></span><br><span class="line"><span class="string">      &lt;n&gt;w = key expires in n weeks</span></span><br><span class="line"><span class="string">      &lt;n&gt;m = key expires in n months</span></span><br><span class="line"><span class="string">      &lt;n&gt;y = key expires in n years</span></span><br><span class="line"><span class="string">Key is valid for? (0)                               #指定密钥的有效期限</span></span><br><span class="line"><span class="string">Key does not expire at all</span></span><br><span class="line"><span class="string">Is this correct? (y/N) y                            #确认密钥有效期为永久有效</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GnuPG needs to construct a user ID to identify your key.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Real name: hostA                                    #输入非对称密钥所对应的主机名</span></span><br><span class="line"><span class="string">Email address: </span></span><br><span class="line"><span class="string">Comment: </span></span><br><span class="line"><span class="string">You selected this USER-ID:</span></span><br><span class="line"><span class="string">    &quot;hostA&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o   #确认密钥信息</span></span><br><span class="line"><span class="string">You need a Passphrase to protect your secret key.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You don&#x27;</span>t want a passphrase - this is probably a *bad* idea!</span><br><span class="line">I will <span class="keyword">do</span> it anyway.  You can change your passphrase at any time,</span><br><span class="line">using this program with the option <span class="string">&quot;--edit-key&quot;</span>.</span><br><span class="line"></span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: /root/.gnupg/trustdb.gpg: trustdb created</span><br><span class="line">gpg: key 4B9A0B62 marked as ultimately trusted</span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">gpg: checking the trustdb</span><br><span class="line">gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model</span><br><span class="line">gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u</span><br><span class="line">pub   1024R/4B9A0B62 2019-04-12</span><br><span class="line">      Key fingerprint = E128 AD1F E1D5 5B0D C66C  FD45 4786 0C63 4B9A 0B62</span><br><span class="line">uid                  hostA</span><br><span class="line">sub   1024R/DD37BA59 2019-04-12</span><br><span class="line"></span><br><span class="line"><span class="comment">#非对称密生成完毕</span></span><br><span class="line">[root@hostA ~]<span class="comment"># cd .gnupg/</span></span><br><span class="line">[root@hostA .gnupg]<span class="comment"># ll</span></span><br><span class="line">total 28</span><br><span class="line">-rw------- 1 root root 7680 Apr 13 05:36 gpg.conf</span><br><span class="line">drwx------ 2 root root    6 Apr 13 05:37 private-keys-v1.d</span><br><span class="line">-rw------- 1 root root  649 Apr 13 05:37 pubring.gpg        <span class="comment">#公钥文件</span></span><br><span class="line">-rw------- 1 root root  649 Apr 13 05:37 pubring.gpg~       <span class="comment">#公钥的备份</span></span><br><span class="line">-rw------- 1 root root  600 Apr 13 05:37 random_seed</span><br><span class="line">-rw------- 1 root root 1313 Apr 13 05:37 secring.gpg        <span class="comment">#私钥文件</span></span><br><span class="line">srwxr-xr-x 1 root root    0 Apr 13 05:37 S.gpg-agent</span><br><span class="line">-rw------- 1 root root 1280 Apr 13 05:37 trustdb.gpg</span><br></pre></td></tr></table></figure>

<p>2.B主机上生成公私钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostB ~]<span class="comment"># gpg --gen-key</span></span><br><span class="line">gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">gpg: directory `/root/.gnupg<span class="string">&#x27; created</span></span><br><span class="line"><span class="string">gpg: new configuration file `/root/.gnupg/gpg.conf&#x27;</span> created</span><br><span class="line">gpg: WARNING: options <span class="keyword">in</span> `/root/.gnupg/gpg.conf<span class="string">&#x27; are not yet active during this run</span></span><br><span class="line"><span class="string">gpg: keyring `/root/.gnupg/secring.gpg&#x27;</span> created</span><br><span class="line">gpg: keyring `/root/.gnupg/pubring.gpg<span class="string">&#x27; created</span></span><br><span class="line"><span class="string">Please select what kind of key you want:</span></span><br><span class="line"><span class="string">   (1) RSA and RSA (default)</span></span><br><span class="line"><span class="string">   (2) DSA and Elgamal</span></span><br><span class="line"><span class="string">   (3) DSA (sign only)</span></span><br><span class="line"><span class="string">   (4) RSA (sign only)</span></span><br><span class="line"><span class="string">Your selection? 1</span></span><br><span class="line"><span class="string">RSA keys may be between 1024 and 4096 bits long.</span></span><br><span class="line"><span class="string">What keysize do you want? (2048) 1024</span></span><br><span class="line"><span class="string">Requested keysize is 1024 bits</span></span><br><span class="line"><span class="string">Please specify how long the key should be valid.</span></span><br><span class="line"><span class="string">         0 = key does not expire</span></span><br><span class="line"><span class="string">      &lt;n&gt;  = key expires in n days</span></span><br><span class="line"><span class="string">      &lt;n&gt;w = key expires in n weeks</span></span><br><span class="line"><span class="string">      &lt;n&gt;m = key expires in n months</span></span><br><span class="line"><span class="string">      &lt;n&gt;y = key expires in n years</span></span><br><span class="line"><span class="string">Key is valid for? (0) </span></span><br><span class="line"><span class="string">Key does not expire at all</span></span><br><span class="line"><span class="string">Is this correct? (y/N) y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GnuPG needs to construct a user ID to identify your key.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Real name: hostB</span></span><br><span class="line"><span class="string">Email address: </span></span><br><span class="line"><span class="string">Comment: </span></span><br><span class="line"><span class="string">You selected this USER-ID:</span></span><br><span class="line"><span class="string">    &quot;hostB&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o</span></span><br><span class="line"><span class="string">You need a Passphrase to protect your secret key.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You don&#x27;</span>t want a passphrase - this is probably a *bad* idea!</span><br><span class="line">I will <span class="keyword">do</span> it anyway.  You can change your passphrase at any time,</span><br><span class="line">using this program with the option <span class="string">&quot;--edit-key&quot;</span>.</span><br><span class="line"></span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: /root/.gnupg/trustdb.gpg: trustdb created</span><br><span class="line">gpg: key 77A790ED marked as ultimately trusted</span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">gpg: checking the trustdb</span><br><span class="line">gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model</span><br><span class="line">gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u</span><br><span class="line">pub   1024R/77A790ED 2019-04-12</span><br><span class="line">      Key fingerprint = 34E9 51E2 0720 1186 FC26  6BED 5FDF ABE5 77A7 90ED</span><br><span class="line">uid                  hostB</span><br><span class="line">sub   1024R/3108F051 2019-04-12</span><br><span class="line"></span><br><span class="line">[root@hostB ~]<span class="comment"># ll .gnupg/</span></span><br><span class="line">total 28</span><br><span class="line">-rw------- 1 root root 7680 Apr 13 05:50 gpg.conf</span><br><span class="line">drwx------ 2 root root    6 Apr 13 05:50 private-keys-v1.d</span><br><span class="line">-rw------- 1 root root  649 Apr 13 05:51 pubring.gpg</span><br><span class="line">-rw------- 1 root root  649 Apr 13 05:51 pubring.gpg~</span><br><span class="line">-rw------- 1 root root  600 Apr 13 05:51 random_seed</span><br><span class="line">-rw------- 1 root root 1313 Apr 13 05:51 secring.gpg</span><br><span class="line">srwxr-xr-x 1 root root    0 Apr 13 05:50 S.gpg-agent</span><br><span class="line">-rw------- 1 root root 1280 Apr 13 05:51 trustdb.gpg</span><br><span class="line">公私钥文件已生成</span><br></pre></td></tr></table></figure>

<h3 id="二、主机A、B互换公钥文件"><a href="#二、主机A、B互换公钥文件" class="headerlink" title="二、主机A、B互换公钥文件"></a>二、主机A、B互换公钥文件</h3><p>1导出主机A公钥发送给B</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostA .gnupg]<span class="comment"># gpg -a --export -o hostA.pubkey        #导出公钥文件。</span></span><br><span class="line">[root@hostA .gnupg]<span class="comment"># cat hostA.pubkey </span></span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line">Version: GnuPG v2.0.22 (GNU/Linux)</span><br><span class="line"></span><br><span class="line">mI0EXLEFGgEEALt/ZGwt9ZnkvzI0Ah0DJMFqYPbeTfLWtckiL/tKdkQShaA8pTqS</span><br><span class="line">ckAdeKRY1NRskKsInek3dD+V32n3PG8tTF8ZIQ6TpK8PgB/E+fKH2ftFQFchU+F8</span><br><span class="line">2lsJ0VKf7ILQ6Yre4mVeGo4HCwrJg+E6gEPspaajCyB4BIgApNzqmxNVABEBAAG0</span><br><span class="line">BWhvc3RBiLkEEwECACMFAlyxBRoCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIX</span><br><span class="line">gAAKCRBHhgxjS5oLYj3RBACFK1NjY29XFnu2ZqpM6bSLLp5sf7fbKvUTUEhitXSo</span><br><span class="line">LB607v88KZoUFdcSQf9v+02KytzC1usW8P0NlevhwCJSRpcaO29GyXKnN07jsQAG</span><br><span class="line">J2TUDR91hgcFZ/j2mcZal+WlgwSQr0Skv4GojTpme/n00DVbZzGGL7QBiTH/45AZ</span><br><span class="line">pbiNBFyxBRoBBAC+rfAizsp3qturv4QXwjguar9HuXWffap7nFaQKUAC8S+a2EyG</span><br><span class="line">RcBvWci0sNXx9HJE4/61ExPF84TR4uc8fRkzWYb6sfPGwBxDFH5e9igPifwyEuqk</span><br><span class="line">QPO3eezRX5bNwLMSXyesUFCeJZ3Qy6BYV6S8vDJbjj6RYwWlLRUJv4rlHwARAQAB</span><br><span class="line">iJ8EGAECAAkFAlyxBRoCGwwACgkQR4YMY0uaC2IkvwP/ckneRcvcYqTCeINVPlqD</span><br><span class="line">ltUC3jn5U1Nu/dZKwt15R7l68Qr0ARBO8SuLlMH7wjBQ/c6grwohfdcXCqZN2gVq</span><br><span class="line">wWl2yamOpeOD4EqwnvaPGtP8t9j2gwGvM905NJRng8Ep+IOlqlNeljKjICLyNzmj</span><br><span class="line">rkRjxcSdDrQgIYZgH84hXZU=</span><br><span class="line">=4MIm</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br><span class="line">[root@hostA .gnupg]<span class="comment"># scp hostA.pubkey root@192.168.172.138:/root/.gnupg</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.172.138 (192.168.172.138)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:YNlH0VBV0kp4lAClVvfMWVx/bHcbKKHXQwyd13d+MME.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:8a:1c:3d:c2:04:b1:be:05:95:33:9e:16:e8:ad:6c:25.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.172.138<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.172.138&#x27;</span>s password: </span><br><span class="line">hostA.pubkey                                         100%  984   808.9KB/s   00:00    </span><br></pre></td></tr></table></figure>

<p>2导出主机B公钥发送给A</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostB ~]<span class="comment"># gpg -a --export -o hostB.pubkey</span></span><br><span class="line">[root@hostB ~]<span class="comment"># cat hostB.pubkey</span></span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line">Version: GnuPG v2.0.22 (GNU/Linux)</span><br><span class="line"></span><br><span class="line">mI0EXLEIRwEEAJwjA3oD/GMvu7WvBfp6ZOaRnLxkebI0nVQt5PFOukiDxKDMtn4L</span><br><span class="line">dcuja0JlP4F/MJpxx2pacuNODG/gV1Tu+5iOzxp1+/xJXrWjh0e+MCk3ubivQ5gj</span><br><span class="line">L9TOSbePb/gzRR89F2BexKq6dkVYgiWUZ0205p/qBOMT49Xos9JQ02qlABEBAAG0</span><br><span class="line">BWhvc3RCiLkEEwECACMFAlyxCEcCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIX</span><br><span class="line">gAAKCRBf36vld6eQ7Xb7A/4kpjrW/JC14J0ZuMggFoI340ZZUOlT2f7JKvS+bAQK</span><br><span class="line">FXOgko6RblHo3PdaD+SimHDhzWibr0q05jpT0OlFP9PphgNfzBaUla/9v4heXcA5</span><br><span class="line">Rsg+J7Z5dbblz4Fe9Hn6uuFJX6PEV00SCVZ1JBOesj4JZuufNTpU09iC8gkl2ntj</span><br><span class="line">YLiNBFyxCEcBBACx6zvb6aH3mybpyqR2kdke0sAsof9sPVrv2UeHS5SSLe2qk38V</span><br><span class="line">GmTwuqLhkvhWrPX9jZza17uauWHItjLl2Xx6VKul4pUA9EPih9rOWTsmHQPhEUnW</span><br><span class="line">ZYVgt50Xn4YOjDaQiislS+AuR3XxeD4eaBtRatzMMQO/ibRV4EWXx6JLvQARAQAB</span><br><span class="line">iJ8EGAECAAkFAlyxCEcCGwwACgkQX9+r5XenkO2rFAP/UgUJ3lYn9rKlnNwsgnqL</span><br><span class="line">c38c6BovdzOveiYt+21QBQ5HElhRI/gZkpIiNi8pze1laaRzduTOj/23rNM5i3Cg</span><br><span class="line">uJulPnMBGLx2s57EuevO34mml+A6pBUIe3ETJhtv8/L3XH5wiMzVEyuzIJuLBA4c</span><br><span class="line">tt+3WYpY9rNUVeuLcHVd7vQ=</span><br><span class="line">=/T8O</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----     </span><br><span class="line">[root@hostB ~]<span class="comment"># scp hostB.pubkey root@192.168.172.134:/root/.gnupg/</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.172.134 (192.168.172.134)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:YNlH0VBV0kp4lAClVvfMWVx/bHcbKKHXQwyd13d+MME.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:8a:1c:3d:c2:04:b1:be:05:95:33:9e:16:e8:ad:6c:25.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.172.134<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.172.134&#x27;</span>s password: </span><br><span class="line">hostB.pubkey                                         100%  984   861.8KB/s   00:00  </span><br></pre></td></tr></table></figure>

<p>3.主机A、B分别导入公钥  </p>
<p>主机A导入公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostA .gnupg]<span class="comment"># gpg --import hostB.pubkey           #导入hostB的公钥</span></span><br><span class="line">gpg: key 77A790ED: public key <span class="string">&quot;hostB&quot;</span> imported</span><br><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:               imported: 1  (RSA: 1)</span><br><span class="line">[root@hostA .gnupg]<span class="comment"># gpg --list-key                      #查看公钥列表</span></span><br><span class="line">/root/.gnupg/pubring.gpg</span><br><span class="line">------------------------</span><br><span class="line">pub   1024R/4B9A0B62 2019-04-12</span><br><span class="line">uid                  hostA</span><br><span class="line">sub   1024R/DD37BA59 2019-04-12</span><br><span class="line"></span><br><span class="line">pub   1024R/77A790ED 2019-04-12</span><br><span class="line">uid                  hostB</span><br><span class="line">sub   1024R/3108F051 2019-04-12</span><br></pre></td></tr></table></figure>

<p>主机B导入公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostB ~]<span class="comment"># cd .gnupg/</span></span><br><span class="line">[root@hostB .gnupg]<span class="comment"># gpg --import hostA.pubkey </span></span><br><span class="line">gpg: key 4B9A0B62: public key <span class="string">&quot;hostA&quot;</span> imported</span><br><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:               imported: 1  (RSA: 1)</span><br><span class="line">[root@hostB .gnupg]<span class="comment"># gpg --list-key </span></span><br><span class="line">/root/.gnupg/pubring.gpg</span><br><span class="line">------------------------</span><br><span class="line">pub   1024R/77A790ED 2019-04-12</span><br><span class="line">uid                  hostB</span><br><span class="line">sub   1024R/3108F051 2019-04-12</span><br><span class="line"></span><br><span class="line">pub   1024R/4B9A0B62 2019-04-12</span><br><span class="line">uid                  hostA</span><br><span class="line">sub   1024R/DD37BA59 2019-04-12</span><br></pre></td></tr></table></figure>

<h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><p>1.使用主机A对文件进行非对称加密，发送给主机B</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hostA data]# echo &quot;hello,i am hostA&quot; &gt; file1</span><br><span class="line">[root@hostA data]# gpg -e -r hostB file1</span><br><span class="line">gpg: 3108F051: There is no assurance this key belongs to the named user</span><br><span class="line"></span><br><span class="line">pub  1024R/3108F051 2019-04-12 hostB</span><br><span class="line"> Primary key fingerprint: 34E9 51E2 0720 1186 FC26  6BED 5FDF ABE5 77A7 90ED</span><br><span class="line">      Subkey fingerprint: 57FD 2BBD D2B0 8EE4 9BCA  74A5 2091 0199 3108 F051</span><br><span class="line"></span><br><span class="line">It is NOT certain that the key belongs to the person named</span><br><span class="line">in the user ID.  If you *really* know what you are doing,</span><br><span class="line">you may answer the next question with yes.</span><br><span class="line"></span><br><span class="line">Use this key anyway? (y/N) y</span><br><span class="line">[root@hostA data]# scp file1.gpg root@192.168.172.138:/data</span><br><span class="line">root@192.168.172.138&#x27;s password: </span><br><span class="line">file1.gpg                                            100%  225    87.2KB/s   00:00    </span><br></pre></td></tr></table></figure>

<p>2.解密查看其中内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostB data]<span class="comment"># gpg -o file1 file1.gpg </span></span><br><span class="line">gpg: encrypted with 1024-bit RSA key, ID 3108F051, created 2019-04-12</span><br><span class="line">      <span class="string">&quot;hostB&quot;</span></span><br><span class="line">[root@hostB data]<span class="comment"># cat file1</span></span><br><span class="line">hello,i am hostA</span><br></pre></td></tr></table></figure>

<h3 id="四、清除密钥"><a href="#四、清除密钥" class="headerlink" title="四、清除密钥"></a>四、清除密钥</h3><p>1.清除公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostA data]<span class="comment"># gpg --delete-key hostB             #删除hostB的公钥</span></span><br><span class="line">gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pub  1024R/77A790ED 2019-04-12 hostB</span><br><span class="line"></span><br><span class="line">Delete this key from the keyring? (y/N) y</span><br><span class="line"></span><br><span class="line">[root@hostA data]<span class="comment"># gpg --list-key                     #查看密钥列表此时已经没有hostB了</span></span><br><span class="line">/root/.gnupg/pubring.gpg</span><br><span class="line">------------------------</span><br><span class="line">pub   1024R/4B9A0B62 2019-04-12</span><br><span class="line">uid                  hostA</span><br><span class="line">sub   1024R/DD37BA59 2019-04-12</span><br><span class="line"></span><br><span class="line">[root@hostA ~]<span class="comment"># ll .gnupg/</span></span><br><span class="line">total 40</span><br><span class="line">-rw------- 1 root root  649 Apr 13 05:48 192.168.172.138</span><br><span class="line">-rw------- 1 root root 7680 Apr 13 05:36 gpg.conf</span><br><span class="line">-rw-r--r-- 1 root root  984 Apr 13 06:02 hostA.pubkey</span><br><span class="line">-rw-r--r-- 1 root root  984 Apr 13 06:06 hostB.pubkey</span><br><span class="line">drwx------ 2 root root    6 Apr 13 05:37 private-keys-v1.d</span><br><span class="line">-rw------- 1 root root  649 Apr 13 06:32 pubring.gpg</span><br><span class="line">-rw------- 1 root root 1298 Apr 13 06:09 pubring.gpg~             <span class="comment">#hostB的密钥虽然被清除但是仍可以用此文件恢复</span></span><br><span class="line">-rw------- 1 root root  600 Apr 13 06:15 random_seed</span><br><span class="line">-rw------- 1 root root 1313 Apr 13 05:37 secring.gpg</span><br><span class="line">srwxr-xr-x 1 root root    0 Apr 13 05:37 S.gpg-agent</span><br><span class="line">-rw------- 1 root root 1280 Apr 13 05:37 trustdb.gpg</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.删除自己的公钥和私钥</p>
<p>要删除自己的公钥必须先清除私钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hostA ~]<span class="comment"># gpg --delete-secret-key hostA                  #删除自己的私钥</span></span><br><span class="line">gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sec  1024R/4B9A0B62 2019-04-12 hostA</span><br><span class="line"></span><br><span class="line">Delete this key from the keyring? (y/N) y</span><br><span class="line">This is a secret key! - really delete? (y/N) y</span><br><span class="line">[root@hostA ~]<span class="comment"># gpg --delete-key hostA                         #删除自己的私钥</span></span><br><span class="line">gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pub  1024R/4B9A0B62 2019-04-12 hostA</span><br><span class="line"></span><br><span class="line">Delete this key from the keyring? (y/N) y</span><br><span class="line">[root@hostA ~]<span class="comment"># rm -rf .gnupg/                                 #将/root/.gnupg目录删除</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>磁盘分区表的备份、删除和恢复</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/%E5%A4%87%E4%BB%BD%E5%88%A0%E9%99%A4%E6%81%A2%E5%A4%8Dmbr/%E5%88%A0%E9%99%A4%E5%A4%87%E4%BB%BDmbr%E5%88%86%E5%8C%BA%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="磁盘分区表的备份、删除和恢复"><a href="#磁盘分区表的备份、删除和恢复" class="headerlink" title="磁盘分区表的备份、删除和恢复"></a>磁盘分区表的备份、删除和恢复</h2><h3 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h3><p>MBR分区磁盘的分区表信息存放在硬盘0磁道第0个扇区内总共512字节，前446字节为bootloader。中间64位为磁盘分区表信息，每个分区信息占16个字节，总计存放4个分区。(这段就是需要备份出来的数据)最后的aa55为结束标志位。</p>
<span id="more"></span>

<hr>
<h3 id="一、分区表的备份"><a href="#一、分区表的备份" class="headerlink" title="一、分区表的备份"></a>一、分区表的备份</h3><p>首先先查看下硬盘前512字节，从2080开启时至aa55前的64字节就是我们需要备份的磁盘分区表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># hexdump -n 512 /dev/sda</span></span><br><span class="line">0000000 63eb 1090 d08e 00bc b8b0 0000 d88e c08e</span><br><span class="line">0000010 befb 7c00 00bf b906 0200 a4f3 21ea 0006</span><br><span class="line">0000020 be00 07be 0438 0b75 c683 8110 fefe 7507</span><br><span class="line">0000030 ebf3 b416 b002 bb01 7c00 80b2 748a 8b01</span><br><span class="line">0000040 024c 13cd 00ea 007c eb00 00fe 0000 0000</span><br><span class="line">0000050 0000 0000 0000 0000 0000 8000 0001 0000</span><br><span class="line">0000060 0000 0000 faff 9090 c2f6 7480 f605 70c2</span><br><span class="line">0000070 0274 80b2 79ea 007c 3100 8ec0 8ed8 bcd0</span><br><span class="line">0000080 2000 a0fb 7c64 ff3c 0274 c288 be52 7c05</span><br><span class="line">0000090 41b4 aabb cd55 5a13 7252 813d 55fb 75aa</span><br><span class="line">00000a0 8337 01e1 3274 c031 4489 4004 4488 89ff</span><br><span class="line">00000b0 0244 04c7 0010 8b66 5c1e 667c 5c89 6608</span><br><span class="line">00000c0 1e8b 7c60 8966 0c5c 44c7 0006 b470 cd42</span><br><span class="line">00000d0 7213 bb05 7000 76eb 08b4 13cd 0d73 845a</span><br><span class="line">00000e0 0fd2 de83 be00 7d85 82e9 6600 b60f 88c6</span><br><span class="line">00000f0 ff64 6640 4489 0f04 d1b6 e2c1 8802 88e8</span><br><span class="line">0000100 40f4 4489 0f08 c2b6 e8c0 6602 0489 a166</span><br><span class="line">0000110 7c60 0966 75c0 664e 5ca1 667c d231 f766</span><br><span class="line">0000120 8834 31d1 66d2 74f7 3b04 0844 377d c1fe</span><br><span class="line">0000130 c588 c030 e8c1 0802 88c1 5ad0 c688 00bb</span><br><span class="line">0000140 8e70 31c3 b8db 0201 13cd 1e72 c38c 1e60</span><br><span class="line">0000150 00b9 8e01 31db bff6 8000 c68e f3fc 1fa5</span><br><span class="line">0000160 ff61 5a26 be7c 7d80 03eb 8fbe e87d 0034</span><br><span class="line">0000170 94be e87d 002e 18cd feeb 5247 4255 0020</span><br><span class="line">0000180 6547 6d6f 4800 7261 2064 6944 6b73 5200</span><br><span class="line">0000190 6165 0064 4520 7272 726f 0a0d bb00 0001</span><br><span class="line">00001a0 0eb4 10cd 3cac 7500 c3f4 0000 0000 0000</span><br><span class="line">00001b0 0000 0000 0000 0000 b4f0 000a 0000 2080         <span class="comment">#2080:分区表开始</span></span><br><span class="line">00001c0 0021 aa83 8228 0800 0000 0000 0020 aa00</span><br><span class="line">00001d0 8229 fe83 ffff 0800 0020 0000 0c80 fe00         </span><br><span class="line">00001e0 ffff fe83 ffff 0800 0ca0 0000 0640 fe00         </span><br><span class="line">00001f0 ffff fe05 ffff 0800 12e0 f800 061f aa55         <span class="comment">#061f:分区表结束</span></span><br><span class="line">0000200</span><br></pre></td></tr></table></figure>

<p>1.使用dd命令将硬盘分区表的信息备份出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># dd if=/dev/sda of=mbr.bak bs=1 count=64 skip=446  复制sda的内的信息，复制方法为跳过前446个字节</span></span><br><span class="line">64+0 records <span class="keyword">in</span></span><br><span class="line">64+0 records out</span><br><span class="line">64 bytes (64 B) copied, 0.000224581 s, 285 kB/s</span><br></pre></td></tr></table></figure>

<p>2.查看下所备份出来的数据，然后将其备份至远程主机上，也可以将其复制到U盘进行备份，此处以远程主机为例。  </p>
<p>查看备份数据，确保备份数据的正确性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># hexdump mbr.bak                   #确保备份出来的数据没有错误</span></span><br><span class="line">0000000 2080 0021 aa83 8228 0800 0000 0000 0020</span><br><span class="line">0000010 aa00 8229 fe83 ffff 0800 0020 0000 0c80</span><br><span class="line">0000020 fe00 ffff fe83 ffff 0800 0ca0 0000 0640</span><br><span class="line">0000030 fe00 ffff fe05 ffff 0800 12e0 f800 061f</span><br><span class="line">0000040</span><br></pre></td></tr></table></figure>

<p>将文件备份至远程主机，并登录远程主机查看下数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># scp mbr.bak root@192.168.172.140:/root</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.172.140 (192.168.172.140)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:gPedPBi+OsdkYR+Y7j26ViQWSi4lIPU4cViDPImib0A.</span></span><br><span class="line"><span class="string">RSA key fingerprint is MD5:46:d8:67:07:f3:51:87:95:2c:d7:4b:27:ce:85:a2:ed.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.172.140<span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.172.140&#x27;</span>s password: </span><br><span class="line">mbr.bak                                                          100%   64    51.9KB/s   00:00    </span><br><span class="line">[root@centos7 ~]<span class="comment"># ssh root@192.168.172.140</span></span><br><span class="line">root@192.168.172.140<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">Last login: Sat Mar 23 20:48:30 2019</span></span><br><span class="line"><span class="string">[root@centos6 ~]# ls</span></span><br><span class="line"><span class="string">anaconda-ks.cfg  install.log  install.log.syslog  mbr.bak</span></span><br><span class="line"><span class="string">[root@centos6 ~]# hexdump mbr.bak </span></span><br><span class="line"><span class="string">0000000 2080 0021 aa83 8228 0800 0000 0000 0020</span></span><br><span class="line"><span class="string">0000010 aa00 8229 fe83 ffff 0800 0020 0000 0c80</span></span><br><span class="line"><span class="string">0000020 fe00 ffff fe83 ffff 0800 0ca0 0000 0640</span></span><br><span class="line"><span class="string">0000030 fe00 ffff fe05 ffff 0800 12e0 f800 061f</span></span><br><span class="line"><span class="string">0000040</span></span><br></pre></td></tr></table></figure>

<p>注意：千万不要把备份文件放在本机，否则当分区表被破坏后，磁盘将无法读取内部的任何数据，存放在本地的备份毫无意义。</p>
<hr>
<h3 id="二、删除和恢复"><a href="#二、删除和恢复" class="headerlink" title="二、删除和恢复"></a>二、删除和恢复</h3><h4 id="1-清空磁盘分区表"><a href="#1-清空磁盘分区表" class="headerlink" title="1.清空磁盘分区表"></a>1.清空磁盘分区表</h4><p>将446字节后的64字节清空</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># dd if=/dev/zero of=/dev/sda bs=1 count=64 seek=446</span></span><br><span class="line">64+0 records <span class="keyword">in</span></span><br><span class="line">64+0 records out</span><br><span class="line">64 bytes (64 B) copied, 0.000366417 s, 175 kB/s</span><br><span class="line">[root@centos7 ~]<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure>

<p>至此，磁盘分区已被破坏重启后将无法进入系统。重启。   </p>
<h4 id="2-恢复MBR分区表"><a href="#2-恢复MBR分区表" class="headerlink" title="2.恢复MBR分区表"></a>2.恢复MBR分区表</h4><p>1.重启后显示没有磁盘</p>
<p><img src="1.png" alt="1.png"></p>
<p>2.重启选择光盘模式</p>
<p><img src="2.png" alt="2.png"></p>
<p>3.选择Troubleshooting</p>
<p><img src="3.png" alt="3.png"></p>
<p>4.选择Rescue a CentOS System进入救援模式</p>
<p><img src="4.png" alt="4.png"></p>
<p>5.选择1 continue</p>
<p><img src="5.png" alt="5.png"></p>
<p>6.此时主机没有网络地址无法从远程主机获取备份文件。所以先给本地主机配置IP地址</p>
<p><img src="6.png" alt="6.png"></p>
<p>7.获取地址后将远程主机上的mbr.bak文件拉取至本机</p>
<p><img src="7.png" alt="7.png"></p>
<p>8.将备份的分区表重新恢复至/dev/sda内，然后重启</p>
<p><img src="8.png" alt="8.png"></p>
<p>9.此时注意已经都能正常启动。</p>
<p><img src="9.png" alt="9.png"></p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>系统修复</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网DNS架构的实现</title>
    <url>/2019/03/14/Linux%E5%9F%BA%E7%A1%80/%E5%AE%9E%E7%8E%B0Internet-dns%E6%9E%B6%E6%9E%84/%E5%AE%9E%E7%8E%B0Internet-dns%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h2 id="互联网DNS架构的实现"><a href="#互联网DNS架构的实现" class="headerlink" title="互联网DNS架构的实现"></a>互联网DNS架构的实现</h2><p>互联网中dns的架构为下图所示，当本地的DNS服务器无法解析域名时就会向互联网上的dns服务器去迭代查询，直到找到相应的服务器位置。</p>
<span id="more"></span>

<p><img src="dns%E7%BB%93%E6%9E%84.png" alt="dns结构.png"></p>
<p>以下为具体的实现方式</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">OS</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">www</td>
<td align="left">centos6</td>
<td align="left">192.168.73.2</td>
</tr>
<tr>
<td align="left">client</td>
<td align="left">centos6</td>
<td align="left">192.168.73.3</td>
</tr>
<tr>
<td align="left">mylinuxopsdns1</td>
<td align="left">centos7</td>
<td align="left">192.168.73.10</td>
</tr>
<tr>
<td align="left">mylinuxopsdns2</td>
<td align="left">centos7</td>
<td align="left">192.168.73.20</td>
</tr>
<tr>
<td align="left">comdns</td>
<td align="left">centos7</td>
<td align="left">192.168.73.30</td>
</tr>
<tr>
<td align="left">rootdns</td>
<td align="left">centos7</td>
<td align="left">192.168.73.40</td>
</tr>
<tr>
<td align="left">ldns</td>
<td align="left">centos7</td>
<td align="left">192.168.73.50</td>
</tr>
</tbody></table>
<hr>
<h3 id="一、在www主机上部署httpd服务"><a href="#一、在www主机上部署httpd服务" class="headerlink" title="一、在www主机上部署httpd服务"></a>一、在www主机上部署httpd服务</h3><h4 id="1-启动httpd服务"><a href="#1-启动httpd服务" class="headerlink" title="1.启动httpd服务"></a>1.启动httpd服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># service httpd start</span></span><br><span class="line">Starting httpd: httpd: apr_sockaddr_info_get() failed <span class="keyword">for</span> www</span><br><span class="line">httpd: Could not reliably determine the server<span class="string">&#x27;s fully qualified domain name, using 127.0.0.1 for ServerName</span></span><br><span class="line"><span class="string">                                                           [  OK  ]</span></span><br></pre></td></tr></table></figure>

<h4 id="2-为http主机创建一个主页"><a href="#2-为http主机创建一个主页" class="headerlink" title="2.为http主机创建一个主页"></a>2.为http主机创建一个主页</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># echo &quot;&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;&quot; &gt; /var/www/html/index.html</span></span><br></pre></td></tr></table></figure>

<h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># curl 192.168.73.2</span></span><br><span class="line">&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h3 id="二、配置mylinuxopsdns1"><a href="#二、配置mylinuxopsdns1" class="headerlink" title="二、配置mylinuxopsdns1"></a>二、配置mylinuxopsdns1</h3><h4 id="1-安装bind服务"><a href="#1-安装bind服务" class="headerlink" title="1.安装bind服务"></a>1.安装bind服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># yum install bind -y</span></span><br></pre></td></tr></table></figure>

<h4 id="2-启动服务应设置为开机启动"><a href="#2-启动服务应设置为开机启动" class="headerlink" title="2.启动服务应设置为开机启动"></a>2.启动服务应设置为开机启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># systemctl start named</span></span><br><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># systemctl enable named</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/named.service to /usr/lib/systemd/system/named.service.</span><br></pre></td></tr></table></figure>

<h4 id="3-修改dns主配置文件"><a href="#3-修改dns主配置文件" class="headerlink" title="3.修改dns主配置文件"></a>3.修改dns主配置文件</h4><p>将监听地址和允许访问的主机注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="4-修改区域配置文件，添加区域记录"><a href="#4-修改区域配置文件，添加区域记录" class="headerlink" title="4.修改区域配置文件，添加区域记录"></a>4.修改区域配置文件，添加区域记录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># vim /etc/named.rfc1912.zones </span></span><br><span class="line">zone <span class="string">&quot;mylinuxops.com&quot;</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> master;</span><br><span class="line">        file <span class="string">&quot;mylinuxops.com.zone&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="5-创建区域数据库文件"><a href="#5-创建区域数据库文件" class="headerlink" title="5.创建区域数据库文件"></a>5.创建区域数据库文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># cp -p /var/named/&#123;named.localhost,mylinuxops.com.zone&#125;</span></span><br><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># vim /var/named/mylinuxops.com.zone</span></span><br><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@       IN SOA  master admin.mylinuxops.com (</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      master</span><br><span class="line">        NS      slave</span><br><span class="line">master  A       192.168.73.10</span><br><span class="line">slave   A       192.168.73.20</span><br><span class="line">www     A       192.168.73.2</span><br></pre></td></tr></table></figure>

<h4 id="6-检查语法错误"><a href="#6-检查语法错误" class="headerlink" title="6.检查语法错误"></a>6.检查语法错误</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># named-checkconf </span></span><br><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># named-checkzone mylinuxops.com /var/named/mylinuxops.com.zone </span></span><br><span class="line">zone mylinuxops.com/IN: loaded serial 0</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h4 id="7-重读配置文件"><a href="#7-重读配置文件" class="headerlink" title="7.重读配置文件"></a>7.重读配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># rndc reload</span></span><br></pre></td></tr></table></figure>

<h4 id="8-在client主机上测试"><a href="#8-在client主机上测试" class="headerlink" title="8.在client主机上测试"></a>8.在client主机上测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># dig www.mylinuxops.com @192.168.73.10</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; www.mylinuxops.com @192.168.73.10</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 24888</span></span><br><span class="line"><span class="string">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;www.mylinuxops.com.		IN	A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">www.mylinuxops.com.	86400	IN	A	192.168.73.2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; AUTHORITY SECTION:</span></span><br><span class="line"><span class="string">mylinuxops.com.		86400	IN	NS	master.mylinuxops.com.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ADDITIONAL SECTION:</span></span><br><span class="line"><span class="string">master.mylinuxops.com.	86400	IN	A	192.168.73.10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 1 msec</span></span><br><span class="line"><span class="string">;; SERVER: 192.168.73.10#53(192.168.73.10)</span></span><br><span class="line"><span class="string">;; WHEN: Fri Apr 19 04:23:08 2019</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 89</span></span><br></pre></td></tr></table></figure>

<h3 id="三、配置dns从服务器mylinuxopsdns2"><a href="#三、配置dns从服务器mylinuxopsdns2" class="headerlink" title="三、配置dns从服务器mylinuxopsdns2"></a>三、配置dns从服务器mylinuxopsdns2</h3><h4 id="1-安装bind服务-1"><a href="#1-安装bind服务-1" class="headerlink" title="1.安装bind服务"></a>1.安装bind服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns2 ~]<span class="comment"># yum install bind -y</span></span><br></pre></td></tr></table></figure>

<h4 id="2-启动dns服务设置为开机自动启动"><a href="#2-启动dns服务设置为开机自动启动" class="headerlink" title="2.启动dns服务设置为开机自动启动"></a>2.启动dns服务设置为开机自动启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns2 ~]<span class="comment"># systemctl start named</span></span><br><span class="line">[root@mylinuxopsdns2 ~]<span class="comment"># systemctl enable named</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/named.service to /usr/lib/systemd/system/named.service.</span><br></pre></td></tr></table></figure>

<h4 id="3-修改主配置文件"><a href="#3-修改主配置文件" class="headerlink" title="3.修改主配置文件"></a>3.修改主配置文件</h4><p>将端口行和允许访问的主机注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns2 ~]<span class="comment"># vim /etc/named.conf </span></span><br><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="4-修改区域配置文件"><a href="#4-修改区域配置文件" class="headerlink" title="4.修改区域配置文件"></a>4.修改区域配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns2 ~]<span class="comment"># vim /etc/named.rfc1912.zones </span></span><br><span class="line">zone <span class="string">&quot;mylinuxops.com&quot;</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> slave;</span><br><span class="line">        masters &#123;192.168.73.10;&#125;;</span><br><span class="line">        file <span class="string">&quot;slaves/mylinuxops.zone&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="5-检查语法错误"><a href="#5-检查语法错误" class="headerlink" title="5.检查语法错误"></a>5.检查语法错误</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns2 ~]<span class="comment"># named-checkconf</span></span><br></pre></td></tr></table></figure>

<h4 id="6-重读配置文件"><a href="#6-重读配置文件" class="headerlink" title="6.重读配置文件"></a>6.重读配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns2 ~]<span class="comment"># rndc reload</span></span><br></pre></td></tr></table></figure>

<h4 id="7-查看区域数据库文件是否已经被拉取到本地"><a href="#7-查看区域数据库文件是否已经被拉取到本地" class="headerlink" title="7.查看区域数据库文件是否已经被拉取到本地"></a>7.查看区域数据库文件是否已经被拉取到本地</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ll /var/named/slaves/</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 named named 298 Apr 23 04:40 mylinuxops.zone</span><br></pre></td></tr></table></figure>

<h4 id="8-安全加固"><a href="#8-安全加固" class="headerlink" title="8.安全加固"></a>8.安全加固</h4><p>由于主从dns服务器都没有对能拉取区域数据库的主机加以限制，这样是非常不安全的，所以需要对主机的安全行进行加固</p>
<h5 id="8-1对从服务器主配置文件修改，添加allow-transfer"><a href="#8-1对从服务器主配置文件修改，添加allow-transfer" class="headerlink" title="8.1对从服务器主配置文件修改，添加allow-transfer"></a>8.1对从服务器主配置文件修改，添加allow-transfer</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns2 ~]<span class="comment"># vim /etc/named.conf </span></span><br><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">        allow-transfer  &#123;none;&#125;;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@mylinuxopsdns2 ~]<span class="comment"># rndc reload</span></span><br><span class="line">server reload successful</span><br></pre></td></tr></table></figure>

<h5 id="8-2对主服务器主配置文件修改，添加allow-transfer只允许从服务来拉取数据"><a href="#8-2对主服务器主配置文件修改，添加allow-transfer只允许从服务来拉取数据" class="headerlink" title="8.2对主服务器主配置文件修改，添加allow-transfer只允许从服务来拉取数据"></a>8.2对主服务器主配置文件修改，添加allow-transfer只允许从服务来拉取数据</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># vim /etc/named.conf </span></span><br><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">        allow-transfer  &#123;192.168.73.20;&#125;;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br><span class="line"></span><br><span class="line">[root@mylinuxopsdns1 ~]<span class="comment"># rndc reload</span></span><br><span class="line">server reload successful</span><br></pre></td></tr></table></figure>

<h3 id="四、搭建com域dns服务器"><a href="#四、搭建com域dns服务器" class="headerlink" title="四、搭建com域dns服务器"></a>四、搭建com域dns服务器</h3><h4 id="1-安装dns服务"><a href="#1-安装dns服务" class="headerlink" title="1.安装dns服务"></a>1.安装dns服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@comdns ~]<span class="comment"># yum install bind -y</span></span><br></pre></td></tr></table></figure>
<h4 id="2-修改dns主配置文件"><a href="#2-修改dns主配置文件" class="headerlink" title="2.修改dns主配置文件"></a>2.修改dns主配置文件</h4><p>将监听的ip和允许访问的主机行注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@comdns ~]<span class="comment"># vim /etc/named.conf </span></span><br><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-修改区域文件添加com域"><a href="#3-修改区域文件添加com域" class="headerlink" title="3.修改区域文件添加com域"></a>3.修改区域文件添加com域</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@comdns ~]<span class="comment"># vim /etc/named.rfc1912.zones</span></span><br><span class="line">zone <span class="string">&quot;com&quot;</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> master;</span><br><span class="line">        file <span class="string">&quot;com.zone&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="4-创建区域数据库文件"><a href="#4-创建区域数据库文件" class="headerlink" title="4.创建区域数据库文件"></a>4.创建区域数据库文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@comdns ~]<span class="comment"># cp -p /var/named/&#123;named.localhost,com.zone&#125;</span></span><br><span class="line">[root@comdns ~]<span class="comment"># vim /var/named/com.zone</span></span><br><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@       IN SOA  master admin.mylinuxops.com.  (</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">                NS      master</span><br><span class="line">mylinuxops      NS      ns1</span><br><span class="line">mylinuxops      NS      ns2</span><br><span class="line">master          A       192.168.73.30</span><br><span class="line">ns1             A       192.168.73.10</span><br><span class="line">ns2             A       192.168.73.20</span><br></pre></td></tr></table></figure>

<h4 id="5-检查配置文件语法"><a href="#5-检查配置文件语法" class="headerlink" title="5.检查配置文件语法"></a>5.检查配置文件语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@comdns ~]<span class="comment"># named-checkconf </span></span><br><span class="line">[root@comdns ~]<span class="comment"># named-checkzone com /var/named/com.zone </span></span><br><span class="line">zone com/IN: loaded serial 0</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h4 id="6-启动服务"><a href="#6-启动服务" class="headerlink" title="6.启动服务"></a>6.启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@comdns ~]<span class="comment"># systemctl restart named</span></span><br></pre></td></tr></table></figure>

<h4 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h4><p>在client端进行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@clinet ~]<span class="comment"># dig www.mylinuxops.com @192.168.73.30</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-72.el7 &lt;&lt;&gt;&gt; www.mylinuxops.com @192.168.73.30</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 47115</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 4096</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;www.mylinuxops.com.		IN	A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">www.mylinuxops.com.	86400	IN	A	192.168.73.2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; AUTHORITY SECTION:</span></span><br><span class="line"><span class="string">mylinuxops.com.		86400	IN	NS	ns2.com.</span></span><br><span class="line"><span class="string">mylinuxops.com.		86400	IN	NS	ns1.com.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ADDITIONAL SECTION:</span></span><br><span class="line"><span class="string">ns1.com.		86400	IN	A	192.168.73.10</span></span><br><span class="line"><span class="string">ns2.com.		86400	IN	A	192.168.73.20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 6 msec</span></span><br><span class="line"><span class="string">;; SERVER: 192.168.73.30#53(192.168.73.30)</span></span><br><span class="line"><span class="string">;; WHEN: Tue Apr 23 17:25:07 CST 2019</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 131</span></span><br></pre></td></tr></table></figure>

<h3 id="五、搭建root域上的dns服务"><a href="#五、搭建root域上的dns服务" class="headerlink" title="五、搭建root域上的dns服务"></a>五、搭建root域上的dns服务</h3><h4 id="1-安装dns服务-1"><a href="#1-安装dns服务-1" class="headerlink" title="1.安装dns服务"></a>1.安装dns服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rootdns ~]<span class="comment"># yum install bind -y</span></span><br></pre></td></tr></table></figure>

<h4 id="2-修改主配置文件"><a href="#2-修改主配置文件" class="headerlink" title="2.修改主配置文件"></a>2.修改主配置文件</h4><p>将监听地址和允许访问的主机行注释，修改最底下的根域</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rootdns ~]<span class="comment"># vim /etc/named.conf</span></span><br><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br><span class="line">....</span><br><span class="line">zone <span class="string">&quot;.&quot;</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> master;</span><br><span class="line">        file <span class="string">&quot;root.zone&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-创建根域数据库"><a href="#3-创建根域数据库" class="headerlink" title="3.创建根域数据库"></a>3.创建根域数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rootdns ~]<span class="comment"># cp -p /var/named/&#123;named.localhost,root.zone&#125;</span></span><br><span class="line">[root@rootdns ~]<span class="comment"># vim /var/named/root.zone</span></span><br><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@       IN SOA  ns1 admin.mylinuxops.com. (</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      ns1</span><br><span class="line">com     NS      master</span><br><span class="line">ns1     A       192.168.73.40</span><br><span class="line">master  A       192.168.73.30</span><br></pre></td></tr></table></figure>

<h4 id="4-检查语法错误"><a href="#4-检查语法错误" class="headerlink" title="4.检查语法错误"></a>4.检查语法错误</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rootdns ~]<span class="comment"># named-checkconf </span></span><br><span class="line">[root@rootdns ~]<span class="comment"># named-checkzone . /var/named/root.zone </span></span><br><span class="line">zone ./IN: loaded serial 0</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h4 id="5-启动dns服务"><a href="#5-启动dns服务" class="headerlink" title="5.启动dns服务"></a>5.启动dns服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rootdns ~]<span class="comment"># systemctl start named</span></span><br><span class="line">[root@rootdns ~]<span class="comment"># systemctl enable named</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/named.service to /usr/lib/systemd/system/named.service.</span><br></pre></td></tr></table></figure>

<h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dig www.mylinuxops.com @192.168.73.40</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-72.el7 &lt;&lt;&gt;&gt; www.mylinuxops.com @192.168.73.40</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 38921</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 4096</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;www.mylinuxops.com.		IN	A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">www.mylinuxops.com.	86400	IN	A	192.168.73.2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; AUTHORITY SECTION:</span></span><br><span class="line"><span class="string">mylinuxops.com.		85104	IN	NS	ns1.com.</span></span><br><span class="line"><span class="string">mylinuxops.com.		85104	IN	NS	ns2.com.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ADDITIONAL SECTION:</span></span><br><span class="line"><span class="string">ns1.com.		85104	IN	A	192.168.73.10</span></span><br><span class="line"><span class="string">ns2.com.		85104	IN	A	192.168.73.20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 2 msec</span></span><br><span class="line"><span class="string">;; SERVER: 192.168.73.40#53(192.168.73.40)</span></span><br><span class="line"><span class="string">;; WHEN: Tue Apr 23 17:59:09 CST 2019</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 131</span></span><br></pre></td></tr></table></figure>

<h3 id="六、配置本地DNS"><a href="#六、配置本地DNS" class="headerlink" title="六、配置本地DNS"></a>六、配置本地DNS</h3><h4 id="1-安装dns服务-2"><a href="#1-安装dns服务-2" class="headerlink" title="1.安装dns服务"></a>1.安装dns服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ldns ~]<span class="comment"># yum install bind -y</span></span><br></pre></td></tr></table></figure>

<h4 id="2-修改本地DNS的主配置文件"><a href="#2-修改本地DNS的主配置文件" class="headerlink" title="2.修改本地DNS的主配置文件"></a>2.修改本地DNS的主配置文件</h4><p>将监听地址和允许访问的主机注释，将dnssec相关的两项关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ldns ~]<span class="comment"># vim /etc/named.conf </span></span><br><span class="line">options &#123;</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br><span class="line">....</span><br><span class="line">        dnssec-enable no;</span><br><span class="line">        dnssec-validation no;</span><br></pre></td></tr></table></figure>

<h4 id="3-修改本地的根数据文件"><a href="#3-修改本地的根数据文件" class="headerlink" title="3.修改本地的根数据文件"></a>3.修改本地的根数据文件</h4><p>将根数据库文件指向rootdns所在的地址，其余的全部删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ldns ~]<span class="comment"># vim /var/named/named.ca</span></span><br><span class="line">.                       518400  IN      NS      a.root-servers.net.</span><br><span class="line">a.root-servers.net.     3600000 IN      A       192.168.73.40</span><br></pre></td></tr></table></figure>

<h3 id="七、在client进行测试"><a href="#七、在client进行测试" class="headerlink" title="七、在client进行测试"></a>七、在client进行测试</h3><h4 id="1-配置client端的网卡将其dns指向本地的dns服务器"><a href="#1-配置client端的网卡将其dns指向本地的dns服务器" class="headerlink" title="1.配置client端的网卡将其dns指向本地的dns服务器"></a>1.配置client端的网卡将其dns指向本地的dns服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NAME=ens33</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=on</span><br><span class="line">IPADDR=192.168.73.3</span><br><span class="line">PREFIX=24</span><br><span class="line">DNS1=192.168.73.50</span><br></pre></td></tr></table></figure>

<h4 id="2-重启服务"><a href="#2-重启服务" class="headerlink" title="2.重启服务"></a>2.重启服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl restart network</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/resolv.conf </span></span><br><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">nameserver 192.168.73.50</span><br></pre></td></tr></table></figure>

<h4 id="3-测试访问www-mylinuxops-com"><a href="#3-测试访问www-mylinuxops-com" class="headerlink" title="3.测试访问www.mylinuxops.com"></a>3.测试访问<a href="http://www.mylinuxops.com/">www.mylinuxops.com</a></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># curl www.mylinuxops.com</span></span><br><span class="line">&lt;h1&gt;welcome to mylinuxops.com&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>私有CA建立和证书申请</title>
    <url>/2019/03/09/Linux%E5%9F%BA%E7%A1%80/%E5%BB%BA%E7%AB%8B%E7%A7%81%E6%9C%89ca/%E5%BB%BA%E7%AB%8B%E7%A7%81%E6%9C%89CA/</url>
    <content><![CDATA[<h2 id="私有CA建立和证书生申请"><a href="#私有CA建立和证书生申请" class="headerlink" title="私有CA建立和证书生申请"></a>私有CA建立和证书生申请</h2><p>CA在创建时有规定的格式，详细需要参考/etc/pki/tls/openssl.cnf此文件存放了CA相关的一些配置信息。</p>
<span id="more"></span>

<p>以下为比较重要的2个相关配置：</p>
<p>1.此段为CA的详细目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################################</span></span><br><span class="line">[ ca ]</span><br><span class="line">default_ca      = CA_default            <span class="comment"># The default ca section</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################</span></span><br><span class="line">[ CA_default ]</span><br><span class="line"></span><br><span class="line">dir             = /etc/pki/CA           <span class="comment"># Where everything is kept</span></span><br><span class="line">certs           = <span class="variable">$dir</span>/certs            <span class="comment"># Where the issued certs are kept</span></span><br><span class="line">crl_dir         = <span class="variable">$dir</span>/crl              <span class="comment"># Where the issued crl are kept</span></span><br><span class="line">database        = <span class="variable">$dir</span>/index.txt        <span class="comment"># database index file.</span></span><br><span class="line"><span class="comment">#unique_subject = no                    # Set to &#x27;no&#x27; to allow creation of</span></span><br><span class="line">                                        <span class="comment"># several ctificates with same subject.</span></span><br><span class="line">new_certs_dir   = <span class="variable">$dir</span>/newcerts         <span class="comment"># default place for new certs.</span></span><br><span class="line"></span><br><span class="line">certificate     = <span class="variable">$dir</span>/cacert.pem       <span class="comment"># The CA certificate</span></span><br><span class="line">serial          = <span class="variable">$dir</span>/serial           <span class="comment"># The current serial number</span></span><br><span class="line">crlnumber       = <span class="variable">$dir</span>/crlnumber        <span class="comment"># the current crl number</span></span><br><span class="line">                                        <span class="comment"># must be commented out to leave a V1 CRL</span></span><br><span class="line">crl             = <span class="variable">$dir</span>/crl.pem          <span class="comment"># The current CRL</span></span><br><span class="line">private_key     = <span class="variable">$dir</span>/private/cakey.pem<span class="comment"># The private key</span></span><br><span class="line">RANDFILE        = <span class="variable">$dir</span>/private/.rand    <span class="comment"># private random number file</span></span><br><span class="line"></span><br><span class="line">x509_extensions = usr_cert              <span class="comment"># The extentions to add to the cert</span></span><br></pre></td></tr></table></figure>

<p>2.此段为证书签署的相关规则，其中标记为match的表示客户端在提交证书签署申请时必须和CA相同的部分。若要不同也可以修改policy规则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A few difference way of specifying how similar the request should look</span></span><br><span class="line"><span class="comment"># For type CA, the listed attributes must be the same, and the optional</span></span><br><span class="line"><span class="comment"># and supplied fields are just that :-)</span></span><br><span class="line">policy          = policy_match             <span class="comment">#此处若修改为policy_anything就能实现客户端申请证书时countryName、stateOrProvinceName、organizationName和CA不同也能签署。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For the CA policy</span></span><br><span class="line">[ policy_match ]</span><br><span class="line">countryName             = match</span><br><span class="line">stateOrProvinceName     = match</span><br><span class="line">organizationName        = match</span><br><span class="line">organizationalUnitName  = optional</span><br><span class="line">commonName              = supplied</span><br><span class="line">emailAddress            = optional</span><br><span class="line"></span><br><span class="line"><span class="comment"># For the &#x27;anything&#x27; policy</span></span><br><span class="line"><span class="comment"># At this point in time, you must list all acceptable &#x27;object&#x27;</span></span><br><span class="line"><span class="comment"># types.</span></span><br><span class="line">[ policy_anything ]</span><br><span class="line">countryName             = optional</span><br><span class="line">stateOrProvinceName     = optional</span><br><span class="line">localityName            = optional</span><br><span class="line">organizationName        = optional</span><br><span class="line">organizationalUnitName  = optional</span><br><span class="line">commonName              = supplied</span><br><span class="line">emailAddress            = optional</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="一、创建私有CA"><a href="#一、创建私有CA" class="headerlink" title="一、创建私有CA"></a>一、创建私有CA</h3><p>1.生成证书索引数据库文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># touch index.txt</span></span><br></pre></td></tr></table></figure>

<p>2.指定证书颁发序列号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># echo 01 &gt; serial</span></span><br></pre></td></tr></table></figure>

<p>3.生成私钥  </p>
<p>私钥必须存放在/etc/pki/CA/private下取名为cakey.pem</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># (umask 066;openssl genrsa -out private/cakey.pem 4096)       #生成私钥，指定长度为4096位</span></span><br><span class="line">Generating RSA private key, 4096 bit long modulus</span><br><span class="line">.........................................++</span><br><span class="line">.....................++</span><br><span class="line">e is 65537 (0x10001)</span><br></pre></td></tr></table></figure>

<p>4.生成自签证书</p>
<p>自签证书的存放位置和命名也有规定，必须存放在/etc/pki/CA/下，取名为cacert.pem </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># openssl req -new -x509 -key private/cakey.pem -out cacert.pem -days 3650     #生成自签证书，指定有效时长为3650天</span></span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:beijing  </span><br><span class="line">Locality Name (eg, city) [Default City]:beijing</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:magedu</span><br><span class="line">Organizational Unit Name (eg, section) []:ops</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:ca.magedu.com</span></span><br><span class="line"><span class="string">Email Address []:</span></span><br></pre></td></tr></table></figure>

<h3 id="二、客户端申请证书"><a href="#二、客户端申请证书" class="headerlink" title="二、客户端申请证书"></a>二、客户端申请证书</h3><p>1.在客户端生成私钥文件</p>
<p>客户端的私钥一般在需要生成私钥的应用下生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># (umask 066;openssl genrsa -out test.key 1024)</span></span><br><span class="line">Generating RSA private key, 1024 bit long modulus</span><br><span class="line">....................................................................................................................++++++</span><br><span class="line">.....++++++</span><br><span class="line">e is 65537 (0x10001)</span><br></pre></td></tr></table></figure>

<p>2.利用私钥生成证书签署请求</p>
<p>签署请求中Country Name、State or Provice Name、Organization Name必须相同。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># openssl req -new -key test.key -out test.csr</span></span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:beijing</span><br><span class="line">Locality Name (eg, city) [Default City]:beijing</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:magedu</span><br><span class="line">Organizational Unit Name (eg, section) []:ops</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:www.mylinuxops.com</span></span><br><span class="line"><span class="string">Email Address []:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please enter the following &#x27;</span>extra<span class="string">&#x27; attributes</span></span><br><span class="line"><span class="string">to be sent with your certificate request</span></span><br><span class="line"><span class="string">A challenge password []:</span></span><br><span class="line"><span class="string">An optional company name []:</span></span><br></pre></td></tr></table></figure>

<p>3.将证书签署请求发给CA</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># scp test.csr 192.168.73.132:/tmp</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.73.132 (192.168.73.132)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:YNlH0VBV0kp4lAClVvfMWVx/bHcbKKHXQwyd13d+MME.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:8a:1c:3d:c2:04:b1:be:05:95:33:9e:16:e8:ad:6c:25.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.73.132<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.73.132&#x27;</span>s password: </span><br><span class="line">test.csr                                                               100%  660   220.9KB/s   00:00    </span><br></pre></td></tr></table></figure>

<h3 id="三、CA服务器端签署证书"><a href="#三、CA服务器端签署证书" class="headerlink" title="三、CA服务器端签署证书"></a>三、CA服务器端签署证书</h3><p>CA服务器签署证书时，需要指定证书有效时长</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># openssl ca -in /tmp/test.csr -out certs/test.crt -days 365</span></span><br><span class="line">Using configuration from /etc/pki/tls/openssl.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">Certificate Details:</span><br><span class="line">        Serial Number: 1 (0x1)</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Apr 15 22:42:33 2019 GMT</span><br><span class="line">            Not After : Apr 14 22:42:33 2020 GMT</span><br><span class="line">        Subject:</span><br><span class="line">            countryName               = CN</span><br><span class="line">            stateOrProvinceName       = beijing</span><br><span class="line">            organizationName          = magedu</span><br><span class="line">            organizationalUnitName    = ops</span><br><span class="line">            commonName                = www.mylinuxops.com</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Basic Constraints: </span><br><span class="line">                CA:FALSE</span><br><span class="line">            Netscape Comment: </span><br><span class="line">                OpenSSL Generated Certificate</span><br><span class="line">            X509v3 Subject Key Identifier: </span><br><span class="line">                6F:FE:2A:6D:CA:54:71:43:EC:58:54:8B:94:8E:92:BC:04:9B:6D:91</span><br><span class="line">            X509v3 Authority Key Identifier: </span><br><span class="line">                keyid:EE:25:E6:80:F8:8A:68:3F:E5:5E:C4:38:FB:1C:B9:93:C9:2B:5B:AD</span><br><span class="line"></span><br><span class="line">Certificate is to be certified until Apr 14 22:42:33 2020 GMT (365 days)</span><br><span class="line">Sign the certificate? [y/n]:y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 out of 1 certificate requests certified, commit? [y/n]y</span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure>

<h3 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h3><p>1.查看证书中的信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># openssl x509 -in certs/test.crt -noout -text</span></span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number: 1 (0x1)</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: C=CN, ST=beijing, L=beijing, O=magedu, OU=ops, CN=ca.magedu.com</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Apr 15 22:42:33 2019 GMT</span><br><span class="line">            Not After : Apr 14 22:42:33 2020 GMT</span><br><span class="line">        Subject: C=CN, ST=beijing, O=magedu, OU=ops, CN=www.mylinuxops.com</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (1024 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:d1:ab:99:29:51:31:e8:2d:69:e6:04:25:89:61:</span><br><span class="line">                    2d:81:71:c6:cf:b0:a2:a2:8a:94:6f:b3:ab:40:fa:</span><br><span class="line">                    1f:da:40:33:7b:46:0f:f7:61:21:18:be:3b:5d:b8:</span><br><span class="line">                    18:a2:8a:9e:99:66:9c:9c:7c:68:2e:ab:73:00:87:</span><br><span class="line">                    3a:91:aa:b5:a0:f0:2c:ec:d0:f2:44:15:86:74:2a:</span><br><span class="line">                    39:d0:64:42:a8:d5:69:ca:c2:79:a1:5a:e3:c9:dc:</span><br><span class="line">                    6e:9e:1e:ab:89:cf:47:62:57:67:17:d3:9f:09:4f:</span><br><span class="line">                    0d:ed:f3:b7:d1:99:b0:49:95:99:25:0b:70:30:ef:</span><br><span class="line">                    a2:72:8d:42:90:8b:51:bb:41</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Basic Constraints: </span><br><span class="line">                CA:FALSE</span><br><span class="line">            Netscape Comment: </span><br><span class="line">                OpenSSL Generated Certificate</span><br><span class="line">            X509v3 Subject Key Identifier: </span><br><span class="line">                6F:FE:2A:6D:CA:54:71:43:EC:58:54:8B:94:8E:92:BC:04:9B:6D:91</span><br><span class="line">            X509v3 Authority Key Identifier: </span><br><span class="line">                keyid:EE:25:E6:80:F8:8A:68:3F:E5:5E:C4:38:FB:1C:B9:93:C9:2B:5B:AD</span><br><span class="line"></span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         a0:b9:ac:ef:a6:cb:9c:af:99:5b:f8:f2:dd:f4:0b:dc:63:51:</span><br><span class="line">         99:16:3d:b9:53:91:5e:e5:61:f0:9d:85:cb:57:19:b8:fd:fd:</span><br><span class="line">         6e:3a:9c:f2:2a:d0:69:90:89:ff:75:90:20:f6:25:d0:d2:f9:</span><br><span class="line">         4f:23:34:fd:b7:3c:25:00:7c:a3:7f:f3:14:2b:54:54:3e:cf:</span><br><span class="line">         19:fa:80:48:b2:f3:3a:c7:cf:20:7a:91:3e:43:6f:88:2d:36:</span><br><span class="line">         9a:50:23:12:d1:0c:fa:78:c3:3a:7e:90:85:b1:ba:a8:4a:f0:</span><br><span class="line">         c9:a1:6c:e9:7c:ff:e5:8a:f1:30:8d:36:33:1c:22:03:5b:37:</span><br><span class="line">         73:95:a8:6f:2d:68:42:5d:78:e2:9c:24:c4:b2:f7:59:37:1e:</span><br><span class="line">         af:90:ea:1e:bc:73:d7:95:83:42:64:f5:e1:fb:45:e6:9c:e3:</span><br><span class="line">         2b:04:6f:de:d0:de:01:d9:dc:af:9c:47:2d:31:5e:c3:71:6d:</span><br><span class="line">         23:a6:f3:e0:77:65:c9:a3:39:c0:f2:c5:d2:21:df:84:64:<span class="built_in">cd</span>:</span><br><span class="line">         0f:4b:19:ea:b4:d5:75:2a:52:54:38:e4:d6:6a:e0:9e:61:c6:</span><br><span class="line">         3a:04:21:cb:d5:2f:c9:f3:21:15:a6:bf:48:ea:06:f4:a8:20:</span><br><span class="line">         43:49:e9:e5:d5:c6:74:06:6a:53:c6:31:48:08:89:6f:af:9a:</span><br><span class="line">         aa:d7:62:e3:9b:60:f2:55:1e:0d:e0:e2:ab:02:76:ab:f0:2f:</span><br><span class="line">         c5:39:fe:11:e3:1d:51:19:96:2d:57:6b:a6:d1:97:8d:fb:cb:</span><br><span class="line">         4f:08:b5:29:af:c8:b8:c7:c9:32:7d:a6:30:ee:ad:c7:13:af:</span><br><span class="line">         d9:9f:c4:09:f1:57:6b:aa:66:de:ad:28:c9:ea:a3:52:26:9b:</span><br><span class="line">         29:e2:0a:14:30:c5:fb:06:70:89:69:f2:5a:de:49:bd:4a:f3:</span><br><span class="line">         af:20:f0:b6:c5:97:37:9a:b4:35:03:5e:75:6c:a0:82:1e:bb:</span><br><span class="line">         0c:68:fe:f4:ee:06:3b:0a:2e:e1:72:0c:b1:32:f4:f3:0f:c0:</span><br><span class="line">         ee:66:1e:5b:9b:e5:02:72:8a:f4:f8:94:3b:c3:85:5f:53:38:</span><br><span class="line">         47:b4:47:61:1a:a1:fd:36:9d:40:81:0a:65:37:47:ad:9e:d5:</span><br><span class="line">         a3:0f:58:87:d5:2f:7f:b5:bc:15:e8:cc:f4:16:c0:67:fa:a2:</span><br><span class="line">         b6:f1:2b:4e:5d:ac:8f:fe:c5:20:3a:b5:49:18:5d:be:29:01:</span><br><span class="line">         67:5f:2f:e9:77:31:34:5c:e2:12:78:1c:a2:c8:3a:67:d1:90:</span><br><span class="line">         3b:24:ed:49:68:5d:c4:f3:f7:8f:4c:bf:02:88:15:3b:11:90:</span><br><span class="line">         9e:f0:<span class="built_in">fc</span>:d2:41:48:8b:6c:53:22:8d:b0:1b:53:67:05:dc:f5:</span><br><span class="line">         72:37:19:1b:05:24:4b:3b</span><br></pre></td></tr></table></figure>

<p>2.查看指定编号的证书状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># openssl ca -status 01</span></span><br><span class="line">Using configuration from /etc/pki/tls/openssl.cnf</span><br><span class="line">01=Valid (V)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="CA证书的吊销"><a href="#CA证书的吊销" class="headerlink" title="CA证书的吊销"></a>CA证书的吊销</h2><p>1.在客户机上查看索要吊销的证书的serial和subject</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 certs]<span class="comment"># openssl x509 -in test.crt -noout -serial -subject</span></span><br><span class="line">serial=01</span><br><span class="line">subject= /C=CN/ST=beijing/O=magedu/OU=ops/CN=www.mylinuxops.com</span><br></pre></td></tr></table></figure>

<p>2.根据客户端所提交的信息，在CA服务器端比对index.txt内的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># cat index.txt</span></span><br><span class="line">V	200414224233Z		01	unknown	/C=CN/ST=beijing/O=magedu/OU=ops/CN=www.mylinuxops.com         </span><br></pre></td></tr></table></figure>

<p>3.吊销证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># openssl ca -revoke /etc/pki/CA/newcerts/01.pem </span></span><br><span class="line">Using configuration from /etc/pki/tls/openssl.cnf</span><br><span class="line">Revoking Certificate 01.</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure>

<p>4.指定第一个证书吊销的编号（第一次执行吊销时需要执行此步骤）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># echo 01 &gt; /etc/pki/CA/crlnumber</span></span><br></pre></td></tr></table></figure>

<p>5.生成证书吊销列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># openssl ca -gencrl -out /etc/pki/CA/crl.pem</span></span><br><span class="line">Using configuration from /etc/pki/tls/openssl.cnf</span><br></pre></td></tr></table></figure>

<p>6.查看证书吊销列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 CA]<span class="comment"># openssl crl -in crl.pem -noout -text</span></span><br><span class="line">Certificate Revocation List (CRL):</span><br><span class="line">        Version 2 (0x1)</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: /C=CN/ST=beijing/L=beijing/O=magedu/OU=ops/CN=ca.magedu.com</span><br><span class="line">        Last Update: Apr 16 08:41:46 2019 GMT</span><br><span class="line">        Next Update: May 16 08:41:46 2019 GMT</span><br><span class="line">        CRL extensions:</span><br><span class="line">            X509v3 CRL Number: </span><br><span class="line">                1</span><br><span class="line">Revoked Certificates:</span><br><span class="line">    Serial Number: 01</span><br><span class="line">        Revocation Date: Apr 16 08:38:37 2019 GMT</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         a3:07:8f:b4:a8:ec:76:fb:d1:6c:88:f6:1d:ba:e6:79:5e:19:</span><br><span class="line">         59:3a:38:8d:26:d0:15:d2:22:b1:2f:a5:b0:b0:<span class="built_in">fc</span>:49:11:00:</span><br><span class="line">         0a:2a:93:22:8d:44:ec:18:c9:5d:ad:66:60:32:36:8a:55:77:</span><br><span class="line">         03:9e:fb:51:b4:8e:9d:b7:d8:3b:d1:da:64:9e:ae:9f:5a:04:</span><br><span class="line">         19:69:f6:e9:de:94:75:92:f4:f4:33:b6:2b:e9:8e:27:dd:40:</span><br><span class="line">         9f:90:11:0f:36:d4:4a:ef:af:55:08:ec:87:81:c6:7c:38:02:</span><br><span class="line">         fb:e2:d9:77:61:dc:2a:2c:61:c5:36:aa:6e:34:59:77:fe:47:</span><br><span class="line">         81:6d:02:15:e5:4b:f2:1f:ae:b3:e0:2e:5e:49:9d:c1:51:f9:</span><br><span class="line">         2e:69:d5:5f:9b:26:25:20:d9:88:ac:30:94:e2:25:e5:ee:17:</span><br><span class="line">         f4:62:ca:ea:be:af:aa:7a:07:e7:e5:91:24:80:cc:52:9b:30:</span><br><span class="line">         e2:3e:59:66:2a:77:28:7b:6a:10:99:a3:a3:27:30:17:a1:94:</span><br><span class="line">         49:bb:ae:eb:7f:53:d9:07:a5:0c:8f:b0:97:0a:cb:42:d8:37:</span><br><span class="line">         22:d9:0b:48:5e:a9:a0:13:78:0d:71:5b:76:25:11:f2:62:7b:</span><br><span class="line">         e7:a5:f5:52:03:a6:25:ea:3a:da:d6:37:5a:55:ed:89:3e:67:</span><br><span class="line">         6f:b7:d7:a9:75:94:e8:17:af:cc:87:ed:bb:4d:19:3c:ee:af:</span><br><span class="line">         a5:4d:fe:5e:f9:80:7a:16:4d:8c:99:36:77:75:e7:81:03:05:</span><br><span class="line">         92:91:01:5c:5e:d7:d0:d3:2b:ef:62:<span class="built_in">cd</span>:20:5b:1b:40:30:29:</span><br><span class="line">         41:83:c6:7b:cc:29:2a:c3:6c:76:88:ed:a8:ac:be:83:00:7b:</span><br><span class="line">         56:c6:de:97:cf:6a:a5:bd:38:1e:84:b1:00:37:e5:85:15:eb:</span><br><span class="line">         86:51:f8:51:f6:e4:7e:2e:25:e2:8b:10:7d:3e:a6:4d:e5:bd:</span><br><span class="line">         cb:8b:1e:2f:71:60:83:e5:75:1b:91:87:90:39:4a:67:88:87:</span><br><span class="line">         51:d3:b9:ff:0a:f6:36:3c:ba:a0:ae:32:6d:48:d7:e0:3d:20:</span><br><span class="line">         06:b5:ae:05:74:ab:13:84:49:dc:d7:91:c3:48:38:2d:b3:e9:</span><br><span class="line">         b7:f0:13:9d:54:44:f1:5c:52:35:95:f5:da:9c:85:62:3f:28:</span><br><span class="line">         3a:c1:8a:32:e9:f6:f6:93:d2:40:7f:8a:71:20:6e:04:2f:2f:</span><br><span class="line">         33:2b:ac:2a:bb:33:b1:09:4d:4b:67:69:a9:48:a7:a7:a4:cb:</span><br><span class="line">         7e:61:fb:3e:85:dd:1f:99:8b:35:d6:7d:75:9d:34:61:84:8e:</span><br><span class="line">         46:39:e7:4b:09:e3:00:44:69:24:73:ac:37:82:73:1b:42:0d:</span><br><span class="line">         1f:60:5a:e7:47:6c:5f:a6</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="创建私有CA脚本"><a href="#创建私有CA脚本" class="headerlink" title="创建私有CA脚本"></a>创建私有CA脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PS3=<span class="string">&quot;plese choose a nember: &quot;</span></span><br><span class="line">select menu <span class="keyword">in</span> 创建CA 申请证书 签发证书 退出;<span class="keyword">do</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$menu</span> <span class="keyword">in</span></span><br><span class="line">        创建CA)</span><br><span class="line">                <span class="built_in">cd</span> /etc/pki/CA</span><br><span class="line">                touch serial</span><br><span class="line">                <span class="built_in">echo</span> 01 &gt; index.txt</span><br><span class="line">                (<span class="built_in">umask</span> 066;openssl genrsa -out private/cakey.pem 4096)</span><br><span class="line">                openssl req -new -x509 -key private/cakey.pem -out cacert.pem -days 3650 &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">                CN</span></span><br><span class="line"><span class="string">                beijing</span></span><br><span class="line"><span class="string">                beijing</span></span><br><span class="line"><span class="string">                magedu</span></span><br><span class="line"><span class="string">                ca.magedu.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                EOF</span></span><br><span class="line">                ;;</span><br><span class="line">        申请证书)</span><br><span class="line">                <span class="built_in">read</span> -p <span class="string">&quot;please input your need crt appdir: &quot;</span> APPDIR</span><br><span class="line">                <span class="built_in">read</span> -p <span class="string">&quot;please input your need crt app name: &quot;</span> NAME</span><br><span class="line">                <span class="built_in">read</span> -p <span class="string">&quot;please input CA server ip: &quot;</span> IP</span><br><span class="line">                <span class="built_in">cd</span> <span class="variable">$APPDIR</span></span><br><span class="line">                (unmask 066;openssl genrsa -out <span class="variable">$NAME</span>.key 2048)</span><br><span class="line">                openssl req -new -key <span class="variable">$&#123;NAME&#125;</span>.key -out <span class="variable">$&#123;NAME&#125;</span>.csr</span><br><span class="line">                scp <span class="variable">$&#123;NAME&#125;</span>.csr <span class="variable">$&#123;IP&#125;</span>:/tmp</span><br><span class="line">                <span class="built_in">unset</span> IP</span><br><span class="line">                ;;</span><br><span class="line">        签发证书)</span><br><span class="line">                <span class="built_in">read</span> -p <span class="string">&quot;please input client ip: &quot;</span> IP</span><br><span class="line">                NAME=`<span class="built_in">cd</span> /tmp;ls *.csr`</span><br><span class="line">                openssl ca -<span class="keyword">in</span> /tmp/<span class="variable">$&#123;NAME&#125;</span>.csr -out /etc/pki/CA/certs/<span class="variable">$&#123;NAME&#125;</span>.crt</span><br><span class="line">                rm -rf /tmp/*.csr</span><br><span class="line">                scp /etc/pki/CA/certs/<span class="variable">$&#123;NAME&#125;</span>.crt <span class="variable">$IP</span>:/tmp</span><br><span class="line">                <span class="built_in">unset</span> IP</span><br><span class="line">                ;;</span><br><span class="line">        退出)</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">                ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">~  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>OpenSSL</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移数据至逻辑卷和LVM快照</title>
    <url>/2019/03/05/Linux%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E8%87%B3%E9%80%BB%E8%BE%91%E5%8D%B7%E5%92%8Clvm%E5%BF%AB%E7%85%A7/%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E8%87%B3%E9%80%BB%E8%BE%91%E5%8D%B7%E5%92%8C%E9%80%BB%E8%BE%91%E5%8D%B7%E5%BF%AB%E7%85%A7/</url>
    <content><![CDATA[<h2 id="迁移数据至逻辑卷和LVM快照"><a href="#迁移数据至逻辑卷和LVM快照" class="headerlink" title="迁移数据至逻辑卷和LVM快照"></a>迁移数据至逻辑卷和LVM快照</h2><p>在生产中又有可能遇到数据需要从原先的磁盘中迁移到逻辑卷中，此时就会涉及到数据的迁移，以下将演示如何将叔叔从一个磁盘上迁移到逻辑卷中以及如何对逻辑卷创建快照，恢复快照。</p>
<span id="more"></span>

<h3 id="迁移数据至逻辑卷"><a href="#迁移数据至逻辑卷" class="headerlink" title="迁移数据至逻辑卷"></a>迁移数据至逻辑卷</h3><p>1.首先创建一个逻辑卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># pvcreate /dev/sd&#123;b,c&#125;</span></span><br><span class="line">  Physical volume <span class="string">&quot;/dev/sdb&quot;</span> successfully created.</span><br><span class="line">  Physical volume <span class="string">&quot;/dev/sdc&quot;</span> successfully created.</span><br><span class="line">[root@centos7 ~]<span class="comment"># vgcreate testvg /dev/sd&#123;b,c&#125;</span></span><br><span class="line">  Volume group <span class="string">&quot;testvg&quot;</span> successfully created</span><br><span class="line">[root@centos7 ~]<span class="comment"># lvcreate -n testlv -L 5G testvg </span></span><br><span class="line">  Logical volume <span class="string">&quot;testlv&quot;</span> created.</span><br></pre></td></tr></table></figure>

<p>2.将磁盘格式化为ext4分区格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mkfs.ext4 /dev/testvg/testlv </span></span><br><span class="line">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem label=</span><br><span class="line">OS <span class="built_in">type</span>: Linux</span><br><span class="line">Block size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Fragment size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">327680 inodes, 1310720 blocks</span><br><span class="line">65536 blocks (5.00%) reserved <span class="keyword">for</span> the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=1342177280</span><br><span class="line">40 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8192 inodes per group</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">	32768, 98304, 163840, 229376, 294912, 819200, 884736</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span>                            </span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (32768 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span> </span><br></pre></td></tr></table></figure>

<p>3.挂载逻辑卷设备至临时目录，并复制需要迁移的数据。(以下以home家目录为例进行数据迁移)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mkdir /testdir</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># mount /dev/testvg/testlv /testdir/</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cp -a /home/. /testdir/</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ls /testdir</span></span><br><span class="line">lost+found  masuri</span><br></pre></td></tr></table></figure>
<p>4.卸载设备，移除原家目录下的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 home]<span class="comment"># mv /home/* /tmp/</span></span><br><span class="line">[root@centos7 testdir]<span class="comment"># umount /testdir/</span></span><br></pre></td></tr></table></figure>

<p>5.将lvm设备挂载至/home完成数据迁移，由于用户家目录再启动时需要开机时挂载所以此处需要将其写入配置文件，并挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 home]<span class="comment"># vim /etc/fstab</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Tue Mar  5 21:07:19 2019</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">UUID=45490aa4-cf29-420d-a606-af32688b6707 /                       xfs     defaults        0 0</span><br><span class="line">UUID=15dcd896-b7cf-48d0-b8bd-4c0b0f2c62b2 /boot                   xfs     defaults        0 0</span><br><span class="line">UUID=4b6e1813-2c46-402a-869a-02cbbcb76ade /data                   xfs     defaults        0 0</span><br><span class="line">UUID=0995b444-48c1-4423-92bc-2deda0d3c082 swap                    swap    defaults        0 0</span><br><span class="line">UUID=a3fa2d53-91c4-4af5-9ee4-c63500dbaaf2 /home                   ext4    defaults        0 0</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="comment">#挂载设备</span></span><br><span class="line">[root@centos7 home]<span class="comment"># mount -a</span></span><br><span class="line"><span class="comment">#查看设备是否挂载</span></span><br><span class="line">[root@centos7 home]<span class="comment"># lsblk</span></span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0  200G  0 disk </span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">├─sda2            8:2    0  100G  0 part /</span><br><span class="line">├─sda3            8:3    0   50G  0 part /data</span><br><span class="line">├─sda4            8:4    0    1K  0 part </span><br><span class="line">└─sda5            8:5    0    2G  0 part [SWAP]</span><br><span class="line">sdb               8:16   0   20G  0 disk </span><br><span class="line">└─testvg-testlv 253:0    0    5G  0 lvm  /home</span><br><span class="line">sdc               8:32   0   20G  0 disk </span><br><span class="line">sr0              11:0    1   10G  0 rom  </span><br><span class="line"><span class="comment">#查看lvm中的数据是否存在</span></span><br><span class="line">[root@centos7 home]<span class="comment"># cd /home</span></span><br><span class="line">[root@centos7 home]<span class="comment"># ls</span></span><br><span class="line">lost+found  masuri</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="lvm快照"><a href="#lvm快照" class="headerlink" title="lvm快照"></a>lvm快照</h2><p>lvm快照的原理是在和需要拍摄快照的逻辑卷的同一卷组上创建一个空白逻辑卷并标识当前的时间，当原逻辑卷内的某数据发生改变时，首先会在此数据未发生改变前复制一份至快照卷。当需要用到快照时，系统会将快照卷内的数据全部复制回逻辑卷，并将逻辑卷内拍摄快后建立的数据全部删除。快照卷的大小一般为逻辑卷内数据的大小，过大无意义，过小可能会造成数据的丢失。</p>
<h3 id="1-创建快照卷"><a href="#1-创建快照卷" class="headerlink" title="1.创建快照卷"></a>1.创建快照卷</h3><p>此处以刚才创建的逻辑卷/dev/testvg/testlv为例，创建快照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 home]<span class="comment"># lvcreate -n home_snap -s -L 100M /dev/testvg/testlv  </span></span><br><span class="line">Logical volume <span class="string">&quot;home_snap&quot;</span> created.</span><br><span class="line"><span class="comment">#查看快照卷是否创建</span></span><br><span class="line">[root@centos7 home]<span class="comment"># lvs</span></span><br><span class="line">  LV        VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  home_snap testvg swi-a-s--- 100.00m      testlv 0.01                                   </span><br><span class="line">  testlv    testvg owi-aos---   5.00g                                                    </span><br></pre></td></tr></table></figure>
<h3 id="2-使用快照对逻辑卷恢复"><a href="#2-使用快照对逻辑卷恢复" class="headerlink" title="2.使用快照对逻辑卷恢复"></a>2.使用快照对逻辑卷恢复</h3><p>在对逻辑卷恢复之前先将逻辑卷内的数据进行一些修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cd /home</span></span><br><span class="line">[root@centos7 home]<span class="comment"># ls</span></span><br><span class="line">lost+found  masuri</span><br><span class="line">[root@centos7 home]<span class="comment"># touch file&#123;1..5&#125;</span></span><br><span class="line">[root@centos7 home]<span class="comment"># ls</span></span><br><span class="line">file1  file2  file3  file4  file5  lost+found  masuri</span><br></pre></td></tr></table></figure>

<p>恢复快照，恢复快照前需要将逻辑卷卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># umount /home/</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># lvconvert --merge /dev/testvg/home_snap </span></span><br><span class="line">  Merging of volume testvg/home_snap started.</span><br><span class="line">  testvg/testlv: Merged: 100.00%</span><br></pre></td></tr></table></figure>

<p>挂载逻辑卷查看数据是否恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mount -a</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cd /home</span></span><br><span class="line">[root@centos7 home]<span class="comment"># ls</span></span><br><span class="line">lost+found  masuri</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>文件管理类命令</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B1%BB%E5%91%BD%E4%BB%A4/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B1%BB%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="文件管理类命令"><a href="#文件管理类命令" class="headerlink" title="文件管理类命令"></a>文件管理类命令</h2><h3 id="1-pwd-显示当前工作目录"><a href="#1-pwd-显示当前工作目录" class="headerlink" title="1.pwd 显示当前工作目录"></a>1.pwd 显示当前工作目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span> [OPTION]...</span><br></pre></td></tr></table></figure>

<p>说明：  </p>
<p>打印当前工作目录  </p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-P</td>
<td align="left">显示真实的物理路径</td>
</tr>
<tr>
<td align="left">-L</td>
<td align="left">显示链接路径(默认)</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 bin]<span class="comment"># ll -d /bin      /bin为/usr/bin的软链接</span></span><br><span class="line">lrwxrwxrwx. 1 root root 7 Mar  5 21:08 /bin -&gt; usr/bin</span><br><span class="line">[root@centos7 bin]<span class="comment"># pwd          默认直接显示链接路径</span></span><br><span class="line">/bin</span><br><span class="line">[root@centos7 bin]<span class="comment"># pwd -P      显示真实的物理路径而不是链接路径</span></span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure>

<p>补充：  </p>
<p>绝对路径：绝对路径是指从根开始到所要指定的文件的完整的路径名称，从/开始写路径  </p>
<p>相对路径：相对路径是指相对于当前工作目录到目标目录的位置所表示出的一种路径方法，不从/开始写路径  </p>
<p>basename:基名  </p>
<p>dirname:路径名  </p>
<p>示例:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 bin]<span class="comment"># cd /etc/sysconfig/      完整路径名</span></span><br><span class="line">[root@centos7 sysconfig]<span class="comment"># cd ../../home     相对路径名</span></span><br><span class="line">[root@centos7 home]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[root@centos7 bin]<span class="comment"># basename /etc/sysconfig/            取出路径中的基名</span></span><br><span class="line">sysconfig</span><br><span class="line">[root@centos7 bin]<span class="comment"># dirname /etc/sysconfig/             取出路径中的目录名</span></span><br><span class="line">/etc</span><br></pre></td></tr></table></figure>

<h3 id="2-cd-改变目录"><a href="#2-cd-改变目录" class="headerlink" title="2. cd 改变目录"></a>2. cd 改变目录</h3><p>命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /PATH/TO/DIRNAME</span><br></pre></td></tr></table></figure>

<p>说明： </p>
<p>改变当前工作目录  </p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-P</td>
<td align="left">改变目录到物理路径的目录而非链接</td>
</tr>
</tbody></table>
<p>示例：  </p>
<p>以/bin目录为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 bin]<span class="comment"># cd /bin </span></span><br><span class="line">[root@centos7 bin]<span class="comment"># pwd</span></span><br><span class="line">/bin</span><br><span class="line">[root@centos7 bin]<span class="comment"># cd -P /bin      跳转至物理路径</span></span><br><span class="line">[root@centos7 bin]<span class="comment"># pwd</span></span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure>

<h3 id="3-ls-显示目录内容"><a href="#3-ls-显示目录内容" class="headerlink" title="3. ls 显示目录内容"></a>3. ls 显示目录内容</h3><p>命令格式：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure>

<p>说明：  </p>
<p>显示目录下的内容  </p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-a</td>
<td align="left">包含隐藏文件</td>
</tr>
<tr>
<td align="left">-l</td>
<td align="left">显示额外的信息</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">文件大小显示为可读的信息</td>
</tr>
<tr>
<td align="left">-R</td>
<td align="left">目录递归通过</td>
</tr>
<tr>
<td align="left">-ld</td>
<td align="left">目录和符号链接信息</td>
</tr>
<tr>
<td align="left">-1</td>
<td align="left">文件分行显示</td>
</tr>
<tr>
<td align="left">–S</td>
<td align="left">按从大到小排序</td>
</tr>
<tr>
<td align="left">–t</td>
<td align="left">按mtime排序</td>
</tr>
<tr>
<td align="left">–u</td>
<td align="left">配合-t选项，显示并按atime从新到旧排序</td>
</tr>
<tr>
<td align="left">–U</td>
<td align="left">按目录存放顺序显示</td>
</tr>
<tr>
<td align="left">–X</td>
<td align="left">按文件后缀排序</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 /]<span class="comment"># ls -a             显示目录下所有文件包括隐藏文件</span></span><br><span class="line">.   bin   data  etc   lib    media  opt   root  sbin  sys      tmp  var</span><br><span class="line">..  boot  dev   home  lib64  mnt    proc  run   srv   testdir  usr</span><br><span class="line"></span><br><span class="line">[root@centos7 /]<span class="comment"># ls -l             显示文件的详细信息</span></span><br><span class="line">total 20</span><br><span class="line">lrwxrwxrwx.   1 root root    7 Mar  5 21:08 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.   5 root root 4096 Mar  5 21:14 boot</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@centos7 /]<span class="comment"># ls -R /home       递归显示文件</span></span><br><span class="line">/home:</span><br><span class="line">masuri</span><br><span class="line"></span><br><span class="line">/home/masuri:</span><br><span class="line"></span><br><span class="line">[root@centos7 /]<span class="comment"># ls -ld /home      显示目录自身属性</span></span><br><span class="line">drwxr-xr-x. 3 root root 20 Mar  5 21:13 /home</span><br><span class="line"></span><br><span class="line">[root@centos7 /]<span class="comment"># ls -1             文件在一列中显示</span></span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@centos7 /]<span class="comment"># ls -lS            按照文件大小从大到小显示</span></span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x. 138 root root 8192 Mar  8 16:27 etc</span><br><span class="line">dr-xr-xr-x.   5 root root 4096 Mar  5 21:14 boot</span><br><span class="line">drwxrwxrwt.  14 root root 4096 Mar  8 15:56 tmp</span><br><span class="line">drwxr-xr-x   19 root root 3300 Mar  7 16:10 dev</span><br><span class="line">drwxr-xr-x   36 root root 1200 Mar  8 13:11 run</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@centos7 /]<span class="comment"># ls -lt            按照文件的修改时间从新到旧进行显示</span></span><br><span class="line">total 20</span><br><span class="line">dr-xr-xr-x   13 root root    0 Mar  8 16:54 sys</span><br><span class="line">drwxr-xr-x. 138 root root 8192 Mar  8 16:27 etc</span><br><span class="line">drwxrwxrwt.  14 root root 4096 Mar  8 15:56 tmp</span><br><span class="line">dr-xr-x---.   5 root root  242 Mar  8 15:55 root</span><br><span class="line">drwxr-xr-x   36 root root 1200 Mar  8 13:11 run</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@centos7 /]<span class="comment"># ls -lut           按照访问时间从新到旧排序</span></span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x   19 root root 3300 Mar  8 16:54 dev</span><br><span class="line">drwxr-xr-x.   3 root root   42 Mar  8 16:54 data</span><br><span class="line">drwxr-xr-x. 138 root root 8192 Mar  8 16:44 etc</span><br><span class="line">drwxr-xr-x.  13 root root  155 Mar  8 15:56 usr</span><br><span class="line">dr-xr-x---.   5 root root  242 Mar  8 15:56 root</span><br><span class="line">lrwxrwxrwx.   1 root root    7 Mar  8 13:08 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root    9 Mar  8 13:08 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x.  20 root root  282 Mar  7 15:06 var</span><br><span class="line">dr-xr-xr-x  150 root root    0 Mar  7 14:01 proc</span><br><span class="line"></span><br><span class="line">[root@centos7 /]<span class="comment"># ls -U             按字母顺序排序</span></span><br><span class="line">boot  dev   run  etc   var  usr  sbin  lib64  media  opt  testdir</span><br><span class="line">data  proc  sys  root  tmp  bin  lib   home   mnt    srv</span><br><span class="line"></span><br><span class="line">[root@centos7 data]<span class="comment"># ls -X          按照后缀归类</span></span><br><span class="line">aa  -h  a.sh  b.sh  c.txt  d.txt  e.txt  f.txt  test.txt</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># ls -lh            将文件大小显示为可读的信息</span></span><br><span class="line">total 8.0K</span><br><span class="line">-rw-r--r-- 1 root root    0 Mar  7 15:31 342</span><br><span class="line">-rw-r--r-- 1 root root  132 Mar  8 15:55 <span class="built_in">echo</span></span><br><span class="line">---------- 1 root root 1.3K Mar  7 15:35 shadow</span><br></pre></td></tr></table></figure>

<h3 id="4-stat-查看文件状态"><a href="#4-stat-查看文件状态" class="headerlink" title="4.stat 查看文件状态"></a>4.stat 查看文件状态</h3><p>命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stat /PATH/TO/FILE</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>显示文件的元数据  </p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 bin]<span class="comment"># stat /etc/passwd</span></span><br><span class="line">  File: ‘/etc/passwd’</span><br><span class="line">  Size: 2265            Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: 802h/2050d      Inode: 135090575   Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2019-03-08 13:08:40.974021999 +0800</span><br><span class="line">Modify: 2019-03-05 21:13:55.465984891 +0800</span><br><span class="line">Change: 2019-03-05 21:13:55.465984891 +0800</span><br><span class="line"> Birth: -</span><br></pre></td></tr></table></figure>

<p>其他：  </p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">atime</td>
<td align="left">访问时间，当文件被读时时间发生改变</td>
</tr>
<tr>
<td align="left">mtime</td>
<td align="left">修改时间，当文件内容被修改时时间发生改变</td>
</tr>
<tr>
<td align="left">ctime</td>
<td align="left">状态时间，当文件元数据发生改变时时间会发生改变</td>
</tr>
</tbody></table>
<h3 id="5-cp-复制命令"><a href="#5-cp-复制命令" class="headerlink" title="5. cp 复制命令"></a>5. cp 复制命令</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp [OPTION]... [-T] SOURCE DEST</span><br><span class="line">cp [OPTION]... SOURCE... DIRECTORY</span><br><span class="line">cp [OPTION]... -t DIRECTORY SOURCE...</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>复制文件或目录到目标目录  </p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">交互式覆盖前提示</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">不覆盖</td>
</tr>
<tr>
<td align="left">-r,-R</td>
<td align="left">递归复制目录及内部所有内容</td>
</tr>
<tr>
<td align="left">-a</td>
<td align="left">归档，相当于-dR –preserv=all</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left">不复制源文件，只复制链接名</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">等同于–preserv=mode,ownership,timestamp</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">显示详细过程</td>
</tr>
<tr>
<td align="left">-f</td>
<td align="left">强制</td>
</tr>
<tr>
<td align="left">-u</td>
<td align="left">–update只复制源比目标更新文件或目录不存在的文件</td>
</tr>
<tr>
<td align="left">-b</td>
<td align="left">目标存在，覆盖前先备份，形式为filename~</td>
</tr>
<tr>
<td align="left">–bakup=numbered</td>
<td align="left">目标存在，覆盖前先备份加数字后缀</td>
</tr>
</tbody></table>
<p>示例：  </p>
<p>复制文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># cp /etc/passwd .</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ls</span></span><br><span class="line">passwd</span><br></pre></td></tr></table></figure>

<p>覆盖文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># cp  -i /etc/passwd .</span></span><br><span class="line">cp: overwrite ‘./passwd’? y</span><br><span class="line">[root@centos7 data]<span class="comment"># ls</span></span><br><span class="line">passwd</span><br></pre></td></tr></table></figure>

<p>当文件存在时不覆盖文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># cp /etc/issue .</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ls</span></span><br><span class="line">issue  passwd</span><br><span class="line">[root@centos7 data]<span class="comment"># echo &quot;hello world&quot; &gt;&gt; /etc/issue</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat /etc/issue</span></span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line">on  \l</span><br><span class="line">hostname is \n</span><br><span class="line">time is \t</span><br><span class="line"></span><br><span class="line">hello world</span><br><span class="line">[root@centos7 data]<span class="comment"># cp -n /etc/issue .</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat ./issue</span></span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line">on  \l</span><br><span class="line">hostname is \n</span><br><span class="line">time is \t</span><br></pre></td></tr></table></figure>

<p>递归复制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># cp -r /etc /data</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ls /data/etc</span></span><br><span class="line">abrt                        exports             kdump.conf                PackageKit        services</span><br><span class="line">adjtime                     exports.d           kernel                    </span><br><span class="line">...</span><br><span class="line">[root@centos7 data]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>复制链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># cp -d /bin .</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ll</span></span><br><span class="line">total 20</span><br><span class="line">lrwxrwxrwx   1 root root    7 Mar  9 13:22 bin -&gt; usr/bin</span><br></pre></td></tr></table></figure>

<p>备份后复制1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># ls</span></span><br><span class="line">bin  etc  issue  passwd</span><br><span class="line">[root@centos7 data]<span class="comment"># cp -b /etc/passwd .</span></span><br><span class="line">cp: overwrite ‘./passwd’? y</span><br><span class="line">[root@centos7 data]<span class="comment"># ls</span></span><br><span class="line">bin  etc  issue  passwd  passwd~        将原文件备份为passwd~</span><br></pre></td></tr></table></figure>

<p>注意：此方法备份后若再次备份会将passwd~覆盖  </p>
<p>备份后复制2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># cp --backup=numbered /etc/passwd .</span></span><br><span class="line">cp: overwrite ‘./passwd’? y</span><br><span class="line">[root@centos7 data]<span class="comment"># ls</span></span><br><span class="line">bin  etc  issue  passwd  passwd~  passwd.~1~</span><br></pre></td></tr></table></figure>

<p>注意：用此方法备份后若再次备份不会覆盖上一次的备份内容而是新生成一个.<del>#</del>后缀的文件进行备份然后再复制  </p>
<p>其他：</p>
<table>
<thead>
<tr>
<th align="left">源\目标</th>
<th align="left">不存在</th>
<th align="left">存在且为文件</th>
<th align="left">存在且为目录</th>
</tr>
</thead>
<tbody><tr>
<td align="left">一个文件</td>
<td align="left">新建DEST,并将STC中内容填充至DEST中</td>
<td align="left">将SRC中的内容覆盖至DEST中</td>
<td align="left">在DEST下新建与原文件同名的文件，并将SRC中内容填充至新文件中</td>
</tr>
<tr>
<td align="left">多个文件</td>
<td align="left">error</td>
<td align="left">error</td>
<td align="left">在DEST下新建与原文件同名的文件，并将原文件内容复制进新文件中</td>
</tr>
<tr>
<td align="left">目录</td>
<td align="left">创建指定DEST同名目录，复制SRC目录中所有文件至DEST下</td>
<td align="left">error</td>
<td align="left">在DEST下新建与原目录同名的目录，并将SRC中的内容复制到新目录中</td>
</tr>
</tbody></table>
<h3 id="6-mv移动"><a href="#6-mv移动" class="headerlink" title="6. mv移动"></a>6. mv移动</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv [OPTION]... [-T] SOURCE DEST</span><br><span class="line">mv [OPTION]... SOURCE... DIRECTORY</span><br><span class="line">mv [OPTION]... -t DIRECTORY SOURCE...</span><br></pre></td></tr></table></figure>

<p>说明：      </p>
<p>移动或重命名文件   </p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">交互式</td>
</tr>
<tr>
<td align="left">-f</td>
<td align="left">强制</td>
</tr>
<tr>
<td align="left">-b</td>
<td align="left">目标存在先备份后在移动</td>
</tr>
<tr>
<td align="left">-u</td>
<td align="left">–update只移动源比目标更新文件或不存在的文件</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">显示详细过程</td>
</tr>
</tbody></table>
<p>示例:  </p>
<p>移动文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># mkdir test</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ls</span></span><br><span class="line">bin  etc  issue  passwd  passwd~  passwd.~1~  <span class="built_in">test</span></span><br><span class="line">[root@centos7 data]<span class="comment"># mv issue test</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ls /data/test</span></span><br><span class="line">issue</span><br></pre></td></tr></table></figure>

<p>备份后移动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># cp /etc/issue .</span></span><br><span class="line">[root@centos7 data]<span class="comment"># mv -b issue test</span></span><br><span class="line">mv: overwrite ‘<span class="built_in">test</span>/issue’? y</span><br><span class="line">[root@centos7 data]<span class="comment"># ls /data/test</span></span><br><span class="line">issue  issue~       &lt;---备份后的文件</span><br></pre></td></tr></table></figure>

<h3 id="7-rm-删除"><a href="#7-rm-删除" class="headerlink" title="7. rm 删除"></a>7. rm 删除</h3><p>命令格式：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm [OPTION]... FILE...</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>删除(慎用)  </p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">交互式</td>
</tr>
<tr>
<td align="left">-f</td>
<td align="left">强制删除</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">递归</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>强制递归删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># rm -rf /data/test</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ls</span></span><br><span class="line">bin  etc  passwd  passwd~  passwd.~1~</span><br></pre></td></tr></table></figure>

<p><em><strong>注意:</strong></em>  </p>
<p>生产环境中建议将不用的数据移动到一个专用目录中，不建议直接使用rm命令删除，可以将rm定义为mv的别名具体操作如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># mkdir /hsz</span></span><br><span class="line">[root@centos7 data]<span class="comment"># echo &#x27;alias rm=&#x27;mv -t /hsz&#x27;&#x27; &gt;&gt; ~/.bashrc</span></span><br><span class="line">[root@centos7 data]<span class="comment"># . ~/.bashrc</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ls</span></span><br><span class="line">bin  etc  passwd  passwd~  passwd.~1~</span><br><span class="line">[root@centos7 data]<span class="comment"># rm bin</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ls</span></span><br><span class="line">etc  passwd  passwd~  passwd.~1~</span><br><span class="line">[root@centos7 data]<span class="comment"># ls /hsz</span></span><br><span class="line">bin</span><br><span class="line">[root@centos7 data]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h3 id="8-tree-显示目录树"><a href="#8-tree-显示目录树" class="headerlink" title="8.tree 显示目录树"></a>8.tree 显示目录树</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree  [-acdfghilnpqrstuvxACDFQNSUX] [-L level [-R]] [-H baseHREF] [-T title] [-o filename] [--nolinks] [-P pattern] [-I pattern] [--inodes] [--device] [--noreport] [--dirsfirst] [--version] [--<span class="built_in">help</span>] [--filelimit <span class="comment">#] [--si] [--prune]  [--du] [--timefmt format] [directory ...]</span></span><br></pre></td></tr></table></figure>

<p>说明：<br>显示目录树结构  </p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-d</td>
<td align="left">只显示目录</td>
</tr>
<tr>
<td align="left">-L level</td>
<td align="left">显示指定的层级数目</td>
</tr>
<tr>
<td align="left">-P pattern</td>
<td align="left">只显示指定pattern匹配到的路径</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 /]<span class="comment"># tree /data</span></span><br><span class="line">/data</span><br><span class="line">├── passwd</span><br><span class="line">├── passwd~</span><br><span class="line">└── passwd.~1~</span><br></pre></td></tr></table></figure>

<h3 id="9-mkdir-创建目录"><a href="#9-mkdir-创建目录" class="headerlink" title="9.mkdir 创建目录"></a>9.mkdir 创建目录</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir [OPTION]... DIRECTORY...</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>创建目录  </p>
<table>
<thead>
<tr>
<th align="left">选型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-p</td>
<td align="left">当上级目录不存在时自动创建上级目录</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">显示详细信息</td>
</tr>
<tr>
<td align="left">-m MODE</td>
<td align="left">创建目录时指定权限</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>创建多级目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 /]<span class="comment"># mkdir -pv /test1/test2/test3</span></span><br><span class="line">mkdir: created directory ‘/test1’</span><br><span class="line">mkdir: created directory ‘/test1/test2’</span><br><span class="line">mkdir: created directory ‘/test1/test2/test3’</span><br></pre></td></tr></table></figure>

<p>创建目录并添加权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 /]<span class="comment"># mkdir -m 777 /data/test4</span></span><br><span class="line">[root@centos7 /]<span class="comment"># ll -d /data/test4</span></span><br><span class="line">drwxrwxrwx 2 root root 6 Mar  9 14:42 /data/test4</span><br></pre></td></tr></table></figure>

<h3 id="10-rmdir-删除空目录"><a href="#10-rmdir-删除空目录" class="headerlink" title="10. rmdir 删除空目录"></a>10. rmdir 删除空目录</h3><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmdir [OPTION]... DIRECTORY...</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>删除空目录  </p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-p</td>
<td align="left">递归删除父空目录</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">显示详细信息</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># rmdir -pv /test/test1/test2/test3</span></span><br><span class="line">rmdir: removing directory, ‘/<span class="built_in">test</span>/test1/test2/test3’</span><br><span class="line">rmdir: removing directory, ‘/<span class="built_in">test</span>/test1/test2’</span><br><span class="line">rmdir: removing directory, ‘/<span class="built_in">test</span>/test1’</span><br><span class="line">rmdir: removing directory, ‘/<span class="built_in">test</span>’</span><br><span class="line">rmdir: removing directory, ‘/’</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>文件通配符</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E9%80%9A%E9%85%8D%E7%AC%A6/%E6%96%87%E4%BB%B6%E9%80%9A%E9%85%8D%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="文件统配符"><a href="#文件统配符" class="headerlink" title="文件统配符"></a>文件统配符</h2><p>通配符是一种特殊语句，用来模糊搜索文件。当查找文件夹时，可以使用它来代替一个或多个真正字符；当不知道真正字符或者懒得输入完整名字时，常常使用通配符代替一个或多个真正的字符。</p>
<span id="more"></span>

<h3 id="常用的文件通配符"><a href="#常用的文件通配符" class="headerlink" title="常用的文件通配符"></a>常用的文件通配符</h3><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配零个或多个字符</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配任意单个字符</td>
</tr>
<tr>
<td align="left">~</td>
<td align="left">当前用户家目录</td>
</tr>
<tr>
<td align="left">~masuri</td>
<td align="left">用户masuri家目录</td>
</tr>
<tr>
<td align="left">~+</td>
<td align="left">当前工作目录</td>
</tr>
<tr>
<td align="left">~-</td>
<td align="left">前一个工作目录</td>
</tr>
<tr>
<td align="left">[0-9]</td>
<td align="left">匹配数字范围</td>
</tr>
<tr>
<td align="left">[a-z]</td>
<td align="left">匹配小写字母</td>
</tr>
<tr>
<td align="left">[A-Z]</td>
<td align="left">匹配大写字母</td>
</tr>
<tr>
<td align="left">[wang]</td>
<td align="left">匹配列表中的任意字符</td>
</tr>
<tr>
<td align="left">[^wang]</td>
<td align="left">匹配除列表中字符外的任意字符</td>
</tr>
<tr>
<td align="left">[:digit:]</td>
<td align="left">任意数字，相当于0-9</td>
</tr>
<tr>
<td align="left">[:lower:]</td>
<td align="left">任意小写字母</td>
</tr>
<tr>
<td align="left">[:upper:]</td>
<td align="left">任意大写字母</td>
</tr>
<tr>
<td align="left">[:alpha:]</td>
<td align="left">任意大小写字母</td>
</tr>
<tr>
<td align="left">[:alnum:]</td>
<td align="left">任意字母或数字</td>
</tr>
<tr>
<td align="left">[:blank:]</td>
<td align="left">水平空白字符</td>
</tr>
<tr>
<td align="left">[:space:]</td>
<td align="left">水平或垂直空白字符</td>
</tr>
<tr>
<td align="left">[:punct:]</td>
<td align="left">标点符号</td>
</tr>
<tr>
<td align="left">[:print:]</td>
<td align="left">可打印字符</td>
</tr>
<tr>
<td align="left">[:cntrl:]</td>
<td align="left">控制字符</td>
</tr>
<tr>
<td align="left">[:graph:]</td>
<td align="left">图形字符</td>
</tr>
<tr>
<td align="left">[:xdigit:]</td>
<td align="left">十六进制字符</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>文本处理三剑客之awk</title>
    <url>/2019/03/11/Linux%E5%9F%BA%E7%A1%80/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bawk/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8BAWK/</url>
    <content><![CDATA[<h2 id="awk简介"><a href="#awk简介" class="headerlink" title="awk简介"></a>awk简介</h2><p>awk是一个优良的文本处理工具，是Linux中文本三剑客之一，awk的名字取自于其创始人Alfred Aho、Peter Weinberger和Brain Kernighan三人姓式的首字母。  </p>
<p>awk的功能及其强大，可以进行式样装入、流控制、数学运算符、进程控制语句甚至内置的变量和函数，他具备了一个完整语言所应有的几乎所有特性。</p>
<span id="more"></span>

<h3 id="awk语法"><a href="#awk语法" class="headerlink" title="awk语法"></a>awk语法</h3><p>awk程序由BEGIN语句块、能够使用模式匹配的通用语句块、END语句块，共3部分组成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk [option] <span class="string">&#x27;[BEGIN&#123;action;...&#125;]pattern&#123;action;...&#125;[END&#123;action;...&#125;]&#x27;</span> file</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-F</td>
<td align="left">指定分隔符</td>
</tr>
<tr>
<td align="left">-f</td>
<td align="left">指定awk程序文件</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">变量赋值，每个变量都需要使用-v var=value来赋值</td>
</tr>
</tbody></table>
<h3 id="awk工作原理"><a href="#awk工作原理" class="headerlink" title="awk工作原理"></a>awk工作原理</h3><p>1.执行BEGIN{action;…}语句块中的语句BEGIN语句块在awk开始从输入流中读取的行之前被执行，这是个可选的语句块。<br>2.从文件或标准输入中读取一行，然后执行pattern{action;…}语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。<br>3.当读至输入流末尾时，执行END{action;…}语句块。END语句块，在awk从输入流种读取完所有的行之后再执行，比如打印所有行的分析结果这里信息汇总都是在END语句中完成，它也是个可选语句块</p>
<h2 id="awk基本用法"><a href="#awk基本用法" class="headerlink" title="awk基本用法"></a>awk基本用法</h2><p>awk最简单的使用方法为:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk [option] <span class="string">&#x27;pattern&#123;action;...&#125;&#x27;</span> file</span><br></pre></td></tr></table></figure>
<h3 id="一、print"><a href="#一、print" class="headerlink" title="一、print"></a>一、print</h3><p>print的参数可以是变量、数值或字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起，无法区分。这里逗号的作用与输出文件的分隔符所用是一样的，只是后者是空格而已。当pattern不指定时默认打印文件中所有的行。  </p>
<p>示例1：打印/etc/fstab中的每一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;print $0&#125;&#x27; /etc/fstab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Tue Mar  5 21:07:19 2019</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">UUID=45490aa4-cf29-420d-a606-af32688b6707 /                       xfs     defaults        0 0</span><br><span class="line">UUID=15dcd896-b7cf-48d0-b8bd-4c0b0f2c62b2 /boot                   xfs     defaults        0 0</span><br><span class="line">UUID=4b6e1813-2c46-402a-869a-02cbbcb76ade /data                   xfs     defaults        0 0</span><br><span class="line">UUID=0995b444-48c1-4423-92bc-2deda0d3c082 swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure>

<h3 id="二、awk变量"><a href="#二、awk变量" class="headerlink" title="二、awk变量"></a>二、awk变量</h3><p>awk有内置变量和自定义变量  </p>
<p><strong>内置变量有FS、OFS、RS、ORS、NF、FNR、FILENAME、ARGC、ARGV</strong></p>
<h4 id="1-FS-设置输入域分隔符，等价于命令行选项-F"><a href="#1-FS-设置输入域分隔符，等价于命令行选项-F" class="headerlink" title="1.FS:设置输入域分隔符，等价于命令行选项-F"></a>1.FS:设置输入域分隔符，等价于命令行选项-F</h4><p>示例1：使用变量FS指定分隔符，取出/etc/fstab的第1第3列</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -v FS=: &#x27;&#123;print $1,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line">root 0</span><br><span class="line">bin 1</span><br><span class="line">daemon 2</span><br><span class="line">...以下省略...</span><br></pre></td></tr></table></figure>

<p>示例2：使用选项-F指定分隔符，取出/etc/fstab的第1第3列</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F&quot;:&quot; &#x27;&#123;print $1,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line">root 0</span><br><span class="line">bin 1</span><br><span class="line">daemon 2</span><br><span class="line">...以下省略...</span><br></pre></td></tr></table></figure>

<p>示例3：用正则表达式当分隔符取出分区利用率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># df | awk -F&quot;[[:space:]]+|%&quot; &#x27;&#123;print $5&#125;&#x27;</span></span><br><span class="line">Use</span><br><span class="line">15</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">17</span><br></pre></td></tr></table></figure>

<p>示例4：变量在action中也能被引用,在第一个域和第3个域之间加:号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -v FS=: &#x27;&#123;print $1,FS,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line">root : 0</span><br><span class="line">bin : 1</span><br><span class="line">daemon : 2</span><br><span class="line">...以下省略...</span><br></pre></td></tr></table></figure>

<h4 id="2-OFS-设置输出时域分隔符，默认为空白"><a href="#2-OFS-设置输出时域分隔符，默认为空白" class="headerlink" title="2.OFS:设置输出时域分隔符，默认为空白"></a>2.OFS:设置输出时域分隔符，默认为空白</h4><p>示例1：以:为分隔符分隔字段，输出时以+++为分隔符，取出/etc/passwd第1第2字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -v FS=: -v OFS=+++ &#x27;&#123;print $1,$2&#125;&#x27; /etc/passwd</span></span><br><span class="line">root+++x</span><br><span class="line">bin+++x</span><br><span class="line">daemon+++x</span><br><span class="line">...以下省略...</span><br></pre></td></tr></table></figure>

<h4 id="3-RS-设置记录分隔符"><a href="#3-RS-设置记录分隔符" class="headerlink" title="3.RS:设置记录分隔符"></a>3.RS:设置记录分隔符</h4><p>当记录的分割符指定为某符号时，从字符开始至记录分隔符的字符串为一条记录，记录的条数和行数无关。  </p>
<p>示例1：创建一个文本指定;为分隔符查看记录情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat a.txt</span></span><br><span class="line">a,b,c;1,2,3,4,;aa,bb,cc</span><br><span class="line">zz,yy,xxx;122,444,2322;AA</span><br><span class="line">BB,CC</span><br></pre></td></tr></table></figure>

<p>以上面文件内容为例，以分号为记录的分隔符，此文件一共有5条记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -v RS=&quot;;&quot; &#x27;&#123;print $0&#125;&#x27; a.txt</span></span><br><span class="line">a,b,c</span><br><span class="line">1,2,3,4,</span><br><span class="line">aa,bb,cc            <span class="comment">#此行与下一行为一条记录中间隐藏了一个换行符</span></span><br><span class="line">zz,yy,xxx</span><br><span class="line">122,444,2322</span><br><span class="line">AA                  <span class="comment">#此行与下一行为一条记录中间隐藏了一个换行符</span></span><br><span class="line">BB,CC</span><br></pre></td></tr></table></figure>

<h4 id="4-ORS-设置输出时记录分隔符"><a href="#4-ORS-设置输出时记录分隔符" class="headerlink" title="4.ORS:设置输出时记录分隔符"></a>4.ORS:设置输出时记录分隔符</h4><p>ORS变量指定输出时的记录分隔符为什么符号。</p>
<p>示例：</p>
<p>依旧为a.txt文件，设置分隔符为,号，纪录分隔符为;号，输出时设置记录分分隔符为___，取出第一字段。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat a.txt</span></span><br><span class="line">a,b,c;1,2,3,4,;aa,bb,cc</span><br><span class="line">zz,yy,xxx;122,444,2322;AA</span><br><span class="line">BB,CC</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># awk -F, -v RS=&quot;;&quot; -v ORS=&quot;___&quot; &#x27;&#123;print $1&#125;&#x27; a.txt</span></span><br><span class="line">a___1___aa___122___AA       </span><br><span class="line">BB___</span><br></pre></td></tr></table></figure>

<h4 id="5-NF-域数"><a href="#5-NF-域数" class="headerlink" title="5.NF:域数"></a>5.NF:域数</h4><p>NF可以查看一条记录内有多少个域,也可以用来查看倒数第N个字符为什么</p>
<p>示例1：</p>
<p>以/etc/passwd为例，以:号为分隔符查看每行的字段数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;&#123;print NF&#125;&#x27; /etc/passwd</span></span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">...以下省略...</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<p>查看/etc/passwd文件内，以:为分隔符，倒数第2个字段的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;&#123;print $(NF-1)&#125;&#x27; /etc/passwd</span></span><br><span class="line">/root</span><br><span class="line">/bin</span><br><span class="line">/sbin</span><br><span class="line">...以下省略...</span><br></pre></td></tr></table></figure>

<h4 id="6-NR-记录数"><a href="#6-NR-记录数" class="headerlink" title="6.NR:记录数"></a>6.NR:记录数</h4><p>NR变量为已读文件的记录数</p>
<p>示例1：</p>
<p>以;为记录符，在a.txt的文件的每条记录前加上记录行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat a.txt</span></span><br><span class="line">a,b,c;1,2,3,4,;aa,bb,cc</span><br><span class="line">zz,yy,xxx;122,444,2322;AA</span><br><span class="line">BB,CC</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk -v RS=&quot;;&quot; &#x27;&#123;print NR,$0&#125;&#x27; a.txt </span></span><br><span class="line">1 a,b,c</span><br><span class="line">2 1,2,3,4,</span><br><span class="line">3 aa,bb,cc</span><br><span class="line">zz,yy,xxx</span><br><span class="line">4 122,444,2322</span><br><span class="line">5 AA</span><br><span class="line">BB,CC</span><br></pre></td></tr></table></figure>

<p>NR变量还可以合并计数多个文件的记录</p>
<p>示例2：查看/etc/fstab和/etc/issue总共有多少记录号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;print NR&#125;&#x27; /etc/fstab /etc/issue</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">...中间省略...</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<h4 id="7-FNR：文件的记录数"><a href="#7-FNR：文件的记录数" class="headerlink" title="7.FNR：文件的记录数"></a>7.FNR：文件的记录数</h4><p>FNR变量为每个文件分别记录记录数。  </p>
<p>示例：查看/etc/fstab和/etc/issue的记录数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;print FNR&#125;&#x27; /etc/fstab /etc/issue</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">...中间省略...</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="8-FILENAME-文件名"><a href="#8-FILENAME-文件名" class="headerlink" title="8.FILENAME:文件名"></a>8.FILENAME:文件名</h4><p>FILENAME变量为输出文件名  </p>
<p>示例：在匹配到的行后面加上文件名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;print $0,FILENAME&#125;&#x27; /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash /etc/passwd</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin /etc/passwd</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin /etc/passwd</span><br><span class="line">...以下省略...</span><br></pre></td></tr></table></figure>

<h4 id="9-ARGC-命令行参数个数"><a href="#9-ARGC-命令行参数个数" class="headerlink" title="9.ARGC:命令行参数个数"></a>9.ARGC:命令行参数个数</h4><p>ARGC变量存放的为参数个数。  </p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;print ARGC&#125;&#x27; /etc/issue</span></span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2           </span><br></pre></td></tr></table></figure>

<p>显示为2个参数，是哪两个参数呢？看下面那个函数</p>
<h4 id="10-ARGV-查看命令行参数"><a href="#10-ARGV-查看命令行参数" class="headerlink" title="10.ARGV:查看命令行参数"></a>10.ARGV:查看命令行参数</h4><p>ARGV变量为一个数组里面存放的为awk的每个参数</p>
<p>示例：</p>
<p>打印每一个参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;print ARGV[1]&#125;&#x27; /etc/issue</span></span><br><span class="line">/etc/issue</span><br><span class="line">/etc/issue</span><br><span class="line">/etc/issue</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;print ARGV[0]&#125;&#x27; /etc/issue</span></span><br><span class="line">awk</span><br><span class="line">awk</span><br><span class="line">awk</span><br></pre></td></tr></table></figure>

<h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>自定义变量的赋值有2种方法  </p>
<h4 id="1-v-var-value"><a href="#1-v-var-value" class="headerlink" title="1.-v var=value"></a>1.-v var=value</h4><p>示例1：输出变量在每行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -v title=ceo -F: &#x27;&#123;print title&quot;:&quot;$1&#125;&#x27; /etc/passwd</span></span><br><span class="line">ceo:root</span><br><span class="line">ceo:bin</span><br><span class="line">ceo:daemon</span><br><span class="line">ceo:adm</span><br><span class="line">ceo:lp</span><br></pre></td></tr></table></figure>
<h5 id="2-可以直接在program中直接定义"><a href="#2-可以直接在program中直接定义" class="headerlink" title="2.可以直接在program中直接定义"></a>2.可以直接在program中直接定义</h5><p>把变量放在{}内赋值时，变量值必须要加双引号，变量必须先赋值再引用，次序错误会导致第一次匹配到的行没有值  </p>
<p>示例1：在每个用户前加上ceo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;&#123;title=&quot;ceo&quot;; print title&quot;:&quot;$1&#125;&#x27; /etc/passwd</span></span><br><span class="line">ceo:root</span><br><span class="line">ceo:bin</span><br><span class="line">ceo:daemon</span><br><span class="line">ceo:adm</span><br><span class="line">ceo:lp</span><br><span class="line">ceo:sync</span><br></pre></td></tr></table></figure>

<p>示例2：调用脚本文件  </p>
<p>awk ‘{action}’ 单引号内的脚本可以存放在文件内被调用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat 2.txt</span></span><br><span class="line">&#123;title=<span class="string">&quot;ceo&quot;</span>;<span class="built_in">print</span> title<span class="string">&quot;:&quot;</span><span class="variable">$1</span>&#125;</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk -F: -f 2.txt /etc/passwd</span></span><br><span class="line">ceo:root</span><br><span class="line">ceo:bin</span><br><span class="line">ceo:daemon</span><br></pre></td></tr></table></figure>

<h3 id="三、printf"><a href="#三、printf" class="headerlink" title="三、printf"></a>三、printf</h3><p>printf格式化输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&quot;FORMAT&quot;</span> ,item1,item2,...</span><br></pre></td></tr></table></figure>

<p>使用printf时，需要注意以下3点：</p>
<ol>
<li><p>使用printf时必须指定FORMAT，</p>
</li>
<li><p>printf不会自动换行，需要显式给出换行控制符\n</p>
</li>
<li><p>FORMAT中需要分别为后面每个item指定格式符</p>
</li>
</ol>
<p>printf的格式符有以下：</p>
<table>
<thead>
<tr>
<th align="left">格式符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%c</td>
<td align="left">显示字符的ASCII码</td>
</tr>
<tr>
<td align="left">%d,%i</td>
<td align="left">显示十进制整数</td>
</tr>
<tr>
<td align="left">%e，%E</td>
<td align="left">显示科学计数法数值</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">显示浮点数</td>
</tr>
<tr>
<td align="left">%g</td>
<td align="left">以科学计数法或浮点形式显示数值</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">显示字符串</td>
</tr>
<tr>
<td align="left">%u</td>
<td align="left">无符号整数</td>
</tr>
<tr>
<td align="left">%%</td>
<td align="left">显示%自身</td>
</tr>
<tr>
<td align="left">printf中除了格式符还有修饰符：</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">修饰符</td>
<td align="left">说明</td>
</tr>
<tr>
<td align="left">:-</td>
<td align="left">:-</td>
</tr>
<tr>
<td align="left">#[.#]</td>
<td align="left">第一个数字控制显示的宽度；第二个#标识小数点后精度，%3.1f</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">左对齐（默认为右对齐）%-15s</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">显示数值的正负值符号%+d</td>
</tr>
</tbody></table>
<p>示例1：</p>
<p>%d打印整数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo 100.222 | awk &#x27;&#123;printf &quot;this is %d&quot; ,$0&quot;\n&quot;&#125;&#x27;</span></span><br><span class="line">this is 100</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<p>格式符有几个对应的item项就要就几个否则语法错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo &quot;123.455 221.245&quot; | awk &#x27;&#123;printf &quot;this is %d %d&quot; ,$1,$2&#125;&#x27;</span></span><br><span class="line">this is 123 221</span><br></pre></td></tr></table></figure>

<p>示例3：</p>
<p>%f可以打印小数，默认输出的为6位。也可以指定小数位。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo &quot;123.455 221.245&quot; | awk &#x27;&#123;printf &quot;this is %f&quot; ,$1&#125;&#x27;</span></span><br><span class="line">this is 123.455000</span><br><span class="line"><span class="comment">#指定小数位用法</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># echo &quot;123.455 221.245&quot; | awk &#x27;&#123;printf &quot;this is %.3f&quot; ,$1&#125;&#x27;</span></span><br><span class="line">this is 123.455</span><br></pre></td></tr></table></figure>

<p>示例4：</p>
<p>.之前的数字为长度（默认右对齐）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo &quot;123.455 221.245&quot; | awk &#x27;&#123;printf &quot;this is %10.3f %10.3f&quot; ,$1,$2&#125;&#x27;        </span></span><br><span class="line">this is    123.455    221.245</span><br></pre></td></tr></table></figure>

<p>示例5：</p>
<p>指定左对齐，在%后面加上-</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo &quot;123.222 345.23&quot; |awk &#x27;&#123;printf &quot;this is %-10.3f %-10.3f&quot;,$1,$2&#125;&#x27;</span></span><br><span class="line">this is 123.222    345.230   </span><br></pre></td></tr></table></figure>

<h3 id="四、操作符"><a href="#四、操作符" class="headerlink" title="四、操作符"></a>四、操作符</h3><p>awk还支持各种操作符如算数操作符、字符串操作符、赋值操作符、比较操作符、模式匹配操作符</p>
<h4 id="1-算数操作符"><a href="#1-算数操作符" class="headerlink" title="1.算数操作符"></a>1.算数操作符</h4><p>算数操作符有+、-、*、/、^、%，如：</p>
<p>x+y,x-y,x*y,x/y,x^y,x%y</p>
<p>示例1：</p>
<p>简单的算术运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;I=20;J=10;M=I+J;print M&#125;&#x27;</span></span><br><span class="line">30</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<p>-x:转换为负数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;I=20;I=-I;print I&#125;&#x27;</span></span><br><span class="line">-20</span><br></pre></td></tr></table></figure>

<h4 id="2-赋值操作符："><a href="#2-赋值操作符：" class="headerlink" title="2.赋值操作符："></a>2.赋值操作符：</h4><p>赋值操作符有：=，+=，-=，*=，/=，%=，^=,++,–</p>
<p>示例1：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;I=10;I+=2;print I&#125;&#x27;</span></span><br><span class="line">12</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;I=10;I-=2;print I&#125;&#x27;</span></span><br><span class="line">8</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;I=10;I*=2;print I&#125;&#x27;</span></span><br><span class="line">20</span><br></pre></td></tr></table></figure>

<h4 id="3-比较操作符和模式匹配符"><a href="#3-比较操作符和模式匹配符" class="headerlink" title="3.比较操作符和模式匹配符"></a>3.比较操作符和模式匹配符</h4><p>比较操作符和模式匹配符常用在awk的行过滤pattern中，Pattern为空时所有都符合条件</p>
<p>pattern中可以添加比较符号和模式匹配</p>
<p>比较符号有：==(等于)，!=(不等于)，&gt;(大于)，&gt;=(大于等于)，&lt;(小于)，&lt;=(小于等于)</p>
<p>模式匹配符：<del>(符号左边内容是否右边匹配内容，包含内容)，!</del>(符号左边内容的是否不匹配右边内容)</p>
<p>模式匹配时可以使用正则表达式！</p>
<p>3.1比较操作符示例</p>
<p>示例1:</p>
<p>取出连接主机的IP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ss -tn | awk -F&quot; +|:&quot; &#x27;NR&gt;1&#123;print $(NF-2)&#125;&#x27; </span></span><br><span class="line">192.168.172.1</span><br></pre></td></tr></table></figure>

<p>示例2:</p>
<p>取出用户列表中UID大于1000的用户和ID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;$3&gt;1000&#123;print $1,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line">nfsnobody 65534</span><br></pre></td></tr></table></figure>

<p>示例3:</p>
<p>取出ip地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ifconfig | awk &#x27;NR==2&#123;print $2&#125;&#x27;</span></span><br><span class="line">192.168.172.129</span><br></pre></td></tr></table></figure>

<p>示例4:</p>
<p>取出分区利用率大于10的设备</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># df | awk -F&quot; +|%&quot; &#x27;/\/dev\/sd/ &amp;&amp; $5&gt;10&#123;print $1,$5&#125;&#x27;</span></span><br><span class="line">/dev/sda1 17</span><br></pre></td></tr></table></figure>

<p>3.2模式匹配示例  </p>
<p>示例1：匹配第一列为/dev/sd开头行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># df | awk &#x27;/\/dev\/sd/&#123;print $1&#125;&#x27;</span></span><br><span class="line">/dev/sda2</span><br><span class="line">/dev/sda3</span><br><span class="line">/dev/sda1</span><br></pre></td></tr></table></figure>

<p>示例2：匹配/etc/fstab非#开头的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;!/^#/&#x27; /etc/fstab </span></span><br><span class="line"></span><br><span class="line">UUID=45490aa4-cf29-420d-a606-af32688b6707 /                       xfs     defaults        0 0</span><br><span class="line">UUID=15dcd896-b7cf-48d0-b8bd-4c0b0f2c62b2 /boot                   xfs     defaults        0 0</span><br><span class="line">UUID=4b6e1813-2c46-402a-869a-02cbbcb76ade /data                   xfs     defaults        0 0</span><br><span class="line">UUID=0995b444-48c1-4423-92bc-2deda0d3c082 swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure>

<h4 id="4-逻辑操作符"><a href="#4-逻辑操作符" class="headerlink" title="4.逻辑操作符"></a>4.逻辑操作符</h4><p>逻辑操作符：与&amp;&amp;，或||，非！  </p>
<p>示例1：  </p>
<p>取出/etc/passwd非nologin结尾的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;!/nologin$/&#x27; /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">masuri:x:1000:1000:masuri:/home/masuri:/bin/bash</span><br></pre></td></tr></table></figure>

<p>示例2：  </p>
<p>取出分区利用率大于10的设备名和分区利用率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># df | awk -F&quot; +|%&quot; &#x27;/\/dev\/sd/ &amp;&amp; $5&gt;10&#123;print $1,$5&#125;&#x27;</span></span><br><span class="line">/dev/sda1 17</span><br></pre></td></tr></table></figure>

<p>示例3：  </p>
<p>取出连接数前3的IP地址  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># netstat -tn | awk -F&quot; +|:&quot; &#x27;/ESTABLISHED/&#123;print $6&#125;&#x27; | sort | uniq -c | sort -nr | head -3</span></span><br></pre></td></tr></table></figure>

<h4 id="5-三目表达式"><a href="#5-三目表达式" class="headerlink" title="5.三目表达式"></a>5.三目表达式</h4><p>三目表达式格式：  </p>
<p>selector?if-ture-expression:if-false-expression  </p>
<p>判断selector是否为真，如果为真则执行if-ture语句，不为真则执行if-false语句。  </p>
<p>示例1：  </p>
<p>在Uid大于等于1000的用户前添加commom user，小于1000的添加system user  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;$3&gt;=1000?USER=&quot;COMMOM USER:&quot;:USER=&quot;SYSTEM USER:&quot;&#123;print USER$1&#125;&#x27; /etc/passwd</span></span><br><span class="line">SYSTEM USER:root</span><br><span class="line">SYSTEM USER:bin</span><br><span class="line">...中间省略...</span><br><span class="line">SYSTEM USER:ntp</span><br><span class="line">SYSTEM USER:tcpdump</span><br><span class="line">COMMOM USER:masuri</span><br></pre></td></tr></table></figure>

<h3 id="五、PATTERN部分总结"><a href="#五、PATTERN部分总结" class="headerlink" title="五、PATTERN部分总结"></a>五、PATTERN部分总结</h3><p>PATTEN:awk在执行时会根据pattern条件，过滤匹配的行，再做处理。  </p>
<p>pattern的条件可以有以下几种：  </p>
<h4 id="1-空"><a href="#1-空" class="headerlink" title="1.空"></a>1.空</h4><p>如果pattern部分为空，则默认匹配每一行    </p>
<p>示例：打印所有行  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;print $0&#125;&#x27; /etc/fstab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Tue Mar  5 21:07:19 2019</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">UUID=45490aa4-cf29-420d-a606-af32688b6707 /                       xfs     defaults        0 0</span><br><span class="line">UUID=15dcd896-b7cf-48d0-b8bd-4c0b0f2c62b2 /boot                   xfs     defaults        0 0</span><br><span class="line">UUID=4b6e1813-2c46-402a-869a-02cbbcb76ade /data                   xfs     defaults        0 0</span><br><span class="line">UUID=0995b444-48c1-4423-92bc-2deda0d3c082 swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure>

<h4 id="2-正则表达式"><a href="#2-正则表达式" class="headerlink" title="2.正则表达式"></a>2.正则表达式</h4><p>/regular expression/:仅处理能够被模式匹配到的行，需要用//括起来  </p>
<p>示例：找出/etc/passwd中以g开头的行的第1字段和第3字段  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;/^g/&#123;print $1,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line">games 12</span><br><span class="line">gluster 993</span><br><span class="line">geoclue 992</span><br><span class="line">gdm 42</span><br><span class="line">gnome-initial-setup 989</span><br></pre></td></tr></table></figure>

<h4 id="3-关系表达式"><a href="#3-关系表达式" class="headerlink" title="3.关系表达式"></a>3.关系表达式</h4><p>relational expression: 关系表达式，结果为“真”才会被处理  </p>
<p>真和假的定义：  </p>
<p>3.1真：结果为非0值，非空字符串    </p>
<p>示例1: 当有值时为真，输出所有。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># seq 3 | awk &#x27;2&#x27;</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>示例2：当数字为负数时，输出也为真</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># seq 3 | awk &#x27;&quot;-1&quot;&#x27;</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>示例3：当中间的数字为空格时也为真</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># seq 3 | awk &#x27;&quot; &quot;&#x27;</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>3.2假：结果为空字符串或0值，假则不会被处理  </p>
<p>示例1：当值为空和0时不做输出  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># seq 5 | awk &#x27;&quot;&quot;&#x27;</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># seq 5 | awk &#x27;0&#x27;</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>示例2：在awk中不加字符不添加双引号表示为变量，变量为空和0时也为假，变量中有值时为真</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># seq 5 | awk &#x27;i&#x27;               #变量中没有值，假</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># seq 5 | awk -v i=1 &#x27;i&#x27;        #变量中有值，真，输出结果</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="4-行范围"><a href="#4-行范围" class="headerlink" title="4.行范围"></a>4.行范围</h4><p>pattern可以使用行范围进行匹配  </p>
<p>/pat1/,/pat2/ 不支持直接给出数字格式   </p>
<p>示例：打印b开头的行到f开头的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;/^b/,/^f/&#x27; /etc/passwd</span></span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br></pre></td></tr></table></figure>

<h4 id="5-BEGIN-END模式"><a href="#5-BEGIN-END模式" class="headerlink" title="5.BEGIN/END模式"></a>5.BEGIN/END模式</h4><p>BEGIN{}：仅在开始处理文件中的文本之前执行一次  </p>
<p>END{}：仅在文本处理完成之后执行一  </p>
<p>示例1：使用BEGIN来添加表头，做格式化输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;BEGIN&#123;print &quot;|USERNAME                       |UID\n------------------------------------&quot;&#125;&#123;printf &quot;|%-30s |%-10d\n--------------------------------------\n&quot;,$1,$3&#125;&#x27; /etc/passwd </span></span><br><span class="line">|USERNAME                       |UID</span><br><span class="line">------------------------------------</span><br><span class="line">|root                           |0         </span><br><span class="line">--------------------------------------</span><br><span class="line">|bin                            |1         </span><br><span class="line">--------------------------------------</span><br><span class="line">|daemon                         |2         </span><br><span class="line">--------------------------------------</span><br><span class="line">|adm                            |3         </span><br><span class="line">--------------------------------------</span><br><span class="line">|lp                             |4         </span><br><span class="line">--------------------------------------</span><br><span class="line">|sync                           |5         </span><br><span class="line">--------------------------------------</span><br><span class="line">|shutdown                       |6         </span><br></pre></td></tr></table></figure>

<h3 id="六、awk控制语句"><a href="#六、awk控制语句" class="headerlink" title="六、awk控制语句"></a>六、awk控制语句</h3><p>流程控制语句是任何程序设计语言都不能缺少的部分。任何好的语言都有一些执行流程控制的语句。awk提供的完备的流程控制语句类似于C语言，这给我们编程带来了极大的方便。  </p>
<p>awk控制语句有：if-else，while循环，do-while循环，for循环，break，continue，delete array[index]，delete array,exit</p>
<h4 id="1-if-else"><a href="#1-if-else" class="headerlink" title="1.if-else"></a>1.if-else</h4><p>使用场景：对awk取得的整行或某个字段做条件判断</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;statement;…&#125;[<span class="keyword">else</span> statement]    </span><br><span class="line"><span class="keyword">if</span>(condition1)&#123;statement1&#125;<span class="keyword">else</span> <span class="keyword">if</span>(condition2)&#123;statement2&#125;<span class="keyword">else</span>&#123;statement3&#125; </span><br></pre></td></tr></table></figure>

<p>示例：1.打印出/etc/passwd下uid大于1000的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;&#123;if($3&gt;1000)print $0&#125;&#x27; /etc/passwd</span></span><br><span class="line">nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>示例2：如果Uid为偶数则打印出uid和用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;&#123;if($3%2==0)print $1,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line">root 0</span><br><span class="line">daemon 2</span><br><span class="line">lp 4</span><br><span class="line">shutdown 6</span><br><span class="line">mail 8</span><br><span class="line">games 12</span><br><span class="line">ftp 14</span><br><span class="line">systemd-network 192</span><br><span class="line">libstoragemgmt 998</span><br><span class="line">rpc 32</span><br><span class="line">saslauth 996</span><br><span class="line">rtkit 172</span><br><span class="line">nfsnobody 65534</span><br><span class="line">unbound 994</span><br><span class="line">geoclue 992</span><br><span class="line">saned 990</span><br><span class="line">gdm 42</span><br><span class="line">sshd 74</span><br><span class="line">avahi 70</span><br><span class="line">ntp 38</span><br><span class="line">tcpdump 72</span><br><span class="line">masuri 1000</span><br></pre></td></tr></table></figure>

<p>示例3：考试成绩判断，60及格，80分还行，80分以上真棒，60以下不及格</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -v score=80 &#x27;BEGIN&#123;if(score&lt;60)&#123;print &quot;no pass&quot;&#125;else if(score&lt;=80)&#123;print &quot;just so so&quot;&#125;else if(score&gt;80)&#123;print &quot;good&quot;&#125;&#125;&#x27;</span></span><br><span class="line">just so so</span><br></pre></td></tr></table></figure>

<h4 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2.while循环"></a>2.while循环</h4><p>使用场景：  </p>
<ol>
<li><p>对一行内的多个字段逐一类似处理时使用  </p>
</li>
<li><p>对数组中的各元素逐一处理时使用    </p>
</li>
</ol>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;statement;...&#125;</span><br></pre></td></tr></table></figure>

<p>条件为真进入循环，条件为假退出循环。</p>
<p>示例1：打印/etc/password第一行每一字段的长度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;NR==1&#123;i=1;while(i&lt;=NF)&#123;print $i,length($i);i++&#125;&#125;&#x27; etc/passwd</span></span><br><span class="line">root 4</span><br><span class="line">x 1</span><br><span class="line">0 1</span><br><span class="line">0 1</span><br><span class="line">root 4</span><br><span class="line">/root 5</span><br><span class="line">/bin/bash 9</span><br></pre></td></tr></table></figure>

<p>示例2：取出最大值和最小值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F, &#x27;&#123;max=$1;mix=$1;i=1;while(i&lt;=NF)&#123;if($i&gt;max)&#123;max=$i&#125;;if($i&lt;mix)&#123;mix=$i&#125;;i++&#125;;print mix,max&#125;&#x27; test1 </span></span><br><span class="line">207 31976</span><br></pre></td></tr></table></figure>

<p>示例3：1+2+3+..+100</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;i=1;while(i&lt;=100)&#123;sum+=i;i++&#125;print sum&#125;&#x27;</span></span><br><span class="line">5050</span><br></pre></td></tr></table></figure>

<h4 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h4><p>常用语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(expr1;expr2;expr3)&#123;statement;...&#125;</span><br></pre></td></tr></table></figure>

<p>特殊用法：便利数组中的元素</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> arrary)&#123;<span class="keyword">for</span> body&#125;</span><br></pre></td></tr></table></figure>

<p>示例1：for循环1+到100</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;for(i=1;i&lt;=100;i++)&#123;sum+=i&#125;print sum&#125;&#x27;</span></span><br><span class="line">5050</span><br></pre></td></tr></table></figure>

<h4 id="4-break和continue"><a href="#4-break和continue" class="headerlink" title="4.break和continue"></a>4.break和continue</h4><p>break为提前结束循环</p>
<p>continue为提前结束本次循环，进入下一次循环  </p>
<p>示例：将1到100的偶数相加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;for(i=1;i&lt;=100;i++)&#123;if(i%2==0)&#123;sum+=i&#125;&#125;print sum&#125;&#x27;</span></span><br><span class="line">2550</span><br></pre></td></tr></table></figure>

<p>1-100的偶数相加，当i=50时跳出不加，继续执行后续循环</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;for(i=1;i&lt;=100;i++)&#123;if(i==50)&#123;continue&#125;;if(i%2==0)&#123;sum+=i&#125;&#125;print sum&#125;&#x27;</span></span><br><span class="line">2500</span><br></pre></td></tr></table></figure>

<p>1-100的偶数相加，当i=50时跳出所有循环</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;for(i=1;i&lt;=100;i++)&#123;if(i==50)&#123;break&#125;;if(i%2==0)&#123;sum+=i&#125;&#125;print sum&#125;&#x27;</span></span><br><span class="line">600</span><br></pre></td></tr></table></figure>

<h4 id="5-next"><a href="#5-next" class="headerlink" title="5.next"></a>5.next</h4><p>next是提前结束对本行的处理直接进入下一行的处理，break跳出的是awk自身的循环。</p>
<p>示例：</p>
<p>打印Uid为偶数的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F: &#x27;&#123;if($3%2==!0)&#123;next&#125;print $1,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line">root 0</span><br><span class="line">daemon 2</span><br><span class="line">lp 4</span><br><span class="line">shutdown 6</span><br><span class="line">mail 8</span><br><span class="line">games 12</span><br><span class="line">ftp 14</span><br><span class="line">systemd-network 192</span><br><span class="line">libstoragemgmt 998</span><br><span class="line">rpc 32</span><br><span class="line">saslauth 996</span><br><span class="line">rtkit 172</span><br><span class="line">nfsnobody 65534</span><br><span class="line">unbound 994</span><br><span class="line">geoclue 992</span><br><span class="line">saned 990</span><br><span class="line">gdm 42</span><br><span class="line">sshd 74</span><br><span class="line">avahi 70</span><br><span class="line">ntp 38</span><br><span class="line">tcpdump 72</span><br><span class="line">masuri 1000</span><br></pre></td></tr></table></figure>

<h3 id="七、awk数组"><a href="#七、awk数组" class="headerlink" title="七、awk数组"></a>七、awk数组</h3><p>awk数组为关联数组：array[index-expression]  </p>
<p>index-expression为数组下标  </p>
<p>数组在使用时需注意以下几点：  </p>
<ol>
<li><p>数组下标可使用任意字符串;字符串要使用双引号括起来  </p>
</li>
<li><p>如果某数组元素事先不存在，在引用时，awk会自动创建此元素，并将其初始化为“空串”  </p>
</li>
<li><p>若要判断数组中是否存在某元素，要时用“index in array”格式进行遍历</p>
</li>
</ol>
<p>示例：给数组赋值，和输出数组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;arr[&quot;ceo&quot;]=&quot;mage&quot;;arr[&quot;cto&quot;]=&quot;laowang&quot;;print arr[&quot;ceo&quot;]&#125;&#x27;</span></span><br><span class="line">mage</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;arr[&quot;ceo&quot;]=&quot;mage&quot;;arr[&quot;cto&quot;]=&quot;laowang&quot;;print arr[&quot;cto&quot;]&#125;&#x27;</span></span><br><span class="line">laowang</span><br></pre></td></tr></table></figure>

<p>若要遍历数组中的每个元素，要使用for循环 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(var <span class="keyword">in</span> array)&#123;for-body&#125;  </span><br></pre></td></tr></table></figure>

<p>注意：var会遍历arry的每个索引</p>
<p>示例：遍历数组，可以先将数组下标赋给i</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;arr[&quot;ceo&quot;]=&quot;mage&quot;;arr[&quot;cto&quot;]=&quot;laowang&quot;;for(i in arr)&#123;print arr[i]&#125;&#125;&#x27;</span></span><br><span class="line">mage</span><br><span class="line">laowang</span><br></pre></td></tr></table></figure>

<p>示例2：数组的其他用法：去重</p>
<p>创建一个文件输入以下内容，然后执行awk命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat f1.txt </span></span><br><span class="line">aa</span><br><span class="line">bb</span><br><span class="line">cc</span><br><span class="line">aa</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">11</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;!line[$0]++&#x27; f1.txt</span></span><br><span class="line">aa</span><br><span class="line">bb</span><br><span class="line">cc</span><br><span class="line">11</span><br><span class="line">22</span><br></pre></td></tr></table></figure>

<p>此方法比较绕，读入第一行aa作为数组line的下标，此时数组内的值为空“假”取反后为真打印此行，然后再执行++，此时line内的值为1，当再次遇到aa的行时，数组line[aa]内有值1，取反后为假不输出，然后再++此时[aa]内值为2</p>
<p>验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;!line[$0]++;print $0,line[$0]&#125;&#x27; f1.txt</span></span><br><span class="line">aa 1</span><br><span class="line">bb 1</span><br><span class="line">cc 1</span><br><span class="line">aa 2</span><br><span class="line">11 1</span><br><span class="line">22 1</span><br><span class="line">11 2</span><br></pre></td></tr></table></figure>

<p>示例：数组的高级用法  </p>
<p>取连接状态数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># netstat -tna | awk &#x27;/^tcp/&#123;state[$NF]++&#125;END&#123;for(i in state)&#123;print i,state[i]&#125;&#125;&#x27;       #state[$NF]++表示将最后一个字段作为数组的下标，然后对里面的值+1，当再次遇到相同的下标时，再次加1</span></span><br><span class="line">LISTEN 11</span><br><span class="line">ESTABLISHED 1</span><br></pre></td></tr></table></figure>

<p>统计每个ip的连接次数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;ip[$1]++&#125;END&#123;for(i in ip)&#123;print i,ip[i]&#125;&#125;&#x27; access_log </span></span><br><span class="line">172.20.0.200 1482</span><br><span class="line">172.20.21.121 2</span><br><span class="line">172.20.30.91 29</span><br><span class="line">172.16.102.29 864</span><br><span class="line">172.20.0.76 1565</span><br><span class="line">172.20.9.9 15</span><br><span class="line">172.20.1.125 463</span><br><span class="line">172.20.61.11 2</span><br><span class="line">172.20.73.73 198</span><br><span class="line">172.20.107.222 3</span><br><span class="line">172.20.0.222 2834</span><br><span class="line">172.20.111.240 4</span><br></pre></td></tr></table></figure>

<p>取出连接数排名前10的ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;&#123;ip[$1]++&#125;END&#123;for(i in ip)&#123;print ip[i],i&#125;&#125;&#x27; access_log | sort -nr | head</span></span><br><span class="line">4870 172.20.116.228</span><br><span class="line">3429 172.20.116.208</span><br><span class="line">2834 172.20.0.222</span><br><span class="line">2613 172.20.112.14</span><br><span class="line">2267 172.20.0.227</span><br><span class="line">2262 172.20.116.179</span><br><span class="line">2259 172.20.65.65</span><br><span class="line">1565 172.20.0.76</span><br><span class="line">1482 172.20.0.200</span><br><span class="line">1110 172.20.28.145</span><br></pre></td></tr></table></figure>

<p>小练习：</p>
<p>统计男女生的平均分数</p>
<table>
<thead>
<tr>
<th align="left">name</th>
<th align="left">score</th>
<th align="left">gender</th>
</tr>
</thead>
<tbody><tr>
<td align="left">a</td>
<td align="left">100</td>
<td align="left">m</td>
</tr>
<tr>
<td align="left">b</td>
<td align="left">99</td>
<td align="left">f</td>
</tr>
<tr>
<td align="left">c</td>
<td align="left">80</td>
<td align="left">m</td>
</tr>
<tr>
<td align="left">d</td>
<td align="left">98</td>
<td align="left">f</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -F&quot; +&quot; &#x27;NR&gt;1&#123;num[$3]++;sum[$3]+=$2&#125;END&#123;for(i in sum)print i,sum[i]/num[i]&#125;&#x27; score </span></span><br><span class="line">m 90</span><br><span class="line">f 98.5</span><br></pre></td></tr></table></figure>

<h3 id="八、字符串处理"><a href="#八、字符串处理" class="headerlink" title="八、字符串处理"></a>八、字符串处理</h3><p>1.length([s]):返回字符串的长度</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;print length(&quot;abc&quot;)&#125;&#x27;</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>2.sub(r,s,[t]):对t字符串搜索r表示的模式匹配的内容，并替换为s所表示的内容(只替换第一次匹配到的)</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo &quot;2008:08:08 08:08:08&quot; | awk &#x27;&#123;sub(/:/,&quot;-&quot;,$1);print $0&#125;&#x27;</span></span><br><span class="line">2008-08:08 08:08:08</span><br></pre></td></tr></table></figure>

<p>3.gsub(r,s,[t]):对t字符串搜索r表示的模式匹配的内容，并全部替换为s所表示的内容</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo &quot;2008:08:08 08:08:08&quot; | awk &#x27;&#123;gsub(/:/,&quot;-&quot;,$1);print $0&#125;&#x27;</span></span><br><span class="line">2008-08-08 08:08:08</span><br></pre></td></tr></table></figure>

<p>4.splits(s,arry,[r]):以r为分隔符，切割字符串，并将切割后的字符串保存至array做表示的数组中，第一个索引值为1，第二个索引值为2，…</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo &quot;2008:08:08 08:08:08&quot; | awk &#x27;&#123;split($0,arr,&quot;:&quot;);&#125;END&#123;for(i in arr)&#123;print i,arr[i]&#125;&#125;&#x27;</span></span><br><span class="line">4 08</span><br><span class="line">5 08</span><br><span class="line">1 2008</span><br><span class="line">2 08</span><br><span class="line">3 08 08</span><br></pre></td></tr></table></figure>

<p>用函数来实现ip连接次数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;/^ESTAB/&#123;split($NF,ip,&quot;:&quot;);count[ip[1]]++&#125;END&#123;for(i in count)&#123;print i,count[i]&#125;&#125;&#x27; ss.log </span></span><br><span class="line">192.168.172.1 465</span><br></pre></td></tr></table></figure>

<h3 id="九、自定义函数"><a href="#九、自定义函数" class="headerlink" title="九、自定义函数"></a>九、自定义函数</h3><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> name (parameter,parameter,...)&#123;</span><br><span class="line">            statements</span><br><span class="line">            <span class="built_in">return</span> experssion</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>awk函数定义方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat fun.awk </span></span><br><span class="line"><span class="comment">#!/bin/awk -f</span></span><br><span class="line"><span class="keyword">function</span> max(x,y)&#123;      <span class="comment">#x,y为行参</span></span><br><span class="line">	x&gt;y?var=x:var=y</span><br><span class="line">	<span class="built_in">return</span> var</span><br><span class="line">&#125;</span><br><span class="line">BEGIN&#123;<span class="built_in">print</span> max(a,b)&#125;   <span class="comment">#a,b为实参</span></span><br></pre></td></tr></table></figure>

<p>awk函数调用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -v a=40 -v b=50 -f fun.awk</span></span><br><span class="line">50</span><br><span class="line">[root@centos7 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<h3 id="十、awk中调用shell命令"><a href="#十、awk中调用shell命令" class="headerlink" title="十、awk中调用shell命令"></a>十、awk中调用shell命令</h3><p>system命令：空格是awk中的字符串连接符，如果system中需要使用awk中的变量可以使用空格分隔，或者说除了awk的变量外其他一律用“”引用起来  </p>
<p>示例1：调用系统命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;system(hostname)&#125;&#x27;</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;system(&quot;hostname&quot;)&#125;&#x27;</span></span><br><span class="line">centos7.localdomain</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;system(&quot;echo hello&quot;)&#125;&#x27;</span></span><br><span class="line">hello</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk &#x27;BEGIN&#123;system(&quot;ls&quot;)&#125;&#x27;</span></span><br><span class="line">1.txt	    access.log	     f1.txt   initial-setup-ks.cfg  ss.log</span><br><span class="line">access_log  anaconda-ks.cfg  fun.awk  ss.lg		    test1</span><br><span class="line">[root@centos7 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>示例2：输出变量的方法 </p>
<p>调用双引号输出变量时，变量必须放在双引号外，如果放在双引号内，变量只会被当作字符输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># awk -v var=hello &#x27;BEGIN&#123;system(&quot;echo var&quot;)&#125;&#x27;</span></span><br><span class="line">var</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk -v var=hello &#x27;BEGIN&#123;system(&quot;echo&quot;var)&#125;&#x27;   #echo后必须有空格</span></span><br><span class="line">sh: echohello: <span class="built_in">command</span> not found</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk -v var=hello &#x27;BEGIN&#123;system(&quot;echo&quot; var)&#125;&#x27;  #并且空格必须再双引号内</span></span><br><span class="line">sh: echohello: <span class="built_in">command</span> not found</span><br><span class="line">[root@centos7 ~]<span class="comment"># awk -v var=hello &#x27;BEGIN&#123;system(&quot;echo &quot;var)&#125;&#x27;</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<h3 id="十一、awk脚本"><a href="#十一、awk脚本" class="headerlink" title="十一、awk脚本"></a>十一、awk脚本</h3><p>awk脚本格式：</p>
<ol>
<li><p>脚本后缀为.awk  </p>
</li>
<li><p>脚本首行加上#!/bin/awk -f  </p>
</li>
<li><p>给脚本添加执行权限  </p>
</li>
</ol>
<p>示例： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat test.awk 查看脚本内容</span></span><br><span class="line"><span class="comment">#!/bin/awk -f</span></span><br><span class="line"><span class="comment">#this is test awk script</span></span><br><span class="line">&#123;<span class="keyword">if</span>(<span class="variable">$3</span>&gt;1000)<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$3</span>&#125;</span><br><span class="line">[root@centos7 ~]<span class="comment"># chmod +x test.awk </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ./test.awk -F: /etc/passwd</span></span><br><span class="line">nfsnobody 65534</span><br></pre></td></tr></table></figure>

<h3 id="十二、向awk脚本传递参数"><a href="#十二、向awk脚本传递参数" class="headerlink" title="十二、向awk脚本传递参数"></a>十二、向awk脚本传递参数</h3><p>使用格式：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awkfile var=value var2=value2 ... inputfile</span><br></pre></td></tr></table></figure>

<p>注意：在BEGIN过程中不可用。直到首行输入完成以后，变量才可用。可以通过-v参数，让awk在执行BIGIN之前得到变量的值。命令行中每一个指定的变量都需要一个-v参数。  </p>
<p>示例：</p>
<p>创建一个脚本，此处以上一个脚本为例进行修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat test.awk      #查看脚本内容</span></span><br><span class="line"><span class="comment">#!/bin/awk -f</span></span><br><span class="line"><span class="comment">#this is test awk script</span></span><br><span class="line"><span class="variable">$3</span>&gt;=min &amp;&amp; <span class="variable">$3</span>&lt;=max&#123;<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$3</span>&#125;   ，j   <span class="comment">#其中min和max为位置参数，$1,$3表示awk所要扫描的文件中的字段。此处以/etc/passwd为例，就是对应的用户名和UID</span></span><br><span class="line"> </span><br><span class="line">[root@centos7 ~]<span class="comment"># ./test.awk -F: min=10 max=20 /etc/passwd  #找出uid再10-20之间的行</span></span><br><span class="line">operator 11</span><br><span class="line">games 12</span><br><span class="line">ftp 14</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>文本三剑客之sed</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bsed/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bsed/</url>
    <content><![CDATA[<h2 id="文本三剑客之sed"><a href="#文本三剑客之sed" class="headerlink" title="文本三剑客之sed"></a>文本三剑客之sed</h2><p>sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下行，执行下一个循环。如果没有使诸如‘D’的特殊命令，那会在两个循环之间清空模式空间，但不会清空保留空间。这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</p>
<span id="more"></span>


<h2 id="sed命令格式"><a href="#sed命令格式" class="headerlink" title="sed命令格式"></a>sed命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed [OPTION]... <span class="string">&#x27;script&#x27;</span> [input-file]...</span><br></pre></td></tr></table></figure>

<h3 id="sed命令的常用option"><a href="#sed命令的常用option" class="headerlink" title="sed命令的常用option"></a>sed命令的常用option</h3><table>
<thead>
<tr>
<th>option</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>不输出模式空间内容到屏幕，即不自动打印</td>
</tr>
<tr>
<td>-e</td>
<td>多点编辑</td>
</tr>
<tr>
<td>-f /PATH/SCRIPT_FILE</td>
<td>从指定文件中读取编辑脚本</td>
</tr>
<tr>
<td>-r</td>
<td>支持扩展正则表达式</td>
</tr>
<tr>
<td>-i.xxx</td>
<td>备份源文件并编辑，xxx可以时任意字符为源文件备份的后缀</td>
</tr>
</tbody></table>
<h3 id="script部分"><a href="#script部分" class="headerlink" title="script部分"></a>script部分</h3><p>sed的scripte部分由地址定界+编辑命令组成</p>
<h4 id="地址定界"><a href="#地址定界" class="headerlink" title="地址定界"></a>地址定界</h4><table>
<thead>
<tr>
<th>地址定界</th>
<th>example</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>不给地址</td>
<td>空</td>
<td>对全文进行处理</td>
</tr>
<tr>
<td>单地址</td>
<td>#</td>
<td>指定的行（#表示数字）</td>
</tr>
<tr>
<td></td>
<td>$</td>
<td>最后一行</td>
</tr>
<tr>
<td></td>
<td>/pattern/</td>
<td>被此模式匹配到的行</td>
</tr>
<tr>
<td>地址范围</td>
<td>#,#</td>
<td>从第几行到第几行（#为数字）</td>
</tr>
<tr>
<td></td>
<td>#,+#</td>
<td>从第几行开始往后+多少行</td>
</tr>
<tr>
<td></td>
<td>/pat1/,/pat2/</td>
<td>从被第一个模式匹配到的行开始到被第二个模式匹配到的行结束</td>
</tr>
<tr>
<td></td>
<td>#,/pat1/</td>
<td>还支持指定行和模式的混用，从第几行开始到模式匹配到的行结束</td>
</tr>
<tr>
<td>~:步进</td>
<td>1~2</td>
<td>奇数行，从第一行开始步进2</td>
</tr>
<tr>
<td></td>
<td>2~2</td>
<td>偶数行，从第二行开始步进1</td>
</tr>
</tbody></table>
<h4 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h4><table>
<thead>
<tr>
<th>编辑命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>d</td>
<td>删除模式空间匹配的行，并立即启用下一轮循环</td>
</tr>
<tr>
<td>p</td>
<td>打印当前模式空间内容，追加到默认输出之后</td>
</tr>
<tr>
<td>a[\]text</td>
<td>在指定行后面追加文本，支持使用\n实现多行追加</td>
</tr>
<tr>
<td>i[\]text</td>
<td>在行前面插入文本</td>
</tr>
<tr>
<td>c[\]text</td>
<td>替换行为单行或多行文本</td>
</tr>
<tr>
<td>w /path/file</td>
<td>保存模式匹配的行至指定文件</td>
</tr>
<tr>
<td>r /path/file</td>
<td>读取指定文件的文本至模式空间中匹配到的行后</td>
</tr>
<tr>
<td>=</td>
<td>为模式空间中的行打印行号</td>
</tr>
<tr>
<td>!</td>
<td>模式空间中匹配行取反处理</td>
</tr>
</tbody></table>
<h4 id="搜索替代"><a href="#搜索替代" class="headerlink" title="搜索替代"></a>搜索替代</h4><table>
<thead>
<tr>
<th>编辑命令</th>
<th>替换标记</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>s///</td>
<td></td>
<td>查找替换,支持使用其它分隔符，s@@@，s###</td>
</tr>
<tr>
<td></td>
<td>g</td>
<td>行内全局替换</td>
</tr>
<tr>
<td></td>
<td>p</td>
<td>显示替换成功的行</td>
</tr>
<tr>
<td></td>
<td>w /PATH/TO/FILE</td>
<td>将替换成功的行保存至文件中</td>
</tr>
</tbody></table>
<h2 id="sed-的使用"><a href="#sed-的使用" class="headerlink" title="sed 的使用"></a>sed 的使用</h2><h3 id="sed-地址定界使用方法"><a href="#sed-地址定界使用方法" class="headerlink" title="sed 地址定界使用方法"></a>sed 地址定界使用方法</h3><p>1.sed命令默认输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sed命令会将读取到模式空间中的内容自动打印，此功能可以使用-n关闭</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed &#x27;&#x27; /etc/issue</span></span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># sed -n &#x27;&#x27; /etc/issue	#使用-n将其关闭，此时没有指定地址边界和编辑命令所以没有输出</span></span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>2.sed的编辑命令p</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用编辑命令p将内容打印</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed &#x27;p&#x27; /etc/issue</span></span><br><span class="line">\S</span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于没有将模式空间内的自动打印关闭，当使用编辑命令p时又将内容打印了一遍，将模式空间的自动答应关闭</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed -n &#x27;p&#x27; /etc/issue</span></span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br><span class="line"><span class="comment">#现在输出的行没有重复的了，由于没有指定地址边界默认打印全部的行</span></span><br></pre></td></tr></table></figure>

<p>3.对行做过滤，可以使用行号加上编辑命令p将其打印</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印/etc/passwd的第10行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed -n &#x27;10p&#x27; /etc/passwd</span></span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line"><span class="comment">#验证下，使用head和tail来过滤出第10行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># head -10 /etc/passwd |tail -1</span></span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>4.使用模式匹配来指定行进行打印</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将/etc/fstab中以#开头的行打印出来</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed -n &#x27;/^#/p&#x27; /etc/fstab </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Tue Jul  2 18:57:58 2019</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>5.sed接收标准输入的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#过滤出df命令中以/dev/sd开头的行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># df | sed -n &#x27;/^\/dev\/sd/p&#x27;</span></span><br><span class="line">/dev/sda1                 1038336  148728    889608  15% /boot</span><br></pre></td></tr></table></figure>

<p>6.使用$可以取出文件的最后一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取出/etc/passwd中的最后一行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed -n &#x27;$p&#x27; /etc/passwd</span></span><br><span class="line">wang:x:1008:1008::/home/wang:/bin/bash</span><br></pre></td></tr></table></figure>

<p>7.使用”!”可以对匹配条件进行取反</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取出/etc/issue中非第一行的内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed -n &#x27;1!p&#x27; /etc/issue</span></span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>8.sed行范围匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#找出/etc/fstab中a开头的行到s开头的行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed -n &#x27;/^a/,/^s/p&#x27; /etc/passwd</span></span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br></pre></td></tr></table></figure>

<p>9.步进的用法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印出单数行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># seq 10 | sed -n &#x27;1~2p&#x27;</span></span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line"><span class="comment">#打印出双数行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># seq 10 | sed -n &#x27;2~2p&#x27;</span></span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h3 id="sed的编辑命令使用"><a href="#sed的编辑命令使用" class="headerlink" title="sed的编辑命令使用"></a>sed的编辑命令使用</h3><p>1.删除d的使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印出/etc/fstab中所有非#开头的行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed &#x27;/^#/d&#x27; /etc/fstab</span></span><br><span class="line"></span><br><span class="line">/dev/mapper/centos-root /                       xfs     defaults        0 0</span><br><span class="line">UUID=b6396a3a-ccd8-444b-867b-1865c9ebc982 /boot                   xfs     defaults        0 0</span><br></pre></td></tr></table></figure>

<p>2.追加a，在某行之后追加内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对/etc/fstab中所有#开头的行后面追加横线</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed &#x27;/^#/a-------&#x27; /etc/fstab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">-------</span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line">-------</span><br><span class="line"><span class="comment"># Created by anaconda on Tue Jul  2 18:57:58 2019</span></span><br><span class="line">-------</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">-------</span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line">-------</span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line">-------</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">-------</span><br><span class="line">/dev/mapper/centos-root /                       xfs     defaults        0 0</span><br><span class="line">UUID=b6396a3a-ccd8-444b-867b-1865c9ebc982 /boot                   xfs     defaults        0 0</span><br></pre></td></tr></table></figure>

<p>3.使用sed添加变量和命令的用法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用sed追加的内容为变量时需要使用3个单引号将其括起来</span></span><br><span class="line">[root@localhost ~]<span class="comment"># seq 3 | sed &#x27;a\&#x27;&#x27;&#x27;$USER&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line">1</span><br><span class="line">root</span><br><span class="line">2</span><br><span class="line">root</span><br><span class="line">3</span><br><span class="line">root</span><br><span class="line"><span class="comment">#和使用变量相同使用3个单引号将命令包起来，再使用反向单引号将要执行的命令放在中间</span></span><br><span class="line">[root@localhost ~]<span class="comment"># seq 3 | sed &#x27;a\&#x27;&#x27;&#x27;`hostname`&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line">1</span><br><span class="line">localhost.localdomain</span><br><span class="line">2</span><br><span class="line">localhost.localdomain</span><br><span class="line">3</span><br><span class="line">localhost.localdomain</span><br></pre></td></tr></table></figure>

<p>4.在匹配的行之间插入内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># seq 3 | sed &#x27;i\abc&#x27;</span></span><br><span class="line">abc</span><br><span class="line">1</span><br><span class="line">abc</span><br><span class="line">2</span><br><span class="line">abc</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>5.将指定的行进行替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># seq 3 | sed &#x27;c\abc&#x27;</span></span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line">abc</span><br></pre></td></tr></table></figure>

<p>6.将满足条件的行存放到某文件中，使用w /PATH/TO/FILE</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># seq 10 | sed -n &#x27;3,6w /data/seq&#x27;	#将第3-6行存放到文件内</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /data/seq 		#验证下</span></span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<p>7.将文件内容读入到匹配的行后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取/etc/issue放到每行后面</span></span><br><span class="line">[root@localhost ~]<span class="comment"># seq 3 | sed &#x27;r /etc/issue&#x27;</span></span><br><span class="line">1</span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>8.在每行之前打印出行号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sed &#x27;=&#x27; /etc/issue</span></span><br><span class="line">1</span><br><span class="line">\S</span><br><span class="line">2</span><br><span class="line">Kernel \r on an \m</span><br><span class="line">3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="搜索替换的使用"><a href="#搜索替换的使用" class="headerlink" title="搜索替换的使用"></a>搜索替换的使用</h3><p>1.后向引用在搜索替代中的使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搜索替代中使用到正则表达式时需要使用-r</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo abc | sed -r &#x27;s/(a)bc/\1/&#x27;</span></span><br><span class="line">a</span><br><span class="line">[root@localhost ~]<span class="comment"># echo abc | sed -r &#x27;s/((a)bc)/\1/&#x27;</span></span><br><span class="line">abc</span><br><span class="line">[root@localhost ~]<span class="comment"># echo abc | sed -r &#x27;s/((a)bc)/\2/&#x27;</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<p>2.在/etc/default/grub中net.ifnames=0的最后插入字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sed -r &#x27;6s/(.*)&quot;$/\1 abc&quot;/&#x27; /etc/default/grub </span></span><br><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=<span class="string">&quot;<span class="subst">$(sed &#x27;s, release .*$,,g&#x27; /etc/system-release)</span>&quot;</span></span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_DISABLE_SUBMENU=<span class="literal">true</span></span><br><span class="line">GRUB_TERMINAL_OUTPUT=<span class="string">&quot;console&quot;</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;crashkernel=auto rd.lvm.lv=centos/root biosdevname=0 net.ifnames=0 abc&quot;</span></span><br><span class="line">GRUB_DISABLE_RECOVERY=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>

<p>3.取出/etc/sysconfig/network-scripts/中的基名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo /etc/sysconfig/network-scripts/ | sed -r &#x27;s@(.*/)[^/]+/?$@\1@&#x27;</span></span><br><span class="line">/etc/sysconfig/</span><br></pre></td></tr></table></figure>

<p>4.使用sed取出网卡地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 | sed -nr &#x27;2s/[^0-9]+([0-9.]+).*/\1/p&#x27;</span></span><br><span class="line">192.168.27.20</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>时间服务和chrony</title>
    <url>/2019/03/13/Linux%E5%9F%BA%E7%A1%80/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E5%92%8Cchrony/</url>
    <content><![CDATA[<h2 id="时间服务和chrony"><a href="#时间服务和chrony" class="headerlink" title="时间服务和chrony"></a>时间服务和chrony</h2><p>多主机协作工作时，各个主机的时间同步很总要，时间不一致会造成很多重要应用的故障，如：加密协议，日志，集群等，利用NTP协议使网络中的各个计算机时间达到同步。目前NTP协议属于运维基础架构中必备的基本服务之一。</p>
<span id="more"></span>

<h3 id="时间同步实现：ntp-chrony"><a href="#时间同步实现：ntp-chrony" class="headerlink" title="时间同步实现：ntp,chrony"></a>时间同步实现：ntp,chrony</h3><p>ntp将系统时间和世界协调时UTC同步，精度在局域网内可达到0.1ms，在互联网上绝大多数的地方精度可以达到1-50ms。目前CentOS6上所使用的就是ntp服务。</p>
<p>chrony为CentOS7上所使用的时间服务，其同步的速度比ntp更快。</p>
<hr>
<h2 id="ntp服务的部署"><a href="#ntp服务的部署" class="headerlink" title="ntp服务的部署"></a>ntp服务的部署</h2><p>主机A从互联网上的主机同步时间并作为局域网内的时间服务器使用，主机B自动去向主机A同步时间</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>准备A、B、两台主机</p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">系统</th>
<th align="left">ip</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">CentOS6</td>
<td align="left">192.168.73.137</td>
</tr>
<tr>
<td align="left">B</td>
<td align="left">CentOS6</td>
<td align="left">192.168.73.136</td>
</tr>
</tbody></table>
<p>将主机B的时间调慢</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostB ~]<span class="comment"># date -s &quot;-10 days&quot;</span></span><br><span class="line">Sun Apr  7 10:50:51 CST 2019</span><br><span class="line">[root@HostB ~]<span class="comment"># date</span></span><br><span class="line">Sun Apr  7 10:50:58 CST 2019</span><br></pre></td></tr></table></figure>

<p>查看下主机A时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># date</span></span><br><span class="line">Wed Apr 17 10:53:35 CST 2019</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="配置ntp服务"><a href="#配置ntp服务" class="headerlink" title="配置ntp服务"></a>配置ntp服务</h3><h4 id="一、将主机A设置为时间服务器"><a href="#一、将主机A设置为时间服务器" class="headerlink" title="一、将主机A设置为时间服务器"></a>一、将主机A设置为时间服务器</h4><p>1.修改/etc/ntp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># vim /etc/ntp.conf </span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#restrict default kod nomodify notrap nopeer noquery        #将文件中的此行注释，或者修改为下面行</span></span><br><span class="line">restrict default kod nomodify                               </span><br><span class="line">...</span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server 172.22.0.1 iburst                                    <span class="comment">#将时间服务器指向外部的时间服务器。</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>2.将主机A与外网的时间服务器同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># ntpdate 172.22.0.1</span></span><br><span class="line">18 Apr 10:27:53 ntpdate[3825]: adjust time server 172.22.0.1 offset 0.004437 sec</span><br></pre></td></tr></table></figure>

<p>3.启动ntp服务，将ntp服务设置为开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostA ~]<span class="comment"># service ntpd start</span></span><br><span class="line">Starting ntpd:                                             [  OK  ]</span><br><span class="line">[root@HostA ~]<span class="comment"># chkconfig ntpd on</span></span><br></pre></td></tr></table></figure>

<h4 id="二、修改主机B配置文件修改为自动和主机A同步时间"><a href="#二、修改主机B配置文件修改为自动和主机A同步时间" class="headerlink" title="二、修改主机B配置文件修改为自动和主机A同步时间"></a>二、修改主机B配置文件修改为自动和主机A同步时间</h4><p>1.修改配置文件，将时间服务器指向主机A</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server 192.168.73.140 iburst                                <span class="comment">#添加此行</span></span><br></pre></td></tr></table></figure>

<p>2.启动服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@HostB ~]<span class="comment"># service ntpd start</span></span><br><span class="line">Starting ntpd:                                             [  OK  ]</span><br><span class="line">[root@HostB ~]<span class="comment"># date                                        #由于ntp服务同步速度较慢，需要很长一段时间才能同步使劲按</span></span><br><span class="line">Mon Apr  8 10:34:43 CST 2019</span><br><span class="line">[root@HostB ~]<span class="comment"># service ntpd restart</span></span><br><span class="line">Shutting down ntpd:                                        [  OK  ]</span><br><span class="line">Starting ntpd:                                             [  OK  ]</span><br><span class="line">[root@HostB ~]<span class="comment"># date                                        #再次重启服务，此时时间已经自动同步。</span></span><br><span class="line">Thu Apr 18 10:34:54 CST 2019</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="chrony的部署"><a href="#chrony的部署" class="headerlink" title="chrony的部署"></a>chrony的部署</h2><p>此处以刚才配置的主机A为互联网中的时间服务器，主机7A从主机A同步时间并作为局域网内的时间服务器使用，主机7B自动去向主机7A同步时间</p>
<h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><p>准备7A、7B、两台主机</p>
<table>
<thead>
<tr>
<th align="left">主机名</th>
<th align="left">系统</th>
<th align="left">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">7A</td>
<td align="left">CentOS7</td>
<td align="left">192.168.73.150</td>
</tr>
<tr>
<td align="left">7B</td>
<td align="left">CentOS7</td>
<td align="left">192.168.73.139</td>
</tr>
</tbody></table>
<h4 id="一、配置时间服务器"><a href="#一、配置时间服务器" class="headerlink" title="一、配置时间服务器"></a>一、配置时间服务器</h4><p>1.修改主机7A配置文件修改/etc/chrony.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@7a ~]<span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line">...</span><br><span class="line">server 192.168.73.140 iburst    <span class="comment">#添加此行指向网络中的时间服务器</span></span><br><span class="line">...</span><br><span class="line">allow 192.168.73.0/24           <span class="comment">#添加当自己为时间服务器时允许访问的网段</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">local</span> stratum 10                <span class="comment">#此行前的注释去掉</span></span><br></pre></td></tr></table></figure>

<p>2.启动chronyd服务，并设置为开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@7a ~]<span class="comment"># systemctl start chronyd.service</span></span><br><span class="line">[root@7a ~]<span class="comment"># systemctl enable chronyd.service</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/chronyd.service to /usr/lib/systemd/system/chronyd.service.</span><br></pre></td></tr></table></figure>

<h4 id="二、配置局域网中的服务器，将时间服务器指向为7A"><a href="#二、配置局域网中的服务器，将时间服务器指向为7A" class="headerlink" title="二、配置局域网中的服务器，将时间服务器指向为7A"></a>二、配置局域网中的服务器，将时间服务器指向为7A</h4><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@7b ~]<span class="comment"># vim /etc/chrony.conf </span></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line">server 192.168.73.150 iburst                <span class="comment">#添加此行</span></span><br></pre></td></tr></table></figure>

<p>2.启动chrony服务，并设置为开机自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@7b ~]<span class="comment"># systemctl start chronyd</span></span><br><span class="line">[root@7b ~]<span class="comment"># systemctl enable chronyd</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/chronyd.service to /usr/lib/systemd/system/chronyd.service.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.查看时间同步情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@7b ~]<span class="comment"># chronyc sources</span></span><br><span class="line">210 Number of sources = 1</span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample               </span><br><span class="line">===============================================================================</span><br><span class="line">^* 192.168.73.150                5   6   177    31    +50us[  +77us] +/-  218ms</span><br><span class="line">[root@7b ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>标准I/O和管道</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/%E6%A0%87%E5%87%86IO%E5%92%8C%E7%AE%A1%E9%81%93/%E6%A0%87%E5%87%86IO%E5%92%8C%E7%AE%A1%E9%81%93/</url>
    <content><![CDATA[<h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><p>在linux系统里每打开一个文件，就会响应开启一个文件描述符(fd)。</p>
<span id="more"></span>

<p>文件描述符的具体位置：</p>
<p>打开/var/log/message</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># tail -f /var/log/messages </span></span><br><span class="line">Mar 11 20:37:36 centos7 NetworkManager[6246]: &lt;info&gt;  [1552307856.6123] dhcp4 (ens33):   nameserver <span class="string">&#x27;192.168.172.1&#x27;</span></span><br><span class="line">Mar 11 20:37:36 centos7 NetworkManager[6246]: &lt;info&gt;  [1552307856.6123] dhcp4 (ens33):   domain name <span class="string">&#x27;localdomain&#x27;</span></span><br><span class="line">Mar 11 20:37:36 centos7 NetworkManager[6246]: &lt;info&gt;  [1552307856.6123] dhcp4 (ens33): state changed bound -&gt; bound</span><br><span class="line">Mar 11 20:37:36 centos7 dbus[6238]: [system] Activating via systemd: service name=<span class="string">&#x27;org.freedesktop.nm_dispatcher&#x27;</span> unit=<span class="string">&#x27;dbus-org.freedesktop.nm-dispatcher.service&#x27;</span></span><br><span class="line">Mar 11 20:37:36 centos7 dhclient[19931]: bound to 192.168.172.136 -- renewal <span class="keyword">in</span> 791 seconds.</span><br></pre></td></tr></table></figure>

<p>另起一个终端，在/proc中找到tail相对应的进程，进入fd目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 21099]<span class="comment"># cd /proc/`pidof tail`/fd</span></span><br><span class="line">[root@centos7 fd]<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">lrwx------ 1 root root 64 Mar 11 20:42 0 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 root root 64 Mar 11 20:42 1 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 root root 64 Mar 11 20:42 2 -&gt; /dev/pts/0</span><br><span class="line">lr-x------ 1 root root 64 Mar 11 20:42 3 -&gt; /var/<span class="built_in">log</span>/messages   <span class="comment">#此为打开的文件，3就是文件描述符</span></span><br><span class="line">lr-x------ 1 root root 64 Mar 11 20:42 4 -&gt; anon_inode:inotify</span><br></pre></td></tr></table></figure>

<p>在Linux中有3个标准的I/O描述符</p>
<p>0:标准输入：键盘输入，也可用文件输入</p>
<p>1:标准输出：默认输出当前端口，也可通过重定向输出至文件或其他终端。</p>
<p>2:错误输出：默认输出当前端口，也可通过重定向输出至文件或其他终端。</p>
<hr>
<h2 id="标准输出重定向：-gt"><a href="#标准输出重定向：-gt" class="headerlink" title="标准输出重定向： &gt;"></a>标准输出重定向： &gt;</h2><p>标准输出重定向是将要输出到当前tty的内容重新输出到其他的位置，重定向的位置可以是一个文件也可以是其他的tty。</p>
<p>需要注意的是标准输出重定向”&gt;”在输出内容时会覆盖文件内的内容。如果要对某文件进行追加内容，则需使用”&gt;&gt;”将输出重定向到文件内。</p>
<h3 id="标准输出的一些使用方法："><a href="#标准输出的一些使用方法：" class="headerlink" title="标准输出的一些使用方法："></a>标准输出的一些使用方法：</h3><h4 id="使用标准输出清空文件"><a href="#使用标准输出清空文件" class="headerlink" title="使用标准输出清空文件"></a>使用标准输出清空文件</h4><p>使用标准输出清空文件有两种方法：</p>
<p>1.使用/dev/null清空文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当前目录下有个list的文件，大小为24b</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ll list.txt</span></span><br><span class="line">-rw-r--r-- 1 root root 24 Mar 11 20:58 list.txt</span><br><span class="line"><span class="comment">#使用/dev/null对list文件做重定向后再次观察</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat /dev/null &gt; list.txt</span></span><br><span class="line"><span class="comment">#文件的内容被清空，/dev下的null为Linux系统中的黑洞，可以回收任何东西。</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ll list.txt</span></span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 11 20:59 list.txt</span><br></pre></td></tr></table></figure>
<p>2.直接使用重定向”&gt;”清空文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># ll list.txt </span></span><br><span class="line">-rw-r--r-- 1 root root 24 Mar 11 21:02 list.txt</span><br><span class="line">[root@centos7 data]<span class="comment"># &gt; list.txt     #次命令相当于echo了一个空字符重定向到了一个文件内</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ll list.txt</span></span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 11 21:02 list.txt</span><br></pre></td></tr></table></figure>
<p>注意：使用此方法清空文件时，在某些shell中不支持</p>
<h4 id="使用标准输出创建文件"><a href="#使用标准输出创建文件" class="headerlink" title="使用标准输出创建文件"></a>使用标准输出创建文件</h4><p>标准输出可以创建空文件，实现方法如下：<br>1.使用&gt;来创建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># ls		#当前目录为空目录</span></span><br><span class="line">[root@centos7 data]<span class="comment"># &gt; test</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 11 21:15 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h4 id="“-gt-”和”-gt-gt-”的区别"><a href="#“-gt-”和”-gt-gt-”的区别" class="headerlink" title="“&gt;”和”&gt;&gt;”的区别"></a>“&gt;”和”&gt;&gt;”的区别</h4><p>由于用&gt;创建文件时，如果文件存在则会清空文件，为防止误操作，所以使用&gt;&gt;来创建空文件，此时即使文件存在也不会被覆盖，只会在文件后追加空行。</p>
<p>1.使用”&gt;&gt;”创建空文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># &gt;&gt; test</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ll test</span></span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 11 21:24 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>2.重定向创建文件时，若文件存在：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># ll test </span></span><br><span class="line">-rw-r--r-- 1 root root 17 Mar 11 21:28 <span class="built_in">test</span></span><br><span class="line">[root@centos7 data]<span class="comment"># &gt; test</span></span><br><span class="line">[root@centos7 data]<span class="comment"># ll test</span></span><br><span class="line">-rw-r--r-- 1 root root 0 Mar 11 21:28 <span class="built_in">test</span>   <span class="comment">#文件被清空</span></span><br></pre></td></tr></table></figure>

<p>若要在使用标准输出时，文件不被覆盖可以使用以下设置</p>
<p>1.set -C ：无法覆盖，但可以追加。但使用&gt;|符号时扔可强制覆盖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># set -C</span></span><br><span class="line">[root@centos7 data]<span class="comment"># echo &quot;hello word&quot; &gt; test       </span></span><br><span class="line">-bash: <span class="built_in">test</span>: cannot overwrite existing file         <span class="comment">#无法覆盖</span></span><br><span class="line">[root@centos7 data]<span class="comment"># echo &quot;hello word&quot; &gt;| test      #强制覆盖</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat test</span></span><br><span class="line">hello word</span><br><span class="line">[root@centos7 data]<span class="comment"># echo &quot;hello word&quot; &gt;&gt; test      #追加</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat test</span></span><br><span class="line">hello word</span><br><span class="line">hello word</span><br></pre></td></tr></table></figure>

<p>2.set +C ：可以覆盖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># echo &quot;hi&quot; &gt; test</span></span><br><span class="line">-bash: <span class="built_in">test</span>: cannot overwrite existing file</span><br><span class="line">[root@centos7 data]<span class="comment"># set +C</span></span><br><span class="line">[root@centos7 data]<span class="comment"># echo hi &gt; test</span></span><br><span class="line">[root@centos7 data]<span class="comment"># echo test</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="标准错误重定向：2-gt"><a href="#标准错误重定向：2-gt" class="headerlink" title="标准错误重定向：2&gt;"></a>标准错误重定向：2&gt;</h2><p>在文件描述符中2表示标准错误输出，所以错误重定向为：”2&gt;”</p>
<h3 id="错误重定向使用方法"><a href="#错误重定向使用方法" class="headerlink" title="错误重定向使用方法"></a>错误重定向使用方法</h3><p>先演示下标准的错误输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># ls /error		#使用ls查看根目录下的error目录，但根目录下没有error这个目录，所以报错了</span></span><br><span class="line">ls: cannot access /error: No such file or directory		<span class="comment">#报错以标准输出的方式显示在了屏幕上</span></span><br></pre></td></tr></table></figure>
<p>使用错误重定向将错误信息输出到一个文件内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># ls /error 2&gt; error.log  #这时候错误没有输出在屏幕上</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat  error.log			#查看下文件内的内容 </span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="标准输出和错误输出合并重定向"><a href="#标准输出和错误输出合并重定向" class="headerlink" title="标准输出和错误输出合并重定向"></a>标准输出和错误输出合并重定向</h2><p>将标准输出和错误输出合并后重定向到一个文件内的方法</p>
<h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">right error &gt; /path/to/file 2&gt;&amp;1</span><br><span class="line"><span class="comment">#把标准输出输出到file，再把错误输出的转变为标准输出一起输出到file</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 /]<span class="comment"># ls /data /error  &gt; /data/test 2&gt;&amp;1 </span></span><br><span class="line">[root@centos7 /]<span class="comment"># cat /data/test</span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br><span class="line">/data:</span><br><span class="line">right</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">right error 2&gt; /path/to/file &gt;&amp;2</span><br><span class="line"><span class="comment">#把错误输出输出到file，再把标准输出转变为错误输出一起输出到file</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 /]<span class="comment"># ls /data /error  2&gt; /data/test &gt;&amp;2 </span></span><br><span class="line">[root@centos7 /]<span class="comment"># cat /data/test </span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br><span class="line">/data:</span><br><span class="line">right</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h3 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">right error &amp;&gt; /path/to/file</span><br><span class="line"><span class="comment">#把正确的输出和错误的输出一起输出到 file</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 /]<span class="comment"># ls /data /error  &amp;&gt; /data/test</span></span><br><span class="line">[root@centos7 /]<span class="comment"># cat /data/test </span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br><span class="line">/data:</span><br><span class="line">right</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h3 id="方法4："><a href="#方法4：" class="headerlink" title="方法4："></a>方法4：</h3><p>多条命令的执行结果存入一个文件内需要使用()</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># (hostname;uname -r) &gt; file2</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat file2</span></span><br><span class="line">centos7.localdomain</span><br><span class="line">3.10.0-957.el7.x86_64</span><br></pre></td></tr></table></figure>

<p>所以以下写法也能实现合并正确和错误输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(right error 2&gt;&amp;1)&gt; /path/to/file</span><br><span class="line"><span class="comment">#将错误输出转换为正确的一起输出至file</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># (ls /data /error 2&gt;&amp;1) &gt; /data/file</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat /data/file</span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br><span class="line">/data:</span><br><span class="line">file</span><br></pre></td></tr></table></figure>
<h3 id="方法5："><a href="#方法5：" class="headerlink" title="方法5："></a>方法5：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(right error &gt;&amp;2) 2&gt; /path/to/file</span><br><span class="line"><span class="comment">#将正确输出转换为错误的一同输出至file</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># (ls /data /error &gt;&amp;2) 2&gt; /data/file</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat /data/file </span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br><span class="line">/data:</span><br><span class="line">file</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="单行重定向和多行重定向"><a href="#单行重定向和多行重定向" class="headerlink" title="单行重定向和多行重定向"></a>单行重定向和多行重定向</h2><h4 id="单行重定向"><a href="#单行重定向" class="headerlink" title="单行重定向"></a>单行重定向</h4><p>单行重定向是将内容逐行传输给一个文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; file</span><br></pre></td></tr></table></figure>

<h4 id="多行重定向"><a href="#多行重定向" class="headerlink" title="多行重定向"></a>多行重定向</h4><p>多行重定向是先输入每一行的内容然后一起定向到一个文件内</p>
<p>cat &lt;&lt; eof &gt; file 其中eof为文件结束符</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat &lt;&lt; eof &gt; file1</span></span><br><span class="line">&gt; hello word</span><br><span class="line">&gt; <span class="variable">$HOSTNAME</span></span><br><span class="line">&gt; eof</span><br><span class="line">[root@centos7 ~]<span class="comment"># cat file1</span></span><br><span class="line">hello word</span><br><span class="line">centos7.localdomain</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 |</h2><p>管道就是将前一项命令的结果当作后一项命令的输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将echo输出abc传送给后一条命令进行大小写的转换</span></span><br><span class="line">[root@centos7 data]<span class="comment"># echo abc | tr a-z A-Z</span></span><br><span class="line">ABC</span><br></pre></td></tr></table></figure>

<p>管道无法实现将错误命令结果也传递到后一项命令中要实现的话需要使用|&amp;符号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># asdf sdf | tr a-z A-Z</span></span><br><span class="line">bash: asdf: <span class="built_in">command</span> not found...</span><br><span class="line">Similar <span class="built_in">command</span> is: <span class="string">&#x27;sadf&#x27;</span></span><br><span class="line">[root@centos7 data]<span class="comment"># asdf sdf |&amp; tr a-z A-Z</span></span><br><span class="line">BASH: ASDF: COMMAND NOT FOUND...</span><br><span class="line">SIMILAR COMMAND IS: <span class="string">&#x27;SADF&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Tee命令："><a href="#Tee命令：" class="headerlink" title="Tee命令："></a>Tee命令：</h4><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tee [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>从标准输入读取数据分别输出至标准输出和文件中</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-a</td>
<td align="left">追加</td>
</tr>
</tbody></table>
<p>示例：</p>
<p>1.将输出分别输出到标准输出和文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># echo &#123;a..d&#125; | tee test</span></span><br><span class="line">a b c d				<span class="comment">#标准输出的内容</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat test</span></span><br><span class="line">a b c d				<span class="comment">#文件中的内容</span></span><br></pre></td></tr></table></figure>

<p>2.tee命令默认在输出结果保存至文件中是会覆盖上一次的内容可以使用-a进行追加操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment"># cat test</span></span><br><span class="line">a b c d				<span class="comment">#当前文件中的内容为abcd</span></span><br><span class="line">[root@centos7 data]<span class="comment"># echo &#123;1..3&#125; | tee test</span></span><br><span class="line">1 2 3				<span class="comment">#再次输出一个123</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat test</span></span><br><span class="line">1 2 3				<span class="comment">#再次查看文件中原先的abcd被覆盖</span></span><br><span class="line">[root@centos7 data]<span class="comment"># echo &#123;a..d&#125; | tee -a test</span></span><br><span class="line">a b c d				<span class="comment">#使用-a选项在文件中追加内容</span></span><br><span class="line">[root@centos7 data]<span class="comment"># cat test</span></span><br><span class="line">1 2 3				<span class="comment">#文件中的123和abcd全部被保留下来</span></span><br><span class="line">a b c d</span><br></pre></td></tr></table></figure>

<h4 id="tr命令："><a href="#tr命令：" class="headerlink" title="tr命令："></a>tr命令：</h4><p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tr [OPTION]... SET1 [SET2]</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>转换或删除字符</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-t</td>
<td align="left">对位替换</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left">删除</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">取反</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">压缩</td>
</tr>
</tbody></table>
<p>示例:</p>
<p>1.当SET1比SET2位数多时，SET1最后一位自动替换SET2的最后一位</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># tr &#x27;abcd&#x27; &#x27;123&#x27;</span></span><br><span class="line">abcdd</span><br><span class="line">12333</span><br></pre></td></tr></table></figure>

<p>2.要防止上述情况发生可以使用-t选项对位替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># tr -t &#x27;abcd&#x27; &#x27;123&#x27;</span></span><br><span class="line">abcddd</span><br><span class="line">123ddd</span><br></pre></td></tr></table></figure>

<p>3.-d对被SET1匹配中的内容进行删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># tr -d &#x27;abc&#x27;</span></span><br><span class="line">abcde</span><br><span class="line">de</span><br></pre></td></tr></table></figure>

<p>4.-c将除SET1以外的内容替换成SET2，在使用-c时需要用ctrl+d来执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># tr -c &#x27;abc&#x27; &#x27;d&#x27;</span></span><br><span class="line">abcdefg</span><br><span class="line">abcddddd[root@centos7 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>配合-d可以实现删除除了SET1之外的字符</p>
<p>5.-s将连续且相同的字符压缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># tr -s &#x27;abc&#x27;</span></span><br><span class="line">aaaaaaaaabbbbbbbccccccccdabd</span><br><span class="line">abcdabd</span><br></pre></td></tr></table></figure>

<p>6.在使用tr命令时还能使用通配符的方法进行替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># echo &quot;abcdef&quot; &gt; test</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27; &lt; test</span></span><br><span class="line">ABCDEF</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>busybox</title>
    <url>/2019/03/08/Linux%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85busybox/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85busybox/</url>
    <content><![CDATA[<h2 id="BusyBox"><a href="#BusyBox" class="headerlink" title="BusyBox"></a>BusyBox</h2><p>BusyBox 是一个集成了三百多个最常用Linux命令和工具的软件。BusyBox 包含了一些简单的工具，例如ls、cat和echo等等，还包含了一些更大、更复杂的工具，例grep、find、mount以及telnet。有些人将 BusyBox 称为 Linux 工具里的瑞士军刀。简单的说BusyBox就好像是个大工具箱，它集成压缩了 Linux 的许多工具和命令，也包含了 Android 系统的自带的shell。</p>
<span id="more"></span>

<h3 id="源码编译busybox"><a href="#源码编译busybox" class="headerlink" title="源码编译busybox"></a>源码编译busybox</h3><h4 id="一、下载源码包"><a href="#一、下载源码包" class="headerlink" title="一、下载源码包"></a>一、下载源码包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># wget https://busybox.net/downloads/busybox-1.30.1.tar.bz2</span></span><br><span class="line">--2019-04-12 00:50:43--  https://busybox.net/downloads/busybox-1.30.1.tar.bz2</span><br><span class="line">Resolving busybox.net (busybox.net)...</span><br></pre></td></tr></table></figure>

<h4 id="二、解压源码包"><a href="#二、解压源码包" class="headerlink" title="二、解压源码包"></a>二、解压源码包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># tar xf busybox-1.30.1.tar.bz2 </span></span><br></pre></td></tr></table></figure>

<h4 id="三、进入busybox目录，执行make-menuconfig命令"><a href="#三、进入busybox目录，执行make-menuconfig命令" class="headerlink" title="三、进入busybox目录，执行make menuconfig命令"></a>三、进入busybox目录，执行make menuconfig命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cd busybox-1.30.1/</span></span><br><span class="line">[root@centos7 busybox-1.30.1]<span class="comment"># make menuconfig</span></span><br></pre></td></tr></table></figure>

<p>手动选择选择所需要的模块</p>
<p><img src="1.png" alt="1.png"></p>
<p><img src="2.png" alt="2.png"></p>
<p>保存退出，此时在此目录下多出了一个.config的文件，里面保存的为刚才的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 busybox-1.30.1]<span class="comment"># l.</span></span><br><span class="line">.  ..  .config  .indent.pro  .kconfig.d  .kernelrelease</span><br></pre></td></tr></table></figure>

<h4 id="四、使用make生成二进制文件"><a href="#四、使用make生成二进制文件" class="headerlink" title="四、使用make生成二进制文件"></a>四、使用make生成二进制文件</h4><p>在使用前先安装相应的工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 busybox-1.30.1]<span class="comment"># yum install gcc gcc-c++ glibc glibc-devel pcre pcre-devel openssl openssl-devel systemd-devel zlib-devel libmcrypt-devel glibc-static ncurses-devel -y</span></span><br></pre></td></tr></table></figure>

<p>使用make生成二进制文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 busybox-1.30.1]<span class="comment"># make</span></span><br></pre></td></tr></table></figure>

<h4 id="五、编译完成，测试"><a href="#五、编译完成，测试" class="headerlink" title="五、编译完成，测试"></a>五、编译完成，测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 busybox-1.30.1]<span class="comment"># ./busybox ls /</span></span><br><span class="line">bin    data   etc    lib    media  opt    root   sbin   sys    usr</span><br><span class="line">boot   dev    home   lib64  mnt    proc   run    srv    tmp    var</span><br></pre></td></tr></table></figure>

<h4 id="六、使用make-install"><a href="#六、使用make-install" class="headerlink" title="六、使用make install"></a>六、使用make install</h4><p>使用make install 生成一个_install文件夹，里面存放各种软链接，指向为busybox，将_install移走就能使用了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 busybox-1.30.1]<span class="comment"># make install</span></span><br></pre></td></tr></table></figure>

<h4 id="七、测试"><a href="#七、测试" class="headerlink" title="七、测试"></a>七、测试</h4><p>将_install移动至/data/rootfs，由于没有bash无法切根所以需要创建一个bash的软链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 busybox-1.30.1]<span class="comment"># mv _install/ /data/rootfs</span></span><br><span class="line">[root@centos7 busybox-1.30.1]<span class="comment"># cd /data/rootfs</span></span><br><span class="line">[root@centos7 rootfs]<span class="comment"># cd bin/</span></span><br><span class="line">[root@centos7 bin]<span class="comment"># ln -s busybox ./bash</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>编译安装linux-5.07内核</title>
    <url>/2019/03/08/Linux%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85linux%E5%86%85%E6%A0%B8/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%855.07%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<h2 id="编译安装linux-5-07内核"><a href="#编译安装linux-5-07内核" class="headerlink" title="编译安装linux-5.07内核"></a>编译安装linux-5.07内核</h2><p>在生产环境中某些软件依赖于较新的内核，此时就需要将内核进行升级，以下为演示手动编译安装较新的5.07内核的方法。</p>
<span id="more"></span>

<h3 id="一、下载内核"><a href="#一、下载内核" class="headerlink" title="一、下载内核"></a>一、下载内核</h3><p>至内核官方网站下载内核<a href="http://www.kernel.org/">www.kernel.org</a></p>
<h3 id="二、解压内核文件"><a href="#二、解压内核文件" class="headerlink" title="二、解压内核文件"></a>二、解压内核文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># tar xf linux-5.0.7.tar.xz </span></span><br></pre></td></tr></table></figure>

<h3 id="三、准备-config文件"><a href="#三、准备-config文件" class="headerlink" title="三、准备.config文件"></a>三、准备.config文件</h3><p>由于内核编译需要依靠.config这个配置文件，可以在系统自带的config文件的基础上进行修改，系统自带的config文件在/boot目录下，需要将其复制到内核解压的目录下并改名为.config </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cp /boot/config-3.10.0-957.el7.x86_64 ~/linux-5.0.7/.config</span></span><br></pre></td></tr></table></figure>

<h3 id="四、安装编译内核所需要的一些工具"><a href="#四、安装编译内核所需要的一些工具" class="headerlink" title="四、安装编译内核所需要的一些工具"></a>四、安装编译内核所需要的一些工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># yum install gcc gcc-c++ glibc glibc-devel pcre pcre-devel ncurses-devel flex bison-devel bison perl-Test-Fatal  openssl-devel elfutils-libelf-devel -y</span></span><br></pre></td></tr></table></figure>

<h3 id="五、执行make-menuconfig命令"><a href="#五、执行make-menuconfig命令" class="headerlink" title="五、执行make menuconfig命令"></a>五、执行make menuconfig命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 linux-5.0.7]<span class="comment"># make menuconfig</span></span><br></pre></td></tr></table></figure>

<p>以下开始进入编译内核选项</p>
<p><img src="1.png" alt="1.png"></p>
<p><img src="2.png" alt="2.png"></p>
<p><img src="3.png" alt="3.png"></p>
<p><img src="4.png" alt="4.png"></p>
<p><img src="5.png" alt="5.png"></p>
<p><img src="6.png" alt="6.png"></p>
<h3 id="六、开始编译"><a href="#六、开始编译" class="headerlink" title="六、开始编译"></a>六、开始编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 linux-5.0.7]<span class="comment"># make -j 12</span></span><br></pre></td></tr></table></figure>

<h3 id="七、执行make-modules-install"><a href="#七、执行make-modules-install" class="headerlink" title="七、执行make modules_install"></a>七、执行make modules_install</h3><p>执行make modules_install 在/lib/modules目录下生成新的内核模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 linux-5.0.7]<span class="comment"># make modules_install</span></span><br></pre></td></tr></table></figure>
<h3 id="八、生成内核"><a href="#八、生成内核" class="headerlink" title="八、生成内核"></a>八、生成内核</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 linux-5.0.7]<span class="comment"># make install</span></span><br><span class="line">Makefile:159: warning: overriding recipe <span class="keyword">for</span> target `Makefile<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Makefile:125: warning: ignoring old recipe for target `Makefile&#x27;</span></span><br><span class="line">sh ./arch/x86/boot/install.sh 5.0.7-Masuri arch/x86/boot/bzImage \</span><br><span class="line">	System.map <span class="string">&quot;/boot&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="九、重启选择5-07内核"><a href="#九、重启选择5-07内核" class="headerlink" title="九、重启选择5.07内核"></a>九、重启选择5.07内核</h3><p>重启选择新的内核</p>
<p><img src="7.png" alt="7.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[masuri@centos7 ~]$ uname -r</span><br><span class="line">5.0.7-Masuri</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="内核的卸载"><a href="#内核的卸载" class="headerlink" title="内核的卸载"></a>内核的卸载</h2><h3 id="一、删除-lib-modules下相应的内核文件"><a href="#一、删除-lib-modules下相应的内核文件" class="headerlink" title="一、删除/lib/modules下相应的内核文件"></a>一、删除/lib/modules下相应的内核文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># rm -rf /lib/modules/5.0.7-Masuri/</span></span><br></pre></td></tr></table></figure>
<h3 id="二、删除boot下的相关内核文件"><a href="#二、删除boot下的相关内核文件" class="headerlink" title="二、删除boot下的相关内核文件"></a>二、删除boot下的相关内核文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># rm -rf /boot/*-5.0.7-*</span></span><br></pre></td></tr></table></figure>
<h3 id="三、清理grub2"><a href="#三、清理grub2" class="headerlink" title="三、清理grub2"></a>三、清理grub2</h3><p>此时/boot/grub2/grub.cfg中还有残留的版本信息，需要将其清理干净</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menuentry <span class="string">&#x27;CentOS Linux (5.0.7-Masuri) 7 (Core)&#x27;</span> --class centos --class gnu-linux --class gnu --class os --unrestricted <span class="variable">$menuentry_id_option</span> <span class="string">&#x27;gnulinux-3.10.0-957.el7.x86_64-advanced-45490aa4-cf29-420d-a606-af32688b6707&#x27;</span> &#123;</span><br><span class="line">        load_video</span><br><span class="line">        <span class="built_in">set</span> gfxpayload=keep</span><br><span class="line">        insmod gzio</span><br><span class="line">        insmod part_msdos</span><br><span class="line">        insmod xfs</span><br><span class="line">        <span class="built_in">set</span> root=<span class="string">&#x27;hd0,msdos1&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> [ x<span class="variable">$feature_platform_search_hint</span> = xy ]; <span class="keyword">then</span></span><br><span class="line">          search --no-floppy --fs-uuid --<span class="built_in">set</span>=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1 --hint=<span class="string">&#x27;hd0,msdos1&#x27;</span>  15dcd896-b7cf-48d0-b8bd-4c0b0f2c62b2</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          search --no-floppy --fs-uuid --<span class="built_in">set</span>=root 15dcd896-b7cf-48d0-b8bd-4c0b0f2c62b2</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        linux16 /vmlinuz-5.0.7-Masuri root=UUID=45490aa4-cf29-420d-a606-af32688b6707 ro crashkernel=auto rhgb quiet LANG=en_US.UTF-8</span><br><span class="line">        initrd16 /initramfs-5.0.7-Masuri.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>清理方法使用grub2-mkconfig重新生成新的grub.cfg文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>若要使用ntfs文件系统，可以不必重新编译内核，只需要安装ntfs-3g包就行，此包在epel源中。</p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>多网卡绑定</title>
    <url>/2019/03/06/Linux%E5%9F%BA%E7%A1%80/%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A/bonding/</url>
    <content><![CDATA[<h2 id="多网卡绑定"><a href="#多网卡绑定" class="headerlink" title="多网卡绑定"></a>多网卡绑定</h2><p>生产环境中将多块网卡绑定同一IP地址对外提供服务，可以实现高可用或者负载均衡。直接给两块网卡设置同一IP地址是不可以的。通过bonding，虚拟一块网卡对外提供连接，物理网卡被修改为相同的MAC地址 。</p>
<span id="more"></span>

<h2 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h2><p>centos7主机一台、网卡设备2块。</p>
<p>此次实验通过两种方式来实现bonding，第一种为修改配置文件，第二种为命令行。</p>
<h3 id="修改配置文件实现bonding"><a href="#修改配置文件实现bonding" class="headerlink" title="修改配置文件实现bonding"></a>修改配置文件实现bonding</h3><p>一、创建band0配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-bond0</span></span><br><span class="line">DEVICE=bond0</span><br><span class="line">IPADDR=192.168.172.100</span><br><span class="line">PREFIX=24</span><br><span class="line">BONDING_OPTS=<span class="string">&#x27;miimon=100 mode=1&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>二、配置第一块网卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>三、配置第二块网卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens37</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">DEVICE=ens37</span><br><span class="line">ONBOOT=yes</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br></pre></td></tr></table></figure>

<p>四、重启网络服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># systemctl restart network</span></span><br></pre></td></tr></table></figure>

<p>五、查看bond状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat /proc/net/bonding/bond0 </span></span><br><span class="line">Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)</span><br><span class="line"></span><br><span class="line">Bonding Mode: fault-tolerance (active-backup)</span><br><span class="line">Primary Slave: None</span><br><span class="line">Currently Active Slave: ens33</span><br><span class="line">MII Status: up</span><br><span class="line">MII Polling Interval (ms): 100</span><br><span class="line">Up Delay (ms): 0</span><br><span class="line">Down Delay (ms): 0</span><br><span class="line"></span><br><span class="line">Slave Interface: ens33</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:63:21:a6</span><br><span class="line">Slave queue ID: 0</span><br><span class="line"></span><br><span class="line">Slave Interface: ens37</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:63:21:b0</span><br><span class="line">Slave queue ID: 0</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="命令行实现bonding"><a href="#命令行实现bonding" class="headerlink" title="命令行实现bonding"></a>命令行实现bonding</h3><p>一、创建bond0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection add con-name bond0 ifname bond0 type bond mode active-backup ipv4.method manual ipv4.addresses 192.168.172.100</span></span><br><span class="line">Connection <span class="string">&#x27;bond0&#x27;</span> (6a323a49-1f74-4424-aa90-8dde22bba989) successfully added.</span><br></pre></td></tr></table></figure>

<p>二、将ens33及ens37加入bond0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection add type bond-slave ifname ens33 master bond0 </span></span><br><span class="line">Connection <span class="string">&#x27;bond-slave-ens33&#x27;</span> (ecacd740-fe79-43a8-9c99-190d17663d01) successfully added.</span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection add type bond-slave ifname ens37 master bond0 </span></span><br><span class="line">Connection <span class="string">&#x27;bond-slave-ens37&#x27;</span> (ea66c3cf-66b5-4438-ad97-058d70c25c28) successfully added.</span><br></pre></td></tr></table></figure>

<p>三、将ens33及ens37关联至bond0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection up bond-slave-ens33</span></span><br><span class="line">Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)</span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection up bond-slave-ens37</span></span><br><span class="line">Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/7)</span><br></pre></td></tr></table></figure>

<p>四、启用bond0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection up bond0</span></span><br></pre></td></tr></table></figure>

<p>五、查看bonding状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cat /proc/net/bonding/bond0 </span></span><br><span class="line">Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)</span><br><span class="line"></span><br><span class="line">Bonding Mode: fault-tolerance (active-backup)</span><br><span class="line">Primary Slave: None</span><br><span class="line">Currently Active Slave: ens33</span><br><span class="line">MII Status: up</span><br><span class="line">MII Polling Interval (ms): 100</span><br><span class="line">Up Delay (ms): 0</span><br><span class="line">Down Delay (ms): 0</span><br><span class="line"></span><br><span class="line">Slave Interface: ens33</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:63:21:a6</span><br><span class="line">Slave queue ID: 0</span><br><span class="line"></span><br><span class="line">Slave Interface: ens37</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:63:21:b0</span><br><span class="line">Slave queue ID: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="删除bonding"><a href="#删除bonding" class="headerlink" title="删除bonding"></a>删除bonding</h4><p>1.禁用bond0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection down bond0</span></span><br><span class="line">Connection <span class="string">&#x27;bond0&#x27;</span> successfully deactivated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/8)</span><br></pre></td></tr></table></figure>

<p>2.删除bond相关链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection delete bond0</span></span><br><span class="line">Connection <span class="string">&#x27;bond0&#x27;</span> (6a323a49-1f74-4424-aa90-8dde22bba989) successfully deleted.</span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection delete bond-slave-ens33</span></span><br><span class="line">Connection <span class="string">&#x27;bond-slave-ens33&#x27;</span> (ecacd740-fe79-43a8-9c99-190d17663d01) successfully deleted.</span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection delete bond-slave-ens37</span></span><br><span class="line">Connection <span class="string">&#x27;bond-slave-ens37&#x27;</span> (ea66c3cf-66b5-4438-ad97-058d70c25c28) successfully deleted.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>网桥Bridge</title>
    <url>/2019/03/05/Linux%E5%9F%BA%E7%A1%80/%E7%BD%91%E6%A1%A5bridge/%E7%BD%91%E6%A1%A5bridge/</url>
    <content><![CDATA[<h2 id="网桥Bridge"><a href="#网桥Bridge" class="headerlink" title="网桥Bridge"></a>网桥Bridge</h2><p>网桥将两个相似的网络连接起来，并对网络数据的流通进行管理。它工作于数据链路层，不但能扩展网络的距离或范围，而且可提高网络的性能、可靠性和安全性。网络1 和网络2 通过网桥连接后，网桥接收网络1 发送的数据包，检查数据包中的地址，如果地址属于网络1 ，它就将其放弃，相反，如果是网络2 的地址，它就继续发送给网络2.这样可利用网桥隔离信息，将同一个网络号划分成多个网段（属于同一个网络号），隔离出安全网段，防止其他网段内的用户非法访问。由于网络的分段，各网段相对独立（属于同一个网络号），一个网段的故障不会影响到另一个网段的运行。</p>
<span id="more"></span>

<h3 id="网桥实现"><a href="#网桥实现" class="headerlink" title="网桥实现"></a>网桥实现</h3><p>将一台Linux主机配置为网桥，将两台在不同了网络，ip地址却在同一网段的设备连接起来  </p>
<h3 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h3><p>准备3台虚拟机，主机A配置一块网卡，主机B配置一块网卡，主机Bridge配置2块网卡  </p>
<p>主机A在vmnet2网络</p>
<p><img src="A.png" alt="A.png"></p>
<p>主机B在vmnet3网络</p>
<p><img src="B.png" alt="B.png"></p>
<p>Bridge两个口一个连接vmnet2网络，另一个连接vmnet3网络</p>
<p><img src="bridge.png" alt="bridge.png"></p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">en33</th>
<th align="left">ens37</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">192.168.10.10</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">B</td>
<td align="left">192.168.10.11</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">Bridge</td>
<td align="left">无地址</td>
<td align="left">无地址</td>
</tr>
</tbody></table>
<hr>
<h3 id="一、先分别为主机A和主机B配置ip地址"><a href="#一、先分别为主机A和主机B配置ip地址" class="headerlink" title="一、先分别为主机A和主机B配置ip地址"></a>一、先分别为主机A和主机B配置ip地址</h3><p>1.为主机A网卡配置地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NAME=ens33</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.10.10</span><br><span class="line">PREFIX=24</span><br><span class="line"><span class="comment">#重启网络服务</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl restart network</span></span><br><span class="line"><span class="comment">#查看地址是否配置成功</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ip addr show ens33</span></span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:0f:f4:54 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.10.10/24 brd 192.168.10.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fe0f:f454/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.为主机B网卡配置地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NAME=ens33</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.10.11</span><br><span class="line">PREFIX=24</span><br><span class="line"><span class="comment">#重启网络服务</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl restart network</span></span><br><span class="line"><span class="comment">#查看网卡配置是否成功</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ip addr show ens33</span></span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:48:5f:06 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.10.11/24 brd 192.168.10.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fe48:5f06/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>3.此时虽然主机A与主机B在同一个网段，但他们不在同一个物理网络，所以无法连通</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ping 192.168.10.11</span></span><br><span class="line">PING 192.168.10.11 (192.168.10.11) 56(84) bytes of data.</span><br><span class="line">^C</span><br><span class="line">--- 192.168.10.11 ping statistics ---</span><br><span class="line">5 packets transmitted, 0 received, 100% packet loss, time 4001ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="二、在主机Bridge上进行桥接设置"><a href="#二、在主机Bridge上进行桥接设置" class="headerlink" title="二、在主机Bridge上进行桥接设置"></a>二、在主机Bridge上进行桥接设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建网桥设备br0</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># brctl addbr br0</span></span><br><span class="line"><span class="comment">#将ens33添加入br0</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># brctl addif br0 ens33</span></span><br><span class="line"><span class="comment">#将ens37添加入br0</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># brctl addif br0 ens37</span></span><br><span class="line"><span class="comment">#启用网桥设备br0</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ip link set br0 up</span></span><br><span class="line"><span class="comment">#查看网桥设备状态，是否已经学习到主机A和B的mac地址</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># brctl showmacs br0</span></span><br><span class="line">port no	mac addr		is <span class="built_in">local</span>?	ageing timer</span><br><span class="line">  1	00:0c:29:0f:f4:54	no		 269.63         此为主机A的mac地址</span><br><span class="line">  2	00:0c:29:48:5f:06	no		 273.98         此为主机B的mac地址</span><br><span class="line">  1	00:0c:29:b6:86:9f	yes		   0.00</span><br><span class="line">  1	00:0c:29:b6:86:9f	yes		   0.00</span><br><span class="line">  2	00:0c:29:b6:86:a9	yes		   0.00</span><br><span class="line">  2	00:0c:29:b6:86:a9	yes		   0.00</span><br></pre></td></tr></table></figure>

<p>至此网桥已经全部配置完成  </p>
<h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前主机地址</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ip a s ens33</span></span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:0f:f4:54 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.10.10/24 brd 192.168.10.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fe0f:f454/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="comment">#ping远程192.168.10.11主机查看是否能连通</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ping 192.168.10.11</span></span><br><span class="line">PING 192.168.10.11 (192.168.10.11) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.10.11: icmp_seq=1 ttl=64 time=0.700 ms</span><br><span class="line">64 bytes from 192.168.10.11: icmp_seq=2 ttl=64 time=1.95 ms</span><br><span class="line">64 bytes from 192.168.10.11: icmp_seq=3 ttl=64 time=1.88 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.10.11 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.700/1.514/1.958/0.577 ms</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="网桥的删除"><a href="#网桥的删除" class="headerlink" title="网桥的删除"></a>网桥的删除</h3><p>删除网桥需要先禁用网桥然后将网桥上的接口全部删除，最后删除网桥设备  </p>
<p>1.先禁用网桥设备</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ip link set br0 down</span></span><br></pre></td></tr></table></figure>

<p>2.删除网桥上接口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># brctl delif br0 ens33</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># brctl delif br0 ens37</span></span><br></pre></td></tr></table></figure>

<p>3.将网桥设备br0删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># brctl delbr br0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>网络组team</title>
    <url>/2019/03/06/Linux%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E7%BB%84team/%E7%BD%91%E7%BB%9C%E7%BB%84team/</url>
    <content><![CDATA[<h2 id="网络组team"><a href="#网络组team" class="headerlink" title="网络组team"></a>网络组team</h2><p>网络组是centos7上新出的一个技术，它的作用和bonding类似，是将多个网卡聚合在一起方法，从而实现冗错和提高吞吐量，不同于旧版中bonding技术，网路组提供更好的性能和扩展性，它是由内核驱动和teamd守护进程实现。  </p>
<span id="more"></span>

<p>网路组可以工作在多种模式(runner)    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">broadcast   </span><br><span class="line">roundrobin     </span><br><span class="line">activebackup   </span><br><span class="line">loadbalance   </span><br><span class="line">lacp (implements the 802.3ad Link Aggregation Control Protocol)   </span><br></pre></td></tr></table></figure>

<hr>
<h3 id="网络组team实现"><a href="#网络组team实现" class="headerlink" title="网络组team实现"></a>网络组team实现</h3><p>准备一台CentOS7主机，网卡2块。</p>
<h4 id="创建网络组"><a href="#创建网络组" class="headerlink" title="创建网络组"></a>创建网络组</h4><p>1.创建网路网</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection add con-name team0 ifname team0 type team ipv4.method manual ipv4.addresses 192.168.172.100 config &#x27;&#123;&quot;runner&quot;:&#123;&quot;name&quot;:&quot;loadbalance&quot;&#125;&#125;&#x27;</span></span><br><span class="line">Connection <span class="string">&#x27;team0&#x27;</span> (24db0099-b9fa-4aae-ace0-9421e3c69278) successfully added.</span><br></pre></td></tr></table></figure>

<p>2.添加物理网卡</p>
<p>分别将ens33和ens37添加至网路组内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection add con-name team0-ens33 ifname ens33 type team-slave master team0</span></span><br><span class="line">Connection <span class="string">&#x27;team0-ens33&#x27;</span> (0d00650a-e379-4c70-9f62-ba268af1a208) successfully added.</span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection add con-name team0-ens37 ifname ens37 type team-slave master team0</span></span><br><span class="line">Connection <span class="string">&#x27;team0-ens37&#x27;</span> (2916ab1f-2e3c-477b-aaaf-52dfaecaaeb7) successfully added.</span><br></pre></td></tr></table></figure>

<p>3.将物理网卡和网络组关联起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#由于刚才只是将物理网卡添加至网络组内，所以此时team0-ens33和team0-ens37并未启用</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection</span></span><br><span class="line">NAME                UUID                                  TYPE      DEVICE </span><br><span class="line">ens33               fca2f13f-7310-4595-bbb1-e6d0e3662aff  ethernet  ens33  </span><br><span class="line">team0               24db0099-b9fa-4aae-ace0-9421e3c69278  team      team0  </span><br><span class="line">virbr0              803d85ba-4e80-470f-bcf5-1b22b5653026  bridge    virbr0 </span><br><span class="line">Wired connection 1  3f019cd5-7685-3368-960c-101e35cd6ce7  ethernet  ens37  </span><br><span class="line">team0-ens33         0d00650a-e379-4c70-9f62-ba268af1a208  ethernet  --     </span><br><span class="line">team0-ens37         2916ab1f-2e3c-477b-aaaf-52dfaecaaeb7  ethernet  --   </span><br><span class="line"><span class="comment">#将网络组内的物理网卡关联起来</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection up team0-ens33</span></span><br><span class="line">Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/7)</span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection up team0-ens37</span></span><br><span class="line">Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/8)</span><br><span class="line"><span class="comment">#此时team-ens33和team-ens37都已经启用，网络组创建成功</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection </span></span><br><span class="line">NAME                UUID                                  TYPE      DEVICE </span><br><span class="line">team0               24db0099-b9fa-4aae-ace0-9421e3c69278  team      team0  </span><br><span class="line">team0-ens33         0d00650a-e379-4c70-9f62-ba268af1a208  ethernet  ens33  </span><br><span class="line">team0-ens37         2916ab1f-2e3c-477b-aaaf-52dfaecaaeb7  ethernet  ens37  </span><br><span class="line">virbr0              803d85ba-4e80-470f-bcf5-1b22b5653026  bridge    virbr0 </span><br><span class="line">ens33               fca2f13f-7310-4595-bbb1-e6d0e3662aff  ethernet  --     </span><br><span class="line">Wired connection 1  3f019cd5-7685-3368-960c-101e35cd6ce7  ethernet  --   </span><br></pre></td></tr></table></figure>

<p>4.查看网络组状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># teamdctl team0 state</span></span><br><span class="line">setup:</span><br><span class="line">  runner: loadbalance</span><br><span class="line">ports:</span><br><span class="line">  ens33</span><br><span class="line">    link watches:</span><br><span class="line">      link summary: up</span><br><span class="line">      instance[link_watch_0]:</span><br><span class="line">        name: ethtool</span><br><span class="line">        link: up</span><br><span class="line">        down count: 0</span><br><span class="line">  ens37</span><br><span class="line">    link watches:</span><br><span class="line">      link summary: up</span><br><span class="line">      instance[link_watch_0]:</span><br><span class="line">        name: ethtool</span><br><span class="line">        link: up</span><br><span class="line">        down count: 0</span><br></pre></td></tr></table></figure>

<h4 id="网络组的删除"><a href="#网络组的删除" class="headerlink" title="网络组的删除"></a>网络组的删除</h4><p>1.删除相关配置文件  </p>
<p>由于nmcli命令在执行时会自动生成网卡的配置文件，所以删除网路组时需要将相应的配置文件进行删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># rm -vf /etc/sysconfig/network-scripts/ifcfg-team0*</span></span><br><span class="line">removed ‘/etc/sysconfig/network-scripts/ifcfg-team0’</span><br><span class="line">removed ‘/etc/sysconfig/network-scripts/ifcfg-team0-ens33’</span><br><span class="line">removed ‘/etc/sysconfig/network-scripts/ifcfg-team0-ens37’</span><br></pre></td></tr></table></figure>

<p>2.取消相关网卡的关联</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将网络组中的ens33及ens37取消关联</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection down team0-ens33</span></span><br><span class="line">Connection <span class="string">&#x27;team0-ens33&#x27;</span> successfully deactivated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/7)</span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection down team0-ens37</span></span><br><span class="line">Connection <span class="string">&#x27;team0-ens37&#x27;</span> successfully deactivated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/8)</span><br><span class="line"><span class="comment">#删除链接ens33和ens37</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection delete team0-ens33</span></span><br><span class="line">Connection <span class="string">&#x27;team0-ens33&#x27;</span> (0d00650a-e379-4c70-9f62-ba268af1a208) successfully deleted.</span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection delete team0-ens37</span></span><br><span class="line">Connection <span class="string">&#x27;team0-ens37&#x27;</span> (2916ab1f-2e3c-477b-aaaf-52dfaecaaeb7) successfully deleted.</span><br></pre></td></tr></table></figure>

<p>3.将网路组删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先禁用网路组</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection down team0 </span></span><br><span class="line">Connection <span class="string">&#x27;team0&#x27;</span> successfully deactivated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)</span><br><span class="line"><span class="comment">#将网路组删除</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection delete team0 </span></span><br><span class="line">Connection <span class="string">&#x27;team0&#x27;</span> (24db0099-b9fa-4aae-ace0-9421e3c69278) successfully deleted.</span><br></pre></td></tr></table></figure>

<p>此时网路组已经从主机上删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># nmcli connection </span></span><br><span class="line">NAME                UUID                                  TYPE      DEVICE </span><br><span class="line">ens33               fca2f13f-7310-4595-bbb1-e6d0e3662aff  ethernet  ens33  </span><br><span class="line">virbr0              803d85ba-4e80-470f-bcf5-1b22b5653026  bridge    virbr0 </span><br><span class="line">Wired connection 1  3f019cd5-7685-3368-960c-101e35cd6ce7  ethernet  ens37  </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>自制Linux系统</title>
    <url>/2019/03/08/Linux%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%88%B6Linux/%E8%87%AA%E5%88%B6linux/</url>
    <content><![CDATA[<h2 id="自制Linux系统"><a href="#自制Linux系统" class="headerlink" title="自制Linux系统"></a>自制Linux系统</h2><p>以下为使用现有的Linux系统对其制作出一个小型的Linux系统</p>
<span id="more"></span>

<h3 id="一、新增一块硬盘作为自制Linux的系统盘"><a href="#一、新增一块硬盘作为自制Linux的系统盘" class="headerlink" title="一、新增一块硬盘作为自制Linux的系统盘"></a>一、新增一块硬盘作为自制Linux的系统盘</h3><p><img src="1.png" alt="1.png"></p>
<h3 id="二、在新增硬盘上进行分区"><a href="#二、在新增硬盘上进行分区" class="headerlink" title="二、在新增硬盘上进行分区"></a>二、在新增硬盘上进行分区</h3><p>分区1为boot大小1G</p>
<p>分区2为/大小为10G</p>
<p>分区3为swap大小为2G</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># fdisk /dev/sdb</span></span><br><span class="line">Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel</span><br><span class="line">Building a new DOS disklabel with disk identifier 0xc06ac594.</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">After that, of course, the previous content won<span class="string">&#x27;t be recoverable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">WARNING: DOS-compatible mode is deprecated. It&#x27;</span>s strongly recommended to</span><br><span class="line">         switch off the mode (<span class="built_in">command</span> <span class="string">&#x27;c&#x27;</span>) and change display units to</span><br><span class="line">         sectors (<span class="built_in">command</span> <span class="string">&#x27;u&#x27;</span>).</span><br><span class="line"><span class="comment">#新建一个分区作为BOOT分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Command action</span><br><span class="line">   e   extended</span><br><span class="line">   p   primary partition (1-4)</span><br><span class="line">p</span><br><span class="line">Partition number (1-4): 1</span><br><span class="line">First cylinder (1-2610, default 1): </span><br><span class="line">Using default value 1</span><br><span class="line">Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-2610, default 2610): +1G</span><br><span class="line"><span class="comment">#新建一个分区作为/分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Command action</span><br><span class="line">   e   extended</span><br><span class="line">   p   primary partition (1-4)</span><br><span class="line">p</span><br><span class="line">Partition number (1-4): 2</span><br><span class="line">First cylinder (133-2610, default 133): </span><br><span class="line">Using default value 133</span><br><span class="line">Last cylinder, +cylinders or +size&#123;K,M,G&#125; (133-2610, default 2610): +10G</span><br><span class="line"><span class="comment">#新建一个分区作为swap分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Command action</span><br><span class="line">   e   extended</span><br><span class="line">   p   primary partition (1-4)</span><br><span class="line">p</span><br><span class="line">Partition number (1-4): 3</span><br><span class="line">First cylinder (1439-2610, default 1439): </span><br><span class="line">Using default value 1439</span><br><span class="line">Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1439-2610, default 2610): +2G</span><br><span class="line"><span class="comment">#更改SWAP分区标签</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br><span class="line">Partition number (1-4): 3</span><br><span class="line">Hex code (<span class="built_in">type</span> L to list codes): 82</span><br><span class="line">Changed system <span class="built_in">type</span> of partition 3 to 82 (Linux swap / Solaris)</span><br><span class="line"><span class="comment">#查看下所创建的分区是否正确</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 21.5 GB, 21474836480 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2610 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0xc06ac594</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1               1         132     1060258+  83  Linux</span><br><span class="line">/dev/sdb2             133        1438    10490445   83  Linux</span><br><span class="line">/dev/sdb3            1439        1700     2104515   82  Linux swap / Solaris</span><br><span class="line"><span class="comment">#确认无误写入磁盘</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>

<h3 id="三、对3个分区创建文件系统"><a href="#三、对3个分区创建文件系统" class="headerlink" title="三、对3个分区创建文件系统"></a>三、对3个分区创建文件系统</h3><p>1.sdb1使用ext4文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># mkfs.ext4 /dev/sdb1</span></span><br><span class="line">mke2fs 1.41.12 (17-May-2010)</span><br><span class="line">Filesystem label=</span><br><span class="line">OS <span class="built_in">type</span>: Linux</span><br><span class="line">Block size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Fragment size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">66384 inodes, 265064 blocks</span><br><span class="line">13253 blocks (5.00%) reserved <span class="keyword">for</span> the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=272629760</span><br><span class="line">9 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">7376 inodes per group</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">	32768, 98304, 163840, 229376</span><br><span class="line"></span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (8192 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">This filesystem will be automatically checked every 21 mounts or</span><br><span class="line">180 days, whichever comes first.  Use tune2fs -c or -i to override.</span><br></pre></td></tr></table></figure>

<p>2./使用ext4系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># mkfs.ext4 /dev/sdb2</span></span><br><span class="line">mke2fs 1.41.12 (17-May-2010)</span><br><span class="line">Filesystem label=</span><br><span class="line">OS <span class="built_in">type</span>: Linux</span><br><span class="line">Block size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Fragment size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">655776 inodes, 2622611 blocks</span><br><span class="line">131130 blocks (5.00%) reserved <span class="keyword">for</span> the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=2688548864</span><br><span class="line">81 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8096 inodes per group</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632</span><br><span class="line"></span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (32768 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">This filesystem will be automatically checked every 31 mounts or</span><br><span class="line">180 days, whichever comes first.  Use tune2fs -c or -i to override.</span><br></pre></td></tr></table></figure>

<p>3.sdb3使用swap系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># mkswap /dev/sdb3</span></span><br><span class="line">Setting up swapspace version 1, size = 2104508 KiB</span><br><span class="line">no label, UUID=2ae55ed1-8e5c-4d45-853d-1a4c94badfc2</span><br></pre></td></tr></table></figure>

<h3 id="四、对分区进行挂载"><a href="#四、对分区进行挂载" class="headerlink" title="四、对分区进行挂载"></a>四、对分区进行挂载</h3><p>把sdb1挂载在/mnt/boot下，sdb2挂载在/mnt/sysroot下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 /]<span class="comment"># mkdir /mnt/boot</span></span><br><span class="line">[root@centos6 /]<span class="comment"># mount /dev/sdb1 /mnt/boot</span></span><br><span class="line">[root@centos6 /]<span class="comment"># mkdir /mnt/sysroot</span></span><br><span class="line">[root@centos6 /]<span class="comment"># mount /dev/sdb2 /mnt/sysroot</span></span><br></pre></td></tr></table></figure>

<h3 id="五、在-mnt-sysroot下创建相应的根文件系统目录"><a href="#五、在-mnt-sysroot下创建相应的根文件系统目录" class="headerlink" title="五、在/mnt/sysroot下创建相应的根文件系统目录"></a>五、在/mnt/sysroot下创建相应的根文件系统目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 sysroot]<span class="comment"># cd /mnt/sysroot/</span></span><br><span class="line">[root@centos6 sysroot]<span class="comment"># for i in `ls /`;do mkdir $i;done </span></span><br><span class="line">[root@centos6 sysroot]<span class="comment"># ls</span></span><br><span class="line">bin   data  etc   lib    lost+found  misc  net  proc  sbin     srv  tmp  var</span><br><span class="line">boot  dev   home  lib64  media       mnt   opt  root  selinux  sys  usr</span><br><span class="line">[root@centos6 sysroot]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<h3 id="六、将内核文件和虚拟文件系统复制到-mnt-boot目录下"><a href="#六、将内核文件和虚拟文件系统复制到-mnt-boot目录下" class="headerlink" title="六、将内核文件和虚拟文件系统复制到/mnt/boot目录下"></a>六、将内核文件和虚拟文件系统复制到/mnt/boot目录下</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 sysroot]<span class="comment"># cp /boot/vmlinuz-2.6.32-754.el6.x86_64 /mnt/boot/</span></span><br><span class="line">[root@centos6 sysroot]<span class="comment"># cp /boot/initramfs-2.6.32-754.el6.x86_64.img /mnt/boot/</span></span><br></pre></td></tr></table></figure>

<h3 id="七、安装Grub写入grub配置文件"><a href="#七、安装Grub写入grub配置文件" class="headerlink" title="七、安装Grub写入grub配置文件"></a>七、安装Grub写入grub配置文件</h3><p>1.安装grub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 boot]<span class="comment"># grub-install --root-directory=/mnt /dev/sdb</span></span><br><span class="line">Probing devices to guess BIOS drives. This may take a long time.</span><br><span class="line">Installation finished. No error reported.</span><br><span class="line">This is the contents of the device map /mnt/boot/grub/device.map.</span><br><span class="line">Check <span class="keyword">if</span> this is correct or not. If any of the lines is incorrect,</span><br><span class="line">fix it and re-run the script `grub-install<span class="string">&#x27;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(fd0)	/dev/fd0</span></span><br><span class="line"><span class="string">(hd0)	/dev/sda</span></span><br><span class="line"><span class="string">(hd1)	/dev/sdb</span></span><br><span class="line"><span class="string">[root@centos6 boot]# ls /mnt/boot</span></span><br><span class="line"><span class="string">grub  initramfs-2.6.32-754.el6.x86_64.img  vmlinuz-2.6.32-754.el6.x86_64</span></span><br></pre></td></tr></table></figure>

<p>2.写配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 boot]<span class="comment"># cd /mnt/boot/grub/</span></span><br><span class="line">[root@centos6 grub]<span class="comment"># ls</span></span><br><span class="line">device.map     ffs_stage1_5      minix_stage1_5     stage2           xfs_stage1_5</span><br><span class="line">e2fs_stage1_5  iso9660_stage1_5  reiserfs_stage1_5  ufs2_stage1_5</span><br><span class="line">fat_stage1_5   jfs_stage1_5      stage1             vstafs_stage1_5</span><br><span class="line">[root@centos6 grub]<span class="comment"># vim grub.conf</span></span><br><span class="line">default=0</span><br><span class="line">timeout=3</span><br><span class="line">title=linux</span><br><span class="line">kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=/dev/sda2 selinux=0 init=/bin/bash          <span class="comment">#由于硬盘是需要安装至新机器上所以此处指定的root为/dev/sda2  linux系统启动后用bash来代替init进程 selinux必须关闭</span></span><br><span class="line">initrd /initramfs-2.6.32-754.el6.x86_64.img</span><br><span class="line">~                                                </span><br></pre></td></tr></table></figure>

<h3 id="八、复制相应的命令和库文件至新的根内"><a href="#八、复制相应的命令和库文件至新的根内" class="headerlink" title="八、复制相应的命令和库文件至新的根内"></a>八、复制相应的命令和库文件至新的根内</h3><p>1.编写一个简易的脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DIRPATH=/mnt/sysroot</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> ;<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;please input a cmd: &quot;</span> CMD</span><br><span class="line">        ldd `<span class="built_in">which</span> <span class="variable">$CMD</span> | grep -E <span class="string">&#x27;/.*&#x27;</span>` | grep -Eo <span class="string">&quot;/[^ ]+&quot;</span> | <span class="keyword">while</span> <span class="built_in">read</span> LINE ;<span class="keyword">do</span></span><br><span class="line">           cp --parents `<span class="built_in">which</span> <span class="variable">$CMD</span> | egrep <span class="string">&#x27;/.*&#x27;</span>` <span class="variable">$DIRPATH</span></span><br><span class="line">           cp --parents <span class="variable">$LINE</span> <span class="variable">$DIRPATH</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>2.复制命令及库文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># bash +x cpcmd.sh </span></span><br><span class="line">please input a cmd: cp</span><br><span class="line">please input a cmd: ls</span><br><span class="line">please input a cmd: vim</span><br><span class="line">please input a cmd: cat</span><br><span class="line">please input a cmd: ping</span><br><span class="line">please input a cmd: ifconfig</span><br><span class="line">please input a cmd: modprobe</span><br><span class="line">please input a cmd: insmod</span><br><span class="line">please input a cmd: rm</span><br><span class="line">please input a cmd: lsblk</span><br><span class="line">please input a cmd: blkid</span><br><span class="line">please input a cmd: mount</span><br><span class="line">please input a cmd: swapon</span><br><span class="line">please input a cmd: df</span><br><span class="line">please input a cmd: hostname</span><br><span class="line">please input a cmd: <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h3 id="九、复制网卡的驱动模块"><a href="#九、复制网卡的驱动模块" class="headerlink" title="九、复制网卡的驱动模块"></a>九、复制网卡的驱动模块</h3><p>1.查看网卡的驱动模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># ethtool -i eth0</span></span><br><span class="line">driver: e1000                   <span class="comment">#模块为e1000</span></span><br><span class="line">version: 7.3.21-k8-NAPI</span><br><span class="line">firmware-version: </span><br><span class="line">bus-info: 0000:02:01.0</span><br><span class="line">supports-statistics: yes</span><br><span class="line">supports-test: yes</span><br><span class="line">supports-eeprom-access: yes</span><br><span class="line">supports-register-dump: yes</span><br><span class="line">supports-priv-flags: no</span><br></pre></td></tr></table></figure>

<p>2.查看模块文件所在的位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># modinfo e1000 | grep &quot;e1000&quot;</span></span><br><span class="line">filename:       /lib/modules/2.6.32-754.el6.x86_64/kernel/drivers/net/e1000/e1000.ko</span><br></pre></td></tr></table></figure>

<p>3.复制模块文件至相应位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># cp /lib/modules//2.6.32-754.el6.x86_64//kernel//drivers/net/e1000/e1000.ko /mnt/sysroot/lib</span></span><br><span class="line">[root@centos6 ~]<span class="comment"># ls /mnt/sysroot/lib</span></span><br><span class="line">e1000.ko</span><br></pre></td></tr></table></figure>

<h3 id="十、切根测试"><a href="#十、切根测试" class="headerlink" title="十、切根测试"></a>十、切根测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]# chroot /mnt/sysroot/</span><br><span class="line">bash-4.1# ls</span><br><span class="line">bin   data  etc   lib	 lost+found  misc  net	proc  sbin     srv  tmp  var</span><br><span class="line">boot  dev   home  lib64  media	     mnt   opt	root  selinux  sys  usr</span><br><span class="line">bash-4.1# hostname</span><br><span class="line">centos6.localdomain</span><br></pre></td></tr></table></figure>

<p>测试成功 </p>
<h3 id="十一、将硬盘挪至新机器测试开机"><a href="#十一、将硬盘挪至新机器测试开机" class="headerlink" title="十一、将硬盘挪至新机器测试开机"></a>十一、将硬盘挪至新机器测试开机</h3><p><img src="2.png" alt="2.png"></p>
<h3 id="十二、加载网卡驱动测试"><a href="#十二、加载网卡驱动测试" class="headerlink" title="十二、加载网卡驱动测试"></a>十二、加载网卡驱动测试</h3><p><img src="3.png" alt="3.png"></p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>误删库文件恢复方法</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/%E8%AF%AF%E5%88%A0%E5%BA%93%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E6%96%B9%E6%B3%95/%E8%AF%AF%E5%88%A0%E5%BA%93%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h2 id="误删库文件恢复方法"><a href="#误删库文件恢复方法" class="headerlink" title="误删库文件恢复方法"></a>误删库文件恢复方法</h2><h3 id="libc-so-6删除恢复"><a href="#libc-so-6删除恢复" class="headerlink" title="libc.so.6删除恢复"></a>libc.so.6删除恢复</h3><p>libc.so.6是linux中非常重要的库文件，误删除后会影响许多命令无法使用。  </p>
<p>以下演示如何删除libc.so.6后恢复  </p>
<span id="more"></span>

<p>示例：  </p>
<p>1.创建删除libc.so.6的环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># rm -rf /lib64/libc.so.6 </span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ls</span></span><br><span class="line">ls: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">[root@centos7 /]<span class="comment"># cat /etc/passwd</span></span><br><span class="line">cat: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p>删除后ls、cat、等命令都已经无法使用。  </p>
<p>2.重启机器，选择光盘启动。CD-ROM Drive</p>
<p><img src="%E5%88%A0%E5%BA%931.jpg" alt="删库1"></p>
<p>3.选择Troubleshooting</p>
<p><img src="%E5%88%A0%E5%BA%932.jpg" alt="删库2"></p>
<p>4.选择进入救援模式 Rescue a CentOS system</p>
<p><img src="%E5%88%A0%E5%BA%935.jpg" alt="删库5"></p>
<p>5.选择第一项continue</p>
<p><img src="%E5%88%A0%E5%BA%933.jpg" alt="删库3"></p>
<p>6.此时linux已经将原来硬盘的根挂载到/mnt/sysimage路径下，系统进入了救援模式。</p>
<p><img src="%E5%88%A0%E5%BA%934.jpg" alt="删库4"></p>
<p>7.恢复思路</p>
<p>由于在救援模式下，ls，及cat等命令仍旧可以使用说明在救援模式下也存在libc.so.6这个文件，只需要将救援模式的libc.so.6复制回硬盘就可以恢复,<br>执行以下操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /lib64/libc.so.6 /mnt/sysimage/lib64</span><br></pre></td></tr></table></figure>

<p>重启系统，此时文件已经恢复所有命令可以正常执行。</p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>系统修复</tag>
      </tags>
  </entry>
  <entry>
    <title>释放磁盘空间技巧</title>
    <url>/2019/03/04/Linux%E5%9F%BA%E7%A1%80/%E9%87%8A%E6%94%BE%E7%A9%BA%E9%97%B4%E6%8A%80%E5%B7%A7/%E9%87%8A%E6%94%BE%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="释放磁盘空间技巧"><a href="#释放磁盘空间技巧" class="headerlink" title="释放磁盘空间技巧"></a>释放磁盘空间技巧</h2><p>生产环境中会出现磁盘被一些大文件填满，但是大文件却因为被打开而无法马上删除释放空间的情况，以下技巧是解决此类问题的一种方法</p>
<span id="more"></span>

<h3 id="模拟环境"><a href="#模拟环境" class="headerlink" title="模拟环境"></a>模拟环境</h3><p>先用/dev/zero 将/boot分区填满</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 boot]<span class="comment"># cp /dev/zero /boot/bigfile</span></span><br><span class="line">cp: error writing ‘/boot/bigfile’: No space left on device</span><br><span class="line">cp: failed to extend ‘/boot/bigfile’: No space left on device</span><br><span class="line">[root@centos7 boot]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/sda2      104806400 3708520 101097880   4% /</span><br><span class="line">devtmpfs          740168       0    740168   0% /dev</span><br><span class="line">tmpfs             756008       0    756008   0% /dev/shm</span><br><span class="line">tmpfs             756008   10144    745864   2% /run</span><br><span class="line">tmpfs             756008       0    756008   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda3       52403200   33140  52370060   1% /data</span><br><span class="line">/dev/sda1        1038336 1038296        40 100% /boot</span><br><span class="line">tmpfs             151204       0    151204   0% /run/user/0</span><br></pre></td></tr></table></figure>

<p>然后将/boot/bigfile文件打开，再新启一个终端，用df查看分区利用率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/sda2      104806400 3708664 101097736   4% /</span><br><span class="line">devtmpfs          740168       0    740168   0% /dev</span><br><span class="line">tmpfs             756008       0    756008   0% /dev/shm</span><br><span class="line">tmpfs             756008   10184    745824   2% /run</span><br><span class="line">tmpfs             756008       0    756008   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda3       52403200   33140  52370060   1% /data</span><br><span class="line">/dev/sda1        1038336 1038300        36 100% /boot</span><br><span class="line">tmpfs             151204       0    151204   0% /run/user/0</span><br></pre></td></tr></table></figure>

<p>使用rm将bigfile文件删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># rm /boot/bigfile </span></span><br><span class="line">rm: remove regular file ‘/boot/bigfile’? y</span><br><span class="line">[root@centos7 ~]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/sda2      104806400 3708584 101097816   4% /</span><br><span class="line">devtmpfs          740168       0    740168   0% /dev</span><br><span class="line">tmpfs             756008       0    756008   0% /dev/shm</span><br><span class="line">tmpfs             756008   10184    745824   2% /run</span><br><span class="line">tmpfs             756008       0    756008   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda3       52403200   33140  52370060   1% /data</span><br><span class="line">/dev/sda1        1038336 1038300        36 100% /boot</span><br><span class="line">tmpfs             151204       0    151204   0% /run/user/0</span><br></pre></td></tr></table></figure>

<p>然而此时/boot分区利用率依然为100%，但目录下bigfile文件已经删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># ls /boot</span></span><br><span class="line">config-3.10.0-957.el7.x86_64</span><br><span class="line">efi</span><br><span class="line">grub</span><br><span class="line">grub2</span><br><span class="line">initramfs-0-rescue-30905c0f8bf344f4af5b53a826370629.img</span><br><span class="line">initramfs-3.10.0-957.el7.x86_64.img</span><br><span class="line">symvers-3.10.0-957.el7.x86_64.gz</span><br><span class="line">System.map-3.10.0-957.el7.x86_64</span><br><span class="line">vmlinuz-0-rescue-30905c0f8bf344f4af5b53a826370629</span><br><span class="line">vmlinuz-3.10.0-957.el7.x86_64</span><br><span class="line">[root@centos7 ~]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当bigfile文件被释放时，/boot分区的利用率归零。  </p>
<p>结论：当磁盘文件被写入时，若直接删除此文件是不会释放磁盘空间的，但是此文件已经删除。只有当文件被关闭时空间才会被释放。    </p>
<h3 id="以下演示正确的操作方法"><a href="#以下演示正确的操作方法" class="headerlink" title="以下演示正确的操作方法"></a>以下演示正确的操作方法</h3><p>先将磁盘填满</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/sda2      104806400 3708604 101097796   4% /</span><br><span class="line">devtmpfs          740168       0    740168   0% /dev</span><br><span class="line">tmpfs             756008       0    756008   0% /dev/shm</span><br><span class="line">tmpfs             756008   10144    745864   2% /run</span><br><span class="line">tmpfs             756008       0    756008   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda3       52403200   33140  52370060   1% /data</span><br><span class="line">/dev/sda1        1038336  167000    871336  17% /boot</span><br><span class="line">tmpfs             151204       0    151204   0% /run/user/0</span><br><span class="line">[root@centos7 ~]<span class="comment"># cp /etc/zero /boot</span></span><br><span class="line">cp: cannot <span class="built_in">stat</span> ‘/etc/zero’: No such file or directory</span><br><span class="line">[root@centos7 ~]<span class="comment"># cp /dev/zero /boot/bigfile</span></span><br><span class="line">cp: overwrite ‘/boot/bigfile’? y</span><br><span class="line">cp: error writing ‘/boot/bigfile’: No space left on device</span><br><span class="line">cp: failed to extend ‘/boot/bigfile’: No space left on device</span><br><span class="line">[root@centos7 ~]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/sda2      104806400 3708584 101097816   4% /</span><br><span class="line">devtmpfs          740168       0    740168   0% /dev</span><br><span class="line">tmpfs             756008       0    756008   0% /dev/shm</span><br><span class="line">tmpfs             756008   10144    745864   2% /run</span><br><span class="line">tmpfs             756008       0    756008   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda3       52403200   33140  52370060   1% /data</span><br><span class="line">/dev/sda1        1038336 1038296        40 100% /boot</span><br><span class="line">tmpfs             151204       0    151204   0% /run/user/0</span><br></pre></td></tr></table></figure>

<p>将bigfile文件打开后另起终端，查看boot分区利用率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># df /boot</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/sda1        1038336 1038300        36 100% /boot</span><br></pre></td></tr></table></figure>

<p>然后执行重定向命令将bigfile文件清空，此时boot磁盘空间已经释放</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># &gt; /boot/bigfile</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/sda2      104806400 3708588 101097812   4% /</span><br><span class="line">devtmpfs          740168       0    740168   0% /dev</span><br><span class="line">tmpfs             756008       0    756008   0% /dev/shm</span><br><span class="line">tmpfs             756008   10184    745824   2% /run</span><br><span class="line">tmpfs             756008       0    756008   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda3       52403200   33140  52370060   1% /data</span><br><span class="line">/dev/sda1        1038336  167004    871332  17% /boot</span><br><span class="line">tmpfs             151204       0    151204   0% /run/user/0</span><br><span class="line">[root@centos7 ~]<span class="comment"># ls /boot</span></span><br><span class="line">bigfile</span><br><span class="line">config-3.10.0-957.el7.x86_64</span><br><span class="line">efi</span><br><span class="line">grub</span><br><span class="line">grub2</span><br><span class="line">initramfs-0-rescue-30905c0f8bf344f4af5b53a826370629.img</span><br><span class="line">initramfs-3.10.0-957.el7.x86_64.img</span><br><span class="line">symvers-3.10.0-957.el7.x86_64.gz</span><br><span class="line">System.map-3.10.0-957.el7.x86_64</span><br><span class="line">vmlinuz-0-rescue-30905c0f8bf344f4af5b53a826370629</span><br><span class="line">vmlinuz-3.10.0-957.el7.x86_64</span><br></pre></td></tr></table></figure>

<p>然后删除bigfile文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># rm -rf /boot/bigfile</span></span><br></pre></td></tr></table></figure>

<p>当bigfile文件被关闭时，文件即被删除。</p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主主复制及相关的排坑</title>
    <url>/2019/04/10/MySQL/MySQL%E4%B8%BB%E4%B8%BB%E5%A4%8D%E5%88%B6/MySQL%E4%B8%BB%E4%B8%BB%E5%A4%8D%E5%88%B6%E5%8F%8A%E6%8E%92%E5%9D%91/</url>
    <content><![CDATA[<p>主主复制的本质就是2台MySQL服务器互为主从。  </p>
<p>但如此配置极易产生问题，如数据不一致导致主键的冲突，以及一些其他的错误。  </p>
<p>为了减少主键冲突的情况，可以考虑让两个节点的id分别使用奇数和偶数，这就需要用到两个服务器选项来配置。</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto_increment_offset       <span class="comment">#设置id的开始点</span></span><br><span class="line">auto_increment_increment    <span class="comment">#设置id的步进</span></span><br></pre></td></tr></table></figure>

<p>主主复制工作中不推荐使用，如确实需要使用，也将其当为主从来使用。</p>
<h2 id="主主复制的搭建"><a href="#主主复制的搭建" class="headerlink" title="主主复制的搭建"></a>主主复制的搭建</h2><p>使用2台主机来配置主主复制<br>|主机|ip|<br>|:-|:-|<br>|Master1|192.168.73.110|<br>|Master2|192.168.73.111|</p>
<h3 id="配置Master1"><a href="#配置Master1" class="headerlink" title="配置Master1"></a>配置Master1</h3><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master1 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log-bin</span><br><span class="line">server-id=1</span><br><span class="line">auto_increment_offset=1</span><br><span class="line">auto_increment_increment=2</span><br></pre></td></tr></table></figure>

<p>2.启动MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master1 ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>3.查看二进制日志位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master1 ~]<span class="comment"># mysql -e &quot;SHOW MASTER LOGS;&quot;</span></span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| Log_name           | File_size |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| mariadb-bin.000001 |       245 |</span><br><span class="line">+--------------------+-----------+</span><br></pre></td></tr></table></figure>

<p>4.创建一个用来复制数据的用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master1 ~]<span class="comment"># mysql -e &quot;GRANT REPLICATION SLAVE ON *.* TO &#x27;repluser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;centos&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置Master2为Master1的从节点"><a href="#配置Master2为Master1的从节点" class="headerlink" title="配置Master2为Master1的从节点"></a>配置Master2为Master1的从节点</h3><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master2 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log-bin</span><br><span class="line">server-id=2</span><br><span class="line">auto_increment_offset=1</span><br><span class="line">auto_increment_increment=2</span><br></pre></td></tr></table></figure>

<p>2.设置CHANGE MASTER TO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;192.168.73.110&#x27;</span>, MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,MASTER_PASSWORD=<span class="string">&#x27;centos&#x27;</span>,MASTER_PORT=3306,MASTER_LOG_FILE=<span class="string">&#x27;mariadb-bin.000001&#x27;</span>,MASTER_LOG_POS=245;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>3.查看从节点状态，确认无误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mariadb-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 245</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mariadb-bin.000001</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br></pre></td></tr></table></figure>

<p>4.启动线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>5.再次查看从节点状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mariadb-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 407</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 693</span><br><span class="line">        Relay_Master_Log_File: mariadb-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes          <span class="comment">#线程已经全部启动</span></span><br></pre></td></tr></table></figure>

<p>6.查看二进制日志位置</p>
<p>查看二级制日志位置用于，给Master1作为从节点使用。由于Master2上无数据二进制日志为干净日志，所以可以直接供Master1使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW MASTER LOGS;</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| Log_name           | File_size |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| mariadb-bin.000001 |       245 |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="配置Master1为Master2的从节点"><a href="#配置Master1为Master2的从节点" class="headerlink" title="配置Master1为Master2的从节点"></a>配置Master1为Master2的从节点</h3><p>1.输入CHANGE MASTER TO的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;192.168.73.111&#x27;</span>, MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,MASTER_PASSWORD=<span class="string">&#x27;centos&#x27;</span>,MASTER_PORT=3306,MASTER_LOG_FILE=<span class="string">&#x27;mariadb-bin.000001&#x27;</span>,MASTER_LOG_POS=245;</span><br></pre></td></tr></table></figure>

<p>2.查看从状态,确认信息无误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 192.168.73.111</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mariadb-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 245</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mariadb-bin.000001</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br></pre></td></tr></table></figure>

<p>3.启动线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>4.再次查看slave status</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.111</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mariadb-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 245</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 531</span><br><span class="line">        Relay_Master_Log_File: mariadb-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>

<p>主主复制搭建完毕</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="测试一、查看Master1输入数据，Master2能否复制"><a href="#测试一、查看Master1输入数据，Master2能否复制" class="headerlink" title="测试一、查看Master1输入数据，Master2能否复制"></a>测试一、查看Master1输入数据，Master2能否复制</h4><p>1.从Master1上导入hellodb数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master1 ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">[root@Master1 ~]<span class="comment"># mysql &lt; hellodb_innodb.sql</span></span><br><span class="line">[root@Master1 ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<p>2.从节点上查看数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master2 ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<h4 id="测试二、Master2插入数据查看Master1是否能复制"><a href="#测试二、Master2插入数据查看Master1是否能复制" class="headerlink" title="测试二、Master2插入数据查看Master1是否能复制"></a>测试二、Master2插入数据查看Master1是否能复制</h4><p>1.在Master2中插入条记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master2 ~]<span class="comment"># mysql -e &quot;INSERT hellodb.teachers(name,age) VALUE (&#x27;Ye Fan&#x27;,&#x27;25&#x27;);&quot;</span></span><br><span class="line">[root@Master2 ~]<span class="comment"># mysql -e &quot;INSERT hellodb.teachers(name,age) VALUE (&#x27;Shi Hao&#x27;,&#x27;20&#x27;);&quot;</span></span><br><span class="line">[root@Master2 ~]<span class="comment"># mysql -e &quot;SELECT * FROM hellodb.teachers&quot;</span></span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">| TID | Name          | Age | Gender |</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">|   1 | Song Jiang    |  45 | M      |</span><br><span class="line">|   2 | Zhang Sanfeng |  94 | M      |</span><br><span class="line">|   3 | Miejue Shitai |  77 | F      |</span><br><span class="line">|   4 | Lin Chaoying  |  93 | F      |</span><br><span class="line">|   5 | Ye Fan        |  25 | NULL   |</span><br><span class="line">|   7 | Shi Hao       |  20 | NULL   |      <span class="comment">#此处可以看到插入数据时主键tid是以2为步进递增的。</span></span><br><span class="line">+-----+---------------+-----+--------+</span><br></pre></td></tr></table></figure>

<p>2.在Master1上查看数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master1 ~]<span class="comment"># mysql -e &quot;SELECT * FROM hellodb.teachers;&quot;</span></span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">| TID | Name          | Age | Gender |</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">|   1 | Song Jiang    |  45 | M      |</span><br><span class="line">|   2 | Zhang Sanfeng |  94 | M      |</span><br><span class="line">|   3 | Miejue Shitai |  77 | F      |</span><br><span class="line">|   4 | Lin Chaoying  |  93 | F      |</span><br><span class="line">|   5 | Ye Fan        |  25 | NULL   |</span><br><span class="line">|   7 | Shi Hao       |  20 | NULL   |</span><br><span class="line">+-----+---------------+-----+--------+</span><br></pre></td></tr></table></figure>

<h4 id="测试三、两边同时创建一张相同的表"><a href="#测试三、两边同时创建一张相同的表" class="headerlink" title="测试三、两边同时创建一张相同的表"></a>测试三、两边同时创建一张相同的表</h4><p>1.同时对两个主机做出创建表的操作  </p>
<p><img src="%E4%B8%BB%E4%B8%BB1.png" alt="主主1.png"></p>
<p><img src="%E4%B8%BB%E4%B8%BB2.png" alt="主主2.png"></p>
<p>2.查看Master1的hellodb库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master1 ~]<span class="comment"># mysql -e &quot;SHOW TABLES FROM hellodb&quot;</span></span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_hellodb |</span><br><span class="line">+-------------------+</span><br><span class="line">| classes           |</span><br><span class="line">| coc               |</span><br><span class="line">| courses           |</span><br><span class="line">| scores            |</span><br><span class="line">| students          |</span><br><span class="line">| teachers          |</span><br><span class="line">| <span class="built_in">test</span>              |</span><br><span class="line">| toc               |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure>

<p>3.查看Master2的hellodb库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master2 ~]<span class="comment"># mysql -e &quot;SHOW TABLES FROM hellodb&quot;</span></span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_hellodb |</span><br><span class="line">+-------------------+</span><br><span class="line">| classes           |</span><br><span class="line">| coc               |</span><br><span class="line">| courses           |</span><br><span class="line">| scores            |</span><br><span class="line">| students          |</span><br><span class="line">| teachers          |</span><br><span class="line">| <span class="built_in">test</span>              |</span><br><span class="line">| toc               |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure>

<p>此处看上好像没问提</p>
<h4 id="测试四、继续插入数据-从看看复制状况"><a href="#测试四、继续插入数据-从看看复制状况" class="headerlink" title="测试四、继续插入数据,从看看复制状况"></a>测试四、继续插入数据,从看看复制状况</h4><p>1.在Master1上继续往hellodb.test表中插入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master1 ~]<span class="comment"># mysql -e &quot;INSERT hellodb.test VALUE(1,&#x27;Tang San&#x27;);&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.Master2上查看复制状况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master2 ~]<span class="comment"># mysql</span></span><br><span class="line">MariaDB [(none)]&gt; SELECT * FROM hellodb.test;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#没有复制到数据</span></span><br></pre></td></tr></table></figure>

<p>3.查错</p>
<p>分别查看Master1和Master2主机上的SLAVE STATUS;</p>
<p>Master1状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.111</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mariadb-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 871</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 1018</span><br><span class="line">        Relay_Master_Log_File: mariadb-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 1050</span><br><span class="line">                   Last_Error: Error <span class="string">&#x27;Table &#x27;</span><span class="built_in">test</span><span class="string">&#x27; already exists&#x27;</span> on query. Default database: <span class="string">&#x27;&#x27;</span>. Query: <span class="string">&#x27;CREATE TABLE hellodb.test(id int auto_increment primary key,name  char(20))&#x27;</span></span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 732</span><br><span class="line">              Relay_Log_Space: 1453</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 1050</span><br><span class="line">               Last_SQL_Error: Error <span class="string">&#x27;Table &#x27;</span><span class="built_in">test</span><span class="string">&#x27; already exists&#x27;</span> on query. Default database: <span class="string">&#x27;&#x27;</span>. Query: <span class="string">&#x27;CREATE TABLE hellodb.test(id int auto_increment primary key,name  char(20))&#x27;</span></span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 2</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: No query specified</span><br></pre></td></tr></table></figure>

<p>Master2状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mariadb-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 8360</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 8308</span><br><span class="line">        Relay_Master_Log_File: mariadb-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 1050</span><br><span class="line">                   Last_Error: Error <span class="string">&#x27;Table &#x27;</span><span class="built_in">test</span><span class="string">&#x27; already exists&#x27;</span> on query. Default database: <span class="string">&#x27;&#x27;</span>. Query: <span class="string">&#x27;CREATE TABLE hellodb.test(id int auto_increment primary key,name  char(20))&#x27;</span></span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 8022</span><br><span class="line">              Relay_Log_Space: 8942</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 1050</span><br><span class="line">               Last_SQL_Error: Error <span class="string">&#x27;Table &#x27;</span><span class="built_in">test</span><span class="string">&#x27; already exists&#x27;</span> on query. Default database: <span class="string">&#x27;&#x27;</span>. Query: <span class="string">&#x27;CREATE TABLE hellodb.test(id int auto_increment primary key,name  char(20))&#x27;</span></span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: No query specified</span><br></pre></td></tr></table></figure>

<p>显示出来刚在在创建表时已经复制出错，由于两边同时创建了同一张表发生了冲突</p>
<h5 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h5><p>分别在主从节点上停止线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; STOP SLAVE;</span><br></pre></td></tr></table></figure>

<p>分别在主从节点上使用sql_slave_skip_counter忽略错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SET GLOBAL sql_slave_skip_counter=1;</span><br></pre></td></tr></table></figure>

<p>分别在主从节点上再次启动线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br></pre></td></tr></table></figure>

<p>再次在从节点上查test表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master2 ~]<span class="comment"># mysql -e &quot;SELECT * FROM hellodb.test;&quot;</span></span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | Tang San |</span><br><span class="line">+----+----------+</span><br></pre></td></tr></table></figure>

<p>此时数据已经能正常复制过去</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从复制</title>
    <url>/2019/04/10/MySQL/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>所有的关系型数据库都存在一个通病性能差，在企业中如果用户量特别大，将所有的数据都存放在一台服务器上，其性能是远远达不到要求的。所以需要使用一些手段来解决其性能的问题。</p>
<p>提升性能的方式有向上扩展以及向外扩展  </p>
<p>向上扩展(Scale Up)：使用更新更好的硬件，但硬件在怎么更新也有其性能的极限。盲目的向上扩展无法结局根本的问题  </p>
<p>向外扩展(Scale Out)：就是使用多台机器分摊压力来提供服务  </p>
<p>主从复制就是拿多个数据库服务器，组合成一个服务器的集合对外共同服务实现性能的提升，逻辑上使用的时对外扩展的方式(Scale out)来提升服务器的性能。</p>
<span id="more"></span>

<h2 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h2><p>MySQL主从同步一共需要三个线程的操作，主MySQL有一个IO线程，从MySQL有一个IO线程和一个SQL线程， MySQL主从是实现MySQL高可用、数据备份、读写分离架构的一种最常见的解决方案，在绝大部分公司都有使用，要实现MySQL主从复制，必须要在Master打开binary log(bin-log)功能，因为整个MySQL的复制过程实际就是Slave从Master端获取响应的二进制日志，然后在Slave端顺序的执行日志中所记录的各种操作，二进制日志中几乎记录了出select以外的所有针对数据库的sql操作语句，具体的复制过程如下：</p>
<ol>
<li><p>Slave端的IO线程连接上Master，并向Master请求指定日志文件的指定位置（新部署的Master和Slave从最开始的日志）之后的日志。</p>
</li>
<li><p>Master接收到来自Slave的IO线程请求，负责IO复制的IO线程根据Slave的请求信息读取相应的日志内容，然后将本地读取的bin-log的文件名、位置及指定位置之后的内容一起返回给Slave的IO线程处理。</p>
</li>
<li><p>Slave的IO线程将接收到的信息依次添加到Slave端的relay-log文件的最末端，并将读取到的Master端的bin-log的文件名和位置记录到Master-info文件中，以便在下一次读取的时候能够清楚的告诉Master“我需要从哪个bin-log的哪个位置开始往后的日志内容请发给我”。</p>
</li>
<li><p>Slave的sql线程检查到relay-log中新增了内容后，会马上将relay-log中的内容解析为在Master端真实执行时候的可执行命令，并顺序执行，从而保证对Slave的MySQL进行响应的增加或删除等操作，最终实现和Master数据保持一致。</p>
</li>
</ol>
<p><img src="%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.png" alt="主从复制原理.png"></p>
<h2 id="主从复制架构"><a href="#主从复制架构" class="headerlink" title="主从复制架构"></a>主从复制架构</h2><p><img src="1%E4%B8%BB1%E4%BB%8E.png" alt="1主1从.png"></p>
<p><img src="1%E4%B8%BB%E5%A4%9A%E4%BB%8E.png" alt="1主多从.png"></p>
<p>以下将演示新主机的主从配置和主服务器中已有数据的情况下的主从配置方法</p>
<hr>
<h2 id="新主机搭建主从复制"><a href="#新主机搭建主从复制" class="headerlink" title="新主机搭建主从复制"></a>新主机搭建主从复制</h2><p>使用两台新服务器配置MySQL主从复制。具体配置如下：</p>
<table>
<thead>
<tr>
<th align="left">服务器类型</th>
<th align="left">ip地址</th>
<th align="left">系统</th>
</tr>
</thead>
<tbody><tr>
<td align="left">主</td>
<td align="left">192.168.73.133</td>
<td align="left">CentOS 7.6</td>
</tr>
<tr>
<td align="left">从</td>
<td align="left">192.168.73.145</td>
<td align="left">CentOS 7.6</td>
</tr>
</tbody></table>
<h3 id="主服务器配置"><a href="#主服务器配置" class="headerlink" title="主服务器配置"></a>主服务器配置</h3><p>1.在主服务器上启用二进制日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/mysql/my.cnf</span></span><br><span class="line">log-bin=/data/bin/mysql-bin     <span class="comment">#开启二进制日志</span></span><br><span class="line">binlog-format=row               <span class="comment">#二进制日志记录格式使用row</span></span><br><span class="line">server-id=1                     <span class="comment">#server-id设置为1，此处需要注意主从服务器的server-id必须不同。</span></span><br></pre></td></tr></table></figure>

<p>2.创建二进制日志目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /data/bin     #由于是新主机当前服务器上没有二进制日志目录需要自己手动创建。</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown -R mysql.mysql /data/bin      #将二进制日志的属主和属组进行更改。</span></span><br></pre></td></tr></table></figure>

<p>3.重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># service mysqld restart    #主服务器配置完毕重启服务</span></span><br><span class="line">Restarting mysqld (via systemctl):                         [  OK  ]</span><br></pre></td></tr></table></figure>

<p>4.创建一个用来让从服务器复制数据的账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; GRANT REPLICATION SLAVE ON *.* TO repluser@<span class="string">&#x27;192.168.73.%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;centos&#x27;</span>;         <span class="comment">#在主服务器上创建一个用来主从复制的账号</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>5.查看主服务器正在使用的二进制日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW MASTER LOGS;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       515 |    <span class="comment">#当前二进制文件及位置需要记录，从服务器设置时需要</span></span><br><span class="line">+------------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="从服务器配置"><a href="#从服务器配置" class="headerlink" title="从服务器配置"></a>从服务器配置</h3><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/mysql/my.cnf</span></span><br><span class="line">server-id       = 2     <span class="comment">#server-id改为和主服务器不同</span></span><br><span class="line">read-only               <span class="comment">#设置为只读，此设置只正对普通用户root无效。</span></span><br><span class="line"><span class="comment">#log-bin=mysql-bin      #将二进制日志关闭</span></span><br></pre></td></tr></table></figure>

<p>2.启动MySQL服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># service mysqld restart        #重启从服务器上的MySQL服务</span></span><br><span class="line">Starting mysqld (via systemctl):                           [  OK  ]</span><br></pre></td></tr></table></figure>

<p>3.关联主服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;192.168.73.133&#x27;</span>,MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,MASTER_PASSWORD=<span class="string">&#x27;centos&#x27;</span>,MASTER_PORT=3306,MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000001&#x27;</span>,MASTER_LOG_POS=515;</span><br><span class="line"><span class="comment">#使用CHANGE MASTER TO 将从服务器与主服务器进行关联</span></span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>4.查看从服务器状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 192.168.73.133</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 515</span><br><span class="line">               Relay_Log_File: localhost-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: No   <span class="comment">#在线程启动后确保IO以及SQL线程是启动的</span></span><br><span class="line">            Slave_SQL_Running: No   <span class="comment">#SQL在线程启动后状态需要为yes</span></span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 515</span><br><span class="line">              Relay_Log_Space: 256</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: NULL       <span class="comment">#和主服务器之间的延迟时间</span></span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">                   Using_Gtid: No</span><br><span class="line">                  Gtid_IO_Pos:</span><br><span class="line">      Replicate_Do_Domain_Ids:</span><br><span class="line">  Replicate_Ignore_Domain_Ids:</span><br><span class="line">                Parallel_Mode: conservative</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State:</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>5.启动线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;    <span class="comment">#启动复制线程</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在主服务器上导入一个hellodb数据库，查看服务器主从复制是否配置成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql &lt; hellodb_innodb.sql</span></span><br></pre></td></tr></table></figure>

<p>从服务器上查看是否同步成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hellodb            |      <span class="comment">#已经有hellodb库</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="主服务器已有数据的情况下搭建主从"><a href="#主服务器已有数据的情况下搭建主从" class="headerlink" title="主服务器已有数据的情况下搭建主从"></a>主服务器已有数据的情况下搭建主从</h2><p>在通常情况下，MySQL搭建主从会在一台已经有数据的mysql服务器基础上，追加一台从服务器，此时如果直接使用原先的方法直接配置主从复制将导致主从同步的时间会很长，此时就需要先将所有的数据备份到从服务器上，然后再配置组从同步。具体配置方法如下：</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><table>
<thead>
<tr>
<th align="left">服务器</th>
<th align="left">IP地址</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Master</td>
<td align="left">192.168.73.148</td>
</tr>
<tr>
<td align="left">Slave</td>
<td align="left">192.168.73.149</td>
</tr>
</tbody></table>
<p>Master中的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">| test1              |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<h3 id="配置主服务器"><a href="#配置主服务器" class="headerlink" title="配置主服务器"></a>配置主服务器</h3><p>1.修改主服务器配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log-bin=/data/bin/mysql-bin         <span class="comment">#开启配二进制日志</span></span><br><span class="line">binlog-format=row                   <span class="comment">#日志记录格式设置为row</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart mariadb   #重启MySQL</span></span><br></pre></td></tr></table></figure>

<p>2.创建复制账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -e &quot;GRANT REPLICATION SLAVE ON *.* TO &#x27;repluser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;centos&#x27;;&quot;    #创建一个用来主从复制的账号</span></span><br></pre></td></tr></table></figure>

<p>3.备份主节点中的所有数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysqldump -A --single-transaction -F --master-data=1 &gt; /data/all.sql      #将主机节点上的所有数据使用mysql </span></span><br></pre></td></tr></table></figure>

<p>4.将备份数据传送给从节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># scp /data/all.sql 192.168.73.149:/data</span></span><br></pre></td></tr></table></figure>

<h3 id="配置从服务器"><a href="#配置从服务器" class="headerlink" title="配置从服务器"></a>配置从服务器</h3><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br><span class="line">read-only</span><br></pre></td></tr></table></figure>

<p>2.清空MySQL数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rm -rf /var/lib/mysql/*</span></span><br></pre></td></tr></table></figure>

<p>3.修改备份数据将chang master to 加入文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /data/all.sql</span></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">  MASTER_HOST=<span class="string">&#x27;192.168.73.148&#x27;</span>,</span><br><span class="line">  MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,</span><br><span class="line">  MASTER_PASSWORD=<span class="string">&#x27;centos&#x27;</span>,</span><br><span class="line">  MASTER_PORT=3306,</span><br><span class="line">  MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000005&#x27;</span>,</span><br><span class="line">  MASTER_LOG_POS=245;</span><br></pre></td></tr></table></figure>

<p>4.启动MySQL服务，并导入备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql &lt; /data/all.sql</span></span><br></pre></td></tr></table></figure>

<p>5.查看从节点状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 192.168.73.148</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000005</span><br><span class="line">          Read_Master_Log_Pos: 245</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000005</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 245</span><br><span class="line">              Relay_Log_Space: 245</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>6.启动线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>7.再次查看从节点状态，复制的2个线程已经启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.148</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000005</span><br><span class="line">          Read_Master_Log_Pos: 245</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 529</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000005</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 245</span><br><span class="line">              Relay_Log_Space: 825</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>主节点删test1库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; DROP DATABASE  test1;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>从节点查看是否同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)      <span class="comment">#已经没有test1库</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从复制出错的解决方法</title>
    <url>/2019/04/10/MySQL/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>主从复制中若是出现错误可以通过几个方法来进行解决  </p>
<ol>
<li><p>如果主从复制时发生了主键冲突，从而阻止了主从复制，可以使用sql_slave_skip_counter这个变量来忽略错误将其排除  </p>
</li>
<li><p>如果发生了较大的错误，可以考虑使用reset slave的方法重新配置从服务器来恢复错误</p>
</li>
</ol>
<p>以下演示如何使用这两种方法解决错误，及相关操作的详细说明</p>
<span id="more"></span>

<h2 id="reset-slave的使用方法"><a href="#reset-slave的使用方法" class="headerlink" title="reset slave的使用方法"></a>reset slave的使用方法</h2><h3 id="环境准备搭建主从同步"><a href="#环境准备搭建主从同步" class="headerlink" title="环境准备搭建主从同步"></a>环境准备搭建主从同步</h3><h4 id="主节点配置"><a href="#主节点配置" class="headerlink" title="主节点配置"></a>主节点配置</h4><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log-bin=/data/bin/mysql-bin</span><br><span class="line">binlog-format=row</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure>

<p>2.创建二进制日志目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mkdir /data/bin</span></span><br><span class="line">[root@Master ~]<span class="comment"># chown -R mysql.mysql /data/bin</span></span><br></pre></td></tr></table></figure>

<p>3.启动mysqld服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>4.查看主服务器日志位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;SHOW MASTER LOGS;&quot;</span></span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |     26753 |</span><br><span class="line">| mysql-bin.000002 |    921736 |</span><br><span class="line">| mysql-bin.000003 |       245 |</span><br><span class="line">+------------------+-----------+</span><br></pre></td></tr></table></figure>

<p>5.创建一个用来复制数据的账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;GRANT REPLICATION SLAVE ON *.* TO &#x27;repluser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;centos&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="从节点配置"><a href="#从节点配置" class="headerlink" title="从节点配置"></a>从节点配置</h4><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">read-only</span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure>

<p>2.启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>此处开始构建错误配置</strong>  </p>
<p><strong>以下所有CHANGE MASTER TO配置均为错误</strong></p>
<p>3.配置CHANGE MASTER TO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;MariaDB [(none)]&gt; CHANGE MASTER TO</span><br><span class="line">   -&gt;   MASTER_HOST=<span class="string">&#x27;master2.mycompany.com&#x27;</span>,</span><br><span class="line">   -&gt;   MASTER_USER=<span class="string">&#x27;replication&#x27;</span>,</span><br><span class="line">   -&gt;   MASTER_PASSWORD=<span class="string">&#x27;bigs3cret&#x27;</span>,</span><br><span class="line">   -&gt;   MASTER_PORT=3306,</span><br><span class="line">   -&gt;   MASTER_LOG_FILE=<span class="string">&#x27;master2-bin.001&#x27;</span>,</span><br><span class="line">   -&gt;   MASTER_LOG_POS=4,</span><br><span class="line">   -&gt;   MASTER_CONNECT_RETRY=10;</span><br><span class="line">&gt;Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>4.查看下SLAVE STATUS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">&gt;*************************** 1. row ***************************</span><br><span class="line">              Slave_IO_State:</span><br><span class="line">                 Master_Host: master2.mycompany.com</span><br><span class="line">                 Master_User: replication</span><br><span class="line">                 Master_Port: 3306</span><br><span class="line">               Connect_Retry: 10</span><br><span class="line">             Master_Log_File: master2-bin.001</span><br><span class="line">         Read_Master_Log_Pos: 4</span><br><span class="line">              Relay_Log_File: mariadb-relay-bin.000001</span><br><span class="line">               Relay_Log_Pos: 4</span><br><span class="line">       Relay_Master_Log_File: master2-bin.001</span><br><span class="line">            Slave_IO_Running: No</span><br><span class="line">           Slave_SQL_Running: No</span><br><span class="line">      ...以下省略...</span><br></pre></td></tr></table></figure>

<p>5.启动复制线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;MariaDB [(none)]&gt; START SLAVE;</span><br></pre></td></tr></table></figure>

<p>6.再次查看SLAVE STATUS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">&gt;*************************** 1. row ***************************</span><br><span class="line">              Slave_IO_State: Connecting to master</span><br><span class="line">                 Master_Host: master2.mycompany.com</span><br><span class="line">                 Master_User: replication</span><br><span class="line">                 Master_Port: 3306</span><br><span class="line">               Connect_Retry: 10</span><br><span class="line">             Master_Log_File: master2-bin.001</span><br><span class="line">         Read_Master_Log_Pos: 4</span><br><span class="line">              Relay_Log_File: mariadb-relay-bin.000001</span><br><span class="line">               Relay_Log_Pos: 4</span><br><span class="line">       Relay_Master_Log_File: master2-bin.001</span><br><span class="line">            Slave_IO_Running: Connecting</span><br><span class="line">           Slave_SQL_Running: Yes</span><br><span class="line">      ...以下省略...</span><br></pre></td></tr></table></figure>

<p>线程已经正常启动  </p>
<p>主服务器导入数据进行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;[root@Master ~]<span class="comment"># mysql &lt; hellodb_innodb.sql</span></span><br><span class="line">&gt;[root@Master ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">&gt;+--------------------+</span><br><span class="line">&gt;| Database           |</span><br><span class="line">&gt;+--------------------+</span><br><span class="line">&gt;| information_schema |</span><br><span class="line">&gt;| hellodb            |</span><br><span class="line">&gt;| mysql              |</span><br><span class="line">&gt;| performance_schema |</span><br><span class="line">&gt;| <span class="built_in">test</span>               |</span><br><span class="line">&gt;+--------------------+</span><br></pre></td></tr></table></figure>

<p>从服务器查看是否同步(CHANGE MASTER TO信息不对怎么可能同步)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">&gt;+--------------------+</span><br><span class="line">&gt;| Database           |</span><br><span class="line">&gt;+--------------------+</span><br><span class="line">&gt;| information_schema |</span><br><span class="line">&gt;| mysql              |</span><br><span class="line">&gt;| performance_schema |</span><br><span class="line">&gt;| <span class="built_in">test</span>               |</span><br><span class="line">&gt;+--------------------+</span><br><span class="line">&gt;4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="以下为错误解决方法"><a href="#以下为错误解决方法" class="headerlink" title="以下为错误解决方法"></a>以下为错误解决方法</h4><p>由于错误发生在CHANGE MASTER TO所以此处将CHANG MASTER TO部分纠正就行</p>
<p>1.首先将从服务器的复制线程停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; STOP SLAVE;</span><br><span class="line">Query OK, 0 rows affected (17.48 sec)</span><br></pre></td></tr></table></figure>

<p>2.将从服务器上的SLAVE信息重置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; RESET SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>3.重新输入正确的CHANGE MASTER TO信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;192.168.73.110&#x27;</span>,MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,MASTER_PASSWORD=<span class="string">&#x27;centos&#x27;</span>,MASTER_PORT=3306,MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000003&#x27;</span>,MASTER_LOG_POS=245;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>4.查看SLAVE STATUS;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 10</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 245</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line"><span class="comment">#此处信息已经改为正确</span></span><br></pre></td></tr></table></figure>

<p>5.重新启动线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>6.再次查看SLAVE STATUS;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 10</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 7384     <span class="comment">#已经有数据复制过来了</span></span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 7668</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line"><span class="comment">#IO和SQL线程已经启动</span></span><br></pre></td></tr></table></figure>

<p>7.查看下从节点内的库是否已经同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |          <span class="comment">#hellodb库已经从主节点中复制过来了</span></span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>其他说明：<br>如果生产中，发生主从节点之间的数据偏差较大并且迟迟不能同步，可以考虑将从服务器全部清除从新配置从服务器。具体配置方法可以参考<a href="https://blog.51cto.com/11886307/2390636">https://blog.51cto.com/11886307/2390636</a></p>
<hr>
<h2 id="关于sql-slave-skip-counter的使用方法"><a href="#关于sql-slave-skip-counter的使用方法" class="headerlink" title="关于sql_slave_skip_counter的使用方法"></a>关于sql_slave_skip_counter的使用方法</h2><p>当发生主键冲突时，从服务器会卡在出错的位置不再进行服务，此种错误一般会出现在主主复制或者从服务器已经占用了某条记录的情况下，此时可以使用此选项来忽略错误。</p>
<h3 id="构建错误"><a href="#构建错误" class="headerlink" title="构建错误"></a>构建错误</h3><p>此处继续沿用刚才的主从复制环境  </p>
<p>1.在从服务器上创建一条记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; INSERT hellodb.teachers VALUE (5,<span class="string">&#x27;Li Xiaolong&#x27;</span>,30,<span class="string">&#x27;M&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>2.在主服务器上也创建一条主键相同的记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; INSERT hellodb.teachers VALUE (5,<span class="string">&#x27;Xiao Yan&#x27;</span>,20,<span class="string">&#x27;M&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>3.返回从节点查看SLAVE STATUS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 10</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 7576</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 7668</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 1062</span><br><span class="line">                   Last_Error: Could not execute Write_rows event on table hellodb.teachers; Duplicate entry <span class="string">&#x27;5&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span>, Error_code: 1062; handler error HA_ERR_FOUND_DUPP_KEY; the event<span class="string">&#x27;s master log mysql-bin.000003, end_log_pos 7549</span></span><br><span class="line"><span class="string">                 Skip_Counter: 0</span></span><br><span class="line"><span class="string">          Exec_Master_Log_Pos: 7384</span></span><br><span class="line"><span class="string">              Relay_Log_Space: 8156</span></span><br><span class="line"><span class="string">              Until_Condition: None</span></span><br><span class="line"><span class="string">               Until_Log_File:</span></span><br><span class="line"><span class="string">                Until_Log_Pos: 0</span></span><br><span class="line"><span class="string">           Master_SSL_Allowed: No</span></span><br><span class="line"><span class="string">           Master_SSL_CA_File:</span></span><br><span class="line"><span class="string">           Master_SSL_CA_Path:</span></span><br><span class="line"><span class="string">              Master_SSL_Cert:</span></span><br><span class="line"><span class="string">            Master_SSL_Cipher:</span></span><br><span class="line"><span class="string">               Master_SSL_Key:</span></span><br><span class="line"><span class="string">        Seconds_Behind_Master: NULL</span></span><br><span class="line"><span class="string">Master_SSL_Verify_Server_Cert: No</span></span><br><span class="line"><span class="string">                Last_IO_Errno: 0</span></span><br><span class="line"><span class="string">                Last_IO_Error:</span></span><br><span class="line"><span class="string">               Last_SQL_Errno: 1062</span></span><br><span class="line"><span class="string">               Last_SQL_Error: Could not execute Write_rows event on table hellodb.teachers; Duplicate entry &#x27;</span>5<span class="string">&#x27; for key &#x27;</span>PRIMARY<span class="string">&#x27;, Error_code: 1062; handler error HA_ERR_FOUND_DUPP_KEY; the event&#x27;</span>s master <span class="built_in">log</span> mysql-bin.000003, end_log_pos 7549</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>4.从节点已经出错，在主节点继续添加记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; INSERT hellodb.teachers VALUE (6,<span class="string">&#x27;Xiao Xuner&#x27;</span>,20,<span class="string">&#x27;M&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>5.此时从节点已经不会再继续从主节点复制信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SELECT * FROM hellodb.teachers WHERE tid&gt;4;</span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">| TID | Name        | Age | Gender |</span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">|   5 | Li Xiaolong |  30 | M      |   <span class="comment">#此为刚才从节点添加的记录</span></span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h3><p>1.使用sql_slave_skip_counter变量忽略错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SET GLOBAL sql_slave_skip_counter=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>2.停止线程并重新启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; STOP SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>3.查看slave status状态，此时已经没有报错的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 10</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 7770</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000003</span><br><span class="line">                Relay_Log_Pos: 529</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 7770</span><br><span class="line">              Relay_Log_Space: 8634</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>4.在从服务器上查看teachers表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SELECT * FROM hellodb.teachers WHERE tid&gt;4;</span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">| TID | Name        | Age | Gender |</span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">|   5 | Li Xiaolong |  30 | M      |</span><br><span class="line">|   6 | Xiao Xuner  |  20 | M      |    <span class="comment">#此时刚才在主节点插入的6号记录已经复制过来</span></span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mariadb二进制安装</title>
    <url>/2019/04/17/MySQL/MySQL%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/MySQL%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>MySQL支持YUM安装，但是很多企业内不使用YUM安装，因为YUM源内所带有的MySQL数据库版本偏老，而且安装完毕后其默认路径并不符合我们的生产需要。所以MySQL安装通常会使用源码编译或二进制安装。</p>
<span id="more"></span>

<h2 id="Mariadb二进制安装"><a href="#Mariadb二进制安装" class="headerlink" title="Mariadb二进制安装"></a>Mariadb二进制安装</h2><p>创建mysql用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># useradd -r mysql</span></span><br></pre></td></tr></table></figure>

<p>下载Mariadb二进制包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget https://mirrors.tuna.tsinghua.edu.cn/mariadb//mariadb-10.3.17/bintar-linux-systemd-x86_64/mariadb-10.3.17-linux-systemd-x86_64.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>解压文件到/usr/local目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># tar -xf mariadb-10.3.17-linux-systemd-x86_64.tar.gz -C mariadb-10.3.17-linux-systemd-x86_64</span></span><br></pre></td></tr></table></figure>

<p>为解压后的二进制安装包创建一个软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># ln -sv mariadb-10.3.17-linux-systemd-x86_64 mysql</span></span><br></pre></td></tr></table></figure>

<p>修改二进制安装目录的属主和数组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将二进制安装包内的所有文件的属主和属组改为mysql</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># chown -R mysql.mysql mysql</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># chown -R mysql.mysql mariadb-10.3.17-linux-systemd-x86_64</span></span><br></pre></td></tr></table></figure>

<p>创建MySQL数据目录，修改属主并设置安全权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># mkdir -p /data/mysql</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># chown -R mysql.mysql /data/mysql</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># chmod -R 700 /data/mysql</span></span><br></pre></td></tr></table></figure>

<p>初始化数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># scripts/mysql_install_db --datadir=/data/mysql --user=mysql</span></span><br></pre></td></tr></table></figure>

<p>从二进制安装包内复制配置文件模板</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># cd support-files        #配置文件模板在此路径内</span></span><br><span class="line">[root@localhost support-files]<span class="comment"># mkdir /etc/mysql    #创建配置文件目录</span></span><br><span class="line">[root@localhost support-files]<span class="comment"># cp my-large.cnf /etc/mysql/my.cnf   #复制配置文件</span></span><br></pre></td></tr></table></figure>

<p>对配置文件做修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost support-files]<span class="comment"># vim /etc/mysql/my.cnf</span></span><br><span class="line">...以上省略...</span><br><span class="line">[mysqld]        <span class="comment">#在mysqld字段中添加一行指定MySQL的数据库目录位置</span></span><br><span class="line">datadir         = /data/mysql</span><br></pre></td></tr></table></figure>

<p>为MySQL添加PATH环境变量并读取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost support-files]<span class="comment"># echo &quot;export PATH=/usr/local/mysql/bin:\$PATH&quot; &gt; /etc/profile.d/mysql.sh</span></span><br><span class="line">[root@localhost support-files]<span class="comment"># source /etc/profile.d/mysql.sh</span></span><br></pre></td></tr></table></figure>

<p>复制服务启动脚本到相应目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost support-files]<span class="comment"># cp mysql.server /etc/rc.d/init.d/mysqld</span></span><br></pre></td></tr></table></figure>

<p>启动mysqld服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost support-files]<span class="comment"># service mysqld start</span></span><br></pre></td></tr></table></figure>

<p>验证3306端口是否启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -tnl | grep 3306</span></span><br><span class="line">LISTEN   0         80                        *:3306                   *:*</span><br></pre></td></tr></table></figure>

<p>使用MySQL工具连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql</span></span><br><span class="line">mysql: error <span class="keyword">while</span> loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment">#连接报错，没有找到libncurses.so.5这个文件，由于当前系统为rhel 8.0，</span></span><br><span class="line"><span class="comment">#libncurses.so.5已经变为libncurses.so.6。需要对其创建一个名为libncurses.so.5</span></span><br><span class="line"><span class="comment">#的软连接指向libncurses.so.6</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ln -s /usr/lib64/libncurses.so.6 /usr/lib64/libncurses.so.5</span></span><br></pre></td></tr></table></figure>

<p>使用MySQL工具再次连接数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql</span></span><br><span class="line">mysql: error <span class="keyword">while</span> loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment">#依旧报错，解决方法同上一部一样</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln -s /usr/lib64/libtinfo.so.6 /usr/lib64/libtinfo.so.6</span></span><br></pre></td></tr></table></figure>

<p>再次登录MySQL成功登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 11</span><br><span class="line">Server version: 10.3.17-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上为Mariadb 10.3.17的二进制安装方法</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL半同步复制</title>
    <url>/2019/04/10/MySQL/MySQL%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%A4%8D%E5%88%B6/MySQL%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>MySQL的复制方法有异步复制，同步复制，半同步复制。</p>
<p>异步复制：是当用户写入一条记录时，先将数据写入到主节点，然后回复用户一个写入成功的消息，然后慢慢的将数据复制到其背后的其他从节点，这样的好处是效率比较高，但是缺点也是非常明显，主服务器和从服务器的延迟过大并且主服务器突然发生异常，此时就会造成数据的丢失。  </p>
<p>同步复制：是当用户写入一条记录时，主节点将数据写入数据库，然后将数据复制给其后面的其他从节点，当所有的从节点返回数据复制成功后，主节点再回复用户数据接入成功的消息，这样做的好处是，确保了数据的安全性，但损失了效率。  </p>
<span id="more"></span>

<p>半同步复制：是间于同步复制和异步复制之间的一种复制方法，他的工作原理是：当用户执行写操作时，主节点会将数据发送给其后面的其他从节点，只要有一个从节点返回复制成功的消息，主节点就直接返回写入成功，如果主节点背后的从节点迟迟不返回复制成功消息，此时就会有一个超时时长，一旦达到超时时长，主节点就先返回消息告诉用户复制成功，而后将数据继续给从节点复制。</p>
<h2 id="半同步复制的配置方法"><a href="#半同步复制的配置方法" class="headerlink" title="半同步复制的配置方法"></a>半同步复制的配置方法</h2><p>半同步复制要实现方法  </p>
<p>主服务器上安装semi_sync_master.so的插件，并启用，设置好超时的时长</p>
<p>从服务器上安装semi_sync_slave.so的插件，并启用</p>
<p>以下以两台主机来演示半同步复制的配置方法</p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">ip</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Master</td>
<td align="left">192.168.73.110</td>
</tr>
<tr>
<td align="left">Slave</td>
<td align="left">192.168.73.111</td>
</tr>
</tbody></table>
<h3 id="一、配置主从"><a href="#一、配置主从" class="headerlink" title="一、配置主从"></a>一、配置主从</h3><p>要实现MySQL的半同步复制首先要将将MySQL配置为主从模式</p>
<h4 id="Master配置"><a href="#Master配置" class="headerlink" title="Master配置"></a>Master配置</h4><p>1.修改MySQL配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log-bin</span><br><span class="line">binlog-format=row</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure>

<p>2.启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># systemctl  start mariadb</span></span><br></pre></td></tr></table></figure>

<p>3.查看二进制日志位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;SHOW MASTER LOGS;&quot;</span></span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| Log_name           | File_size |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| mariadb-bin.000001 |       245 |</span><br><span class="line">+--------------------+-----------+</span><br></pre></td></tr></table></figure>

<p>4.创建一个用户用来做主从复制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;GRANT REPLICATION SLAVE ON *.* TO &#x27;repluser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;centos&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Slave配置"><a href="#Slave配置" class="headerlink" title="Slave配置"></a>Slave配置</h4><p>1.修改MySQL配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log-bin</span><br><span class="line">binlog-format=row</span><br><span class="line">server-id=2</span><br><span class="line">read_only</span><br></pre></td></tr></table></figure>

<p>2.启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>3.写入CHANGE MASTER TO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;192.168.73.110&#x27;</span>, MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,MASTER_PASSWORD=<span class="string">&#x27;centos&#x27;</span>,MASTER_PORT=3306,MASTER_LOG_FILE=<span class="string">&#x27;mariadb-bin.000001&#x27;</span>,MASTER_LOG_POS=245;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>4.启动复制线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>5.查看slave状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mariadb-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 521</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000003</span><br><span class="line">                Relay_Log_Pos: 531</span><br><span class="line">        Relay_Master_Log_File: mariadb-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>1.Master导入数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql &lt; hellodb_innodb.sql</span></span><br><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<p>2.Slave查看库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<p>主从同步配置成功，接下来配置半同步</p>
<h3 id="二、配置半同步"><a href="#二、配置半同步" class="headerlink" title="二、配置半同步"></a>二、配置半同步</h3><p>配置半同步前先将主从复制关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># mysql -e &quot;STOP SLAVE;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Master节点配置"><a href="#Master节点配置" class="headerlink" title="Master节点配置"></a>Master节点配置</h4><p>1.在Master节点上安装semisync_master.so的插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; INSTALL PLUGIN rpl_semi_sync_master SONAME <span class="string">&#x27;semisync_master.so&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>2.查看插件是否已经安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW GLOBAL VARIABLES LIKE <span class="string">&#x27;%semi%&#x27;</span>;</span><br><span class="line">+------------------------------------+-------+</span><br><span class="line">| Variable_name                      | Value |</span><br><span class="line">+------------------------------------+-------+</span><br><span class="line">| rpl_semi_sync_master_enabled       | OFF   |          <span class="comment">#插件是否启用</span></span><br><span class="line">| rpl_semi_sync_master_timeout       | 10000 |          <span class="comment">#半同步的超时时长</span></span><br><span class="line">| rpl_semi_sync_master_trace_level   | 32    |          <span class="comment">#用于开启半同步复制模式时的调试级别</span></span><br><span class="line">| rpl_semi_sync_master_wait_no_slave | ON    |          <span class="comment">#是否允许master 每个事物提交后都要等待slave的receipt信号</span></span><br><span class="line">+------------------------------------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>3.修改配置文件启用插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log-bin</span><br><span class="line">binlog-format=row</span><br><span class="line">server-id=1</span><br><span class="line">rpl_semi_sync_master_enabled                    <span class="comment">#启用插件</span></span><br></pre></td></tr></table></figure>

<p>4.重启服务，查看插件是否启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># systemctl restart mariadb</span></span><br><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;SHOW VARIABLES LIKE &#x27;%semi%&#x27;&quot;;</span></span><br><span class="line">+------------------------------------+-------+</span><br><span class="line">| Variable_name                      | Value |</span><br><span class="line">+------------------------------------+-------+</span><br><span class="line">| rpl_semi_sync_master_enabled       | ON    |  <span class="comment">#已经启动</span></span><br><span class="line">| rpl_semi_sync_master_timeout       | 10000 |</span><br><span class="line">| rpl_semi_sync_master_trace_level   | 32    |</span><br><span class="line">| rpl_semi_sync_master_wait_no_slave | ON    |</span><br><span class="line">+------------------------------------+-------+</span><br></pre></td></tr></table></figure>

<p>5.设置超时时长</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SET GLOBAL rpl_semi_sync_master_timeout=3000;     <span class="comment">#此处为了方便后续测试将超时时间设置为3秒</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="Slave节点配置"><a href="#Slave节点配置" class="headerlink" title="Slave节点配置"></a>Slave节点配置</h4><p>1.在Slave节点上安装semisync_slave.so插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="string">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>2.查看插件是否已经安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW VARIABLES LIKE <span class="string">&quot;%semi%&quot;</span>;</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| rpl_semi_sync_slave_enabled     | ON    |</span><br><span class="line">| rpl_semi_sync_slave_trace_level | 32    |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>3.修改配置文件启用插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log-bin</span><br><span class="line">binlog-format=row</span><br><span class="line">server-id=2</span><br><span class="line">read_only</span><br><span class="line">rpl_semi_sync_slave_enabled</span><br></pre></td></tr></table></figure>

<p>4.重启服务，查看插件是否启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># mysql -e &quot;SHOW VARIABLES LIKE &#x27;%semi%&#x27;&quot;;</span></span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| rpl_semi_sync_slave_enabled     | ON    |</span><br><span class="line">| rpl_semi_sync_slave_trace_level | 32    |</span><br><span class="line">+---------------------------------+-------+</span><br></pre></td></tr></table></figure>

<p>5.启动复制线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># mysql -e &quot;START SLAVE&quot;;</span></span><br></pre></td></tr></table></figure>

<h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><p>1.查看主节点的状态，由于没有复制过数据所有数据都为空</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW GLOBAL STATUS LIKE <span class="string">&#x27;%semi%&#x27;</span>;</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Variable_name                              | Value |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">| Rpl_semi_sync_master_clients               | 1     |</span><br><span class="line">| Rpl_semi_sync_master_net_avg_wait_time     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_wait_time         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_net_waits             | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_times              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_no_tx                 | 0     |</span><br><span class="line">| Rpl_semi_sync_master_status                | ON    |</span><br><span class="line">| Rpl_semi_sync_master_timefunc_failures     | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_avg_wait_time      | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_wait_time          | 0     |</span><br><span class="line">| Rpl_semi_sync_master_tx_waits              | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |</span><br><span class="line">| Rpl_semi_sync_master_wait_sessions         | 0     |</span><br><span class="line">| Rpl_semi_sync_master_yes_tx                | 0     |</span><br><span class="line">+--------------------------------------------+-------+</span><br><span class="line">14 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>2.查看从节点的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW GLOBAL STATUS LIKE <span class="string">&#x27;%semi%&#x27;</span>;</span><br><span class="line">+----------------------------+-------+</span><br><span class="line">| Variable_name              | Value |</span><br><span class="line">+----------------------------+-------+</span><br><span class="line">| Rpl_semi_sync_slave_status | ON    |</span><br><span class="line">+----------------------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>1.将从节点网路掐断</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># ifdown ens33</span></span><br></pre></td></tr></table></figure>

<p>2.在主节点添加一条记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; INSERT hellodb.teachers VALUE (5,<span class="string">&#x27;Tang San&#x27;</span>,20,<span class="string">&#x27;M&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected (3.00 sec)</span><br></pre></td></tr></table></figure>

<p>由于无法复制到从服务器，3秒后超时回复用户写入成功</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的变量和选项</title>
    <url>/2019/04/17/MySQL/MySQL%E5%8F%98%E9%87%8F%E5%92%8C%E9%80%89%E9%A1%B9/MySQL%E5%8F%98%E9%87%8F%E5%92%8C%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="MySQL的系统数据库"><a href="#MySQL的系统数据库" class="headerlink" title="MySQL的系统数据库"></a>MySQL的系统数据库</h2><p>MySQL刚安装完毕时，默认带有MySQL数据库，performance_scema数据库和information_schema数据库这3个数据库。</p>
<ol>
<li>MySQL是MySQL的核心数据库</li>
<li>performance_scema是MySQL5.5之后新增的数据库，主要用于收集数据库服务器性能参数</li>
<li>information_schema是MySQL5.0之后产生的一个虚拟的数据库，物理上并不存在。</li>
</ol>
<h2 id="MySQL服务器配置"><a href="#MySQL服务器配置" class="headerlink" title="MySQL服务器配置"></a>MySQL服务器配置</h2><p>在MySQL数据库运行时，是跑了一个mysqld的进程，他实质上是由mysqld_safe来调用的，mysql_safe是一个脚本。</p>
<h2 id="mysqld选项、服务器系统变量和服务器状态变量"><a href="#mysqld选项、服务器系统变量和服务器状态变量" class="headerlink" title="mysqld选项、服务器系统变量和服务器状态变量"></a>mysqld选项、服务器系统变量和服务器状态变量</h2><h3 id="mysqld选项"><a href="#mysqld选项" class="headerlink" title="mysqld选项"></a>mysqld选项</h3><p>mysqld选项就是在进程中mysqld后面所跟的各种参数，这些选项都能存放在服务器的配置文件中。</p>
<p>MySQL运行时所使用的选项查看方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用ps -aux | grep mysqld 过滤出mysql的进程，在/app/mysql/bin/mysqld后面所带的各种参数就是MySQL的选项。</span></span><br><span class="line">[root@localhost Packages]<span class="comment"># ps -aux | grep mysqld</span></span><br><span class="line">mysql      9206  0.1  3.5 2275296 144752 ?      Sl   16:09   0:01 /app/mysql/bin/mysqld --basedir=/app/mysql --datadir=/data/mysql --plugin-dir=/app/mysql/lib/plugin --user=mysql --log-error=/var/<span class="built_in">log</span>/mariadb/mariadb.log --pid-file=/data/mysql/localhost.localdomain.pid --socket=/data/mysql/mysql.sock --port=3306</span><br></pre></td></tr></table></figure>

<p>msyqld的选项可以通过命令查询，所列出的为mysqld所支持的选项的默认值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --<span class="built_in">help</span> -v  <span class="comment">#注意mysqld这个命令不在PATH路径中需要使用 ps -aux | grep mysqld 找出路径。</span></span><br></pre></td></tr></table></figure>

<h3 id="MySQL的服务器系统变量"><a href="#MySQL的服务器系统变量" class="headerlink" title="MySQL的服务器系统变量"></a>MySQL的服务器系统变量</h3><p>变量可以在MySQL中使用show variables来进行查看，有些变量即时选项又是变量，变量又分为全局性变量和会话级变量，全局性变量影响了所有登陆的用户，会话级只影响当前的登陆的用户。</p>
<p>详细可以参考mariadb的官方文档：<a href="https://mariadb.com/kb/en/library/full-list-of-mariadb-options-system-and-status-variables/">https://mariadb.com/kb/en/library/full-list-of-mariadb-options-system-and-status-variables/</a></p>
<p>获取系统变量的方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取全局性的变量</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW GLOBAL VARIABLES;</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取会话级的变量</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW VARIABLES;</span><br></pre></td></tr></table></figure>

<p>变量的设置方法：</p>
<p>变量可以通过在会话窗口中使用 SET 命令进行设置，全局变量和会话级别的变量设置方法不同，具体使用方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置全局性的变量</span></span><br><span class="line">MariaDB [(none)]&gt; SET GLOBAL system_var_name=value;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置会话级的变量</span></span><br><span class="line">MariaDB [(none)]&gt; SET system_var_name=value;</span><br></pre></td></tr></table></figure>

<h3 id="系统的状态变量"><a href="#系统的状态变量" class="headerlink" title="系统的状态变量"></a>系统的状态变量</h3><p>系统的状态变量又称为系统的只读变量，里面存放的是系统当前的状态信息</p>
<p>系统状态变量查看方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW STATUS LIKE <span class="string">&#x27;value_name&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>查看系统的启动时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW STATUS LIKE <span class="string">&#x27;uptime&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Uptime        | 2602  |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<h2 id="服务器相关的一些常用选项、变量和状态变量"><a href="#服务器相关的一些常用选项、变量和状态变量" class="headerlink" title="服务器相关的一些常用选项、变量和状态变量"></a>服务器相关的一些常用选项、变量和状态变量</h2><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">skip_name_resolve       <span class="comment">#禁止把ip地址反向解析成名称建议添加</span></span><br></pre></td></tr></table></figure>

<h3 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h3><p>最大连接数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max_connections         <span class="comment">#最大连接数</span></span><br></pre></td></tr></table></figure>

<p>服务器变量SQL_MODE</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SQL_MODE:</span><br><span class="line">    NO_AUTO_CREATE_USER         <span class="comment">#禁止授权创建密码为空的用户</span></span><br><span class="line">    NO_ZERO_DATA                <span class="comment">#在严格模式，不允许使用&#x27;0000-00-00&#x27;的时间</span></span><br><span class="line">    ONLY_RULL_GROUP_BY          <span class="comment">#对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么将任务这个SQL是不合法的</span></span><br><span class="line">    NO_BACKSLASH_ESCAPES        <span class="comment">#反斜杠&quot;\&quot;作为普通字符而不是转义字符</span></span><br><span class="line">    PIPES_AS_CONCAT             <span class="comment">#将&quot;||&quot;视为连接操作符而非“或运算符”</span></span><br><span class="line">    TRADITIONAL                 <span class="comment">#当插入表的数据长度超长时不是截断，而是报错</span></span><br></pre></td></tr></table></figure>

<h3 id="常用状态变量"><a href="#常用状态变量" class="headerlink" title="常用状态变量"></a>常用状态变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Threads_connected               <span class="comment">#多少线程被连接</span></span><br><span class="line">Threads_created                 <span class="comment">#多少线程被创建</span></span><br><span class="line">Threads_running                 <span class="comment">#多少线程正在运行</span></span><br><span class="line">com_select                      <span class="comment">#当前数据库的查询次数</span></span><br><span class="line">com_insert                      <span class="comment">#表的添加次数</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL安全加固</title>
    <url>/2019/04/17/MySQL/MySQL%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/MySQL%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</url>
    <content><![CDATA[<p>新安装的MySQL没有经过安全加固时，管理员的账户是空口令，匿名的账号也能登录数据库，此时是非常不安全的  </p>
<span id="more"></span>
<h3 id="匿名用户登录MySQL"><a href="#匿名用户登录MySQL" class="headerlink" title="匿名用户登录MySQL"></a>匿名用户登录MySQL</h3><p>当前MySQL数据库为新安装的数据库，所以使用匿名用户可以进行登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># mysql -u 1234               #使用匿名用户登录MySQL</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 19</span><br><span class="line">Server version: 10.2.23-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; select user();            <span class="comment">#查看当前的登录用户</span></span><br><span class="line">+----------------+</span><br><span class="line">| user()         |</span><br><span class="line">+----------------+</span><br><span class="line">| 1234@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure>

<p>不过好在匿名用户的权限不大无法查看到数据库中的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases;           <span class="comment">#查看数据库中的所有库</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>安全起见，新安装的数据库需要进行安全加固</p>
<h3 id="数据库的安全加固"><a href="#数据库的安全加固" class="headerlink" title="数据库的安全加固"></a>数据库的安全加固</h3><p>MySQL安装完毕后需要执行mysql_secure_installaion命令来进行安全的加固</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql_secure_installation</span></span><br><span class="line"><span class="comment">#输入旧的root密码</span></span><br><span class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none):</span><br><span class="line"><span class="comment">#是否设置root密码</span></span><br><span class="line">Set root password? [Y/n]</span><br><span class="line">New password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"><span class="comment">#删除匿名用户</span></span><br><span class="line">Remove anonymous users? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"><span class="comment">#禁止root用户远程登陆</span></span><br><span class="line">Disallow root login remotely? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"><span class="comment">#是否删除测试用的数据库</span></span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? [Y/n] y</span><br><span class="line"> - Dropping <span class="built_in">test</span> database...</span><br><span class="line"> ... Success!</span><br><span class="line"> - Removing privileges on <span class="built_in">test</span> database...</span><br><span class="line"> ... Success!</span><br><span class="line"><span class="comment">#是否重新加载权限表</span></span><br><span class="line">Reload privilege tables now? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">All <span class="keyword">done</span>!  If you<span class="string">&#x27;ve completed all of the above steps, your MariaDB</span></span><br><span class="line"><span class="string">installation should now be secure.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Thanks for using MariaDB!</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL客户端简单使用</title>
    <url>/2019/04/17/MySQL/MySQL%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/MySQL%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本节主要说明MySQL的客户端的使用方式</p>
<span id="more"></span>
<h3 id="MySQL账号"><a href="#MySQL账号" class="headerlink" title="MySQL账号"></a>MySQL账号</h3><p>mysql用户账号由两部分组成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;USERNAME&#x27;</span>@<span class="string">&#x27;HOST&#x27;</span>  </span><br></pre></td></tr></table></figure>

<p>USERNAME：用户名</p>
<p>HOST：限制此用户可以通过哪些远程主机连接MySQL服务器  </p>
<ul>
<li>HOST支持使用通配符”%”，”_”  </li>
<li>%匹配任意长度的任意字符，如192.168.0.0/255.255.0.0 或172.16.%.%  </li>
<li>_匹配任意长度的单个字符。</li>
</ul>
<h3 id="MySQL的登录"><a href="#MySQL的登录" class="headerlink" title="MySQL的登录"></a>MySQL的登录</h3><p>MySQL在登录时需要使用-u指定账号，-p指定密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># mysql -uroot@localhost -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 15</span><br><span class="line">Server version: 10.2.23-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>

<p>由于MySQL刚安装好，管理员账号是没有密码的，所以不需要密码也可以登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># mysql -uroot</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 16</span><br><span class="line">Server version: 10.2.23-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>

<p>不光没密码能登陆，连账号都不输入也能登录，MySQL默认使用root登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 17</span><br><span class="line">Server version: 10.2.23-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br></pre></td></tr></table></figure>

<h3 id="查看当前MySQL登录用户"><a href="#查看当前MySQL登录用户" class="headerlink" title="查看当前MySQL登录用户"></a>查看当前MySQL登录用户</h3><p>登录MySQL后，使用SELECT USER();可以查看当前MySQL的登录用户是谁。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SELECT USER();</span><br><span class="line">+----------------+</span><br><span class="line">| user()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |              <span class="comment">#root用户</span></span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看MySQL数据库版本"><a href="#查看MySQL数据库版本" class="headerlink" title="查看MySQL数据库版本"></a>查看MySQL数据库版本</h3><p>登录MySQL后，使用SELECT VERSION();可以查看当前MySQL数据库的版本号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SELECT VERSION();</span><br><span class="line">+---------------------+</span><br><span class="line">| version()           |</span><br><span class="line">+---------------------+</span><br><span class="line">| 10.2.23-MariaDB-log |         <span class="comment">#此为数据库的版本号</span></span><br><span class="line">+---------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看MySQL客户端使用帮助"><a href="#查看MySQL客户端使用帮助" class="headerlink" title="查看MySQL客户端使用帮助"></a>查看MySQL客户端使用帮助</h3><p>登录MySQL后使用\h可以查看MySQL客户端的使用帮助</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; \h</span><br><span class="line"></span><br><span class="line">General information about MariaDB can be found at</span><br><span class="line">http://mariadb.org</span><br><span class="line"></span><br><span class="line">List of all MySQL commands:</span><br><span class="line">Note that all text commands must be first on line and end with <span class="string">&#x27;;&#x27;</span></span><br><span class="line">?         (\?) Synonym <span class="keyword">for</span> `<span class="built_in">help</span><span class="string">&#x27;.</span></span><br><span class="line"><span class="string">clear     (\c) Clear the current input statement.</span></span><br><span class="line"><span class="string">connect   (\r) Reconnect to the server. Optional arguments are db and host.</span></span><br><span class="line"><span class="string">delimiter (\d) Set statement delimiter.</span></span><br><span class="line"><span class="string">edit      (\e) Edit command with $EDITOR.</span></span><br><span class="line"><span class="string">ego       (\G) Send command to mysql server, display result vertically.</span></span><br><span class="line"><span class="string">exit      (\q) Exit mysql. Same as quit.</span></span><br><span class="line"><span class="string">go        (\g) Send command to mysql server.</span></span><br><span class="line"><span class="string">help      (\h) Display this help.</span></span><br><span class="line"><span class="string">nopager   (\n) Disable pager, print to stdout.</span></span><br><span class="line"><span class="string">notee     (\t) Don&#x27;</span>t write into outfile.</span><br><span class="line">pager     (\P) Set PAGER [to_pager]. Print the query results via PAGER.</span><br><span class="line"><span class="built_in">print</span>     (\p) Print current <span class="built_in">command</span>.</span><br><span class="line">prompt    (\R) Change your mysql prompt.</span><br><span class="line">quit      (\q) Quit mysql.</span><br><span class="line"><span class="built_in">rehash</span>    (\<span class="comment">#) Rebuild completion hash.</span></span><br><span class="line"><span class="built_in">source</span>    (\.) Execute an SQL script file. Takes a file name as an argument.</span><br><span class="line">status    (\s) Get status information from the server.</span><br><span class="line">system    (\!) Execute a system shell <span class="built_in">command</span>.</span><br><span class="line">tee       (\T) Set outfile [to_outfile]. Append everything into given outfile.</span><br><span class="line">use       (\u) Use another database. Takes database name as argument.</span><br><span class="line">charset   (\C) Switch to another charset. Might be needed <span class="keyword">for</span> processing binlog with multi-byte charsets.</span><br><span class="line">warnings  (\W) Show warnings after every statement.</span><br><span class="line">nowarning (\w) Don<span class="string">&#x27;t show warnings after every statement.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For server side help, type &#x27;</span><span class="built_in">help</span> contents<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="显示用户的状态信息"><a href="#显示用户的状态信息" class="headerlink" title="显示用户的状态信息"></a>显示用户的状态信息</h3><p>在登录后使用STATUS;可以显示当前登录用户的状态信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; status</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 15.1 Distrib 10.2.23-MariaDB, <span class="keyword">for</span> Linux (x86_64) using readline 5.1</span><br><span class="line"></span><br><span class="line">Connection id:        17</span><br><span class="line">Current database:</span><br><span class="line">Current user:        root@localhost</span><br><span class="line">SSL:            Not <span class="keyword">in</span> use</span><br><span class="line">Current pager:        stdout</span><br><span class="line">Using outfile:        <span class="string">&#x27;&#x27;</span></span><br><span class="line">Using delimiter:    ;</span><br><span class="line">Server:            MariaDB</span><br><span class="line">Server version:        10.2.23-MariaDB-log MariaDB Server</span><br><span class="line">Protocol version:    10</span><br><span class="line">Connection:        Localhost via UNIX socket</span><br><span class="line">Server characterset:    latin1</span><br><span class="line">Db     characterset:    latin1</span><br><span class="line">Client characterset:    utf8</span><br><span class="line">Conn.  characterset:    utf8</span><br><span class="line">UNIX socket:        /tmp/mysql.sock         <span class="comment">#此为本机连接的socket文件，由于是本机连接所以不走网路。</span></span><br><span class="line">Uptime:            1 hour 31 min 28 sec</span><br><span class="line"></span><br><span class="line">Threads: 8  Questions: 24  Slow queries: 0  Opens: 17  Flush tables: 1  Open tables: 11  Queries per second avg: 0.004</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure>

<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>登录数据库后，使用SHOW DATABASES;可以查看MySQL中所有的数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;       <span class="comment">#查看当前数据库中的所有库</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>数据库在磁盘上也是以文件的方式存放的，yum安装的数据库默认存放在/var/lib/mysql目录中，其中information_schema存在于内存中</p>
<h3 id="指定使用哪个数据库"><a href="#指定使用哪个数据库" class="headerlink" title="指定使用哪个数据库"></a>指定使用哪个数据库</h3><p>使用USE加上数据库名字，可以指定使用哪一个数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; USE mysql     <span class="comment">#使用mysql库</span></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt;        <span class="comment">#此时已经切换至mysql数据库</span></span><br></pre></td></tr></table></figure>

<h3 id="查看当前数据库中的表"><a href="#查看当前数据库中的表" class="headerlink" title="查看当前数据库中的表"></a>查看当前数据库中的表</h3><p>在选中要使用的数据库后可以使用SHOW TABLES;来查看当前库中的所有表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; show tables;</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+---------------------------+</span><br><span class="line">| column_stats              |</span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| event                     |</span><br><span class="line">| func                      |</span><br><span class="line">| general_log               |</span><br><span class="line">| gtid_slave_pos            |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| host                      |</span><br><span class="line">| index_stats               |</span><br><span class="line">| innodb_index_stats        |</span><br><span class="line">| innodb_table_stats        |</span><br><span class="line">| plugin                    |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| proxies_priv              |</span><br><span class="line">| roles_mapping             |</span><br><span class="line">| servers                   |</span><br><span class="line">| slow_log                  |</span><br><span class="line">| table_stats               |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+---------------------------+</span><br><span class="line">30 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="查看表的字段"><a href="#查看表的字段" class="headerlink" title="查看表的字段"></a>查看表的字段</h3><p>查看某表中的所有字段，可以使用DESC命令加上所要查看的表的表名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; DESC user;     <span class="comment">#查看user表上的所有字段。</span></span><br><span class="line">+------------------------+-----------------------------------+------+-----+----------+-------+</span><br><span class="line">| Field                  | Type                              | Null | Key | Default  | Extra |</span><br><span class="line">+------------------------+-----------------------------------+------+-----+----------+-------+</span><br><span class="line">| Host                   | char(60)                          | NO   | PRI |          |       |</span><br><span class="line">| User                   | char(80)                          | NO   | PRI |          |       |</span><br><span class="line">| Password               | char(41)                          | NO   |     |          |       |</span><br><span class="line">| Select_priv            | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     | NO   |     | N        |       |</span><br><span class="line">| Insert_priv            | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     | NO   |     | N        |       |</span><br><span class="line">| Update_priv            | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     | NO   |     | N        |       |</span><br><span class="line">| Delete_priv            | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     | NO   |     | N        |       |</span><br><span class="line">| Create_priv            | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     | NO   |     | N        |       |</span><br><span class="line">| Drop_priv              | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     | NO   |     | N        |       |</span><br><span class="line">| Reload_priv            | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     | NO   |     | N        |       |</span><br><span class="line">| Shutdown_priv          | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     | NO   |     | N        |       |</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h3 id="查看表中指定字段的信息"><a href="#查看表中指定字段的信息" class="headerlink" title="查看表中指定字段的信息"></a>查看表中指定字段的信息</h3><p>使用select命令，指定字段的名称和所要查询的表，可以从表中查看所要查看的字段信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; select host,user,password from user;       <span class="comment">#从user表中查看host,user,password这几个字段的信息</span></span><br><span class="line">+-----------------------+------+----------+</span><br><span class="line">| host                  | user | password |</span><br><span class="line">+-----------------------+------+----------+</span><br><span class="line">| localhost             | root |          | <span class="comment">#password为空表示为无密码</span></span><br><span class="line">| localhost.localdomain | root |          |</span><br><span class="line">| 127.0.0.1             | root |          |</span><br><span class="line">| ::1                   | root |          |</span><br><span class="line">| localhost             |      |          | <span class="comment">#user为空表示为匿名用户</span></span><br><span class="line">| localhost.localdomain |      |          |</span><br><span class="line">+-----------------------+------+----------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="MySQL的命令执行方法"><a href="#MySQL的命令执行方法" class="headerlink" title="MySQL的命令执行方法"></a>MySQL的命令执行方法</h3><p>MySQL除了交互式状态下执行命令，还支持非交互式状态下执行命令</p>
<p>使用重定向执行MySQL命令  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat test.sql    #将所有要执行的MySQL命令写入一个文件中</span></span><br><span class="line">SHOW DATABASES;</span><br><span class="line">SELECT USER();</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># mysql &lt; test.sql    #使用重定向将文件导入</span></span><br><span class="line">Database</span><br><span class="line">information_schema</span><br><span class="line">mysql</span><br><span class="line">performance_schema</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">USER()</span><br><span class="line">root@localhost</span><br></pre></td></tr></table></figure>

<p>使用-e选项执行MySQL命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;SELECT USER();&quot;    #使用-e选项后面添加需要执行的MySQL命令</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">+----------------+</span><br><span class="line">| USER()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure>

<p>除了非交互式状态，MySQL还能在交互式状态下使用source调取系统的文件作为命令来使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql       #登陆MySQL</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 16</span><br><span class="line">Server version: 10.3.17-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; <span class="built_in">source</span> test.sql       <span class="comment">#执行source命令，读取本地文件。</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"></span><br><span class="line">+----------------+</span><br><span class="line">| USER()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MySQL的登陆时默认数据库"><a href="#MySQL的登陆时默认数据库" class="headerlink" title="MySQL的登陆时默认数据库"></a>MySQL的登陆时默认数据库</h3><p>MySQL在登陆的时候使用-D 加上数据库名，还可以指定默认的数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#MySQL在登录时默认不会指定任何数据库</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 16</span><br><span class="line">Server version: 10.3.17-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;       <span class="comment">#数据库为none</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用-D选项指定MySQL登录时的默认数据库</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mysql -D mysql      #指定mysql库为登录时的默认库</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 17</span><br><span class="line">Server version: 10.3.17-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt;        <span class="comment">#默认数据库为mysql</span></span><br></pre></td></tr></table></figure>

<h3 id="MySQL的客户端配置文件"><a href="#MySQL的客户端配置文件" class="headerlink" title="MySQL的客户端配置文件"></a>MySQL的客户端配置文件</h3><p>MySQL的客户端配置文件在/etc/my.cnf.d/mysql-clients.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#客户端的相关配置</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/my.cnf.d/mysql-clients.cnf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These groups are read by MariaDB command-line tools</span></span><br><span class="line"><span class="comment"># Use it for options that affect only one utility</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">[mysql_upgrade]</span><br><span class="line"></span><br><span class="line">[mysqladmin]</span><br><span class="line"></span><br><span class="line">[mysqlbinlog]</span><br><span class="line"></span><br><span class="line">[mysqlcheck]</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line"></span><br><span class="line">[mysqlimport]</span><br><span class="line"></span><br><span class="line">[mysqlshow]</span><br><span class="line"></span><br><span class="line">[mysqlslap]</span><br></pre></td></tr></table></figure>

<h3 id="MySQL客户端更改提示符"><a href="#MySQL客户端更改提示符" class="headerlink" title="MySQL客户端更改提示符"></a>MySQL客户端更改提示符</h3><p>MySQL客户端也和linux的客户端一样可以对提示符进行修改，需要在MySQL中使用prompt命令加上相关的参数进行修改  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; prompt \u@[\D \r:\m:\s]</span><br><span class="line">PROMPT <span class="built_in">set</span> to <span class="string">&#x27;\u@[\D \r:\m:\s]&#x27;</span></span><br><span class="line">root@[Wed Sep  4 14:35:22 2019 02:35:22]</span><br></pre></td></tr></table></figure>

<p>在命令行所作的配置只是零时有效，若要长期有效还是需要写入配置文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将修改要修改的内容写入客户端配置文件中</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/my.cnf.d/mysql-clients.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These groups are read by MariaDB command-line tools</span></span><br><span class="line"><span class="comment"># Use it for options that affect only one utility</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">prompt=(\\u@\\h) [\\d]&gt;\\</span><br><span class="line"><span class="comment">#保存后退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#再次登录后观察提示符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 11</span><br><span class="line">Server version: 10.3.17-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">(root@localhost) [(none)]&gt;      <span class="comment">#此时命令提示符变为配置文件中定义的。</span></span><br></pre></td></tr></table></figure>

<p>在登陆时使用–print-defaults查看客户端登陆时默认所带的选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql --print-defaults</span></span><br><span class="line">mysql would have been started with the following arguments:</span><br><span class="line">--prompt=(\u@\h) [\d]&gt;\ --port=3306 --socket=/tmp/mysql.sock --no-auto-rehash</span><br></pre></td></tr></table></figure>

<h3 id="MySQL的服务器端配置文件"><a href="#MySQL的服务器端配置文件" class="headerlink" title="MySQL的服务器端配置文件"></a>MySQL的服务器端配置文件</h3><p>MySQL的服务器端配置文件为类ini格式配置文件</p>
<p>MySQL的配置文件在读取时是有先后顺序的，后读取的配置会将之间的配置进行覆盖，MySQL的配置文件读取数据如下：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/my.cnf                 <span class="comment">#Global选项</span></span><br><span class="line">/etc/mysql/my.cnf           <span class="comment">#Global选项</span></span><br><span class="line">SYSCONFDIR/my.cnf           <span class="comment">#Global选项</span></span><br><span class="line"><span class="variable">$MYSQL_HOME</span>/my.cnf          <span class="comment">#Server-specific 选项</span></span><br><span class="line">--defaults-extra-file=path</span><br><span class="line">~/.my.cnf                   <span class="comment">#User-specific 选项</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库的操作</title>
    <url>/2019/04/18/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>数据库的操作包括数据库的创建，修改及删除。数据库创建时的字符集设定以及数据库创建完毕后默认字符集更改等等。</p>
<span id="more"></span>

<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>创建数据库的命令为CREATE DATABASE，数据库创建时需要设定字符集，默认使用的为latin1，需要将其改为utf8mb4。</p>
<p>命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name</span><br><span class="line">    [create_specification] ...</span><br><span class="line"></span><br><span class="line">create_specification:</span><br><span class="line">    [DEFAULT] CHARACTER SET [=] charset_name    <span class="comment">#设定字符集</span></span><br><span class="line">  | [DEFAULT] COLLATE [=] collation_name</span><br></pre></td></tr></table></figure>

<p>示例一：</p>
<p>创建数据库不指定字符集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个名字为db3308的数据库</span></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE db3308;</span><br><span class="line">Query OK, 1 row affected (0.001 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数据库是否被创建出来</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| db3308             |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.011 sec)</span><br></pre></td></tr></table></figure>

<p>示例二：</p>
<p>创建数据库指定字符集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个名字为db2的数据库并指定字符集为utf8mb4</span></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE db2 CHARACTER SET utf8mb4;</span><br><span class="line">Query OK, 1 row affected (0.002 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数据库是否被创建</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| db2                |</span><br><span class="line">| db3308             |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.012 sec)</span><br></pre></td></tr></table></figure>

<h3 id="数据库的字符集"><a href="#数据库的字符集" class="headerlink" title="数据库的字符集"></a>数据库的字符集</h3><p>MySQL在创建数据库时可以指定数据库的字符集，不通的字符集可以支持不同的语言。MySQL中可用字符集可以通过SHOW CHARACTER SET进行查看，默认创建出的数据库字符集为latin1，目前最新的字符集已经可以支持表情符号，所以目前推荐设计数据库时使用的字符集为utf8mb4。</p>
<p>查看MySQL数据库所支持的所有字符集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW CHARACTER SET;</span><br><span class="line">+----------+-----------------------------+---------------------+--------+</span><br><span class="line">| Charset  | Description                 | Default collation   | Maxlen |</span><br><span class="line">+----------+-----------------------------+---------------------+--------+</span><br><span class="line">| big5     | Big5 Traditional Chinese    | big5_chinese_ci     |      2 |</span><br><span class="line">| dec8     | DEC West European           | dec8_swedish_ci     |      1 |</span><br><span class="line">| cp850    | DOS West European           | cp850_general_ci    |      1 |</span><br><span class="line">| hp8      | HP West European            | hp8_english_ci      |      1 |</span><br><span class="line">| koi8r    | KOI8-R Relcom Russian       | koi8r_general_ci    |      1 |</span><br><span class="line">| latin1   | cp1252 West European        | latin1_swedish_ci   |      1 |</span><br><span class="line">| latin2   | ISO 8859-2 Central European | latin2_general_ci   |      1 |</span><br><span class="line">| swe7     | 7bit Swedish                | swe7_swedish_ci     |      1 |</span><br><span class="line">| ascii    | US ASCII                    | ascii_general_ci    |      1 |</span><br><span class="line">| ujis     | EUC-JP Japanese             | ujis_japanese_ci    |      3 |</span><br><span class="line">| sjis     | Shift-JIS Japanese          | sjis_japanese_ci    |      2 |</span><br><span class="line">| hebrew   | ISO 8859-8 Hebrew           | hebrew_general_ci   |      1 |</span><br><span class="line">| tis620   | TIS620 Thai                 | tis620_thai_ci      |      1 |</span><br><span class="line">| euckr    | EUC-KR Korean               | euckr_korean_ci     |      2 |</span><br><span class="line">| koi8u    | KOI8-U Ukrainian            | koi8u_general_ci    |      1 |</span><br><span class="line">| gb2312   | GB2312 Simplified Chinese   | gb2312_chinese_ci   |      2 |</span><br><span class="line">| greek    | ISO 8859-7 Greek            | greek_general_ci    |      1 |</span><br><span class="line">| cp1250   | Windows Central European    | cp1250_general_ci   |      1 |</span><br><span class="line">| gbk      | GBK Simplified Chinese      | gbk_chinese_ci      |      2 |</span><br><span class="line">| latin5   | ISO 8859-9 Turkish          | latin5_turkish_ci   |      1 |</span><br><span class="line">| armscii8 | ARMSCII-8 Armenian          | armscii8_general_ci |      1 |</span><br><span class="line">| utf8     | UTF-8 Unicode               | utf8_general_ci     |      3 |</span><br><span class="line">| ucs2     | UCS-2 Unicode               | ucs2_general_ci     |      2 |</span><br><span class="line">| cp866    | DOS Russian                 | cp866_general_ci    |      1 |</span><br><span class="line">| keybcs2  | DOS Kamenicky Czech-Slovak  | keybcs2_general_ci  |      1 |</span><br><span class="line">| macce    | Mac Central European        | macce_general_ci    |      1 |</span><br><span class="line">| macroman | Mac West European           | macroman_general_ci |      1 |</span><br><span class="line">| cp852    | DOS Central European        | cp852_general_ci    |      1 |</span><br><span class="line">| latin7   | ISO 8859-13 Baltic          | latin7_general_ci   |      1 |</span><br><span class="line">| utf8mb4  | UTF-8 Unicode               | utf8mb4_general_ci  |      4 |</span><br><span class="line">| cp1251   | Windows Cyrillic            | cp1251_general_ci   |      1 |</span><br><span class="line">| utf16    | UTF-16 Unicode              | utf16_general_ci    |      4 |</span><br><span class="line">| utf16le  | UTF-16LE Unicode            | utf16le_general_ci  |      4 |</span><br><span class="line">| cp1256   | Windows Arabic              | cp1256_general_ci   |      1 |</span><br><span class="line">| cp1257   | Windows Baltic              | cp1257_general_ci   |      1 |</span><br><span class="line">| utf32    | UTF-32 Unicode              | utf32_general_ci    |      4 |</span><br><span class="line">| binary   | Binary pseudo charset       | binary              |      1 |</span><br><span class="line">| geostd8  | GEOSTD8 Georgian            | geostd8_general_ci  |      1 |</span><br><span class="line">| cp932    | SJIS <span class="keyword">for</span> Windows Japanese   | cp932_japanese_ci   |      2 |</span><br><span class="line">| eucjpms  | UJIS <span class="keyword">for</span> Windows Japanese   | eucjpms_japanese_ci |      3 |</span><br><span class="line">+----------+-----------------------------+---------------------+--------+</span><br><span class="line">40 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.012 sec)</span><br></pre></td></tr></table></figure>

<p>查看数据库字符集可以使用SHOW CREATE DATABASE命令进行查看，让我们查看下刚才所创建的2个数据库的字符集分别是什么</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#刚才在创建db3308时没有指定字符集，查看下其所创建出来的数据的默认字符集是什么</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW CREATE DATABASE db3308;</span><br><span class="line">+----------+-------------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                   |</span><br><span class="line">+----------+-------------------------------------------------------------------+</span><br><span class="line">| db3308   | CREATE DATABASE `db3308` /*!40100 DEFAULT CHARACTER SET latin1 */ |    <span class="comment">#默认字符集为latin1</span></span><br><span class="line">+----------+-------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.008 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建db2数据库时，指定的字符集为utf8mb4，查看下其数据库的字符集是否为指定的字符集</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW CREATE DATABASE db2;</span><br><span class="line">+----------+-----------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                 |</span><br><span class="line">+----------+-----------------------------------------------------------------+</span><br><span class="line">| db2      | CREATE DATABASE `db2` /*!40100 DEFAULT CHARACTER SET utf8mb4 */ |      <span class="comment">#默认字符集为utf8mb4</span></span><br><span class="line">+----------+-----------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>除了以上方法查看数据库字符集，还可以直接通过查询数据库目录内的文件查询出数据库的字符集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看数据库db3308目录内db.opt文件内的内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /data/mysql/db3308/db.opt</span></span><br><span class="line">default-character-set=latin1    <span class="comment">#默认字符集为latin1</span></span><br><span class="line">default-collation=latin1_swedish_ci   <span class="comment">#字符的排序规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#产看数据库db2目录内db.opt文件的内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /data/mysql/db2/db.opt</span></span><br><span class="line">default-character-set=utf8mb4   <span class="comment">#设定默认字符集为utf8mb4</span></span><br><span class="line">default-collation=utf8mb4_general_ci    <span class="comment">#此为字符集的排序规则</span></span><br></pre></td></tr></table></figure>

<p>使用SHOW COLLATION可以查看字符集的排序规则，每种字符集有各种不同的排序方法，可以查看他们的排序方法然后在创建数据库的时候进行设定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有字符集的排序规则</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW COLLATION;</span><br><span class="line">+------------------------------+----------+------+---------+----------+---------+</span><br><span class="line">| Collation                    | Charset  | Id   | Default | Compiled | Sortlen |</span><br><span class="line">+------------------------------+----------+------+---------+----------+---------+</span><br><span class="line">| big5_chinese_ci              | big5     |    1 | Yes     | Yes      |       1 |</span><br><span class="line">| big5_bin                     | big5     |   84 |         | Yes      |       1 |</span><br><span class="line">| big5_chinese_nopad_ci        | big5     | 1025 |         | Yes      |       1 |</span><br><span class="line">| big5_nopad_bin               | big5     | 1108 |         | Yes      |       1 |</span><br><span class="line">| dec8_swedish_ci              | dec8     |    3 | Yes     | Yes      |       1 |</span><br><span class="line">| dec8_bin                     | dec8     |   69 |         | Yes      |       1 |</span><br><span class="line">| dec8_swedish_nopad_ci        | dec8     | 1027 |         | Yes      |       1 |</span><br><span class="line">| dec8_nopad_bin               | dec8     | 1093 |         | Yes      |       1 |</span><br><span class="line">| cp850_general_ci             | cp850    |    4 | Yes     | Yes      |       1 |</span><br><span class="line">| cp850_bin                    | cp850    |   80 |         | Yes      |       1 |</span><br><span class="line">| cp850_general_nopad_ci       | cp850    | 1028 |         | Yes      |       1 |</span><br><span class="line">| cp850_nopad_bin              | cp850    | 1104 |         | Yes      |       1 |</span><br><span class="line">| hp8_english_ci               | hp8      |    6 | Yes     | Yes      |       1 |</span><br><span class="line">| hp8_bin                      | hp8      |   72 |         | Yes      |       1 |</span><br><span class="line">| hp8_english_nopad_ci         | hp8      | 1030 |         | Yes      |       1 |</span><br><span class="line">| hp8_nopad_bin                | hp8      | 1096 |         | Yes      |       1 |</span><br><span class="line">| koi8r_general_ci             | koi8r    |    7 | Yes     | Yes      |       1 |</span><br><span class="line">| koi8r_bin                    | koi8r    |   74 |         | Yes      |       1 |</span><br><span class="line">| koi8r_general_nopad_ci       | koi8r    | 1031 |         | Yes      |       1 |</span><br><span class="line">| koi8r_nopad_bin              | koi8r    | 1098 |         | Yes      |       1 |</span><br><span class="line">| latin1_german1_ci            | latin1   |    5 |         | Yes      |       1 |</span><br><span class="line">| latin1_swedish_ci            | latin1   |    8 | Yes     | Yes      |       1 |</span><br><span class="line">| latin1_danish_ci             | latin1   |   15 |         | Yes      |       1 |</span><br><span class="line">| latin1_german2_ci            | latin1   |   31 |         | Yes      |       2 |</span><br><span class="line">| latin1_bin                   | latin1   |   47 |         | Yes      |       1 |</span><br><span class="line">| latin1_general_ci            | latin1   |   48 |         | Yes      |       1 |</span><br><span class="line">| latin1_general_cs            | latin1   |   49 |         | Yes      |       1 |</span><br><span class="line">| latin1_spanish_ci            | latin1   |   94 |         | Yes      |       1 |</span><br><span class="line">| latin1_swedish_nopad_ci      | latin1   | 1032 |         | Yes      |       1 |</span><br><span class="line">| latin1_nopad_bin             | latin1   | 1071 |         | Yes      |       1 |</span><br><span class="line">| latin2_czech_cs              | latin2   |    2 |         | Yes      |       4 |</span><br><span class="line">| latin2_general_ci            | latin2   |    9 | Yes     | Yes      |       1 |</span><br><span class="line">| latin2_hungarian_ci          | latin2   |   21 |         | Yes      |       1 |</span><br><span class="line">| latin2_croatian_ci           | latin2   |   27 |         | Yes      |       1 |</span><br><span class="line">| latin2_bin                   | latin2   |   77 |         | Yes      |       1 |</span><br><span class="line">| latin2_general_nopad_ci      | latin2   | 1033 |         | Yes      |       1 |</span><br><span class="line">| latin2_nopad_bin             | latin2   | 1101 |         | Yes      |       1 |</span><br><span class="line">| swe7_swedish_ci              | swe7     |   10 | Yes     | Yes      |       1 |</span><br><span class="line">| swe7_bin                     | swe7     |   82 |         | Yes      |       1 |</span><br><span class="line">| swe7_swedish_nopad_ci        | swe7     | 1034 |         | Yes      |       1 |</span><br><span class="line">| swe7_nopad_bin               | swe7     | 1106 |         | Yes      |       1 |</span><br><span class="line">| ascii_general_ci             | ascii    |   11 | Yes     | Yes      |       1 |</span><br><span class="line">| ascii_bin                    | ascii    |   65 |         | Yes      |       1 |</span><br><span class="line">| ascii_general_nopad_ci       | ascii    | 1035 |         | Yes      |       1 |</span><br><span class="line">| ascii_nopad_bin              | ascii    | 1089 |         | Yes      |       1 |</span><br><span class="line">| ujis_japanese_ci             | ujis     |   12 | Yes     | Yes      |       1 |</span><br><span class="line">| ujis_bin                     | ujis     |   91 |         | Yes      |       1 |</span><br><span class="line">| ujis_japanese_nopad_ci       | ujis     | 1036 |         | Yes      |       1 |</span><br><span class="line">| ujis_nopad_bin               | ujis     | 1115 |         | Yes      |       1 |</span><br><span class="line">| sjis_japanese_ci             | sjis     |   13 | Yes     | Yes      |       1 |</span><br><span class="line">| sjis_bin                     | sjis     |   88 |         | Yes      |       1 |</span><br><span class="line">| sjis_japanese_nopad_ci       | sjis     | 1037 |         | Yes      |       1 |</span><br><span class="line">| sjis_nopad_bin               | sjis     | 1112 |         | Yes      |       1 |</span><br><span class="line">| hebrew_general_ci            | hebrew   |   16 | Yes     | Yes      |       1 |</span><br><span class="line">| hebrew_bin                   | hebrew   |   71 |         | Yes      |       1 |</span><br><span class="line">| hebrew_general_nopad_ci      | hebrew   | 1040 |         | Yes      |       1 |</span><br><span class="line">| hebrew_nopad_bin             | hebrew   | 1095 |         | Yes      |       1 |</span><br><span class="line">| tis620_thai_ci               | tis620   |   18 | Yes     | Yes      |       4 |</span><br><span class="line">| tis620_bin                   | tis620   |   89 |         | Yes      |       1 |</span><br><span class="line">| tis620_thai_nopad_ci         | tis620   | 1042 |         | Yes      |       4 |</span><br><span class="line">| tis620_nopad_bin             | tis620   | 1113 |         | Yes      |       1 |</span><br><span class="line">| euckr_korean_ci              | euckr    |   19 | Yes     | Yes      |       1 |</span><br><span class="line">| euckr_bin                    | euckr    |   85 |         | Yes      |       1 |</span><br><span class="line">| euckr_korean_nopad_ci        | euckr    | 1043 |         | Yes      |       1 |</span><br><span class="line">| euckr_nopad_bin              | euckr    | 1109 |         | Yes      |       1 |</span><br><span class="line">| koi8u_general_ci             | koi8u    |   22 | Yes     | Yes      |       1 |</span><br><span class="line">| koi8u_bin                    | koi8u    |   75 |         | Yes      |       1 |</span><br><span class="line">| koi8u_general_nopad_ci       | koi8u    | 1046 |         | Yes      |       1 |</span><br><span class="line">| koi8u_nopad_bin              | koi8u    | 1099 |         | Yes      |       1 |</span><br><span class="line">| gb2312_chinese_ci            | gb2312   |   24 | Yes     | Yes      |       1 |</span><br><span class="line">| gb2312_bin                   | gb2312   |   86 |         | Yes      |       1 |</span><br><span class="line">| gb2312_chinese_nopad_ci      | gb2312   | 1048 |         | Yes      |       1 |</span><br><span class="line">| gb2312_nopad_bin             | gb2312   | 1110 |         | Yes      |       1 |</span><br><span class="line">| greek_general_ci             | greek    |   25 | Yes     | Yes      |       1 |</span><br><span class="line">| greek_bin                    | greek    |   70 |         | Yes      |       1 |</span><br><span class="line">| greek_general_nopad_ci       | greek    | 1049 |         | Yes      |       1 |</span><br><span class="line">| greek_nopad_bin              | greek    | 1094 |         | Yes      |       1 |</span><br><span class="line">| cp1250_general_ci            | cp1250   |   26 | Yes     | Yes      |       1 |</span><br><span class="line">| cp1250_czech_cs              | cp1250   |   34 |         | Yes      |       2 |</span><br><span class="line">| cp1250_croatian_ci           | cp1250   |   44 |         | Yes      |       1 |</span><br><span class="line">| cp1250_bin                   | cp1250   |   66 |         | Yes      |       1 |</span><br><span class="line">| cp1250_polish_ci             | cp1250   |   99 |         | Yes      |       1 |</span><br><span class="line">| cp1250_general_nopad_ci      | cp1250   | 1050 |         | Yes      |       1 |</span><br><span class="line">| cp1250_nopad_bin             | cp1250   | 1090 |         | Yes      |       1 |</span><br><span class="line">| gbk_chinese_ci               | gbk      |   28 | Yes     | Yes      |       1 |</span><br><span class="line">| gbk_bin                      | gbk      |   87 |         | Yes      |       1 |</span><br><span class="line">| gbk_chinese_nopad_ci         | gbk      | 1052 |         | Yes      |       1 |</span><br><span class="line">| gbk_nopad_bin                | gbk      | 1111 |         | Yes      |       1 |</span><br><span class="line">| latin5_turkish_ci            | latin5   |   30 | Yes     | Yes      |       1 |</span><br><span class="line">| latin5_bin                   | latin5   |   78 |         | Yes      |       1 |</span><br><span class="line">| latin5_turkish_nopad_ci      | latin5   | 1054 |         | Yes      |       1 |</span><br><span class="line">| latin5_nopad_bin             | latin5   | 1102 |         | Yes      |       1 |</span><br><span class="line">| armscii8_general_ci          | armscii8 |   32 | Yes     | Yes      |       1 |</span><br><span class="line">| armscii8_bin                 | armscii8 |   64 |         | Yes      |       1 |</span><br><span class="line">| armscii8_general_nopad_ci    | armscii8 | 1056 |         | Yes      |       1 |</span><br><span class="line">| armscii8_nopad_bin           | armscii8 | 1088 |         | Yes      |       1 |</span><br><span class="line">| utf8_general_ci              | utf8     |   33 | Yes     | Yes      |       1 |</span><br><span class="line">| utf8_bin                     | utf8     |   83 |         | Yes      |       1 |</span><br><span class="line">| utf8_unicode_ci              | utf8     |  192 |         | Yes      |       8 |</span><br><span class="line">| utf8_icelandic_ci            | utf8     |  193 |         | Yes      |       8 |</span><br><span class="line">| utf8_latvian_ci              | utf8     |  194 |         | Yes      |       8 |</span><br><span class="line">| utf8_romanian_ci             | utf8     |  195 |         | Yes      |       8 |</span><br><span class="line">| utf8_slovenian_ci            | utf8     |  196 |         | Yes      |       8 |</span><br><span class="line">| utf8_polish_ci               | utf8     |  197 |         | Yes      |       8 |</span><br><span class="line">| utf8_estonian_ci             | utf8     |  198 |         | Yes      |       8 |</span><br><span class="line">| utf8_spanish_ci              | utf8     |  199 |         | Yes      |       8 |</span><br><span class="line">| utf8_swedish_ci              | utf8     |  200 |         | Yes      |       8 |</span><br><span class="line">| utf8_turkish_ci              | utf8     |  201 |         | Yes      |       8 |</span><br><span class="line">| utf8_czech_ci                | utf8     |  202 |         | Yes      |       8 |</span><br><span class="line">| utf8_danish_ci               | utf8     |  203 |         | Yes      |       8 |</span><br><span class="line">| utf8_lithuanian_ci           | utf8     |  204 |         | Yes      |       8 |</span><br><span class="line">| utf8_slovak_ci               | utf8     |  205 |         | Yes      |       8 |</span><br><span class="line">| utf8_spanish2_ci             | utf8     |  206 |         | Yes      |       8 |</span><br><span class="line">| utf8_roman_ci                | utf8     |  207 |         | Yes      |       8 |</span><br><span class="line">| utf8_persian_ci              | utf8     |  208 |         | Yes      |       8 |</span><br><span class="line">| utf8_esperanto_ci            | utf8     |  209 |         | Yes      |       8 |</span><br><span class="line">| utf8_hungarian_ci            | utf8     |  210 |         | Yes      |       8 |</span><br><span class="line">| utf8_sinhala_ci              | utf8     |  211 |         | Yes      |       8 |</span><br><span class="line">| utf8_german2_ci              | utf8     |  212 |         | Yes      |       8 |</span><br><span class="line">| utf8_croatian_mysql561_ci    | utf8     |  213 |         | Yes      |       8 |</span><br><span class="line">| utf8_unicode_520_ci          | utf8     |  214 |         | Yes      |       8 |</span><br><span class="line">| utf8_vietnamese_ci           | utf8     |  215 |         | Yes      |       8 |</span><br><span class="line">| utf8_general_mysql500_ci     | utf8     |  223 |         | Yes      |       1 |</span><br><span class="line">| utf8_croatian_ci             | utf8     |  576 |         | Yes      |       8 |</span><br><span class="line">| utf8_myanmar_ci              | utf8     |  577 |         | Yes      |       8 |</span><br><span class="line">| utf8_thai_520_w2             | utf8     |  578 |         | Yes      |       4 |</span><br><span class="line">| utf8_general_nopad_ci        | utf8     | 1057 |         | Yes      |       1 |</span><br><span class="line">| utf8_nopad_bin               | utf8     | 1107 |         | Yes      |       1 |</span><br><span class="line">| utf8_unicode_nopad_ci        | utf8     | 1216 |         | Yes      |       8 |</span><br><span class="line">| utf8_unicode_520_nopad_ci    | utf8     | 1238 |         | Yes      |       8 |</span><br><span class="line">| ucs2_general_ci              | ucs2     |   35 | Yes     | Yes      |       1 |</span><br><span class="line">| ucs2_bin                     | ucs2     |   90 |         | Yes      |       1 |</span><br><span class="line">| ucs2_unicode_ci              | ucs2     |  128 |         | Yes      |       8 |</span><br><span class="line">| ucs2_icelandic_ci            | ucs2     |  129 |         | Yes      |       8 |</span><br><span class="line">| ucs2_latvian_ci              | ucs2     |  130 |         | Yes      |       8 |</span><br><span class="line">| ucs2_romanian_ci             | ucs2     |  131 |         | Yes      |       8 |</span><br><span class="line">| ucs2_slovenian_ci            | ucs2     |  132 |         | Yes      |       8 |</span><br><span class="line">| ucs2_polish_ci               | ucs2     |  133 |         | Yes      |       8 |</span><br><span class="line">| ucs2_estonian_ci             | ucs2     |  134 |         | Yes      |       8 |</span><br><span class="line">| ucs2_spanish_ci              | ucs2     |  135 |         | Yes      |       8 |</span><br><span class="line">| ucs2_swedish_ci              | ucs2     |  136 |         | Yes      |       8 |</span><br><span class="line">| ucs2_turkish_ci              | ucs2     |  137 |         | Yes      |       8 |</span><br><span class="line">| ucs2_czech_ci                | ucs2     |  138 |         | Yes      |       8 |</span><br><span class="line">| ucs2_danish_ci               | ucs2     |  139 |         | Yes      |       8 |</span><br><span class="line">| ucs2_lithuanian_ci           | ucs2     |  140 |         | Yes      |       8 |</span><br><span class="line">| ucs2_slovak_ci               | ucs2     |  141 |         | Yes      |       8 |</span><br><span class="line">| ucs2_spanish2_ci             | ucs2     |  142 |         | Yes      |       8 |</span><br><span class="line">| ucs2_roman_ci                | ucs2     |  143 |         | Yes      |       8 |</span><br><span class="line">| ucs2_persian_ci              | ucs2     |  144 |         | Yes      |       8 |</span><br><span class="line">| ucs2_esperanto_ci            | ucs2     |  145 |         | Yes      |       8 |</span><br><span class="line">| ucs2_hungarian_ci            | ucs2     |  146 |         | Yes      |       8 |</span><br><span class="line">| ucs2_sinhala_ci              | ucs2     |  147 |         | Yes      |       8 |</span><br><span class="line">| ucs2_german2_ci              | ucs2     |  148 |         | Yes      |       8 |</span><br><span class="line">| ucs2_croatian_mysql561_ci    | ucs2     |  149 |         | Yes      |       8 |</span><br><span class="line">| ucs2_unicode_520_ci          | ucs2     |  150 |         | Yes      |       8 |</span><br><span class="line">| ucs2_vietnamese_ci           | ucs2     |  151 |         | Yes      |       8 |</span><br><span class="line">| ucs2_general_mysql500_ci     | ucs2     |  159 |         | Yes      |       1 |</span><br><span class="line">| ucs2_croatian_ci             | ucs2     |  640 |         | Yes      |       8 |</span><br><span class="line">| ucs2_myanmar_ci              | ucs2     |  641 |         | Yes      |       8 |</span><br><span class="line">| ucs2_thai_520_w2             | ucs2     |  642 |         | Yes      |       4 |</span><br><span class="line">| ucs2_general_nopad_ci        | ucs2     | 1059 |         | Yes      |       1 |</span><br><span class="line">| ucs2_nopad_bin               | ucs2     | 1114 |         | Yes      |       1 |</span><br><span class="line">| ucs2_unicode_nopad_ci        | ucs2     | 1152 |         | Yes      |       8 |</span><br><span class="line">| ucs2_unicode_520_nopad_ci    | ucs2     | 1174 |         | Yes      |       8 |</span><br><span class="line">| cp866_general_ci             | cp866    |   36 | Yes     | Yes      |       1 |</span><br><span class="line">| cp866_bin                    | cp866    |   68 |         | Yes      |       1 |</span><br><span class="line">| cp866_general_nopad_ci       | cp866    | 1060 |         | Yes      |       1 |</span><br><span class="line">| cp866_nopad_bin              | cp866    | 1092 |         | Yes      |       1 |</span><br><span class="line">| keybcs2_general_ci           | keybcs2  |   37 | Yes     | Yes      |       1 |</span><br><span class="line">| keybcs2_bin                  | keybcs2  |   73 |         | Yes      |       1 |</span><br><span class="line">| keybcs2_general_nopad_ci     | keybcs2  | 1061 |         | Yes      |       1 |</span><br><span class="line">| keybcs2_nopad_bin            | keybcs2  | 1097 |         | Yes      |       1 |</span><br><span class="line">| macce_general_ci             | macce    |   38 | Yes     | Yes      |       1 |</span><br><span class="line">| macce_bin                    | macce    |   43 |         | Yes      |       1 |</span><br><span class="line">| macce_general_nopad_ci       | macce    | 1062 |         | Yes      |       1 |</span><br><span class="line">| macce_nopad_bin              | macce    | 1067 |         | Yes      |       1 |</span><br><span class="line">| macroman_general_ci          | macroman |   39 | Yes     | Yes      |       1 |</span><br><span class="line">| macroman_bin                 | macroman |   53 |         | Yes      |       1 |</span><br><span class="line">| macroman_general_nopad_ci    | macroman | 1063 |         | Yes      |       1 |</span><br><span class="line">| macroman_nopad_bin           | macroman | 1077 |         | Yes      |       1 |</span><br><span class="line">| cp852_general_ci             | cp852    |   40 | Yes     | Yes      |       1 |</span><br><span class="line">| cp852_bin                    | cp852    |   81 |         | Yes      |       1 |</span><br><span class="line">| cp852_general_nopad_ci       | cp852    | 1064 |         | Yes      |       1 |</span><br><span class="line">| cp852_nopad_bin              | cp852    | 1105 |         | Yes      |       1 |</span><br><span class="line">| latin7_estonian_cs           | latin7   |   20 |         | Yes      |       1 |</span><br><span class="line">| latin7_general_ci            | latin7   |   41 | Yes     | Yes      |       1 |</span><br><span class="line">| latin7_general_cs            | latin7   |   42 |         | Yes      |       1 |</span><br><span class="line">| latin7_bin                   | latin7   |   79 |         | Yes      |       1 |</span><br><span class="line">| latin7_general_nopad_ci      | latin7   | 1065 |         | Yes      |       1 |</span><br><span class="line">| latin7_nopad_bin             | latin7   | 1103 |         | Yes      |       1 |</span><br><span class="line">| utf8mb4_general_ci           | utf8mb4  |   45 | Yes     | Yes      |       1 |</span><br><span class="line">| utf8mb4_bin                  | utf8mb4  |   46 |         | Yes      |       1 |</span><br><span class="line">| utf8mb4_unicode_ci           | utf8mb4  |  224 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_icelandic_ci         | utf8mb4  |  225 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_latvian_ci           | utf8mb4  |  226 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_romanian_ci          | utf8mb4  |  227 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_slovenian_ci         | utf8mb4  |  228 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_polish_ci            | utf8mb4  |  229 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_estonian_ci          | utf8mb4  |  230 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_spanish_ci           | utf8mb4  |  231 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_swedish_ci           | utf8mb4  |  232 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_turkish_ci           | utf8mb4  |  233 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_czech_ci             | utf8mb4  |  234 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_danish_ci            | utf8mb4  |  235 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_lithuanian_ci        | utf8mb4  |  236 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_slovak_ci            | utf8mb4  |  237 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_spanish2_ci          | utf8mb4  |  238 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_roman_ci             | utf8mb4  |  239 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_persian_ci           | utf8mb4  |  240 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_esperanto_ci         | utf8mb4  |  241 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_hungarian_ci         | utf8mb4  |  242 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_sinhala_ci           | utf8mb4  |  243 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_german2_ci           | utf8mb4  |  244 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_croatian_mysql561_ci | utf8mb4  |  245 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_unicode_520_ci       | utf8mb4  |  246 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_vietnamese_ci        | utf8mb4  |  247 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_croatian_ci          | utf8mb4  |  608 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_myanmar_ci           | utf8mb4  |  609 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_thai_520_w2          | utf8mb4  |  610 |         | Yes      |       4 |</span><br><span class="line">| utf8mb4_general_nopad_ci     | utf8mb4  | 1069 |         | Yes      |       1 |</span><br><span class="line">| utf8mb4_nopad_bin            | utf8mb4  | 1070 |         | Yes      |       1 |</span><br><span class="line">| utf8mb4_unicode_nopad_ci     | utf8mb4  | 1248 |         | Yes      |       8 |</span><br><span class="line">| utf8mb4_unicode_520_nopad_ci | utf8mb4  | 1270 |         | Yes      |       8 |</span><br><span class="line">| cp1251_bulgarian_ci          | cp1251   |   14 |         | Yes      |       1 |</span><br><span class="line">| cp1251_ukrainian_ci          | cp1251   |   23 |         | Yes      |       1 |</span><br><span class="line">| cp1251_bin                   | cp1251   |   50 |         | Yes      |       1 |</span><br><span class="line">| cp1251_general_ci            | cp1251   |   51 | Yes     | Yes      |       1 |</span><br><span class="line">| cp1251_general_cs            | cp1251   |   52 |         | Yes      |       1 |</span><br><span class="line">| cp1251_nopad_bin             | cp1251   | 1074 |         | Yes      |       1 |</span><br><span class="line">| cp1251_general_nopad_ci      | cp1251   | 1075 |         | Yes      |       1 |</span><br><span class="line">| utf16_general_ci             | utf16    |   54 | Yes     | Yes      |       1 |</span><br><span class="line">| utf16_bin                    | utf16    |   55 |         | Yes      |       1 |</span><br><span class="line">| utf16_unicode_ci             | utf16    |  101 |         | Yes      |       8 |</span><br><span class="line">| utf16_icelandic_ci           | utf16    |  102 |         | Yes      |       8 |</span><br><span class="line">| utf16_latvian_ci             | utf16    |  103 |         | Yes      |       8 |</span><br><span class="line">| utf16_romanian_ci            | utf16    |  104 |         | Yes      |       8 |</span><br><span class="line">| utf16_slovenian_ci           | utf16    |  105 |         | Yes      |       8 |</span><br><span class="line">| utf16_polish_ci              | utf16    |  106 |         | Yes      |       8 |</span><br><span class="line">| utf16_estonian_ci            | utf16    |  107 |         | Yes      |       8 |</span><br><span class="line">| utf16_spanish_ci             | utf16    |  108 |         | Yes      |       8 |</span><br><span class="line">| utf16_swedish_ci             | utf16    |  109 |         | Yes      |       8 |</span><br><span class="line">| utf16_turkish_ci             | utf16    |  110 |         | Yes      |       8 |</span><br><span class="line">| utf16_czech_ci               | utf16    |  111 |         | Yes      |       8 |</span><br><span class="line">| utf16_danish_ci              | utf16    |  112 |         | Yes      |       8 |</span><br><span class="line">| utf16_lithuanian_ci          | utf16    |  113 |         | Yes      |       8 |</span><br><span class="line">| utf16_slovak_ci              | utf16    |  114 |         | Yes      |       8 |</span><br><span class="line">| utf16_spanish2_ci            | utf16    |  115 |         | Yes      |       8 |</span><br><span class="line">| utf16_roman_ci               | utf16    |  116 |         | Yes      |       8 |</span><br><span class="line">| utf16_persian_ci             | utf16    |  117 |         | Yes      |       8 |</span><br><span class="line">| utf16_esperanto_ci           | utf16    |  118 |         | Yes      |       8 |</span><br><span class="line">| utf16_hungarian_ci           | utf16    |  119 |         | Yes      |       8 |</span><br><span class="line">| utf16_sinhala_ci             | utf16    |  120 |         | Yes      |       8 |</span><br><span class="line">| utf16_german2_ci             | utf16    |  121 |         | Yes      |       8 |</span><br><span class="line">| utf16_croatian_mysql561_ci   | utf16    |  122 |         | Yes      |       8 |</span><br><span class="line">| utf16_unicode_520_ci         | utf16    |  123 |         | Yes      |       8 |</span><br><span class="line">| utf16_vietnamese_ci          | utf16    |  124 |         | Yes      |       8 |</span><br><span class="line">| utf16_croatian_ci            | utf16    |  672 |         | Yes      |       8 |</span><br><span class="line">| utf16_myanmar_ci             | utf16    |  673 |         | Yes      |       8 |</span><br><span class="line">| utf16_thai_520_w2            | utf16    |  674 |         | Yes      |       4 |</span><br><span class="line">| utf16_general_nopad_ci       | utf16    | 1078 |         | Yes      |       1 |</span><br><span class="line">| utf16_nopad_bin              | utf16    | 1079 |         | Yes      |       1 |</span><br><span class="line">| utf16_unicode_nopad_ci       | utf16    | 1125 |         | Yes      |       8 |</span><br><span class="line">| utf16_unicode_520_nopad_ci   | utf16    | 1147 |         | Yes      |       8 |</span><br><span class="line">| utf16le_general_ci           | utf16le  |   56 | Yes     | Yes      |       1 |</span><br><span class="line">| utf16le_bin                  | utf16le  |   62 |         | Yes      |       1 |</span><br><span class="line">| utf16le_general_nopad_ci     | utf16le  | 1080 |         | Yes      |       1 |</span><br><span class="line">| utf16le_nopad_bin            | utf16le  | 1086 |         | Yes      |       1 |</span><br><span class="line">| cp1256_general_ci            | cp1256   |   57 | Yes     | Yes      |       1 |</span><br><span class="line">| cp1256_bin                   | cp1256   |   67 |         | Yes      |       1 |</span><br><span class="line">| cp1256_general_nopad_ci      | cp1256   | 1081 |         | Yes      |       1 |</span><br><span class="line">| cp1256_nopad_bin             | cp1256   | 1091 |         | Yes      |       1 |</span><br><span class="line">| cp1257_lithuanian_ci         | cp1257   |   29 |         | Yes      |       1 |</span><br><span class="line">| cp1257_bin                   | cp1257   |   58 |         | Yes      |       1 |</span><br><span class="line">| cp1257_general_ci            | cp1257   |   59 | Yes     | Yes      |       1 |</span><br><span class="line">| cp1257_nopad_bin             | cp1257   | 1082 |         | Yes      |       1 |</span><br><span class="line">| cp1257_general_nopad_ci      | cp1257   | 1083 |         | Yes      |       1 |</span><br><span class="line">| utf32_general_ci             | utf32    |   60 | Yes     | Yes      |       1 |</span><br><span class="line">| utf32_bin                    | utf32    |   61 |         | Yes      |       1 |</span><br><span class="line">| utf32_unicode_ci             | utf32    |  160 |         | Yes      |       8 |</span><br><span class="line">| utf32_icelandic_ci           | utf32    |  161 |         | Yes      |       8 |</span><br><span class="line">| utf32_latvian_ci             | utf32    |  162 |         | Yes      |       8 |</span><br><span class="line">| utf32_romanian_ci            | utf32    |  163 |         | Yes      |       8 |</span><br><span class="line">| utf32_slovenian_ci           | utf32    |  164 |         | Yes      |       8 |</span><br><span class="line">| utf32_polish_ci              | utf32    |  165 |         | Yes      |       8 |</span><br><span class="line">| utf32_estonian_ci            | utf32    |  166 |         | Yes      |       8 |</span><br><span class="line">| utf32_spanish_ci             | utf32    |  167 |         | Yes      |       8 |</span><br><span class="line">| utf32_swedish_ci             | utf32    |  168 |         | Yes      |       8 |</span><br><span class="line">| utf32_turkish_ci             | utf32    |  169 |         | Yes      |       8 |</span><br><span class="line">| utf32_czech_ci               | utf32    |  170 |         | Yes      |       8 |</span><br><span class="line">| utf32_danish_ci              | utf32    |  171 |         | Yes      |       8 |</span><br><span class="line">| utf32_lithuanian_ci          | utf32    |  172 |         | Yes      |       8 |</span><br><span class="line">| utf32_slovak_ci              | utf32    |  173 |         | Yes      |       8 |</span><br><span class="line">| utf32_spanish2_ci            | utf32    |  174 |         | Yes      |       8 |</span><br><span class="line">| utf32_roman_ci               | utf32    |  175 |         | Yes      |       8 |</span><br><span class="line">| utf32_persian_ci             | utf32    |  176 |         | Yes      |       8 |</span><br><span class="line">| utf32_esperanto_ci           | utf32    |  177 |         | Yes      |       8 |</span><br><span class="line">| utf32_hungarian_ci           | utf32    |  178 |         | Yes      |       8 |</span><br><span class="line">| utf32_sinhala_ci             | utf32    |  179 |         | Yes      |       8 |</span><br><span class="line">| utf32_german2_ci             | utf32    |  180 |         | Yes      |       8 |</span><br><span class="line">| utf32_croatian_mysql561_ci   | utf32    |  181 |         | Yes      |       8 |</span><br><span class="line">| utf32_unicode_520_ci         | utf32    |  182 |         | Yes      |       8 |</span><br><span class="line">| utf32_vietnamese_ci          | utf32    |  183 |         | Yes      |       8 |</span><br><span class="line">| utf32_croatian_ci            | utf32    |  736 |         | Yes      |       8 |</span><br><span class="line">| utf32_myanmar_ci             | utf32    |  737 |         | Yes      |       8 |</span><br><span class="line">| utf32_thai_520_w2            | utf32    |  738 |         | Yes      |       4 |</span><br><span class="line">| utf32_general_nopad_ci       | utf32    | 1084 |         | Yes      |       1 |</span><br><span class="line">| utf32_nopad_bin              | utf32    | 1085 |         | Yes      |       1 |</span><br><span class="line">| utf32_unicode_nopad_ci       | utf32    | 1184 |         | Yes      |       8 |</span><br><span class="line">| utf32_unicode_520_nopad_ci   | utf32    | 1206 |         | Yes      |       8 |</span><br><span class="line">| binary                       | binary   |   63 | Yes     | Yes      |       1 |</span><br><span class="line">| geostd8_general_ci           | geostd8  |   92 | Yes     | Yes      |       1 |</span><br><span class="line">| geostd8_bin                  | geostd8  |   93 |         | Yes      |       1 |</span><br><span class="line">| geostd8_general_nopad_ci     | geostd8  | 1116 |         | Yes      |       1 |</span><br><span class="line">| geostd8_nopad_bin            | geostd8  | 1117 |         | Yes      |       1 |</span><br><span class="line">| cp932_japanese_ci            | cp932    |   95 | Yes     | Yes      |       1 |</span><br><span class="line">| cp932_bin                    | cp932    |   96 |         | Yes      |       1 |</span><br><span class="line">| cp932_japanese_nopad_ci      | cp932    | 1119 |         | Yes      |       1 |</span><br><span class="line">| cp932_nopad_bin              | cp932    | 1120 |         | Yes      |       1 |</span><br><span class="line">| eucjpms_japanese_ci          | eucjpms  |   97 | Yes     | Yes      |       1 |</span><br><span class="line">| eucjpms_bin                  | eucjpms  |   98 |         | Yes      |       1 |</span><br><span class="line">| eucjpms_japanese_nopad_ci    | eucjpms  | 1121 |         | Yes      |       1 |</span><br><span class="line">| eucjpms_nopad_bin            | eucjpms  | 1122 |         | Yes      |       1 |</span><br><span class="line">+------------------------------+----------+------+---------+----------+---------+</span><br><span class="line">322 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.002 sec)</span><br></pre></td></tr></table></figure>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>删除数据库需要使用DROP命令。</p>
<p>命令语法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>删除db3308数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用DROP命令删除db3308数据库</span></span><br><span class="line">MariaDB [(none)]&gt; DROP DATABASE db3308;</span><br><span class="line">Query OK, 0 rows affected (0.011 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数据库，db3308是否被删除</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| db2                |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"><span class="comment">#已经没有db3308数据库</span></span><br></pre></td></tr></table></figure>

<p>删除数据库本质上就是删除一个目录，现在/data/mysql下已经没db3308这个目录了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls /data/mysql/db3308</span></span><br><span class="line">ls: cannot access <span class="string">&#x27;/data/mysql/db3308&#x27;</span>: No such file or directory</span><br></pre></td></tr></table></figure>

<h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><p>如果在创建数据库后发现数据的字符集设置出错误可以使用ALTER DATABASE命令对数据库进行修改</p>
<p>命令语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER &#123;DATABASE | SCHEMA&#125; [db_name]</span><br><span class="line">    alter_specification ...</span><br><span class="line">ALTER &#123;DATABASE | SCHEMA&#125; db_name</span><br><span class="line">    UPGRADE DATA DIRECTORY NAME</span><br><span class="line"></span><br><span class="line">alter_specification:</span><br><span class="line">    [DEFAULT] CHARACTER SET [=] charset_name</span><br><span class="line">  | [DEFAULT] COLLATE [=] collation_name</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>创建db1数据库，然后将数据库的字符集改为utf8mb4</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建出db1数据库</span></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE db1;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前数据库的字符集</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW CREATE DATABASE db1;</span><br><span class="line">+----------+----------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                |</span><br><span class="line">+----------+----------------------------------------------------------------+</span><br><span class="line">| db1      | CREATE DATABASE `db1` /*!40100 DEFAULT CHARACTER SET latin1 */ |       <span class="comment">#默认字符集为latin1</span></span><br><span class="line">+----------+----------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将默认字符集改为utf8mb4</span></span><br><span class="line">MariaDB [(none)]&gt; ALTER DATABASE db1 CHARACTER SET utf8mb4;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#再次查看数据库的字符集</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW CREATE DATABASE db1;</span><br><span class="line">+----------+-----------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                 |</span><br><span class="line">+----------+-----------------------------------------------------------------+</span><br><span class="line">| db1      | CREATE DATABASE `db1` /*!40100 DEFAULT CHARACTER SET utf8mb4 */ |    <span class="comment">#默认字符集已经改为utf8mb4</span></span><br><span class="line">+----------+-----------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br></pre></td></tr></table></figure>

<p>以上就是数据库的操作方法</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库表的操作</title>
    <url>/2019/04/18/MySQL/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>在上一节中已经说了如何创建数据库，接下来最重要的就是在数据库内存入数据，数据需要存放在相应的表中，数据库就是个文件夹，数据就是其内部的一个一个文件，文件所对应的就是数据库的表</p>
<span id="more"></span>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型大致理解为此数据是数字还是字符串。</p>
<p>数据类型类型不同数据的样子形式可以不同，数据在磁盘上占用的空间大小也不同。</p>
<p><img src="%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="数据类型.png"></p>
<h3 id="查看数据库的的表"><a href="#查看数据库的的表" class="headerlink" title="查看数据库的的表"></a>查看数据库的的表</h3><p>使用SHOW TABLES;可以查看当前数据库中的所有表</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换到db1数据库</span></span><br><span class="line">MariaDB [(none)]&gt; use db1;</span><br><span class="line">Database changed</span><br><span class="line"><span class="comment">#查看数据库内的所有表</span></span><br><span class="line">MariaDB [db1]&gt; show tables;</span><br><span class="line">Empty <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"><span class="comment">#由于db1为新创建的数据库其内部还没有任何表</span></span><br></pre></td></tr></table></figure>

<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>创建表需要定义有哪些字段，有了字段后就可以在其内部添加一条一条的记录了。</p>
<p>表的结构包括几个关键的属性：</p>
<ol>
<li>表里面有哪些字段，字段名是什么</li>
<li>字段内数据的类型</li>
<li>修饰符，用来标识字段的特殊属性，比如主键、唯一键、是否允许为空等等。</li>
</ol>
<p>命令语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    (create_definition,...)</span><br><span class="line">    [table_options]</span><br><span class="line">    [partition_options]</span><br><span class="line"></span><br><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    [(create_definition,...)]</span><br><span class="line">    [table_options]</span><br><span class="line">    [partition_options]</span><br><span class="line">    select_statement</span><br><span class="line"></span><br><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    &#123; LIKE old_tbl_name | (LIKE old_tbl_name) &#125;</span><br></pre></td></tr></table></figure>

<p>创建表有3种方法，常用的为第一种</p>
<p>示例：</p>
<p>创建一个学生信息表，字段分别为stuid,gender,age,mobile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [db1]&gt; CREATE TABLE student ( stuid smallint unsigned auto_increment primary key,name char(10) not null ,gender enum(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;f&#x27;</span>) default <span class="string">&#x27;m&#x27;</span>,age tinyint unsigned,mobile char(11));</span><br><span class="line">Query OK, 0 rows affected (0.006 sec)</span><br></pre></td></tr></table></figure>

<h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><p>查看表结构可以使用DESC命令进行查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看student表的定义</span></span><br><span class="line">MariaDB [db1]&gt; DESC student;</span><br><span class="line">+--------+----------------------+------+-----+---------+----------------+</span><br><span class="line">| Field  | Type                 | Null | Key | Default | Extra          |</span><br><span class="line">+--------+----------------------+------+-----+---------+----------------+</span><br><span class="line">| stuid  | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name   | char(10)             | NO   |     | NULL    |                |</span><br><span class="line">| gender | enum(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;f&#x27;</span>)        | YES  |     | m       |                |</span><br><span class="line">| age    | tinyint(3) unsigned  | YES  |     | NULL    |                |</span><br><span class="line">| mobile | char(11)             | YES  |     | NULL    |                |</span><br><span class="line">+--------+----------------------+------+-----+---------+----------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.011 sec)</span><br></pre></td></tr></table></figure>

<h3 id="查看表创建命令"><a href="#查看表创建命令" class="headerlink" title="查看表创建命令"></a>查看表创建命令</h3><p>如果要查询某表创建时所使用的命令可以使用SHOW CREATE TABLE命令来进行查询</p>
<p>示例：</p>
<p>查询student表创建时所使用的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [db1]&gt; show create table student\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: student</span><br><span class="line">Create Table: CREATE TABLE `student` (</span><br><span class="line">  `stuid` smallint(5) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` char(10) NOT NULL,</span><br><span class="line">  `gender` enum(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;f&#x27;</span>) DEFAULT <span class="string">&#x27;m&#x27;</span>,</span><br><span class="line">  `age` tinyint(3) unsigned DEFAULT NULL,</span><br><span class="line">  `mobile` char(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`stuid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br></pre></td></tr></table></figure>

<h3 id="查看表状态"><a href="#查看表状态" class="headerlink" title="查看表状态"></a>查看表状态</h3><p>使用SHOW TABLE STATUS可以查看表的各种状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [db1]&gt; SHOW TABLE STATUS LIKE <span class="string">&#x27;student&#x27;</span>\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">            Name: student</span><br><span class="line">          Engine: InnoDB</span><br><span class="line">         Version: 10</span><br><span class="line">      Row_format: Dynamic</span><br><span class="line">            Rows: 0</span><br><span class="line">  Avg_row_length: 0</span><br><span class="line">     Data_length: 16384</span><br><span class="line"> Max_data_length: 0</span><br><span class="line">    Index_length: 0</span><br><span class="line">       Data_free: 0</span><br><span class="line">  Auto_increment: 1</span><br><span class="line">     Create_time: 2019-03-18 15:41:06</span><br><span class="line">     Update_time: NULL</span><br><span class="line">      Check_time: NULL</span><br><span class="line">       Collation: utf8mb4_general_ci</span><br><span class="line">        Checksum: NULL</span><br><span class="line">  Create_options:</span><br><span class="line">         Comment:</span><br><span class="line">Max_index_length: 0</span><br><span class="line">       Temporary: N</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br></pre></td></tr></table></figure>

<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>删除表使用DROP TABLE命令</p>
<p>示例：</p>
<p>删除student表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [db1]&gt; DROP TABLE student;</span><br><span class="line">Query OK, 0 rows affected (0.015 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看db1库内的所有表</span></span><br><span class="line">MariaDB [db1]&gt; show tables;</span><br><span class="line">Empty <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"><span class="comment">#已经没有student表</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL日志管理（一）</title>
    <url>/2019/04/17/MySQL/MySQL%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/MySQL%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86--1/</url>
    <content><![CDATA[<h2 id="MySQL的日志"><a href="#MySQL的日志" class="headerlink" title="MySQL的日志"></a>MySQL的日志</h2><p>MySQL的日志分为事务日志、错误日志、通用日志、慢查询日志、以及二进制日志，此处主要讲解前4种日志的配置及使用方法。二进制日志将在下一节中单独讲解。</p>
<h3 id="事务日志-transaction-log"><a href="#事务日志-transaction-log" class="headerlink" title="事务日志(transaction log)"></a>事务日志(transaction log)</h3><p>事务日志默认的存放位置为MySQL的数据库目录下的ib_logfile0、ib_logfile1</p>
<p>生产环境中建议将事务日志存放在单独的分区中，防止产生IO的争用。</p>
<p>Innodb事务日志相关配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#innodb事务日志相关配置可以使用以下命令进行查看</span></span><br><span class="line">show variables like <span class="string">&#x27;%innodb_log&#x27;</span>;</span><br><span class="line"><span class="comment">#查询出的结果</span></span><br><span class="line">innodb_log_block_size</span><br><span class="line">innodb_log_file_size   5242880   每个日志文件大小，生产环境建议将此数值改大到几百兆，5M数值太小</span><br><span class="line">innodb_log_files_in_group  2      日志组成员个数  </span><br><span class="line">innodb_log_group_home_dir  ./   事务文件路径  </span><br><span class="line">innodb_flush_log_at_trx_commit  默认为1</span><br></pre></td></tr></table></figure>

<p><em><strong>innodb_flush_log_at_trx_commit</strong></em></p>
<p>0: 提交时没有任何操作; 而是每秒执行一次日志缓冲区写入和刷新。这样可以提供更好的性能，但服务器崩溃可以清除最后一秒的事务</p>
<p>1: 默认情况下，日志缓冲区将写入日志文件，并在每次事务后执行刷新到磁盘。这是完全遵守ACID特性</p>
<p>2: 每次提交后都会写入日志缓冲区，但每秒都会进行一次刷新。性能比0略好一些，但操作系统或停电可能导致最后一秒的交易丢失</p>
<p>3: 模拟MariaDB 5.5组提交（每组提交3个同步），此项MariaDB 10.0支持</p>
<p>此参数修改方法/etc/my.cnf文件中进行修改。</p>
<h4 id="事务日志和数据分开存放"><a href="#事务日志和数据分开存放" class="headerlink" title="事务日志和数据分开存放"></a>事务日志和数据分开存放</h4><p>在生产中建议将事务日志存放到一个独立的分区中，带来的好处是性能更优。如果事务日志和数据库存放在一个磁盘上，既要写数据库又要写事务日志，这时候两个写操作都往同一磁盘内写数据必然会涉及到IO争用问题。如果将其存放到不同的磁盘上，这时候数据库和事务日志各写各的，理论上效率更高。</p>
<p>1.创建事务日志目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /data/tlog</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown -R mysql.mysql /data/tlog</span></span><br></pre></td></tr></table></figure>

<p>2.修改配置文件指定事务日志的存放位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">innodb_log_group_home_dir=/data/tlog</span><br></pre></td></tr></table></figure>

<p>3.重启MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># service mysqld restart</span></span><br><span class="line">Restarting mysqld (via systemctl):                         [  OK  ]</span><br><span class="line">[root@localhost ~]<span class="comment"># ll /data/tlog/</span></span><br><span class="line">total 98304</span><br><span class="line">-rw-rw---- 1 mysql mysql 50331648 May  5 04:35 ib_logfile0</span><br><span class="line">-rw-rw---- 1 mysql mysql 50331648 May  5 04:35 ib_logfile1</span><br></pre></td></tr></table></figure>

<h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><p>mysqld启动和关闭过程中输出的事件信息</p>
<p>mysqld运行中产生的错误信息</p>
<p>event scheduler运行一个event时产生的日志信息</p>
<p>在主从复制架构中的从服务器上启动从服务器线程时产生的信息</p>
<p>错误日志相关配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">log_error=/PATH/TO/LOG_ERROR_FILE    <span class="comment">#错误日志的存放位置</span></span><br><span class="line">log_warnings=1|0 默认值1             <span class="comment">#是否记录警告信息至错误日志文件，1为记录警告信息，0为不记录警告信息只记录错误信息。</span></span><br></pre></td></tr></table></figure>

<h3 id="通用日志"><a href="#通用日志" class="headerlink" title="通用日志"></a>通用日志</h3><p>通用日志：记录对数据库的通用操作，包括错误的SQL语句，数据库的通用日志默认没有启用。</p>
<p>通用日志相关设置，在配置文件中修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在配置文件/etc/my.cnf中添加以下三行信息即可开启通用日志</span></span><br><span class="line">general_log=ON|OFF                  <span class="comment">#通用日志默认为关闭</span></span><br><span class="line">general_log_file=HOSTNAME.log       <span class="comment">#通用日志的名字默认为主机名.log</span></span><br><span class="line">log_output=TABLE|FILE|NONE          <span class="comment">#通用日志可以存放在文件中，也可以存放在表中，表放在MySQL库中general_log</span></span><br></pre></td></tr></table></figure>

<h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志：记录执行查询时长超出指定时长的操作，其配置在配置文件中进行修改</p>
<p>慢查询日志相关配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slow_query_log=ON|OFF       <span class="comment">#开启或关闭慢查询</span></span><br><span class="line">long_query_time=N           <span class="comment">#慢查询的阀值，单位秒</span></span><br><span class="line">slow_query_log_file=HOSTNAME-slow.log         <span class="comment">#慢查询日志文件</span></span><br><span class="line">log_slow_filter = admin,filesort,filesort_on_disk,full_join,full_scan, query_cache,query_cache_miss,tmp_table,tmp_table_on_disk    <span class="comment">#上述查询类型且查询时长超过long_query_time，则记录日志</span></span><br><span class="line">log_queries_not_using_indexes=ON               <span class="comment">#不使用索引或使用全索引扫描，不论是否达到慢查询阀值的语句是否记录日志，默认OFF，即不记录</span></span><br><span class="line">log_slow_rate_limit = 1                 <span class="comment">#多少次查询才记录，mariadb特有</span></span><br><span class="line">log_slow_verbosity= Query_plan,explain       <span class="comment">#记录内容</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL日志管理（二）</title>
    <url>/2019/04/17/MySQL/MySQL%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/MySQL%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86--2/</url>
    <content><![CDATA[<h2 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h2><p>由于事务日志严重依赖于存储引擎，比如MyISAM不支持事务，所以对于MyISAM来说就没有事务日志这个概念，只有InnoDB才有事务日志。事务日志内记录的内容，已提交的事务未提交的事务都需要记录到事务日志中，而二进制日志不同。</p>
<p>二进制日志又叫存档日志，记录那些已提交的确定的事件，记录导致数据改变或潜在导致数据改变的SQL语句。二进制日志不依赖于存储引擎。二进制日志详细的记录了数据库所有的增删改操作，所以二进制日志就相当于忠实的记录了数据库的所有的行为（增、删、改）。所以利用二进制日志可以分析了解数据库内数据变化的整个过程。因为二进制日志记录了数据库内所有数据的行为，所以可以通过“重放”日志文件中的事件来生成数据副本，也就是说通过重放二进制日志文件来生成新的数据库备份。基于安全考虑，强烈建议将二进制日志文件和数据文件进行分开存放。</p>
<h3 id="二进制日志的记录格式"><a href="#二进制日志的记录格式" class="headerlink" title="二进制日志的记录格式"></a>二进制日志的记录格式</h3><p>二进制日志有3种格式</p>
<ol>
<li>statement：基于语句记录，默认</li>
<li>row:基于行记录，记录的是数据，日志量较大。</li>
<li>mixed:混合模式，系统自行判断基于那种方式进行记录</li>
</ol>
<p>在工作中，推荐基于row的方式进行记录</p>
<h3 id="二进制日志的开启方式"><a href="#二进制日志的开启方式" class="headerlink" title="二进制日志的开启方式"></a>二进制日志的开启方式</h3><p>二进制日志需要启动两个选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sql_log_bin   <span class="comment">#sql_log_bin为会话级的变量可以在MySQL内通过set命令来修改</span></span><br><span class="line">log_bin       <span class="comment">#log_bin为选项需要写在配置文件中。</span></span><br></pre></td></tr></table></figure>

<p>sql_log_bin默认已经开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show variables like <span class="string">&#x27;sql_log_bin&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| sql_log_bin   | ON    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>由于是二进制安装的MySQL所以默认的配置文件中log_bin也是开启的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show variables like <span class="string">&#x27;log_bin&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | ON    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>但是配置文件中默认定义的二进制日志是存放在和数据库一起，不复合我们的要求需要修改，将其更改至其他目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/mysql/my.cnf</span></span><br><span class="line">log-bin=/data/bin/mysql-bin</span><br></pre></td></tr></table></figure>

<p>为二进制日志创建存放目录，并修改目录的属主和属组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /data/bin</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown -R mysql.mysql /data/bin</span></span><br></pre></td></tr></table></figure>

<p>然后重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># service mysql restart</span></span><br></pre></td></tr></table></figure>

<p>再次查看二进制日志存放的目录，此时已经在目录下产生了二进制日志文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /data/bin/</span></span><br><span class="line">total 8</span><br><span class="line">-rw-rw---- 1 mysql mysql 328 May  6 03:31 mysql-bin.000001</span><br><span class="line">-rw-rw---- 1 mysql mysql  27 May  6 03:31 mysql-bin.index</span><br></pre></td></tr></table></figure>

<h3 id="二进制日志相关的变量"><a href="#二进制日志相关的变量" class="headerlink" title="二进制日志相关的变量"></a>二进制日志相关的变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max_binlog_size=1073741824     <span class="comment">#单个二进制日志文件的最大体积，到达最大值会自动滚动，默认为1G</span></span><br><span class="line">sync_binlog=1|0    <span class="comment">#设定是否启动二进制日志即时同步磁盘功能，默认为0由操作系统负责同步日志到磁盘，1.表示立即写入日志到磁盘</span></span><br><span class="line">expire_logs_days=N  <span class="comment">#二进制日志可以自动删除的天数，默认为0，不自动删除。</span></span><br></pre></td></tr></table></figure>

<h3 id="二进制日志相关的一些命令"><a href="#二进制日志相关的一些命令" class="headerlink" title="二进制日志相关的一些命令"></a>二进制日志相关的一些命令</h3><p>SHOW MASTER LOGS:查看使用中的二进制日志文件列表及大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW MASTER LOGS;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       328 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>SHOW MASTER STATUS:查看使用中的二进制日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW MASTER STATUS;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000001 |      328 |              |                  |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>SHOW BINLOG EVENTS:查看二进制文件中记录的各种操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW BINLOG EVENTS IN <span class="string">&#x27;mysql-bin.000001&#x27;</span>;</span><br><span class="line">+------------------+-----+-------------------+-----------+-------------+------------------------------------------------+</span><br><span class="line">| Log_name         | Pos | Event_type        | Server_id | End_log_pos | Info                                           |</span><br><span class="line">+------------------+-----+-------------------+-----------+-------------+------------------------------------------------+</span><br><span class="line">| mysql-bin.000001 |   4 | Format_desc       |         1 |         256 | Server ver: 10.2.23-MariaDB-log, Binlog ver: 4 |</span><br><span class="line">| mysql-bin.000001 | 256 | Gtid_list         |         1 |         285 | []                                             |</span><br><span class="line">| mysql-bin.000001 | 285 | Binlog_checkpoint |         1 |         328 | mysql-bin.000001                               |</span><br><span class="line">+------------------+-----+-------------------+-----------+-------------+------------------------------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>查看二进制日志中指定的位置的操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW BINLOG EVENTS IN <span class="string">&#x27;mysql-bin.000001&#x27;</span> from 285;</span><br><span class="line">+------------------+-----+-------------------+-----------+-------------+------------------+</span><br><span class="line">| Log_name         | Pos | Event_type        | Server_id | End_log_pos | Info             |</span><br><span class="line">+------------------+-----+-------------------+-----------+-------------+------------------+</span><br><span class="line">| mysql-bin.000001 | 285 | Binlog_checkpoint |         1 |         328 | mysql-bin.000001 |</span><br><span class="line">+------------------+-----+-------------------+-----------+-------------+------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="二进制日志的客户端命令工具"><a href="#二进制日志的客户端命令工具" class="headerlink" title="二进制日志的客户端命令工具"></a>二进制日志的客户端命令工具</h3><p>mysqlbinlog</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog [options] log_file...</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>option</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>start-position</td>
<td>指定开始位置</td>
</tr>
<tr>
<td>stop-position</td>
<td>指定结束位置</td>
</tr>
<tr>
<td>start-datetime</td>
<td>指定开始的时间</td>
</tr>
<tr>
<td>stop-datetime</td>
<td>指定结束的时间</td>
</tr>
<tr>
<td>base64-output[=name]</td>
<td>使用base64格式导出</td>
</tr>
<tr>
<td>-v -vvv</td>
<td>显示详细信息</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysqlbinlog --start-position=8309 --stop-position=8639 /data/bin/mysql-bin.000001 -v    #-v选项可以将base64编码转换为可读的信息。</span></span><br><span class="line">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;</span><br><span class="line">/*!40019 SET @@session.max_insert_delayed_threads=0*/;</span><br><span class="line">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;</span><br><span class="line">DELIMITER /*!*/;</span><br><span class="line"><span class="comment"># at 4</span></span><br><span class="line"><span class="comment">#190506  3:31:11 server id 1  end_log_pos 256 CRC32 0x0c261669 	Start: binlog v 4, server v 10.2.23-MariaDB-log created 190506  3:31:11 at startup</span></span><br><span class="line"><span class="comment"># Warning: this binlog is either in use or was not closed properly.</span></span><br><span class="line">ROLLBACK/*!*/;</span><br><span class="line">BINLOG <span class="string">&#x27;</span></span><br><span class="line"><span class="string">/znPXA8BAAAA/AAAAAABAAABAAQAMTAuMi4yMy1NYXJpYURCLWxvZwAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="line"><span class="string">AAAAAAAAAAAAAAAAAAD/Oc9cEzgNAAgAEgAEBAQEEgAA5AAEGggAAAAICAgCAAAACgoKAAAAAAAA</span></span><br><span class="line"><span class="string">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="line"><span class="string">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="line"><span class="string">AAAAAAAAAAAEEwQADQgICAoKCgFpFiYM</span></span><br><span class="line"><span class="string">&#x27;</span>/*!*/;</span><br><span class="line"><span class="comment"># at 8309</span></span><br><span class="line"><span class="comment">#190506  4:11:55 server id 1  end_log_pos 8351 CRC32 0x4cbdba04 	GTID 0-1-33 ddl</span></span><br><span class="line">/*!100101 SET @@session.skip_parallel_replication=0*//*!*/;</span><br><span class="line">/*!100001 SET @@session.gtid_domain_id=0*//*!*/;</span><br><span class="line">/*!100001 SET @@session.server_id=1*//*!*/;</span><br><span class="line">/*!100001 SET @@session.gtid_seq_no=33*//*!*/;</span><br><span class="line"><span class="comment"># at 8351</span></span><br><span class="line"><span class="comment">#190506  4:11:55 server id 1  end_log_pos 8639 CRC32 0x8b15477f 	Query	thread_id=12	exec_time=0	error_code=0</span></span><br><span class="line">use `hellodb`/*!*/;</span><br><span class="line">SET TIMESTAMP=1557087115/*!*/;</span><br><span class="line">SET @@session.pseudo_thread_id=12/*!*/;</span><br><span class="line">SET @@session.foreign_key_checks=0, @@session.sql_auto_is_null=0, @@session.unique_checks=0, @@session.autocommit=1, @@session.check_constraint_checks=1/*!*/;</span><br><span class="line">SET @@session.sql_mode=524288/*!*/;</span><br><span class="line">SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;</span><br><span class="line">/*!\C utf8 *//*!*/;</span><br><span class="line">SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33/*!*/;</span><br><span class="line">SET @@session.lc_time_names=0/*!*/;</span><br><span class="line">SET @@session.collation_database=DEFAULT/*!*/;</span><br><span class="line">CREATE TABLE `toc` (</span><br><span class="line">  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `CourseID` smallint(5) unsigned DEFAULT NULL,</span><br><span class="line">  `TID` smallint(5) unsigned DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`ID`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line">/*!*/;</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment"># End of log file</span></span><br><span class="line">ROLLBACK /* added by mysqlbinlog */;</span><br><span class="line">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;</span><br><span class="line">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;</span><br></pre></td></tr></table></figure>

<h3 id="二进制日志的清理"><a href="#二进制日志的清理" class="headerlink" title="二进制日志的清理"></a>二进制日志的清理</h3><p>1.重新生成一个二进制日志</p>
<p>FLUSH LOGS;重新生成二进制日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW MASTER LOGS;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |      8993 |</span><br><span class="line">| mysql-bin.000002 |       385 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;  FLUSH LOGS;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; SHOW MASTER LOGS;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |      8993 |</span><br><span class="line">| mysql-bin.000002 |       432 |</span><br><span class="line">| mysql-bin.000003 |       385 |</span><br><span class="line">+------------------+-----------+</span><br></pre></td></tr></table></figure>

<p>2.清理二进制日志</p>
<p>PURGE BINARY LOGS TO ‘’:删除二进制文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW MASTER LOGS;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |      8993 |</span><br><span class="line">| mysql-bin.000002 |       432 |</span><br><span class="line">| mysql-bin.000003 |       432 |</span><br><span class="line">| mysql-bin.000004 |       432 |</span><br><span class="line">| mysql-bin.000005 |       432 |</span><br><span class="line">| mysql-bin.000006 |       432 |</span><br><span class="line">| mysql-bin.000007 |       432 |</span><br><span class="line">| mysql-bin.000008 |       408 |</span><br><span class="line">| mysql-bin.000009 |       389 |</span><br><span class="line">| mysql-bin.000010 |       432 |</span><br><span class="line">| mysql-bin.000011 |       385 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除旧的二进制文件，表示删除指定的二进制日志之前的日志。</span></span><br><span class="line">MariaDB [(none)]&gt; PURGE BINARY LOGS TO <span class="string">&#x27;mysql-bin.000011&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; SHOW MASTER LOGS;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000011 |       385 |      <span class="comment">#mysql-bin.000011之前的日志已经删除。</span></span><br><span class="line">+------------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>3.重置二进制日志更新计数</p>
<p>RESET MASTER;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW MASTER LOGS;     <span class="comment">#查看下当前二进制日志计数</span></span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000011 |       385 |        <span class="comment">#当前二进制日计数为mysql-bin.000011</span></span><br><span class="line">+------------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; RESET MASTER;         <span class="comment">#重置计数</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; SHOW MASTER LOGS;      <span class="comment">#再次查看日志计数</span></span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       328 |          <span class="comment">#现在计数已经变为mysql-bin.000001</span></span><br><span class="line">+------------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#MariaDB从10.1.6之后开始支持TO，RESET MASTER [TO #];重置二进制日志到指定的日志计数。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL服务器配置</title>
    <url>/2019/04/17/MySQL/MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>在MySQL数据库运行时，它本质上是跑了一个mysqld的进程，是由mysqld_safe来调用的。mysql_safe是一个脚本，脚本内调用了mysqld二进制程序，所以数据库真正运行时，是靠mysqld对外进行服务的，而mysqld是一个服务器软件，在其背后还支持一些参数和选项。</p>
<h2 id="mysqld选项，服务器系统变量和服务器状态变量的区别"><a href="#mysqld选项，服务器系统变量和服务器状态变量的区别" class="headerlink" title="mysqld选项，服务器系统变量和服务器状态变量的区别"></a>mysqld选项，服务器系统变量和服务器状态变量的区别</h2><h3 id="mysqld选项"><a href="#mysqld选项" class="headerlink" title="mysqld选项"></a>mysqld选项</h3><p>mysqld选项就是在进程中mysqld后面所跟的各种参数，这些选项都能存放在服务器的配置文件/etc/my.cnf中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Packages]<span class="comment"># ps -aux | grep mysqld</span></span><br><span class="line">mysql      9206  0.1  3.5 2275296 144752 ?      Sl   16:09   0:01 /app/mysql/bin/mysqld --basedir=/app/mysql --datadir=/data/mysql --plugin-dir=/app/mysql/lib/plugin --user=mysql --log-error=/var/<span class="built_in">log</span>/mariadb/mariadb.log --pid-file=/data/mysql/localhost.localdomain.pid --socket=/data/mysql/mysql.sock --port=3306  </span><br><span class="line"><span class="comment">#mysqld后面所跟的各种参数为选项</span></span><br></pre></td></tr></table></figure>

<p>msyqld的选项可以通过命令查询，所列出的为mysqld所支持的选项的默认值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --<span class="built_in">help</span> -v</span><br></pre></td></tr></table></figure>

<h3 id="MySQL的服务器系统变量"><a href="#MySQL的服务器系统变量" class="headerlink" title="MySQL的服务器系统变量"></a>MySQL的服务器系统变量</h3><p>变量可以在MySQL中使用show variables来进行查看，有些变量即时选项又是变量，变量又分为全局性变量和会话级变量，全局性变量影响了所有登陆的用户，会话级只影响当前的登陆的用户。</p>
<p>详细可以参考mariadb的官方文档。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://mariadb.com/kb/en/library/full-list-of-mariadb-options-system-and-status-variables/</span><br></pre></td></tr></table></figure>

<p>获取系统变量的方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW GLOBAL VARIABLES;   <span class="comment">#获取全局性的变量</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW VARIABLES;          <span class="comment">#获取会话级的变量</span></span><br></pre></td></tr></table></figure>

<p>变量的设置方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SET GLOBAL system_var_name=value;     <span class="comment">#设置全局性的变量</span></span><br><span class="line">MariaDB [(none)]&gt; SET system_var_name=value;            <span class="comment">#设置会话级的变量</span></span><br></pre></td></tr></table></figure>

<h3 id="系统的状态变量"><a href="#系统的状态变量" class="headerlink" title="系统的状态变量"></a>系统的状态变量</h3><p>系统的状态变量又称为系统的只读变量，里面存放的是系统当前的状态信息</p>
<p>查看方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW STATUS LIKE <span class="string">&#x27;value_name&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>查看系统的启动时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW STATUS LIKE <span class="string">&#x27;uptime&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Uptime        | 2602  |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>服务器相关的一些常用选项、变量和状态变量<br>选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">skip_name_resolve:禁止把ip地址反向解析成名称建议添加</span><br></pre></td></tr></table></figure>
<p>变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max_connections:最大连接数</span><br><span class="line">SQL_MODE:</span><br><span class="line">    NO_AUTO_CREATE_USER:禁止授权创建密码为空的用户</span><br><span class="line">    NO_ZERO_DATA:在严格模式，不允许使用<span class="string">&#x27;0000-00-00&#x27;</span>的时间</span><br><span class="line">    ONLY_RULL_GROUP_BY:对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么将任务这个SQL是不合法的</span><br><span class="line">    NO_BACKSLASH_ESCAPES:反斜杠<span class="string">&quot;\&quot;作为普通字符而不是转义字符</span></span><br><span class="line"><span class="string">    PIPES_AS_CONCAT:将&quot;</span>||<span class="string">&quot;视为连接操作符而非“或运算符”</span></span><br><span class="line"><span class="string">    TRADITIONAL:当插入表的数据长度超长时不是截断，而是报错</span></span><br></pre></td></tr></table></figure>
<p>状态变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Threads_connected:多少线程被连接</span><br><span class="line">Threads_created:多少线程被创建</span><br><span class="line">Threads_running:多少线程正在运行</span><br><span class="line">com_select:当前数据库的查询次数</span><br><span class="line">com_insert:表的添加次数</span><br></pre></td></tr></table></figure>

<p>MySQL的查询缓存<br>查询缓存是基于hash算法的，要求命令和查询的参数大小写必须完全一致，当有新的查询语句或预处理查询请求，先去查询缓存，判断是否存在纪录集，若存在则直接返回结果。<br>查询缓存的优缺点<br>优点是sql语句不需要做任何解析和执行，直接从缓存中获得查询结合，提高了查询性能<br>缺点是不够智能，提高了缓存使用门槛，增加了缓存记录集检查和清理的开销。<br>有些查询是无法被缓存的比如：<br>1.查询的语句中带了SQL_NO_CACHE参数<br>2.查询语句中含有获取值的函数。如：NOW(),CURDATE(),GET_LOCK(),RAND()、CONVERT_TZ()等<br>3.对系统数据库查询时使用会话级别的变量或存储过程中的局部变量。<br>4.查询语句中加了锁不会使用缓存<br>5.对临时表的查询，存在警告信息的查询，只有列级别权限的查询。<br>6.事务隔离级别为serializable的不能缓存<br>缓存的相关变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">query_cache_limit</span><br><span class="line"><span class="comment">#单个查询结果能缓存的最大值，默认为1M。过大的值将无法缓存</span></span><br><span class="line">query_cache_min_res_unit</span><br><span class="line"><span class="comment">#在内存中给缓存分配的最小单位，默认为4K，较小值会减少浪费，但会产生频繁的内存分配，如果设置较大，则会造成浪费。     </span></span><br><span class="line">query_cache_size             </span><br><span class="line"><span class="comment">#总的用来放查询缓存的内存空间，最小为40K，必须为1024的整数倍。要长期有效需要写入配置文件。</span></span><br><span class="line">query_cache_strip_comments   </span><br><span class="line">query_cache_type             </span><br><span class="line"><span class="comment">#是否启用缓存默认为开启</span></span><br><span class="line">query_cache_wlock_invalidate </span><br><span class="line"><span class="comment">#如果表被其他的会话锁定，是否仍然可以从查询缓存中返回结果，默认为off,表示可以在表被其他会话锁定的场景中继续从缓存返回数据；ON则表示不允许</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查询缓存相关的状态变量，可以使用SHOW GLOBAL STATUS LIKE ‘Qcache%’;查询</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Qcache_free_blocks      <span class="comment">#处于空闲状态缓存中内存块数</span></span><br><span class="line">Qcache_total_blocks     <span class="comment">#缓存中总块，当Qcache_free_blocks相对此值较大时，可能用内存碎片，执行FLUSH QUERY CACHE清理碎片</span></span><br><span class="line">Qcache_free_memory      <span class="comment">#处于空闲状态的缓存内存总量</span></span><br><span class="line">Qcache_hits：Query Cache    <span class="comment">#命中次数</span></span><br><span class="line">Qcache_inserts：向 Query Cache  <span class="comment">#中插入新的缓存的次数，即没有命中的次数</span></span><br><span class="line">Qcache_lowmem_prunes    <span class="comment">#记录因为内存不足而被移除出查询缓存的查询数</span></span><br><span class="line">Qcache_not_cached       <span class="comment">#没有被缓存的记录数，包括无法被缓存的记录以及由于query_cache_type设置的不会被缓存的SQL语句</span></span><br><span class="line">Qcache_queries_in_cache <span class="comment">#在缓存中的SQL数量</span></span><br></pre></td></tr></table></figure>
<p>缓存的优化方法：<br>缓存的优化方法可以根据缓存优化表来进行查询和修改<br><img src="%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E8%A1%A8.png" alt="缓存优化表.png"></p>
<p>MySQL的索引<br>索引是特殊的数据结构，定义在查找时作为查找条件的字段，在MySQL又称为建可以，索引通过存储引擎实现。<br>索引的类型：<br>B+tree索引：<br>B+tree的所有非叶子节点上只有索引没有有数据，真正的数据都存放在叶子节点上，叶子节点上不仅有索引还有数据。相邻叶子节点的数据块之间有指向性，所以在查找范围时也能使用索引</p>
<p>复合索引<br>复合索引就是把多个字段组合设置为索引，当第一个字段相同时，比对第二个字段。复合索引可以将排在前面的字段作为搜索条件， 但不能将排在后面的字段作为搜索条件。若跳过前一个搜索条件直接搜索第二个字段将导致索引失效。</p>
<p>聚簇索引和非聚簇索引<br>聚簇索引：索引和数据是捆在一起的，所以一张表中只能有一个主键。如果对非主键的字段设立的索引，那么其索引的叶子节点的信息为索引和主键索引的对应关系，通过主键索引的信息找到相对应的数据。（InnoDB就是聚簇分布）<br>非聚簇索引：索引和数据是分开的（MyISAM为非聚簇表分布）</p>
<p>创建索引：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE [ONLINE|OFFLINE] [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name</span><br><span class="line">    [index_type]</span><br><span class="line">    ON tbl_name (index_col_name,...)</span><br><span class="line">    [index_option] ...</span><br><span class="line"></span><br><span class="line">index_col_name:</span><br><span class="line">    col_name [(length)] [ASC | DESC]</span><br><span class="line"></span><br><span class="line">index_type:</span><br><span class="line">    USING &#123;BTREE | HASH&#125;</span><br><span class="line"></span><br><span class="line">index_option:</span><br><span class="line">    KEY_BLOCK_SIZE [=] value</span><br><span class="line">  | index_type</span><br><span class="line">  | WITH PARSER parser_name</span><br><span class="line">  | COMMENT <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>
<p>删除索引：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP INDEX index_name ON tbl_name;</span><br></pre></td></tr></table></figure>
<p>查看索引：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHOW INDEXES FORM tlb_name;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<p>MySQL的并发控制：<br>在数据库中经常设计到并发访问，此时就涉及到不同用户同时修改同一个资源的问题。此时就涉及到一个冲突的问题。为了防止这种冲突的发生，确保数据的安全，就需要对数据加锁的机制，MyISAM使用的是表级锁，InnoDB使用的是行级锁。锁又分为读锁和写锁，读锁也叫共享锁，只可读不可写，多个读互不阻塞，写锁又称为独占锁，写锁会阻碍其他事务的读和写。锁又有隐式锁和显式锁的分别，隐式锁是由存储引擎自动施加的，显式锁式用户自己手动添加的</p>
<p>手动添加锁的方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LOCK TABLES tbl_name lock_type;   <span class="comment">#lock_type可以为read,write也就是读锁和写锁</span></span><br></pre></td></tr></table></figure>
<p>解锁：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>
<p>第二种加锁方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FLUSH TABLES [tbl_name[,...]][WITH READ LOCK]</span><br><span class="line"><span class="comment">#tbl_name如果不添加则对整个数据库加锁，通常在备份前加全局读锁</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL查看数据库表容量大小</title>
    <url>/2019/04/17/MySQL/MySQL%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%AE%B9%E9%87%8F%E5%A4%A7%E5%B0%8F/MySQL%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%AE%B9%E9%87%8F%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<h1 id="MySQL查看数据库表容量大小"><a href="#MySQL查看数据库表容量大小" class="headerlink" title="MySQL查看数据库表容量大小"></a>MySQL查看数据库表容量大小</h1><p>1.查看所有数据库容量大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">sum(table_rows) as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line">sum(truncate(data_length/1024/1024, 2)) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line">sum(truncate(index_length/1024/1024, 2)) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line">group by table_schema</span><br><span class="line">order by sum(data_length) desc, sum(index_length) desc;</span><br></pre></td></tr></table></figure>

<p>2.查看所有数据库各表容量大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">table_name as <span class="string">&#x27;表名&#x27;</span>,</span><br><span class="line">table_rows as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line">truncate(data_length/1024/1024, 2) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line">truncate(index_length/1024/1024, 2) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line">order by data_length desc, index_length desc;</span><br><span class="line">```　　</span><br><span class="line"></span><br><span class="line">3.查看指定数据库容量大小</span><br><span class="line"></span><br><span class="line">例：查看mysql库容量大小</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">sum(table_rows) as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line">sum(truncate(data_length/1024/1024, 2)) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line">sum(truncate(index_length/1024/1024, 2)) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line"><span class="built_in">where</span> table_schema=<span class="string">&#x27;mysql&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>4.查看指定数据库各表容量大小</p>
<p>例：查看mysql库各表容量大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">table_name as <span class="string">&#x27;表名&#x27;</span>,</span><br><span class="line">table_rows as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line">truncate(data_length/1024/1024, 2) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line">truncate(index_length/1024/1024, 2) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line"><span class="built_in">where</span> table_schema=<span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">order by data_length desc, index_length desc;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL用户和权限</title>
    <url>/2019/04/17/MySQL/MySQL%E7%94%A8%E6%88%B7%E5%92%8C%E6%8E%88%E6%9D%83/MySQL%E7%94%A8%E6%88%B7%E5%92%8C%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p>在MySQL中有一个系统自身就带有的数据库叫MySQL，数据库装好以后系统自带了好几个数据库，MySQL就是其中过一个，MySQL数据库有个用户账户权限相关的表叫user表，在其中就有创建的用户。</p>
<p>MySQL中完整的用户名是由用户+主机名形成，主机名决定了这个用户在哪个主机上能登陆。  </p>
<span id="more"></span>
<h2 id="用户的创建、删除和密码修改"><a href="#用户的创建、删除和密码修改" class="headerlink" title="用户的创建、删除和密码修改"></a>用户的创建、删除和密码修改</h2><h3 id="用户的创建"><a href="#用户的创建" class="headerlink" title="用户的创建"></a>用户的创建</h3><p>MySQL创建用户时可以使用create user命令来进行创建，也可以在授权时直接创建出用户。此处将演示create user的用法。</p>
<p>语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create user <span class="string">&#x27;USERNAME&#x27;</span>@<span class="string">&#x27;HOST&#x27;</span> identified by <span class="string">&#x27;PASSWORD&#x27;</span>;</span><br><span class="line"></span><br><span class="line">USERNAME:用户名</span><br><span class="line">HOST:主机地址</span><br><span class="line">PASSWORD:密码</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; create user masuri@192.168.73.133 identified by <span class="string">&#x27;centos&#x27;</span>;   <span class="comment">#创建一个账户，用户名为masuri，指定主机地址为192。168.73.133，指定密码为centos</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; select user,host,password from mysql.user;        <span class="comment">#查询mysql.user表中是否创建了masuri用户</span></span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">| user   | host                  | password                                  |</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">| root   | localhost             |                                           |</span><br><span class="line">| root   | localhost.localdomain |                                           |</span><br><span class="line">| root   | 127.0.0.1             |                                           |</span><br><span class="line">| root   | ::1                   |                                           |</span><br><span class="line">|        | localhost             |                                           |</span><br><span class="line">|        | localhost.localdomain |                                           |</span><br><span class="line">| masuri | 192.168.73.133        | *128977E278358FF80A246B5046F51043A2B1FCED |</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>MySQL删除用户使用DROP命令</p>
<p>语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP USER <span class="string">&#x27;USERNAME&#x27;</span>@<span class="string">&#x27;HOST&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>MySQL中有匿名账户，可以通过跑安全加固脚本mysql_secure_installation来进行删除，也可以手动将其删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; select user,host,password from mysql.user;      <span class="comment">#查看下当前MySQL数据库中都有哪些用户</span></span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">| user   | host                  | password                                  |</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">| root   | localhost             |                                           |</span><br><span class="line">| root   | localhost.localdomain |                                           |</span><br><span class="line">| root   | 127.0.0.1             |                                           |</span><br><span class="line">| root   | ::1                   |                                           |</span><br><span class="line">|        | localhost             |                                           |</span><br><span class="line">|        | localhost.localdomain |                                           |</span><br><span class="line">| masuri | 192.168.73.133        | *128977E278358FF80A246B5046F51043A2B1FCED |</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除匿名用户</span></span><br><span class="line">MariaDB [(none)]&gt; DROP USER <span class="string">&#x27;&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; DROP USER <span class="string">&#x27;&#x27;</span>@<span class="string">&#x27;localhost.localdomain&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#再次查看MySQL数据库中的用户</span></span><br><span class="line">MariaDB [(none)]&gt; select user,host,password from mysql.user;</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">| user   | host                  | password                                  |</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">| root   | localhost             |                                           |</span><br><span class="line">| root   | localhost.localdomain |                                           |</span><br><span class="line">| root   | 127.0.0.1             |                                           |</span><br><span class="line">| root   | ::1                   |                                           |</span><br><span class="line">| masuri | 192.168.73.133        | *128977E278358FF80A246B5046F51043A2B1FCED |</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="mysql密码的修改"><a href="#mysql密码的修改" class="headerlink" title="mysql密码的修改"></a>mysql密码的修改</h3><p>MySQL修改密码有两种方法，可以使用SET PASSWORD命令对其修改，也可以使用UPDATE命令对mysql库中的user表的字段做修改</p>
<p>语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR user = PASSWORD(<span class="string">&#x27;cleartext password&#x27;</span>)</span><br><span class="line">UPDATE table SET password = password(<span class="string">&#x27;cleartext password&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>对masuri用户做密码的修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SET PASSWORD FOR masuri@192.168.73.133 = PASSWORD (<span class="string">&#x27;magedu&#x27;</span>);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; select user,host,password from mysql.user;</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">| user   | host                  | password                                  |</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">| root   | localhost             |                                           |</span><br><span class="line">| root   | localhost.localdomain |                                           |</span><br><span class="line">| root   | 127.0.0.1             |                                           |</span><br><span class="line">| root   | ::1                   |                                           |</span><br><span class="line">| masuri | 192.168.73.133        | *6B8CCC83799A26CD19D7AD9AEEADBCD30D8A8664 |</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line"><span class="comment">#此时密码已经发生改变</span></span><br></pre></td></tr></table></figure>

<p>root账号口令为空，为root口令设置口令，由于一条一条的设置太过麻烦也可以使用修改表的操作来修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; update mysql.user <span class="built_in">set</span> password=password(<span class="string">&#x27;centos&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;    <span class="comment">#匹配user字段为root的账户密码全部改为centos</span></span><br><span class="line">Query OK, 4 rows affected (0.01 sec)</span><br><span class="line">Rows matched: 4  Changed: 4  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; select user,host,password from mysql.user;</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">| user   | host                  | password                                  |</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">| root   | localhost             | *128977E278358FF80A246B5046F51043A2B1FCED |</span><br><span class="line">| root   | localhost.localdomain | *128977E278358FF80A246B5046F51043A2B1FCED |</span><br><span class="line">| root   | 127.0.0.1             | *128977E278358FF80A246B5046F51043A2B1FCED |</span><br><span class="line">| root   | ::1                   | *128977E278358FF80A246B5046F51043A2B1FCED |</span><br><span class="line">| masuri | 192.168.73.133        | *6B8CCC83799A26CD19D7AD9AEEADBCD30D8A8664 |</span><br><span class="line">+--------+-----------------------+-------------------------------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">此时密码已经修改但依旧无法登陆，需要将权限刷新</span><br><span class="line">MariaDB [(none)]&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="MySQL权限管理"><a href="#MySQL权限管理" class="headerlink" title="MySQL权限管理"></a>MySQL权限管理</h2><p>权限管理涉及到多种权限的类别，比如说有管理类、程序类、数据库级别、表级别和字段级别</p>
<p>管理类：能否创建用户，能否显示数据库列表，能否重新加载配置文件，能否关闭数据库，和复制相关的能否执行，能否管理进程，能否创建临时表，能否创建数据库中的文件。  </p>
<p>程序类：主要涉及3个程序，函数、存储过程和触发器，例如能否创建，修改，删除和执行这些程序  </p>
<p>库，表和字段级别的权限：比如能否在库，表字段里进行增、删、查、改等操作  </p>
<h3 id="授权GRANT"><a href="#授权GRANT" class="headerlink" title="授权GRANT"></a>授权GRANT</h3><p>授权用户时如果用户不存在可以将其创建出来，在授权前首先要确认自己是管理员有授权的权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT</span><br><span class="line">    priv_type [(column_list)]</span><br><span class="line">      [, priv_type [(column_list)]] ...</span><br><span class="line">    ON [object_type] priv_level</span><br><span class="line">    TO user_specification [, user_specification] ...</span><br><span class="line">    [REQUIRE &#123;NONE | ssl_option [[AND] ssl_option] ...&#125;]</span><br><span class="line">    [WITH with_option ...]</span><br></pre></td></tr></table></figure>

<p>示例：<br>创建一个wordpress的用户，并授权。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CREATE DATABASE wordpress;</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL ON wordpress.* TO wpuser@<span class="string">&#x27;192.168.73.%&#x27;</span> identified by <span class="string">&#x27;mylinuxops&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="查看用户的权限"><a href="#查看用户的权限" class="headerlink" title="查看用户的权限"></a>查看用户的权限</h3><p>使用show grants 命令可以查看一个账户的授权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show grants <span class="keyword">for</span> wpuser@<span class="string">&#x27;192.168.73.%&#x27;</span>;</span><br><span class="line">+------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Grants <span class="keyword">for</span> wpuser@192.168.73.%                                                                                   |</span><br><span class="line">+------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO <span class="string">&#x27;wpuser&#x27;</span>@<span class="string">&#x27;192.168.73.%&#x27;</span> IDENTIFIED BY PASSWORD <span class="string">&#x27;*EC0DBFB480593BB6ED2EC028A4231A72D8137406&#x27;</span> |</span><br><span class="line">| GRANT ALL PRIVILEGES ON `wordpress`.* TO <span class="string">&#x27;wpuser&#x27;</span>@<span class="string">&#x27;192.168.73.%&#x27;</span>                                                 |</span><br><span class="line">+------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="授权的其他选项"><a href="#授权的其他选项" class="headerlink" title="授权的其他选项"></a>授权的其他选项</h3><p>MySQL在授权时候还可以限制用户的某些操作，其选项有以下这些</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MAX_QUESRIES_PER_HOUR count   <span class="comment">#每小时最多查多少次</span></span><br><span class="line">MAX_UPDATES_PER_HOUR count    <span class="comment">#每小时最多改多少次</span></span><br><span class="line">MAX_CONNECTIONS_PER_HOUR count <span class="comment">#每小时最多连多少次</span></span><br><span class="line">MAX_USER_CONNECTIONS count    <span class="comment">#用户的最大数连接数</span></span><br></pre></td></tr></table></figure>

<h3 id="取消权限"><a href="#取消权限" class="headerlink" title="取消权限"></a>取消权限</h3><p>有授权就有需要授权，取消授权时使用命令为REVOKE，其如法如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REVOKE</span><br><span class="line">    priv_type [(column_list)]</span><br><span class="line">      [, priv_type [(column_list)]] ...</span><br><span class="line">    ON [object_type] priv_level</span><br><span class="line">    FROM user [, user] ...</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>需要<a href="mailto:&#119;&#x70;&#x75;&#x73;&#101;&#x72;&#x40;&#x31;&#57;&#x32;&#46;&#x31;&#54;&#x38;&#46;&#55;&#51;">&#119;&#x70;&#x75;&#x73;&#101;&#x72;&#x40;&#x31;&#57;&#x32;&#46;&#x31;&#54;&#x38;&#46;&#55;&#51;</a>.%这个账号对于wordpress库的删除权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; revoke delete on wordpress.* from wpuser@<span class="string">&#x27;192.168.73.%&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show grants <span class="keyword">for</span> wpuser@<span class="string">&#x27;192.168.73.%&#x27;</span>;</span><br><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Grants <span class="keyword">for</span> wpuser@192.168.73.%                                                                                                                                                                                                         |</span><br><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO <span class="string">&#x27;wpuser&#x27;</span>@<span class="string">&#x27;192.168.73.%&#x27;</span> IDENTIFIED BY PASSWORD <span class="string">&#x27;*EC0DBFB480593BB6ED2EC028A4231A72D8137406&#x27;</span>                                                                                                                       |</span><br><span class="line">| GRANT SELECT, INSERT, UPDATE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `wordpress`.* TO <span class="string">&#x27;wpuser&#x27;</span>@<span class="string">&#x27;192.168.73.%&#x27;</span> |</span><br><span class="line">+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 此时wpuser@&#x27;192.168.73.%&#x27;已经没有了delete权限</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的root口令破解</title>
    <url>/2019/04/17/MySQL/MySQL%E7%9A%84root%E5%8F%A3%E4%BB%A4%E7%A0%B4%E8%A7%A3/MySQL%E7%9A%84root%E5%8F%A3%E4%BB%A4%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="MySQL的root口令破解"><a href="#MySQL的root口令破解" class="headerlink" title="MySQL的root口令破解"></a>MySQL的root口令破解</h2><p>工作中有时候可能会遇到root口令丢失的情况，此时可以通过以下方法进行破解root口令</p>
<span id="more"></span>
<h3 id="MySQL破解root口令演示"><a href="#MySQL破解root口令演示" class="headerlink" title="MySQL破解root口令演示"></a>MySQL破解root口令演示</h3><p>当前环境由于root密码未知无法登陆MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql</span></span><br><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password: NO)</span><br></pre></td></tr></table></figure>

<p>修改配置文件/etc/my.cnf，添加两行参数<br>skip_grant_tables:跳过授权表信息，此项生效后再次使用MySQL就无需使用密码了，但是远程的其他用户也可以不使用密码登陆，有一定的风险性<br>skip_networking:关闭网路功能，由于光启用skip_grant_tables选项，其他用户也可以无需密码登陆MySQL非常危险，所以需要关闭网路功能只允许本地的用户进行操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip_networking=on            <span class="comment">#不启用网络功能</span></span><br><span class="line">skip_grant_tables=on          <span class="comment">#跳过授权表</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># service mysqld restart                            #对位置文件修改后需要重新启动服务</span></span><br><span class="line">Restarting mysqld (via systemctl):                         [  OK  ]</span><br></pre></td></tr></table></figure>

<p>登陆MySQL，进行密码修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql                                           #此时已经无需输入密码就能登陆</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 11</span><br><span class="line">Server version: 10.2.23-MariaDB-log Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; UPDATE mysql.user SET password=PASSWORD(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;        <span class="comment">#对root的口令进行修改</span></span><br><span class="line">Query OK, 4 rows affected (0.01 sec)</span><br><span class="line">Rows matched: 4  Changed: 4  Warnings: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>口令修改完毕后，需要将配置文件恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将刚才启用的两个选项进行注销或者删除，然后重启服务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#skip_networking=on</span></span><br><span class="line"><span class="comment">#skip_grant_tables=on</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># service mysqld restart</span></span><br><span class="line">Restarting mysqld (via systemctl):                         [  OK  ]</span><br></pre></td></tr></table></figure>

<p>使用新口令登陆MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -uroot -p123456</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 10</span><br><span class="line">Server version: 10.2.23-MariaDB-log Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;               <span class="comment">#登录成功</span></span><br></pre></td></tr></table></figure>

<p>以上为MySQL的root口令破解方法</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的事务</title>
    <url>/2019/04/17/MySQL/MySQL%E7%9A%84%E4%BA%8B%E5%8A%A1/MySQL%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h2><p>事务：一组原子性的SQL语句，或一个独立工作单元  </p>
<p>事务日志:记录事务信息，实现undo,redo等故障恢复功能。</p>
<p>UNDO操作:当对数据执行修改操作时会先将数据读入到内存中，然后在内存中进行修改，修改完毕后记录到事务日志，如果一个事务在执行过程中只执行了一半就崩溃了，此时计算机重启后会发现事务不完整就会将之前执行的一半的事务全部撤销不做(undo)，以此来保证数据的完整性。  </p>
<p>REDO操作:假设有2个事务，第一个事务已经完成，开始第二个事务执行到一半时崩溃了，计算机重启后，就会发现第一个事务已经完成，但还能没有写入数据库中，此时就会对第一个事务进行重做(REDO)将修改后的数据写入数据库中，而第二个执行了一半的事务则会撤销不做(UNDO)  </p>
<h2 id="事务的ACID特性"><a href="#事务的ACID特性" class="headerlink" title="事务的ACID特性"></a>事务的ACID特性</h2><p>A:atomicity原子性;整个事务中的所有操作要么全部成功执行，要么全部失败后回滚  </p>
<p>C:consistency一致性;数据库总是从一个一致性状态转换为另一个一致性状态  </p>
<p>I:Isolation隔离性;一个事务所做出的操作在提交之前，是不能为其他事务所见，隔离有多种隔离级别，实现并发  </p>
<p>D：durability持久性;一旦事务提交，其所作的修改会永久保存于数据库中。  </p>
<h2 id="事务的生命周期"><a href="#事务的生命周期" class="headerlink" title="事务的生命周期"></a>事务的生命周期</h2><p>启动事务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br></pre></td></tr></table></figure>

<p>结束事务:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">COMMIT;                    <span class="comment">#提交</span></span><br><span class="line">ROLLBACK;                  <span class="comment">#回滚</span></span><br></pre></td></tr></table></figure>

<h2 id="事务的使用方法"><a href="#事务的使用方法" class="headerlink" title="事务的使用方法"></a>事务的使用方法</h2><p>t1表内现有数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; INSERT t1 VALUE(2,<span class="string">&#x27;Ye Fan&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; SELECT * FROM t1;</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | Lin Dong |</span><br><span class="line">|  2 | Ye Fan   |</span><br><span class="line">+----+----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>开始事务<br>对t1表内插入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; BEGIN;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="comment">#对t1表插入数据</span></span><br><span class="line">MariaDB [hellodb]&gt; INSERT t1 VALUE(3,<span class="string">&#x27;Shi Hao&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; INSERT t1 VALUE(4,<span class="string">&#x27;Chu Feng&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询下t1表</span></span><br><span class="line">MariaDB [hellodb]&gt; select * from t1;</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | Lin Dong |</span><br><span class="line">|  2 | Ye Fan   |</span><br><span class="line">|  3 | Shi Hao  |</span><br><span class="line">|  4 | Chu Feng |</span><br><span class="line">+----+----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>由于此时还没有进行提交，虽然本地能查询到，但切换到其他的终端查询到数据依旧为老的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换终端对t1表进行查询，此时返回的结果依旧为旧的数据</span></span><br><span class="line">MariaDB [(none)]&gt; select * from hellodb.t1;</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | Lin Dong |</span><br><span class="line">|  2 | Ye Fan   |</span><br><span class="line">+----+----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>切换回本地对数据进行提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>再次切换至其他终端，此时已经能查询到新增加的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; select * from hellodb.t1;</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | Lin Dong |</span><br><span class="line">|  2 | Ye Fan   |</span><br><span class="line">|  3 | Shi Hao  |</span><br><span class="line">|  4 | Chu Feng |</span><br><span class="line">+----+----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>事务还能进行回滚</p>
<p>对t1表内插入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; BEGIN;                                            <span class="comment">#开始事务</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; INSERT t1 VALUE(5,<span class="string">&#x27;Qing Di&#x27;</span>);                     <span class="comment">#对t1表插入数据</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; SELECT * FROM t1;                                 <span class="comment">#查询t1表</span></span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | Lin Dong |</span><br><span class="line">|  2 | Ye Fan   |</span><br><span class="line">|  3 | Shi Hao  |</span><br><span class="line">|  4 | Chu Feng |</span><br><span class="line">|  5 | Qing Di  |                                                   <span class="comment">#新增了第5条记录</span></span><br><span class="line">+----+----------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; ROLLBACK;                                        <span class="comment">#对数据进行回滚</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; SELECT * FROM t1;                                <span class="comment">#再次查询，此时已经没有第5条记录了</span></span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | Lin Dong |</span><br><span class="line">|  2 | Ye Fan   |</span><br><span class="line">|  3 | Shi Hao  |</span><br><span class="line">|  4 | Chu Feng |</span><br><span class="line">+----+----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>事务的自动提交</p>
<p>在默认情况下MySQL执行增删改命令时是自动提交的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; SHOW VARIABLES LIKE <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| autocommit    | ON    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>也可以将其设置为手动提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; <span class="built_in">set</span> autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; SHOW VARIABLES LIKE <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| autocommit    | OFF   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>此处需要注意的是DDL语句是会自动提交的。</p>
<p>事务的保存点</p>
<p>事务还支持保存点savepoint</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SAVEPOINT identifier</span><br><span class="line">ROLLBACK TO [SAVEPOINT] identifier</span><br><span class="line">RELEASWE SAVEPOINT identifier</span><br></pre></td></tr></table></figure>

<p>保存点可以起到部分回滚的效果</p>
<p>保存点使用方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; begin;                   <span class="comment">#开始事务</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; SELECT * FROM t1;        <span class="comment">#此时表内有4条记录</span></span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | Lin Dong |</span><br><span class="line">|  2 | Ye Fan   |</span><br><span class="line">|  3 | Shi Hao  |</span><br><span class="line">|  4 | Chu Feng |</span><br><span class="line">+----+----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; INSERT t1 VALUE(5,<span class="string">&#x27;Cheng Dong&#x27;</span>);     <span class="comment">#对表内添加记录</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; SAVEPOINT <span class="built_in">cd</span>;                        <span class="comment">#设置保存点</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; INSERT t1 VALUE(6,<span class="string">&#x27;Xiao Yan&#x27;</span>);       <span class="comment">#添加记录</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; SAVEPOINT xy;                        <span class="comment">#设置保存点</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; INSERT t1 VALUE(7,<span class="string">&#x27;Mei Dusha&#x27;</span>);      <span class="comment">#添加记录</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; SELECT * FROM t1;                    <span class="comment">#查看表内的记录</span></span><br><span class="line">+----+------------+</span><br><span class="line">| id | name       |</span><br><span class="line">+----+------------+</span><br><span class="line">|  1 | Lin Dong   |</span><br><span class="line">|  2 | Ye Fan     |</span><br><span class="line">|  3 | Shi Hao    |</span><br><span class="line">|  4 | Chu Feng   |</span><br><span class="line">|  5 | Cheng Dong |</span><br><span class="line">|  6 | Xiao Yan   |</span><br><span class="line">|  7 | Mei Dusha  |</span><br><span class="line">+----+------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; ROLLBACK TO xy;                      <span class="comment">#回滚至xy的保存点</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; SELECT * FROM t1;</span><br><span class="line">+----+------------+</span><br><span class="line">| id | name       |</span><br><span class="line">+----+------------+</span><br><span class="line">|  1 | Lin Dong   |</span><br><span class="line">|  2 | Ye Fan     |</span><br><span class="line">|  3 | Shi Hao    |</span><br><span class="line">|  4 | Chu Feng   |</span><br><span class="line">|  5 | Cheng Dong |</span><br><span class="line">|  6 | Xiao Yan   |</span><br><span class="line">+----+------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; commit</span><br></pre></td></tr></table></figure>

<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><ol>
<li><p>READ UNCOMMITTED:可读取未提交数据，产生脏读</p>
</li>
<li><p>READ COMMITTED:可以读到提交数据，但未提交数据不可读，产生不可重复读，即可读取到多个提交数据，导致每次读取数据不一致。</p>
</li>
<li><p>REPEATABLE READ:可重复读，多次读取数据都一致，会产生幻读，即读取过程中，即使有其他提交的事务修改数据，仍只能读取到未修改前的旧数据，此为MySQL的默认设置</p>
</li>
<li><p>SERALIZABLE：可串行化，未提交的读事务阻塞修改事务，或者未提交的修改事务阻塞读事务。导致并发性能差</p>
</li>
</ol>
<p>隔离级别，从上至下越来越严格。</p>
<table>
<thead>
<tr>
<th align="left">事务隔离级别</th>
<th align="left">脏读可能性</th>
<th align="left">不可重复读可能性</th>
<th align="left">幻读可能性</th>
<th align="left">加锁读</th>
</tr>
</thead>
<tbody><tr>
<td align="left">READ UNCOMMITTED</td>
<td align="left">是</td>
<td align="left">是</td>
<td align="left">是</td>
<td align="left">否</td>
</tr>
<tr>
<td align="left">READ COMMITTED</td>
<td align="left">否</td>
<td align="left">是</td>
<td align="left">是</td>
<td align="left">否</td>
</tr>
<tr>
<td align="left">REPEATABLE READ</td>
<td align="left">否</td>
<td align="left">否</td>
<td align="left">是</td>
<td align="left">否</td>
</tr>
<tr>
<td align="left">SERIALIZABLE</td>
<td align="left">否</td>
<td align="left">否</td>
<td align="left">否</td>
<td align="left">是</td>
</tr>
</tbody></table>
<h3 id="事务隔离级别设定"><a href="#事务隔离级别设定" class="headerlink" title="事务隔离级别设定"></a>事务隔离级别设定</h3><p>事务的隔离级别可以通过服务器变量tx_isolation指定，可在全局和会话级进行设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET tx_isolation=<span class="string">&#x27;LEVEL&#x27;</span></span><br></pre></td></tr></table></figure>

<p>查看当前事务隔离级别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;tx_isolation&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>事务的隔离级别也可以通过服务器的选项来指定。</p>
<p>服务器选项为transaction-isolation，需要将其写入配置文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]  </span><br><span class="line">transaction-isolation=SERIALIZABLE</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的备份还原(mysqldump)</title>
    <url>/2019/04/10/MySQL/MySQL%E7%9A%84%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F(mysqldump)/MySQL%E7%9A%84%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F(mysqldump)/</url>
    <content><![CDATA[<p>MySQL的还原前提是要建立在，有完全备份和二进制日志开启的前提下，并且二进制日志文件和完全备份存放在与数据库文件不同的磁盘上，否则当磁盘发生损坏数据将无法进行恢复。</p>
<span id="more"></span>

<h2 id="mysqldump备份还原"><a href="#mysqldump备份还原" class="headerlink" title="mysqldump备份还原"></a>mysqldump备份还原</h2><p>mysqldump是逻辑备份工具，使用于所有存储引擎，温备份；支持完全或部分备份；对InnoDB存储引擎支持热备，结合binlog的增量备份可以实现数据库的完全备份及还原。</p>
<h3 id="mysqldump语法"><a href="#mysqldump语法" class="headerlink" title="mysqldump语法"></a>mysqldump语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#挑选某个库或者挑选某个表来备份，由于此方法没有备份数据库的定义，在还原时需要先创建出数据库，然而原先数据库的定义方式并不知晓，所以此方法不推荐使用</span></span><br><span class="line">mysqldump [OPTIONS] database [tables]</span><br><span class="line"><span class="comment">#使用-B选项后面跟上各数据库的名称，可以选择特定的数据库做备份。使用此方法备份可以备份数据库的定义。</span></span><br><span class="line">mysqldump [OPTIONS] -B DB1 [DB2 DB3 ...]</span><br><span class="line"><span class="comment">#使用-A选项可以备份数据库中除information_schema和performance_schema的所有数据库。</span></span><br><span class="line">mysqldump [OPTIONS] -A [OPTIONS]</span><br></pre></td></tr></table></figure>

<h2 id="开启二进制日志"><a href="#开启二进制日志" class="headerlink" title="开启二进制日志"></a>开启二进制日志</h2><p>开启二进制日志需要将MySQL中的sql_log_bin和log_bin这两个选项</p>
<p>1.开启sql_log_bin</p>
<p>系统中默认开启sql_log_bin选项所以此处无需修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW VARIABLES LIKE <span class="string">&#x27;sql_log_bin&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| sql_log_bin   | ON    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>2.开启log_bin</p>
<p>此选项需要对MySQL的配置文件进行修改，在修改之前需要先创建一个二进制日志存放的位置。<strong>注意：不要和数据库存放在同一磁盘内，不要和数据库存放在同一磁盘内，不要和数据库存放在同一磁盘内</strong>重要的事情说三遍。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /data/bin</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown -R mysql.mysql /data/bin  #将目录的属主和属组都改为mysql</span></span><br></pre></td></tr></table></figure>

<p>二进制日志目录创建完毕后，修改配置文件，添加log-bin选项，并指定路径，此处要注意mysql-bin是二进制日志的抬头。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/mysql/my.cnf</span></span><br><span class="line">log-bin=/data/bin/mysql-bin            <span class="comment">#mysql-bin为二进制日志的文件名的抬头</span></span><br></pre></td></tr></table></figure>

<p>以上配置完成后重启mysql服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># service mysqld restart</span></span><br><span class="line">Restarting mysqld (via systemctl):                         [  OK  ]</span><br></pre></td></tr></table></figure>

<p>此时二进制日志目录下已经多出了两个二进制日志文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /data/bin/</span></span><br><span class="line">total 12</span><br><span class="line">-rw-rw---- 1 mysql mysql 351 May  6 16:51 mysql-bin.000001</span><br><span class="line">-rw-rw---- 1 mysql mysql  54 May  6 16:51 mysql-bin.index</span><br></pre></td></tr></table></figure>

<h2 id="场景一、磁盘损坏恢复"><a href="#场景一、磁盘损坏恢复" class="headerlink" title="场景一、磁盘损坏恢复"></a>场景一、磁盘损坏恢复</h2><p>生产中会发生存放数据的磁盘突然发生损坏而造成数据丢失的情况，此时就需要结合之前所作的完全备份以及二进制日志进行将数据完全恢复</p>
<h3 id="场景模拟"><a href="#场景模拟" class="headerlink" title="场景模拟"></a>场景模拟</h3><p>对数据库进行备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hellodb            |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># mysqldump -A --single-transaction --master-data=2 | xz &gt; /data/all.sql.xz</span></span><br></pre></td></tr></table></figure>

<p>备份完毕后数据库发生小部分变化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; INSERT hellodb.students(stuid,name,gender,age) VALUE(26,<span class="string">&#x27;linchong&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,30) ;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; INSERT hellodb.students(stuid,name,gender,age) VALUE(27,<span class="string">&#x27;Lujunyi&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,30);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>数据库发生破坏，数据丢失</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rm -rf /data/mysql/*</span></span><br></pre></td></tr></table></figure>

<h3 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h3><p>将mysqld服务停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># service mysqld stop</span></span><br><span class="line">Stopping mysqld (via systemctl):                           [  OK  ]</span><br></pre></td></tr></table></figure>

<p>查看下二进制日志，由于每次启动服务都会重新生成一个新的二进制日志，所以先查看下二进制日志的编号以免等下在使用二进制日志还原数据时还原了不必要的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /data/bin/</span></span><br><span class="line">total 504</span><br><span class="line">-rw-rw---- 1 mysql mysql    351 May  6 16:51 mysql-bin.000001</span><br><span class="line">-rw-rw---- 1 mysql mysql   9388 May  6 17:01 mysql-bin.000002</span><br><span class="line">-rw-rw---- 1 mysql mysql     81 May  6 17:03 mysql-bin.index</span><br></pre></td></tr></table></figure>

<p>重启MySQL服务，初始化数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># service mysqld start</span></span><br><span class="line">Starting mysqld (via systemctl):                           [  OK  ]</span><br><span class="line">[root@localhost ~]<span class="comment"># ll /data/mysql/</span></span><br><span class="line">total 122924</span><br><span class="line">-rw-rw---- 1 mysql mysql    16384 May  6 17:01 aria_log.00000001</span><br><span class="line">-rw-rw---- 1 mysql mysql       52 May  6 17:01 aria_log_control</span><br><span class="line">drwx------ 2 mysql mysql      272 May  6 16:54 hellodb</span><br><span class="line">-rw-rw---- 1 mysql mysql     1298 May  6 17:01 ib_buffer_pool</span><br><span class="line">-rw-rw---- 1 mysql mysql 12582912 May  6 17:03 ibdata1</span><br><span class="line">-rw-rw---- 1 mysql mysql 50331648 May  6 17:03 ib_logfile0</span><br><span class="line">-rw-rw---- 1 mysql mysql 50331648 Apr 29 12:49 ib_logfile1</span><br><span class="line">-rw-rw---- 1 mysql mysql 12582912 May  6 17:03 ibtmp1</span><br><span class="line">-rw-rw---- 1 mysql mysql        6 May  6 17:03 localhost.localdomain.pid</span><br><span class="line">-rw-rw---- 1 mysql mysql        0 Apr 29 12:57 multi-master.info</span><br><span class="line">drwx------ 2 mysql root      4096 Apr 29 12:49 mysql</span><br><span class="line">-rw-rw---- 1 mysql mysql      351 Apr 29 14:06 mysql-bin.000001</span><br><span class="line">-rw-rw---- 1 mysql mysql      351 May  6 16:50 mysql-bin.000002</span><br><span class="line">-rw-rw---- 1 mysql mysql       38 May  6 16:26 mysql-bin.index</span><br><span class="line">-rw-rw---- 1 mysql mysql        0 May  6 16:50 mysql-bin.state</span><br><span class="line">srwxrwxrwx 1 mysql mysql        0 May  6 17:03 mysql.sock</span><br><span class="line">drwx------ 2 mysql mysql       20 Apr 29 12:49 performance_schema</span><br><span class="line">drwx------ 2 mysql root         6 Apr 29 12:49 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>将完全备份解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># unxz /data/all.sql.xz</span></span><br></pre></td></tr></table></figure>

<p>由于完全备份后数据又发生过改变所以需要利用二进制日志进行还原，在利用二进制还原前，先查看下完全备份时二进制日志所在的位置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /data/all.sql</span></span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000002&#x27;</span>, MASTER_LOG_POS=8946;</span><br></pre></td></tr></table></figure>

<p>将完全备份后产生二进制日志的数据导出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysqlbinlog --start-position=8946 /data/bin/mysql-bin.000002 &gt; /data/inc.sql</span></span><br></pre></td></tr></table></figure>

<p>进入MySQL,停止二进制日志记录</p>
<p>由于接下来的操作是恢复数据，所以此处不需要让二进制日志记录数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SET sql_log_bin=off;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>导入之前做的完全备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; <span class="built_in">source</span> /data/all.sql</span><br></pre></td></tr></table></figure>

<p>导入完全备份后产生的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; <span class="built_in">source</span> /data/inc.sql</span><br></pre></td></tr></table></figure>

<p>验证，查看数据库，以及完全备份后增加的内容是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -e &#x27;SHOW DATABASES;SELECT * FROM hellodb.students where stuid&gt;25;&#x27;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hellodb            |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">+-------+----------+-----+--------+---------+-----------+</span><br><span class="line">| StuID | Name     | Age | Gender | ClassID | TeacherID |</span><br><span class="line">+-------+----------+-----+--------+---------+-----------+</span><br><span class="line">|    26 | linchong |  30 | M      |    NULL |      NULL |</span><br><span class="line">|    27 | Lujunyi  |  30 | M      |    NULL |      NULL |</span><br><span class="line">+-------+----------+-----+--------+---------+-----------+</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="场景二、误删除的恢复"><a href="#场景二、误删除的恢复" class="headerlink" title="场景二、误删除的恢复"></a>场景二、误删除的恢复</h2><p>生产环境中通常会出现误删除的可能性，此时就需要用到完全备份，和部分修改后的二进制日志来还原数据</p>
<h3 id="场景模拟-1"><a href="#场景模拟-1" class="headerlink" title="场景模拟"></a>场景模拟</h3><p>对数据库进行完全备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysqldump -A --single-transaction --master-data=2 | xz &gt; /data/all.sql.xz</span></span><br></pre></td></tr></table></figure>

<p>一段时间后数据库发生了误删除操作,然后又进行了部分其他的新增的操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; DROP TABLE hellodb.students;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; INSERT hellodb.teachers VALUE (5,<span class="string">&#x27;Jiang Jieshi&#x27;</span>,50,<span class="string">&#x27;M&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>此时发现了数据库hellodb.students表被删除  </p>
<h3 id="恢复数据库"><a href="#恢复数据库" class="headerlink" title="恢复数据库"></a>恢复数据库</h3><p>停止MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># service mysqld stop</span></span><br><span class="line">Stopping mysqld (via systemctl):                           [  OK  ]</span><br></pre></td></tr></table></figure>

<p>将数据库文件内的文件清空</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rm -rf /data/mysql/*</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将完全备份解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># unxz /data/all.sql.xz</span></span><br></pre></td></tr></table></figure>

<p>查看完全备份内，二进制日志的记录点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /data/all.sql</span></span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000003&#x27;</span>, MASTER_LOG_POS=494073;</span><br></pre></td></tr></table></figure>

<p>查看二进制日志，并从二级制日志中导出数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /data/bin/</span></span><br><span class="line">total 508</span><br><span class="line">-rw-rw---- 1 mysql mysql    351 May  6 16:51 mysql-bin.000001</span><br><span class="line">-rw-rw---- 1 mysql mysql   9388 May  6 17:01 mysql-bin.000002</span><br><span class="line">-rw-rw---- 1 mysql mysql 494449 May  6 17:52 mysql-bin.000003</span><br><span class="line">-rw-rw---- 1 mysql mysql     81 May  6 17:03 mysql-bin.index</span><br><span class="line">-rw-rw---- 1 mysql mysql      8 May  6 17:52 mysql-bin.state</span><br><span class="line">[root@localhost ~]<span class="comment"># mysqlbinlog --start-position=494073 /data/bin/mysql-bin.000003 &gt; /data/inc.sql</span></span><br></pre></td></tr></table></figure>

<p>从导出的数据中找到那条误删除的数据将其删除或注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /data/inc.sql</span></span><br><span class="line"><span class="comment">#DROP TABLE `hellodb`.`students` /* generated by server */</span></span><br></pre></td></tr></table></figure>

<p>重启MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># service mysqld start</span></span><br><span class="line">Starting mysqld (via systemctl):                           [  OK  ]</span><br></pre></td></tr></table></figure>

<p>将二进制日志关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SET sql_log_bin=off;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>导入完全备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SOURCE /data/all.sql</span><br><span class="line"></span><br><span class="line">MariaDB [<span class="built_in">test</span>]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hellodb            |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment">#此时被删除的students表已经找回</span></span><br><span class="line">MariaDB [<span class="built_in">test</span>]&gt; SHOW TABLES FROM hellodb;</span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_hellodb |</span><br><span class="line">+-------------------+</span><br><span class="line">| classes           |</span><br><span class="line">| coc               |</span><br><span class="line">| courses           |</span><br><span class="line">| scores            |</span><br><span class="line">| students          |</span><br><span class="line">| teachers          |</span><br><span class="line">| toc               |</span><br><span class="line">+-------------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment">#但是误操作后新加的记录还没有找回</span></span><br><span class="line">MariaDB [<span class="built_in">test</span>]&gt; SELECT * FROM hellodb.teachers ;</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">| TID | Name          | Age | Gender |</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">|   1 | Song Jiang    |  45 | M      |</span><br><span class="line">|   2 | Zhang Sanfeng |  94 | M      |</span><br><span class="line">|   3 | Miejue Shitai |  77 | F      |</span><br><span class="line">|   4 | Lin Chaoying  |  93 | F      |</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>导入二进制日志所生成的修改后的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [<span class="built_in">test</span>]&gt; SOURCE /data/inc.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入后再次查看students表在</span></span><br><span class="line">MariaDB [<span class="built_in">test</span>]&gt; SHOW TABLES FROM hellodb;</span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_hellodb |</span><br><span class="line">+-------------------+</span><br><span class="line">| classes           |</span><br><span class="line">| coc               |</span><br><span class="line">| courses           |</span><br><span class="line">| scores            |</span><br><span class="line">| students          |</span><br><span class="line">| teachers          |</span><br><span class="line">| toc               |</span><br><span class="line">+-------------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment">#新添加的记录也有了</span></span><br><span class="line">MariaDB [<span class="built_in">test</span>]&gt; SELECT * FROM hellodb.teachers;</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">| TID | Name          | Age | Gender |</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">|   1 | Song Jiang    |  45 | M      |</span><br><span class="line">|   2 | Zhang Sanfeng |  94 | M      |</span><br><span class="line">|   3 | Miejue Shitai |  77 | F      |</span><br><span class="line">|   4 | Lin Chaoying  |  93 | F      |</span><br><span class="line">|   5 | Jiang Jieshi  |  50 | M      |</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的备份还原(xtrabackup)</title>
    <url>/2019/04/10/MySQL/MySQL%E7%9A%84%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F(xtrabackup)/MySQL%E7%9A%84%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9Fxtrabackup/</url>
    <content><![CDATA[<h2 id="xtrabackup简介"><a href="#xtrabackup简介" class="headerlink" title="xtrabackup简介"></a>xtrabackup简介</h2><p>xtrabackup是percona提供的MySQL数据库的备份工具，是唯一开源的能对innodb和xtradb数据库进行热备的工具  </p>
<h3 id="xtrabackup的特点"><a href="#xtrabackup的特点" class="headerlink" title="xtrabackup的特点"></a>xtrabackup的特点</h3><ol>
<li>备份还原过程快、可靠  </li>
<li>备份过程不会打断正在执行的事务  </li>
<li>能够基于压缩等功能介于磁盘空间和流量  </li>
<li>自动实现备份检验  </li>
<li>开源免费</li>
</ol>
<span id="more"></span>

<h3 id="xtrabackup备份过程"><a href="#xtrabackup备份过程" class="headerlink" title="xtrabackup备份过程"></a>xtrabackup备份过程</h3><p><img src="xtrabackup.png" alt="xtrabackup.png"></p>
<h3 id="xtrabackup安装"><a href="#xtrabackup安装" class="headerlink" title="xtrabackup安装"></a>xtrabackup安装</h3><p>xtrabackup在centos的EPEL源中，可以在配置完EPEL源后使用yum安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install -y percona-xtrabackup</span></span><br></pre></td></tr></table></figure>

<p>也可以去官网下载最新版本的xtrabackup</p>
<p><a href="https://www.percona.com/downloads/XtraBackup/LATEST">https://www.percona.com/downloads/XtraBackup/LATEST</a></p>
<h3 id="xtrabackup使用"><a href="#xtrabackup使用" class="headerlink" title="xtrabackup使用"></a>xtrabackup使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup [option] BACKUP-ROOT-DIR</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">–user</td>
<td align="left">备份时连接到MySQL的账号</td>
</tr>
<tr>
<td align="left">–password</td>
<td align="left">备份时连接到MySQL所使用的账号的密码</td>
</tr>
<tr>
<td align="left">–host</td>
<td align="left">备份数据库的地址</td>
</tr>
<tr>
<td align="left">–databases</td>
<td align="left">所要备份的数据库名，如果有多个数据库可以使用”,”隔开，如果备份表则使用”DATABASE.TABLE”来指明</td>
</tr>
<tr>
<td align="left">–incremental</td>
<td align="left">表示创建一个增量备份</td>
</tr>
<tr>
<td align="left">–incremental-basedir</td>
<td align="left">指定前一次完全备份或者增量备份的目录</td>
</tr>
<tr>
<td align="left">–incremental-dir</td>
<td align="left">指定还原时增量备份的目录</td>
</tr>
<tr>
<td align="left">–apply-log</td>
<td align="left">备份完成后的数据不能直接用于恢复操作，因为备份的数据中可能包含尚未提交的事务或已经提交但尚未同步的至数据库中过的事务，此时数据仍处于不一致状态，此选项作用是通过回滚提交的事务及同步已经提交的事务至数据文件使数据文件处于一致性状态</td>
</tr>
<tr>
<td align="left">–apply-log-only</td>
<td align="left">恢复时阻止回滚未完成的事务，在有增量备份时使用</td>
</tr>
<tr>
<td align="left">–export</td>
<td align="left">开启可导出单独的表之后再导入其他MySQL中</td>
</tr>
<tr>
<td align="left">–redo-only</td>
<td align="left">合并增量备份时使用，不包括最后一个增量备份的合并</td>
</tr>
<tr>
<td align="left">–copy-back</td>
<td align="left">做数据恢复时将备份数据文件拷贝到MySQL服务器的datadir</td>
</tr>
<tr>
<td align="left">–move-back</td>
<td align="left">作用和copy-back想用区别在于此选项是用来移动备份的数据</td>
</tr>
</tbody></table>
<hr>
<h2 id="完全备份及还原"><a href="#完全备份及还原" class="headerlink" title="完全备份及还原"></a>完全备份及还原</h2><p>在完全备份之前需要创建一个备份的目录作为存放备份使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /data/backup</span></span><br></pre></td></tr></table></figure>

<p>数据库内存放的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -e &#x27;SHOW DATABASES;&#x27;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hellodb            |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<h3 id="完全备份"><a href="#完全备份" class="headerlink" title="完全备份"></a>完全备份</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mariabackup --backup --target-dir=/data/backup  --user=root --password=&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="对数据库破坏"><a href="#对数据库破坏" class="headerlink" title="对数据库破坏"></a>对数据库破坏</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rm -rf /data/mysql/*</span></span><br></pre></td></tr></table></figure>

<h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>3.1在恢复数据库前需要先将数据库内数据清理，然后停止mysql服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rm -rf /data/mysql/*</span></span><br><span class="line">[root@localhost ~]<span class="comment"># service mysqld stop</span></span><br><span class="line">Stopping mysqld (via systemctl):                           [  OK  ]</span><br></pre></td></tr></table></figure>

<p>3.2对备份目录做整理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mariabackup --prepare --target-dir=/data/backup</span></span><br></pre></td></tr></table></figure>

<p>3.3将整理好的备份数据还原至数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mariabackup --copy-back --target-dir=/data/backup</span></span><br></pre></td></tr></table></figure>

<p>3.4此时还原回去的数据属性还有问题，需要将其修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /data/mysql/</span></span><br><span class="line">total 12320</span><br><span class="line">-rw-r----- 1 root root    16384 May  6 21:28 aria_log.00000001</span><br><span class="line">-rw-r----- 1 root root       52 May  6 21:28 aria_log_control</span><br><span class="line">drwx------ 2 root root      272 May  6 21:28 hellodb</span><br><span class="line">-rw-r----- 1 root root      942 May  6 21:28 ib_buffer_pool</span><br><span class="line">-rw-r----- 1 root root 12582912 May  6 21:28 ibdata1</span><br><span class="line">drwx------ 2 root root     4096 May  6 21:28 mysql</span><br><span class="line">drwx------ 2 root root       20 May  6 21:28 performance_schema</span><br><span class="line">drwx------ 2 root root       20 May  6 21:28 <span class="built_in">test</span></span><br><span class="line">-rw-r----- 1 root root      527 May  6 21:28 xtrabackup_info</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># chown -R mysql.mysql /data/mysql/</span></span><br></pre></td></tr></table></figure>

<h3 id="启动服务测试"><a href="#启动服务测试" class="headerlink" title="启动服务测试"></a>启动服务测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># service mysqld start</span></span><br><span class="line">Starting mysqld (via systemctl):                           [  OK  ]</span><br><span class="line">[root@localhost ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;SHOW TABLES FROM hellodb;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hellodb            |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_hellodb |</span><br><span class="line">+-------------------+</span><br><span class="line">| classes           |</span><br><span class="line">| coc               |</span><br><span class="line">| courses           |</span><br><span class="line">| scores            |</span><br><span class="line">| students          |</span><br><span class="line">| teachers          |</span><br><span class="line">| toc               |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="完全备份-增量备份及还原"><a href="#完全备份-增量备份及还原" class="headerlink" title="完全备份+增量备份及还原"></a>完全备份+增量备份及还原</h2><p>在备份之前先创建出完全备份的目录以及增量备份的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir -pv /dataa/backup/&#123;full,inc1,inc2&#125;</span></span><br><span class="line">mkdir: created directory ‘/data/backup’</span><br><span class="line">mkdir: created directory ‘/data/backup/full’</span><br><span class="line">mkdir: created directory ‘/data/backup/inc1’</span><br><span class="line">mkdir: created directory ‘/data/backup/inc2’</span><br></pre></td></tr></table></figure>

<p>数据库内所存放的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -e &#x27;SHOW DATABASES;&#x27;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hellodb            |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<h3 id="对数据进行完全备份"><a href="#对数据进行完全备份" class="headerlink" title="对数据进行完全备份"></a>对数据进行完全备份</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mariabackup --backup --target-dir=/data/backup/full --user=root --password=&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="此时数据库内数据发生变化"><a href="#此时数据库内数据发生变化" class="headerlink" title="此时数据库内数据发生变化"></a>此时数据库内数据发生变化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -e &quot;INSERT hellodb.teachers VALUE(5,&#x27;Li Xiaolong&#x27;,30,&#x27;M&#x27;);&quot;</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mysql -e &quot;SELECT * FROM hellodb.teachers WHERE tid&gt;4;&quot;</span></span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">| TID | Name        | Age | Gender |</span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">|   5 | Li Xiaolong |  30 | M      |</span><br><span class="line">+-----+-------------+-----+--------+</span><br></pre></td></tr></table></figure>

<h3 id="对数据库进行增量备份"><a href="#对数据库进行增量备份" class="headerlink" title="对数据库进行增量备份"></a>对数据库进行增量备份</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mariabackup --user=root --password=&#x27;&#x27; --backup --incremental-basedir=/data/backup/full --target-dir=/data/backup/inc1</span></span><br></pre></td></tr></table></figure>

<h3 id="数据库内数据再次发生变化"><a href="#数据库内数据再次发生变化" class="headerlink" title="数据库内数据再次发生变化"></a>数据库内数据再次发生变化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -e &quot;INSERT hellodb.students(stuid,age,name) VALUE (26,35,&#x27;Sun Wukong&#x27;);&quot;</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mysql -e &quot;SELECT * FROM hellodb.students WHERE stuid&gt;25;&quot;</span></span><br><span class="line">+-------+------------+-----+--------+---------+-----------+</span><br><span class="line">| StuID | Name       | Age | Gender | ClassID | TeacherID |</span><br><span class="line">+-------+------------+-----+--------+---------+-----------+</span><br><span class="line">|    26 | Sun Wukong |  35 | F      |    NULL |      NULL |</span><br><span class="line">+-------+------------+-----+--------+---------+-----------+</span><br></pre></td></tr></table></figure>

<h3 id="再次对数据库做增量备份"><a href="#再次对数据库做增量备份" class="headerlink" title="再次对数据库做增量备份"></a>再次对数据库做增量备份</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mariabackup --user=root --password=&#x27;&#x27; --backup --incremental-basedir=/data/backup/inc1 --target-dir=/data/backup/inc2</span></span><br></pre></td></tr></table></figure>

<h3 id="破坏数据库"><a href="#破坏数据库" class="headerlink" title="破坏数据库"></a>破坏数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rm -rf /data/mysql/*</span></span><br></pre></td></tr></table></figure>

<h3 id="恢复数据库"><a href="#恢复数据库" class="headerlink" title="恢复数据库"></a>恢复数据库</h3><p>7.1先对数据库做清理，并停止数据库服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rm -rf /data/mysql/*</span></span><br><span class="line">[root@localhost ~]<span class="comment"># service mysqld stop</span></span><br><span class="line">Stopping mysqld (via systemctl):                           [  OK  ]</span><br></pre></td></tr></table></figure>

<p>7.2对完全备份做预整理</p>
<p>因为后续还有增量备份，所以此处需要使用apply-log-only选项来阻止事务的回滚。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mariabackup --prepare --apply-log-only --target-dir=/data/backup/full</span></span><br></pre></td></tr></table></figure>

<p>7.3合并第一次的增量备份</p>
<p>此为第一个增量备份后续还有第二个增量所以需要使用apply-log-only阻止回滚事务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost backup]<span class="comment"># mariabackup --prepare --apply-log-only --target-dir=/data/backup/full --incremental-dir=/data/backup/inc1</span></span><br></pre></td></tr></table></figure>

<p>7.3合并第二次的增量备份</p>
<p>此为最后个增量备份无需再使用apply-log-only阻止回滚事务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost backup]<span class="comment"># mariabackup --prepare --target-dir=/data/backup/full --incremental-dir=/data/backup/inc2</span></span><br></pre></td></tr></table></figure>

<p>7.4整理完毕将备份复制回数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost backup]<span class="comment"># mariabackup --copy-back --target-dir=/data/backup/full</span></span><br></pre></td></tr></table></figure>

<p>7.5将数据库内的属主和属组进行更改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost backup]<span class="comment"># chown -R mysql.mysql /data/mysql/</span></span><br></pre></td></tr></table></figure>

<h3 id="重启服务测试"><a href="#重启服务测试" class="headerlink" title="重启服务测试"></a>重启服务测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost backup]<span class="comment"># service mysqld start</span></span><br><span class="line">Starting mysqld (via systemctl):                           [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@localhost backup]<span class="comment"># msyql</span></span><br><span class="line">MariaDB [hellodb]&gt; select *from students <span class="built_in">where</span> stuid&gt;25;</span><br><span class="line">+-------+------------+-----+--------+---------+-----------+</span><br><span class="line">| StuID | Name       | Age | Gender | ClassID | TeacherID |</span><br><span class="line">+-------+------------+-----+--------+---------+-----------+</span><br><span class="line">|    26 | Sun Wukong |  35 | F      |    NULL |      NULL |</span><br><span class="line">+-------+------------+-----+--------+---------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; select *from teachers <span class="built_in">where</span> tid&gt;4;</span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">| TID | Name        | Age | Gender |</span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">|   5 | Li Xiaolong |  30 | M      |</span><br><span class="line">+-----+-------------+-----+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="其他的注意事项"><a href="#其他的注意事项" class="headerlink" title="其他的注意事项"></a>其他的注意事项</h2><ol>
<li>在数据恢复之前必须先要停止MySQL服务</li>
<li>在还原时MySQL的数据库目录必须为空，否则不会覆盖</li>
<li>数据库内容还原后，其属主和属组为root需要手动将其全部改为mysql</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的存储引擎</title>
    <url>/2019/04/17/MySQL/MySQL%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/MySQL%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<p>存储引擎决定了如何把数据库内的信息最终以某种方式转存在磁盘的数据库文件中，存储引擎用来管理磁盘上的各种不同文件。存储引擎在MySQL中是其特有的一种技术，在其他数据库中不提这个东西，Oracle、DB2、SQLserver这些商业级的数据库只有一种存储引擎，所以都不提存储引擎，而MySQL是个开源产品，所以很多的开发人员觉得某些存储引擎不好自己就开发一个，从而造成了MySQL的存储引擎特别的多。</p>
<span id="more"></span>

<p>MyISAM:MyISAM在5.5之前的版本中默认使用</p>
<p>MyISAM的存储引擎具有更好的性能</p>
<p>InnoDB:InnoDB在5.5之后的版本中默认使用</p>
<p>InnoDB的存储引擎具有很好的稳定性，支持事务和低级别的锁和外键</p>
<h3 id="默认存储引擎的查看方法"><a href="#默认存储引擎的查看方法" class="headerlink" title="默认存储引擎的查看方法"></a>默认存储引擎的查看方法</h3><p>存储引擎可以在MySQL中使用SHOW ENGINES;命令进行查看，所列出来的都是系统所支持的存储引擎，带有default的表示系统默认使用的存储引擎。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所支持的所有存储引擎</span></span><br><span class="line">MariaDB [(none)]&gt; SHOW ENGINES;</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| Engine             | Support | Comment                                                                          | Transactions | XA   | Savepoints |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">| MRG_MyISAM         | YES     | Collection of identical MyISAM tables                                            | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | Non-transactional engine with good performance and small data footprint          | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears)                   | NO           | NO   | NO         |</span><br><span class="line">| CSV                | YES     | Stores tables as CSV files                                                       | NO           | NO   | NO         |</span><br><span class="line">| Aria               | YES     | Crash-safe tables with MyISAM heritage                                           | NO           | NO   | NO         |</span><br><span class="line">| ARCHIVE            | YES     | gzip-compresses tables <span class="keyword">for</span> a low storage footprint                               | NO           | NO   | NO         |</span><br><span class="line">| MEMORY             | YES     | Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables                        | NO           | NO   | NO         |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                                               | NO           | NO   | NO         |</span><br><span class="line">| InnoDB             | DEFAULT | Supports transactions, row-level locking, foreign keys and encryption <span class="keyword">for</span> tables | YES          | YES  | YES        |</span><br><span class="line">| SEQUENCE           | YES     | Generated tables filled with sequential values                                   | YES          | NO   | YES        |</span><br><span class="line">+--------------------+---------+----------------------------------------------------------------------------------+--------------+------+------------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="InnoDB和MyISAM的区别"><a href="#InnoDB和MyISAM的区别" class="headerlink" title="InnoDB和MyISAM的区别"></a>InnoDB和MyISAM的区别</h3><p>InnoDB和MyISAM主要有以下这些区别</p>
<table>
<thead>
<tr>
<th align="left">区别</th>
<th align="left">InnoDB</th>
<th align="left">MyISAM</th>
</tr>
</thead>
<tbody><tr>
<td align="left">聚集索引(Clustered indexex)</td>
<td align="left">支持</td>
<td align="left">不支持</td>
</tr>
<tr>
<td align="left">压缩数据(compressed data)</td>
<td align="left">支持</td>
<td align="left">支持，仅在压缩行的格式情况下支持</td>
</tr>
<tr>
<td align="left">数据的缓存(data caches)</td>
<td align="left">支持</td>
<td align="left">不支持</td>
</tr>
<tr>
<td align="left">外键</td>
<td align="left">支持</td>
<td align="left">不支持</td>
</tr>
<tr>
<td align="left">全文缩影</td>
<td align="left">支持需要5.6以后版本</td>
<td align="left">支持</td>
</tr>
<tr>
<td align="left">锁的并发性(locking granularity)</td>
<td align="left">行级锁</td>
<td align="left">表级锁</td>
</tr>
<tr>
<td align="left">多版本的并发控制(mvcc)</td>
<td align="left">支持</td>
<td align="left">不支持</td>
</tr>
<tr>
<td align="left">事务</td>
<td align="left">支持</td>
<td align="left">不支持(崩溃恢复性较差)</td>
</tr>
<tr>
<td align="left">存储大小</td>
<td align="left">64T</td>
<td align="left">256T</td>
</tr>
</tbody></table>
<h3 id="MyISAM和InnoDB的引擎文件"><a href="#MyISAM和InnoDB的引擎文件" class="headerlink" title="MyISAM和InnoDB的引擎文件"></a>MyISAM和InnoDB的引擎文件</h3><p>1.MyISAM引擎文件默认有3个，每个表有三个文件</p>
<table>
<thead>
<tr>
<th align="left">引擎文件</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">tbl_name.frm</td>
<td align="left">表格式定义</td>
</tr>
<tr>
<td align="left">tbl_name.MYD</td>
<td align="left">数据文件</td>
</tr>
<tr>
<td align="left">tbl_name.MYI</td>
<td align="left">索引文件</td>
</tr>
</tbody></table>
<p>2.InnoDB引擎文件在早期的版本中默认只有2个</p>
<table>
<thead>
<tr>
<th align="left">引擎文件</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">tbl_name.frm</td>
<td align="left">表格式定义</td>
</tr>
<tr>
<td align="left">../ibdata1</td>
<td align="left">所有的表的数据文件</td>
</tr>
</tbody></table>
<p>由于所有的表的数据内容都存放在数据库的ibdata1中非常不安全，所以innodb也有相关的参数可以让其进行每个表的数据分开存放。此参数的名字为innodb_file_per_table</p>
<p>查询innodb_file_per_table参数是否开启的方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysqladmin -uroot -p123456 variables | grep &#x27;innodb_file_per_table&#x27;</span></span><br><span class="line">| innodb_file_per_table                                  | ON           <span class="comment">#参数已经开启</span></span><br></pre></td></tr></table></figure>

<p>若为off则需要在MySQL的配置文件中加入此选项，然后重启服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">innodb_file_per_table</span><br></pre></td></tr></table></figure>

<p>3.修改默认的存储引擎<br>在早期的MySQL版本中默认的存储引擎为MyISAM若要使用InnoDB作为默认存储引擎，组需要对MySQL的配置文件进行修改，添加一个相关的参数，default_storage_engine=innodb，修改完毕后重启服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">default_storage_engine=innodb</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的并发控制</title>
    <url>/2019/04/17/MySQL/MySQL%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/MySQL%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>在数据库中经常设计到并发访问，此时就涉及到不同用户同时修改同一个资源的问题。此时就涉及到一个冲突的问题。为了防止这种冲突的发生，确保数据的安全，就需要对数据加锁的机制，MyISAM使用的是表级锁，InnoDB使用的是行级锁。锁又分为读锁和写锁，读锁也叫共享锁，只可读不可写，多个读互不阻塞，写锁又称为独占锁，写锁会阻碍其他事务的读和写。锁又有隐式锁和显式锁的分别，隐式锁是由存储引擎自动施加的，显式锁式用户自己手动添加的</p>
<p>手动添加锁的方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LOCK TABLES tbl_name lock_type;</span><br><span class="line"><span class="comment">#tbl_name：需要上锁的表名</span></span><br><span class="line"><span class="comment">#lock_type：锁的类型，可以为read,write也就是读锁和写锁</span></span><br></pre></td></tr></table></figure>

<p>解锁</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>

<p>第二种加锁方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FLUSH TABLES [tbl_name[,...]][WITH READ LOCK]</span><br><span class="line"><span class="comment">#tbl_name如果不添加则对整个数据库加锁，通常在备份前加全局读锁</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的性能优化</title>
    <url>/2019/04/10/MySQL/MySQL%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/MySQL%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>MySQL的性能优化可以从两方面着手，一是从缓存，二是从索引。</p>
<h2 id="MySQL的查询缓存"><a href="#MySQL的查询缓存" class="headerlink" title="MySQL的查询缓存"></a>MySQL的查询缓存</h2><p>查询缓存是基于hash算法的，要求命令和查询的参数大小写必须完全一致，当有新的查询语句或预处理查询请求，先去查询缓存，判断是否存在纪录集，若存在则直接返回结果。</p>
<h3 id="查询缓存的优缺点"><a href="#查询缓存的优缺点" class="headerlink" title="查询缓存的优缺点"></a>查询缓存的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>sql语句不需要做任何解析和执行，直接从缓存中获得查询结合，提高了查询性能</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>不够智能，提高了缓存使用门槛，增加了缓存记录集检查和清理的开销。</p>
<p>有些查询是无法被缓存的比如：</p>
<ol>
<li>查询的语句中带了SQL_NO_CACHE参数</li>
<li>查询语句中含有获取值的函数。如：NOW(),CURDATE(),GET_LOCK(),RAND()、CONVERT_TZ()等</li>
<li>对系统数据库查询时使用会话级别的变量或存储过程中的局部变量。</li>
<li>查询语句中加了锁不会使用缓存</li>
<li>对临时表的查询，存在警告信息的查询，只有列级别权限的查询。</li>
<li>事务隔离级别为serializable的不能缓存</li>
</ol>
<h3 id="缓存的相关变量"><a href="#缓存的相关变量" class="headerlink" title="缓存的相关变量"></a>缓存的相关变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">query_cache_limit               <span class="comment">#单个查询结果能缓存的最大值，默认为1M。过大的值将无法缓存</span></span><br><span class="line">query_cache_min_res_unit        <span class="comment">#在内存中给缓存分配的最小单位，默认为4K，较小值会减少浪费，但会产生频繁的内存分配，如果设置较大，则会造成浪费。</span></span><br><span class="line">query_cache_size                <span class="comment">#总的用来放查询缓存的内存空间，最小为40K，必须为1024的整数倍。要长期有效需要写入配置文件。</span></span><br><span class="line">query_cache_strip_comments      <span class="comment">#控制QC中是否去掉SQL语句的注释部分</span></span><br><span class="line">query_cache_type                <span class="comment">#是否启用缓存默认为开启</span></span><br><span class="line">query_cache_wlock_invalidate    <span class="comment">#如果表被其他的会话锁定，是否仍然可以从查询缓存中返回结果，默认为off,表示可以在表被其他会话锁定的场景中继续从缓存返回数据；ON则表示不允许</span></span><br></pre></td></tr></table></figure>

<h3 id="查询缓存相关的状态变量"><a href="#查询缓存相关的状态变量" class="headerlink" title="查询缓存相关的状态变量"></a>查询缓存相关的状态变量</h3><p>缓存的状态变量可以使用SHOW GLOBAL STATUS LIKE ‘Qcache%’;进行查询</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Qcache_free_blocks              <span class="comment">#处于空闲状态缓存中内存块数</span></span><br><span class="line">Qcache_total_blocks             <span class="comment">#缓存中总块，当Qcache_free_blocks相对此值较大时，可能用内存碎片，执行FLUSH QUERY CACHE清理碎片</span></span><br><span class="line">Qcache_free_memory              <span class="comment">#处于空闲状态的缓存内存总量</span></span><br><span class="line">Qcache_hits                     <span class="comment">#Query Cache命中次数</span></span><br><span class="line">Qcache_inserts                  <span class="comment">#向 Query Cache 中插入新的缓存的次数，即没有命中的次数</span></span><br><span class="line">Qcache_lowmem_prunes            <span class="comment">#记录因为内存不足而被移除出查询缓存的查询数</span></span><br><span class="line">Qcache_not_cached               <span class="comment">#没有被缓存的记录数，包括无法被缓存的记录以及由于query_cache_type设置的不会被缓存的SQL语句</span></span><br><span class="line">Qcache_queries_in_cache         <span class="comment">#在缓存中的SQL数量</span></span><br></pre></td></tr></table></figure>

<h3 id="缓存的优化方法"><a href="#缓存的优化方法" class="headerlink" title="缓存的优化方法"></a>缓存的优化方法</h3><p>缓存的优化方法可以根据缓存优化表来进行查询和修改</p>
<p><img src="%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E8%A1%A8.png" alt="缓存优化表.png"></p>
<h2 id="MySQL的索引"><a href="#MySQL的索引" class="headerlink" title="MySQL的索引"></a>MySQL的索引</h2><p>索引是特殊的数据结构，定义在查找时作为查找条件的字段，在MySQL又称为建可以，索引通过存储引擎实现。</p>
<h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><h4 id="B-tree索引"><a href="#B-tree索引" class="headerlink" title="B+tree索引"></a>B+tree索引</h4><p>B+tree的所有非叶子节点上只有索引没有有数据，真正的数据都存放在叶子节点上，叶子节点上不仅有索引还有数据。相邻叶子节点的数据块之间有指向性，所以在查找范围时也能使用索引</p>
<h4 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h4><p>复合索引就是把多个字段组合设置为索引，当第一个字段相同时，比对第二个字段。复合索引可以将排在前面的字段作为搜索条件， 但不能将排在后面的字段作为搜索条件。若跳过前一个搜索条件直接搜索第二个字段将导致索引失效。</p>
<h4 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h4><p>聚簇索引：索引和数据是捆在一起的，所以一张表中只能有一个主键。如果对非主键的字段设立的索引，那么其索引的叶子节点的信息为索引和主键索引的对应关系，通过主键索引的信息找到相对应的数据。（InnoDB就是聚簇分布）</p>
<p>非聚簇索引：索引和数据是分开的（MyISAM为非聚簇表分布）</p>
<h3 id="索引的创建、删除和查看"><a href="#索引的创建、删除和查看" class="headerlink" title="索引的创建、删除和查看"></a>索引的创建、删除和查看</h3><p>创建索引：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE [ONLINE|OFFLINE] [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name</span><br><span class="line">    [index_type]</span><br><span class="line">    ON tbl_name (index_col_name,...)</span><br><span class="line">    [index_option] ...</span><br><span class="line"></span><br><span class="line">index_col_name:</span><br><span class="line">    col_name [(length)] [ASC | DESC]</span><br><span class="line"></span><br><span class="line">index_type:</span><br><span class="line">    USING &#123;BTREE | HASH&#125;</span><br><span class="line"></span><br><span class="line">index_option:</span><br><span class="line">    KEY_BLOCK_SIZE [=] value</span><br><span class="line">  | index_type</span><br><span class="line">  | WITH PARSER parser_name</span><br><span class="line">  | COMMENT <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>

<p>删除索引：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP INDEX index_name ON tbl_name;</span><br></pre></td></tr></table></figure>

<p>查看索引：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHOW INDEXES FORM tlb_name;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL系统数据库</title>
    <url>/2019/04/17/MySQL/MySQL%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>MySQL数据库在刚安装完毕后，默认带有mysql、performance_schema、information_schema这三个系统自身带有的数据库。</p>
<span id="more"></span>
<p>mysql数据库是mysql的核心数据库，类似于Sql Server中的master库，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息</p>
<p>performance_schema数据库是MySQL 5.5开始新增的数据库，主要用于收集数据库服务器性能参数，库里表的存储引擎均为PERFORMANCE_SCHEMA，用户不能创建存储引擎为PERFORMANCE_SCHEMA的表</p>
<p>information_schema数据库是MySQL 5.0之后产生的一个虚拟数据库，物理上并不存在information_schema数据库类似与“数据字典”，提供了访问数据库元数据的方式，即数据的数据。比如数据库名或表名，列类型，访问权限（更加细化的访问方式）</p>
<p>所有以后在备份数据库时，我们只需要备份用户的数据库，以及mysql数据库。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL级联复制</title>
    <url>/2019/04/10/MySQL/MySQL%E7%BA%A7%E8%81%94%E5%A4%8D%E5%88%B6/MySQL%E7%BA%A7%E8%81%94%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>在生产换进中有一种主从复制的方法主节点先将数据同步到一个中间的从节点，然后由从节点给后续的其他从节点来复制数据，这种复制方式称为级联复制。</p>
<span id="more"></span>

<p><img src="%E7%BA%A7%E8%81%94%E5%A4%8D%E5%88%B6.png" alt="级联复制.png"></p>
<p>级联复制的好处是可以极大的减轻主节点的压力  </p>
<p>级联复制在配置时需要在中间节点上启用log_slave_updates的选项。</p>
<h2 id="级联复制的配置方法"><a href="#级联复制的配置方法" class="headerlink" title="级联复制的配置方法"></a>级联复制的配置方法</h2><p>准备主机4台，1台主节点(Master)，1台中间从节点(Slave)，1台从节点(Slave1)</p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">系统</th>
<th align="left">ip</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Master</td>
<td align="left">CentOS7</td>
<td align="left">192.168.73.110</td>
</tr>
<tr>
<td align="left">Slave</td>
<td align="left">CentOS7</td>
<td align="left">192.168.73.111</td>
</tr>
<tr>
<td align="left">Slave1</td>
<td align="left">CentOS7</td>
<td align="left">192.168.73.112</td>
</tr>
</tbody></table>
<h3 id="主节点配置-Master"><a href="#主节点配置-Master" class="headerlink" title="主节点配置(Master)"></a>主节点配置(Master)</h3><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=/data/bin/mysql-bin         <span class="comment">#启动二进制日志</span></span><br><span class="line">binlog-format=row                   <span class="comment">#修改日志格式</span></span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure>

<p>2.创建二级制日志目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mkdir /data/bin</span></span><br><span class="line">[root@Master ~]<span class="comment"># chown -R mysql.mysql /data/bin</span></span><br></pre></td></tr></table></figure>

<p>3.启动服务，查看当前二进制日志所在的位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># systemctl start mariadb</span></span><br><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;SHOW MASTER LOGS;&quot;</span></span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |     26753 |</span><br><span class="line">| mysql-bin.000002 |    921736 |</span><br><span class="line">| mysql-bin.000003 |       245 |      <span class="comment">#记录当前二进制的位置</span></span><br><span class="line">+------------------+-----------+</span><br></pre></td></tr></table></figure>

<p>4.创建一个用来复制数据的账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;GRANT REPLICATION SLAVE ON *.* TO &#x27;repluser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;centos&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="中间从节点配置"><a href="#中间从节点配置" class="headerlink" title="中间从节点配置"></a>中间从节点配置</h3><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">log-bin=/data/bin/mysql-bin</span><br><span class="line">binlog-format=row</span><br><span class="line">read-only</span><br><span class="line">log_slave_updates</span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure>

<p>2.创建二进制日志目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># mkdir /data/bin</span></span><br><span class="line">[root@Slave ~]<span class="comment"># chown -R mysql.mysql /data/bin</span></span><br></pre></td></tr></table></figure>

<p>3.启动MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>4.写入CHANGE MASTER TO信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">  MASTER_HOST=<span class="string">&#x27;192.168.73.110&#x27;</span>,</span><br><span class="line">  MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,</span><br><span class="line">  MASTER_PASSWORD=<span class="string">&#x27;centos&#x27;</span>,</span><br><span class="line">  MASTER_PORT=3306,</span><br><span class="line">  MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000003&#x27;</span>,</span><br><span class="line">  MASTER_LOG_POS=245;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>5.查看下从节点的配置状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 245</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: No           <span class="comment">#线程尚未开启</span></span><br><span class="line">            Slave_SQL_Running: No           <span class="comment">#线程尚未开启</span></span><br></pre></td></tr></table></figure>

<p>6.启动线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>7.再次查看从节点状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 402          <span class="comment">#已经有小部分数据被复制过来</span></span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 686</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes          <span class="comment">#线程已经启动</span></span><br><span class="line">            Slave_SQL_Running: Yes          <span class="comment">#线程已经启动</span></span><br></pre></td></tr></table></figure>

<p>8.测试</p>
<p>8.1在主节点导入数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql &lt; hellodb_innodb.sql</span></span><br><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<p>8.2从节点查看是否已经同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<h3 id="配置Slave1"><a href="#配置Slave1" class="headerlink" title="配置Slave1"></a>配置Slave1</h3><p>由于此时各节点上已经有数据，作为后来追加的从服务器，首先需要将之前的所有数据使用备份恢复一次然后再进行主从复制进行同步</p>
<p>1.在中间节点上将数据库备份出来，并将数据传送到后续的Slave1主机上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># mysqldump -A --single-transaction -F --master-data=1 &gt; /data/all.sql</span></span><br><span class="line">[root@Slave ~]<span class="comment"># scp /data/all.sql 192.168.73.112:/data</span></span><br></pre></td></tr></table></figure>

<p>2.在Slave1主机上修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">read-only</span><br><span class="line">server-id=3</span><br></pre></td></tr></table></figure>

<p>3.启动MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>4.对备份文件做修改</p>
<p>找到CHANGE MASTER TO行对信息加以修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># vim /data/all.sql</span></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;192.168.73.111&#x27;</span>,MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,MASTER_PASSWORD=<span class="string">&#x27;centos&#x27;</span>,MASTER_PORT=3306,MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000004&#x27;</span>, MASTER_LOG_POS=245;</span><br></pre></td></tr></table></figure>

<p>5.将修改后的备份文件导入数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># mysql &lt; /data/all.sql</span></span><br></pre></td></tr></table></figure>

<p>6.查看下slave status</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># mysql -e &quot;SHOW SLAVE STATUS\G;&quot;</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State:</span><br><span class="line">                  Master_Host: 192.168.73.111</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000004</span><br><span class="line">          Read_Master_Log_Pos: 245</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br></pre></td></tr></table></figure>

<p>7.启动线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># mysql -e &quot;START SLAVE;&quot;</span></span><br></pre></td></tr></table></figure>

<p>8.再次查看slave status</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># mysql -e &quot;show slave status\G;&quot;</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.111</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000004</span><br><span class="line">          Read_Master_Log_Pos: 245</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 529</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line">             Slave_IO_Running: Yes              <span class="comment">#线程已经全部启动</span></span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在主节点上删除hellodb库中的teachers表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;SHOW TABLES FROM hellodb;&quot;       #先查看下库是否有teachers表</span></span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_hellodb |</span><br><span class="line">+-------------------+</span><br><span class="line">| classes           |</span><br><span class="line">| coc               |</span><br><span class="line">| courses           |</span><br><span class="line">| scores            |</span><br><span class="line">| students          |</span><br><span class="line">| teachers          |</span><br><span class="line">| toc               |</span><br><span class="line">+-------------------+</span><br><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;DROP TABLE hellodb.teachers;&quot;    #删表</span></span><br><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;SHOW TABLES FROM hellodb;&quot;       #再次确认表是否删除</span></span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_hellodb |</span><br><span class="line">+-------------------+</span><br><span class="line">| classes           |</span><br><span class="line">| coc               |</span><br><span class="line">| courses           |</span><br><span class="line">| scores            |</span><br><span class="line">| students          |</span><br><span class="line">| toc               |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure>

<p>在slave1节点上查看是否同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># mysql -e &quot;SHOW TABLES FROM hellodb;&quot;   #查看从节点是否还存在teachers表</span></span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_hellodb |</span><br><span class="line">+-------------------+</span><br><span class="line">| classes           |</span><br><span class="line">| coc               |</span><br><span class="line">| courses           |</span><br><span class="line">| scores            |</span><br><span class="line">| students          |</span><br><span class="line">| toc               |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure>

<p>级联复制配置成功</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL编译安装和安装MySQL多实例</title>
    <url>/2019/04/17/MySQL/MySQL%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E5%8F%8A%E5%A4%9A%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0/MySQL%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E5%8F%8A%E5%A4%9A%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="编译安装MySQL"><a href="#编译安装MySQL" class="headerlink" title="编译安装MySQL"></a>编译安装MySQL</h2><p>安装编译所需要的包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install bison bison-devel zlib-devel libcurl-devel libarchive-devel boostdevel gcc gcc-c++ cmake ncurses-devel gnutls-devel libxml2-devel openssldevel libevent-devel libaio-devel -y</span><br></pre></td></tr></table></figure>

<p>添加MySQL用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># useradd -r -s /sbin/nologin -d /data/mysql mysql</span></span><br></pre></td></tr></table></figure>

<p>为MySQL用户添加家目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /data/mysql</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 700 /data/mysql</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown mysql.mysql /data/mysql</span></span><br></pre></td></tr></table></figure>

<p>下载mariadb源码包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget http://ftp.hosteurope.de/mirror/archive.mariadb.org//mariadb-10.2.23/source/mariadb-10.2.23.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>解压MySQL源码包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># tar -xf mariadb-10.2.23.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>编译安装MySQL，此处需要注意如果编译时中间如果出现缺包的错误，需要将此目录下的CMakeCache.txt删除后重新进行编译。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd mariadb-10.2.23</span></span><br><span class="line">[root@localhost mariadb-10.2.23]<span class="comment"># cmake . \</span></span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/apps/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/data/mysql/ \</span><br><span class="line">-DSYSCONFDIR=/etc/mysql \</span><br><span class="line">-DMYSQL_USER=mysql \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITHOUT_MROONGA_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_DEBUG=0 \</span><br><span class="line">-DWITH_READLINE=1 \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DWITH_ZLIB=system \</span><br><span class="line">-DWITH_LIBWRAP=0 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/data/mysql/mysql.sock \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci</span><br><span class="line"></span><br><span class="line">[root@localhost mariadb-10.2.23]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<p>初始化数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mariadb-10.2.23]<span class="comment"># cd /apps/mysql/</span></span><br><span class="line">[root@localhost mysql]<span class="comment"># scripts/mysql_install_db --user=mysql --datadir=/data/mysql</span></span><br><span class="line">Installing MariaDB/MySQL system tables <span class="keyword">in</span> <span class="string">&#x27;/data/mysql&#x27;</span> ...</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p>放置配置文件并修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># mkdir /etc/mysql        #创建MySQL配置文件目录</span></span><br><span class="line">[root@localhost mysql]<span class="comment"># cp support-files/my-huge.cnf /etc/mysql/my.cnf</span></span><br><span class="line">[root@localhost mysql]<span class="comment"># sed -i &#x27;/\[mysqld\]/adatadir=/data/mysql&#x27; /etc/mysql/my.cnf</span></span><br></pre></td></tr></table></figure>

<p>配置服务启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># cp support-files/mysql.service /etc/init.d/mysqld</span></span><br><span class="line">[root@localhost mysql]<span class="comment"># chmod +x /etc/init.d/mysqld</span></span><br><span class="line"></span><br><span class="line">[root@localhost mysql]<span class="comment"># chkconfig --add mysqld</span></span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># service mysqld start</span></span><br><span class="line">Starting mysqld (via systemctl):                           [  OK  ]</span><br></pre></td></tr></table></figure>

<p>为MySQL添加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># echo &#x27;PATH=/app/mysql/bin:$PATH&#x27; &gt; /etc/profile.d/mysql.sh</span></span><br><span class="line">[root@localhost mysql]<span class="comment"># . /etc/profile.d/mysql.sh</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="MySQL的多实例环境搭建"><a href="#MySQL的多实例环境搭建" class="headerlink" title="MySQL的多实例环境搭建"></a>MySQL的多实例环境搭建</h2><p>在测试环境中通常会需要在一台主机上搭建多个版本的MySQL，此处以编译安装完毕的MySQL为例，演示如何搭建多实例的MySQL。</p>
<p>为每个实例创建各自的目录并赋予权限（此处以创建2个实例为例）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># mkdir -pv /mysql/&#123;3306,3307&#125;/&#123;data,etc,socket,bin,log,pid&#125;</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown -R mysql.mysql /mysql</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tree /mysql                 #查看下目录结构</span></span><br><span class="line">/mysql</span><br><span class="line">├── 3306</span><br><span class="line">│   ├── bin</span><br><span class="line">│   ├── data</span><br><span class="line">│   ├── etc</span><br><span class="line">│   ├── <span class="built_in">log</span></span><br><span class="line">│   ├── pid</span><br><span class="line">│   └── socket</span><br><span class="line">└── 3307</span><br><span class="line">    ├── bin</span><br><span class="line">    ├── data</span><br><span class="line">    ├── etc</span><br><span class="line">    ├── <span class="built_in">log</span></span><br><span class="line">    ├── pid</span><br><span class="line">    └── socket</span><br></pre></td></tr></table></figure>

<p>为每个实例初始化数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为3306数据库初始化数据库</span></span><br><span class="line">[root@localhost /]<span class="comment"># /app/mysql/scripts/mysql_install_db --user=mysql --datadir=/mysql/3306/data</span></span><br><span class="line"><span class="comment">#为3307数据初始化数据库</span></span><br><span class="line">[root@localhost /]<span class="comment"># /app/mysql/scripts/mysql_install_db --user=mysql --datadir=/mysql/3307/data</span></span><br></pre></td></tr></table></figure>

<p>为每个实例创建配置文件，配置文件可以参考/etc/my.cnf进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># cp /etc/my.cnf /mysql/3306/etc/my.cnf       #复制/etc/my.cnf到多实例的etc目录下</span></span><br><span class="line">[root@localhost /]<span class="comment"># vim /mysql/3306/etc/my.cnf                  #修改my.cnf，写入配置</span></span><br><span class="line">[mysqld]                                                        <span class="comment">#注意需要将#!includedir /etc/my.cnf.d注释</span></span><br><span class="line">port=3306                           <span class="comment">#此处实例1的端口为3306</span></span><br><span class="line">datadir=/mysql/3306/data</span><br><span class="line">socket=/mysql/3306/socket/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/mysql/3306/<span class="built_in">log</span>/mariadb.log</span><br><span class="line">pid-file=/mysql/3306/pid/mariadb.pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#将3306上配置完成的配置文件复制到3307上并做修改</span></span><br><span class="line">[root@localhost /]<span class="comment"># cp /mysql/3306/etc/my.cnf /mysql/3307/etc/</span></span><br><span class="line">[root@localhost /]<span class="comment"># sed -i &#x27;s/3306/3307/&#x27; /mysql/3307/etc/my.cnf    #将实例2配置文件中所有3306部分改为3307</span></span><br></pre></td></tr></table></figure>

<p>为实例添加服务脚本，此为事先准备好的服务脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">port=3306</span><br><span class="line">mysql_user=<span class="string">&quot;root&quot;</span></span><br><span class="line">mysql_pwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd_path=<span class="string">&quot;/usr/bin&quot;</span></span><br><span class="line">mysql_basedir=<span class="string">&quot;/mysql&quot;</span></span><br><span class="line">mysql_sock=<span class="string">&quot;<span class="variable">$&#123;mysql_basedir&#125;</span>/<span class="variable">$&#123;port&#125;</span>/socket/mysql.sock&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">function_start_mysql</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ ! -e <span class="string">&quot;<span class="variable">$mysql_sock</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">printf</span> <span class="string">&quot;Starting MySQL...\n&quot;</span></span><br><span class="line">      <span class="variable">$&#123;cmd_path&#125;</span>/mysqld_safe --defaults-file=<span class="variable">$&#123;mysql_basedir&#125;</span>/<span class="variable">$&#123;port&#125;</span>/etc/my.cnf  &amp;&gt; /dev/null  &amp;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span> <span class="string">&quot;MySQL is running...\n&quot;</span></span><br><span class="line">      <span class="built_in">exit</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">function_stop_mysql</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ ! -e <span class="string">&quot;<span class="variable">$mysql_sock</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">       <span class="built_in">printf</span> <span class="string">&quot;MySQL is stopped...\n&quot;</span></span><br><span class="line">       <span class="built_in">exit</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">printf</span> <span class="string">&quot;Stoping MySQL...\n&quot;</span></span><br><span class="line">       <span class="variable">$&#123;cmd_path&#125;</span>/mysqladmin -u <span class="variable">$&#123;mysql_user&#125;</span> -p<span class="variable">$&#123;mysql_pwd&#125;</span> -S <span class="variable">$&#123;mysql_sock&#125;</span> shutdown</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">function_restart_mysql</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;Restarting MySQL...\n&quot;</span></span><br><span class="line">    function_stop_mysql</span><br><span class="line">    sleep 2</span><br><span class="line">    function_start_mysql</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    function_start_mysql</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">    function_stop_mysql</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">    function_restart_mysql</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;Usage: <span class="variable">$&#123;mysql_basedir&#125;</span>/<span class="variable">$&#123;port&#125;</span>/bin/mysqld &#123;start|stop|restart&#125;\n&quot;</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<p>将服务启动脚本存放至各实例的bin目录下，并加以修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># vim /mysql/3306/bin/mysqld      #对端口和cmd_path进行修改</span></span><br><span class="line">port=3306</span><br><span class="line">cmd_path=<span class="string">&quot;/app/mysql/bin&quot;</span></span><br><span class="line"></span><br><span class="line">[root@localhost /]<span class="comment"># vim /mysql/3307/bin/mysqld      #对端口和cmd_path进行修改</span></span><br><span class="line">port=3307</span><br><span class="line">cmd_path=<span class="string">&quot;/app/mysql/bin&quot;</span></span><br><span class="line"></span><br><span class="line">[root@localhost /]<span class="comment"># chmod +x /mysql/3306/bin/mysqld #为服务脚本添加执行权限</span></span><br><span class="line">[root@localhost /]<span class="comment"># chmod +x /mysql/3307/bin/mysqld</span></span><br></pre></td></tr></table></figure>

<p>关闭编译安装的MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># ss -tnl |grep 3306</span></span><br><span class="line">LISTEN     0      80          :::3306                    :::*</span><br><span class="line">[root@localhost /]<span class="comment"># service mysqld stop</span></span><br><span class="line">Stopping mysqld (via systemctl):                           [  OK  ]</span><br></pre></td></tr></table></figure>

<p>启动实例1，2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># /mysql/3306/bin/mysqld start</span></span><br><span class="line">Starting MySQL...</span><br><span class="line">[root@localhost /]<span class="comment"># /mysql/3307/bin/mysqld start</span></span><br><span class="line">Starting MySQL...</span><br><span class="line"></span><br><span class="line">[root@localhost /]<span class="comment"># ss -tnl | grep 3306</span></span><br><span class="line">LISTEN     0      80          :::3306                    :::*</span><br><span class="line">[root@localhost /]<span class="comment"># ss -tnl | grep 3307</span></span><br><span class="line">LISTEN     0      80          :::3307                    :::*</span><br></pre></td></tr></table></figure>

<p>连接数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#客户端在连接多实例的MySQL时，需要指定端口号和socket文件路径否则报错。</span></span><br><span class="line">[root@localhost /]<span class="comment"># mysql -uroot -p -P3306 -S /mysql/3306/socket/mysql.sock</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 8</span><br><span class="line">Server version: 10.2.23-MariaDB Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line"><span class="comment">#已经连接上实例1</span></span><br></pre></td></tr></table></figure>

<p>关闭多实例MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多实例的MySQL服务在关闭时需要输入MySQL管理员的密码，也可以将管理员密码存放在配置文件的变量mysql_pwd=&quot;&quot;中</span></span><br><span class="line">[root@localhost /]<span class="comment"># /mysql/3306/bin/mysqld stop</span></span><br><span class="line">Stoping MySQL...</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure>

<p>以上为mariadb多实例的配置方法。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL读写分离(ProxySQL)</title>
    <url>/2019/04/12/MySQL/MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB(ProxySQL)/MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BBProxySQL/</url>
    <content><![CDATA[<p>读写分离就是用户在发送请求时，请求经过中间件，中间件将请求中的读和写操作分辨出来将读请求发送给后端的从服务器，将写请求发送给后端的主服务器，再又主服务器通过主从复制将数据复制给其他从服务器</p>
<p><img src="%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB.png" alt="读写分离.png"></p>
<h2 id="常见MySQL中间件"><a href="#常见MySQL中间件" class="headerlink" title="常见MySQL中间件"></a>常见MySQL中间件</h2><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">公司</th>
<th align="left">站点地址</th>
</tr>
</thead>
<tbody><tr>
<td align="left">mysql-proxy</td>
<td align="left">Oracle</td>
<td align="left"><a href="https://downloads.mysql.com/archives/proxy">https://downloads.mysql.com/archives/proxy</a></td>
</tr>
<tr>
<td align="left">Atlas</td>
<td align="left">Qihoo</td>
<td align="left"><a href="https://github.com/Qihoo360/Atlas/blob/master/README_ZH.md">https://github.com/Qihoo360/Atlas/blob/master/README_ZH.md</a></td>
</tr>
<tr>
<td align="left">dbproxy</td>
<td align="left">美团</td>
<td align="left"><a href="https://github.com/Meituan-Dianping/DBProxy">https://github.com/Meituan-Dianping/DBProxy</a></td>
</tr>
<tr>
<td align="left">Cetus</td>
<td align="left">网易乐得</td>
<td align="left"><a href="https://github.com/Lede-Inc/cetus">https://github.com/Lede-Inc/cetus</a></td>
</tr>
<tr>
<td align="left">Amoeba</td>
<td align="left"></td>
<td align="left"><a href="https://sourceforge.net/projects/amoeba/">https://sourceforge.net/projects/amoeba/</a></td>
</tr>
<tr>
<td align="left">Cobar</td>
<td align="left">阿里巴巴</td>
<td align="left">Amoeba的升级版</td>
</tr>
<tr>
<td align="left">Mycat</td>
<td align="left">基于Cobar</td>
<td align="left"><a href="http://www.mycat.io/">http://www.mycat.io</a></td>
</tr>
<tr>
<td align="left">ProxySQL</td>
<td align="left"></td>
<td align="left"><a href="https://proxysql.com/">https://proxysql.com/</a></td>
</tr>
</tbody></table>
<p>本文以ProxySQL为例来介绍读写分离的使用方法</p>
<h2 id="ProxySQL简介"><a href="#ProxySQL简介" class="headerlink" title="ProxySQL简介"></a>ProxySQL简介</h2><p>ProxySQL为MySQL的中间件，其有两个版本官方版和percona版，percona版是基于官方版基础上修改而来。ProxySQL是由C++语言开发，轻量级但性能优异（支持处理千亿级数据），其具有中间件所需要的绝大多数功能，如：</p>
<ol>
<li>多种方式的读写分离</li>
<li>定制基于用户、基于schema、基于语言的规则对SQL语句进行路由</li>
<li>缓存查询结果</li>
<li>后端节点的控制</li>
</ol>
<p>官方站点：<a href="https://proxysql.com/">https://proxysql.com/</a><br>官方手册：<a href="https://github.com/sysown/proxysql/wiki">https://github.com/sysown/proxysql/wiki</a></p>
<h3 id="ProxySQL安装后生成的文件"><a href="#ProxySQL安装后生成的文件" class="headerlink" title="ProxySQL安装后生成的文件"></a>ProxySQL安装后生成的文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/proxysql            <span class="comment">#此为服务脚本存放在init.d目录下所以需要使用service命令去启动他</span></span><br><span class="line">/etc/proxysql.cnf</span><br><span class="line">/usr/bin/proxysql</span><br><span class="line">/usr/share/proxysql/tools/proxysql_galera_checker.sh</span><br><span class="line">/usr/share/proxysql/tools/proxysql_galera_writer.pl</span><br></pre></td></tr></table></figure>

<h3 id="ProxySQL所使用的端口"><a href="#ProxySQL所使用的端口" class="headerlink" title="ProxySQL所使用的端口"></a>ProxySQL所使用的端口</h3><p>ProxySQL所使用的端口为6032和6033<br>6032:用来配置ProxySQL，是个管理接口<br>6033:用来被远程用户连接端口</p>
<h3 id="ProxySQL内置数据库"><a href="#ProxySQL内置数据库" class="headerlink" title="ProxySQL内置数据库"></a>ProxySQL内置数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">| seq | name          | file                                |</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">| 0   | main          |                                     |</span><br><span class="line">| 2   | disk          | /var/lib/proxysql/proxysql.db       |</span><br><span class="line">| 3   | stats         |                                     |</span><br><span class="line">| 4   | monitor       |                                     |</span><br><span class="line">| 5   | stats_history | /var/lib/proxysql/proxysql_stats.db |</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>以上这些库中主要配置的库为main库，里面存放了ProxySQL的各种配置。</p>
<h3 id="ProxySQL-main库内的表"><a href="#ProxySQL-main库内的表" class="headerlink" title="ProxySQL main库内的表"></a>ProxySQL main库内的表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; show tables;</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| tables                                     |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| global_variables                           |</span><br><span class="line">| mysql_collations                           |</span><br><span class="line">| mysql_group_replication_hostgroups         |</span><br><span class="line">| mysql_query_rules                          |</span><br><span class="line">| mysql_query_rules_fast_routing             |</span><br><span class="line">| mysql_replication_hostgroups               |</span><br><span class="line">| mysql_servers                              |</span><br><span class="line">| mysql_users                                |</span><br><span class="line">| proxysql_servers                           |</span><br><span class="line">| runtime_checksums_values                   |</span><br><span class="line">| runtime_global_variables                   |</span><br><span class="line">| runtime_mysql_group_replication_hostgroups |</span><br><span class="line">| runtime_mysql_query_rules                  |</span><br><span class="line">| runtime_mysql_query_rules_fast_routing     |</span><br><span class="line">| runtime_mysql_replication_hostgroups       |</span><br><span class="line">| runtime_mysql_servers                      |</span><br><span class="line">| runtime_mysql_users                        |</span><br><span class="line">| runtime_proxysql_servers                   |</span><br><span class="line">| runtime_scheduler                          |</span><br><span class="line">| scheduler                                  |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">20 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>main库中的表分为runtime开头和非runtime开头  </p>
<p>runtime开头为运行时的设置  </p>
<p>非runtime开头为需要设置的配置  </p>
<p>所有的配置修改后需要执行命令才能加载到runtime生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LOAD ... TO RUNTIME</span><br></pre></td></tr></table></figure>

<p>所有的配置修改后需要执行命令才能永久保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SAVE ... TO DISK</span><br></pre></td></tr></table></figure>

<h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><p>查看read_only和replication_log的监控日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; select * from mysql_server_read_only_log;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select * from mysql_server_replication_lag_log;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="ProxySQL实现读写分离"><a href="#ProxySQL实现读写分离" class="headerlink" title="ProxySQL实现读写分离"></a>ProxySQL实现读写分离</h2><p>ProxySQL在实现读写分离之前先要实现主从复制的共功能  </p>
<p>本实验总计使用4台主机，详细配置如下  </p>
<table>
<thead>
<tr>
<th align="left">主机</th>
<th align="left">ip地址</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Client</td>
<td align="left">192.168.73.113</td>
</tr>
<tr>
<td align="left">ProxySQL</td>
<td align="left">192.168.73.112</td>
</tr>
<tr>
<td align="left">Master</td>
<td align="left">192.168.73.110</td>
</tr>
<tr>
<td align="left">Slave</td>
<td align="left">192.168.73.111</td>
</tr>
</tbody></table>
<p>注意事项：在实现主从复制时从节点在配置文件中必须要设置read_only，这是ProxySQL区分是用来作为读服务器还是写服务器的依据</p>
<hr>
<h3 id="一、实现主从复制"><a href="#一、实现主从复制" class="headerlink" title="一、实现主从复制"></a>一、实现主从复制</h3><h4 id="主节点配置"><a href="#主节点配置" class="headerlink" title="主节点配置"></a>主节点配置</h4><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=1</span><br><span class="line">log-bin</span><br><span class="line">binlog-format=row</span><br></pre></td></tr></table></figure>

<p>2.启动MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># systemctl start mariadb</span></span><br><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;SHOW MASTER LOGS;&quot;</span></span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| Log_name           | File_size |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| mariadb-bin.000001 |       245 |</span><br><span class="line">+--------------------+-----------+</span><br></pre></td></tr></table></figure>

<p>3.创建用来复制的账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;GRANT REPLICATION SLAVE ON *.* TO &#x27;repluser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;centos&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="从节点配置"><a href="#从节点配置" class="headerlink" title="从节点配置"></a>从节点配置</h4><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br><span class="line">log-bin</span><br><span class="line">binlog-format=row</span><br><span class="line">read-only               <span class="comment">#必须写</span></span><br></pre></td></tr></table></figure>

<p>2.启动数据库服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>3.写入CHANGE MASTSER TO信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;192.168.73.110&#x27;</span>, MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,MASTER_PASSWORD=<span class="string">&#x27;centos&#x27;</span>,MASTER_PORT=3306,MASTER_LOG_FILE=<span class="string">&#x27;mariadb-bin.000001&#x27;</span>,MASTER_LOG_POS=245;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>4.启动复制线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>5.查看状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW SLAVE STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.73.110</span><br><span class="line">                  Master_User: repluser</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mariadb-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 402</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 688</span><br><span class="line">        Relay_Master_Log_File: mariadb-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>1.主节点导入数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql &lt; hellodb_innodb.sql</span></span><br><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<p>2.从节点查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<p>主从复制配置完毕</p>
<h3 id="二、在ProxySQL上配置读写分离"><a href="#二、在ProxySQL上配置读写分离" class="headerlink" title="二、在ProxySQL上配置读写分离"></a>二、在ProxySQL上配置读写分离</h3><p>1.在ProxySQL主机上配置yum源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ProxySQL ~]<span class="comment"># vim /etc/yum.repos.d/proxysql.repo</span></span><br><span class="line">[proxysql_repo]</span><br><span class="line">name= ProxySQL YUM repository</span><br><span class="line">baseurl=http://repo.proxysql.com/ProxySQL/proxysql-1.4.x/centos/\<span class="variable">$releasever</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://repo.proxysql.com/ProxySQL/repo_pub_key</span><br></pre></td></tr></table></figure>

<p>2.安装ProxySQL和mariadb客户端</p>
<p>ProxySQL内置了一个轻量级的数据库，所以需要有MySQL客户端连上去对其进行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ProxySQL ~]<span class="comment"># yum install proxysql mariadb -y</span></span><br></pre></td></tr></table></figure>

<p>3.启动ProxySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ProxySQL ~]<span class="comment"># service proxysql start</span></span><br><span class="line">Starting ProxySQL: 2019-05-08 14:03:07 [INFO] Using config file /etc/proxysql.cnf</span><br><span class="line">DONE!</span><br></pre></td></tr></table></figure>

<p>4.连接管理端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ProxySQL ~]<span class="comment"># mysql -uadmin -padmin -P6032 -h127.0.0.1</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 1</span><br><span class="line">Server version: 5.5.30 (ProxySQL Admin Module)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br></pre></td></tr></table></figure>

<p>5.将MySQL主从服务器信息添加入mysql_servers表中</p>
<p>先将主从服务器存放在同一组内，等指定好读写规则后，系统会根据配置文件中的read-only值自动将其分别添加至读组和写组。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (10,<span class="string">&#x27;192.168.73.110&#x27;</span>,3306);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (10,<span class="string">&#x27;192.168.73.111&#x27;</span>,3306);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SELECT * FROM mysql_servers</span><br><span class="line">    -&gt; ;</span><br><span class="line">+--------------+----------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname       | port | status | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+----------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 10           | 192.168.73.110 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 10           | 192.168.73.111 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+----------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>6.在MySQL服务器的主节点上为ProxySQL添加账号用来查看MySQL节点是主还是从</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;GRANT REPLICATION CLIENT ON *.* TO &#x27;monitor&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;centos&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<p>7.在Proxy上配置监控账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; SET mysql-monitor_username=<span class="string">&#x27;monitor&#x27;</span>;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SET mysql-monitor_password=<span class="string">&#x27;centos&#x27;</span>;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>8.将配置加载至内存，将配置保存至磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; LOAD MYSQL VARIABLES TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL VARIABLES TO DISK;</span><br><span class="line">Query OK, 97 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>9.测试</p>
<p>9.1查看连接状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; select * from mysql_server_connect_log;</span><br><span class="line">+----------------+------+------------------+-------------------------+-------------------------------------------------------------------------+</span><br><span class="line">| hostname       | port | time_start_us    | connect_success_time_us | connect_error                                                           |</span><br><span class="line">+----------------+------+------------------+-------------------------+-------------------------------------------------------------------------+</span><br><span class="line">| 192.168.73.110 | 3306 | 1557296528658352 | 0                       | Access denied <span class="keyword">for</span> user <span class="string">&#x27;monitor&#x27;</span>@<span class="string">&#x27;192.168.73.112&#x27;</span> (using password: YES) |</span><br><span class="line">| 192.168.73.111 | 3306 | 1557296648056186 | 0                       | Access denied <span class="keyword">for</span> user <span class="string">&#x27;monitor&#x27;</span>@<span class="string">&#x27;192.168.73.112&#x27;</span> (using password: YES) |</span><br><span class="line">| 192.168.73.110 | 3306 | 1557296649025169 | 0                       | Access denied <span class="keyword">for</span> user <span class="string">&#x27;monitor&#x27;</span>@<span class="string">&#x27;192.168.73.112&#x27;</span> (using password: YES) |</span><br><span class="line">| 192.168.73.110 | 3306 | 1557296708057600 | 0                       | Access denied <span class="keyword">for</span> user <span class="string">&#x27;monitor&#x27;</span>@<span class="string">&#x27;192.168.73.112&#x27;</span> (using password: YES) |</span><br><span class="line">| 192.168.73.111 | 3306 | 1557296708872496 | 0                       | Access denied <span class="keyword">for</span> user <span class="string">&#x27;monitor&#x27;</span>@<span class="string">&#x27;192.168.73.112&#x27;</span> (using password: YES) |</span><br><span class="line">| 192.168.73.110 | 3306 | 1557296758752550 | 2763                    | NULL                                                                    |  <span class="comment">#此前由于没有创建监控账号所以连接一直失败</span></span><br><span class="line">| 192.168.73.111 | 3306 | 1557296759862679 | 3205                    | NULL                                                                    |</span><br><span class="line">| 192.168.73.110 | 3306 | 1557296818752346 | 1014                    | NULL                                                                    |</span><br><span class="line">| 192.168.73.111 | 3306 | 1557296819498108 | 3120                    | NULL                                                                    |</span><br><span class="line">| 192.168.73.110 | 3306 | 1557296878752978 | 3245                    | NULL                                                                    |</span><br><span class="line">| 192.168.73.111 | 3306 | 1557296879410404 | 3063                    | NULL                                                                    |</span><br><span class="line">+----------------+------+------------------+-------------------------+-------------------------------------------------------------------------+</span><br><span class="line">22 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>9.2测试连接ping</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; select * from mysql_server_ping_log;</span><br><span class="line">+----------------+------+------------------+----------------------+-------------------------------------------------------------------------+</span><br><span class="line">| hostname       | port | time_start_us    | ping_success_time_us | ping_error                                                              |</span><br><span class="line">+----------------+------+------------------+----------------------+-------------------------------------------------------------------------+</span><br><span class="line">| 192.168.73.111 | 3306 | 1557296508118738 | 0                    | Access denied <span class="keyword">for</span> user <span class="string">&#x27;monitor&#x27;</span>@<span class="string">&#x27;192.168.73.112&#x27;</span> (using password: YES) |</span><br><span class="line">| 192.168.73.110 | 3306 | 1557296508302837 | 0                    | Access denied <span class="keyword">for</span> user <span class="string">&#x27;monitor&#x27;</span>@<span class="string">&#x27;192.168.73.112&#x27;</span> (using password: YES) |</span><br><span class="line"></span><br><span class="line">...中间省略...</span><br><span class="line"></span><br><span class="line">| 192.168.73.110 | 3306 | 1557297088874658 | 675                  | NULL                                                                    |</span><br><span class="line">| 192.168.73.111 | 3306 | 1557297089037256 | 435                  | NULL                                                                    |</span><br><span class="line">| 192.168.73.110 | 3306 | 1557297098875954 | 1144                 | NULL                                                                    |</span><br><span class="line">| 192.168.73.111 | 3306 | 1557297099069333 | 1252                 | NULL                                                                    |</span><br><span class="line">+----------------+------+------------------+----------------------+-------------------------------------------------------------------------+</span><br><span class="line">122 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment">#已经可以联通</span></span><br></pre></td></tr></table></figure>

<p>10.设置读写分组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; INSERT INTO mysql_replication_hostgroups VALUES(10,20,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SELECT * FROM mysql_replication_hostgroups;</span><br><span class="line">+------------------+------------------+---------+</span><br><span class="line">| writer_hostgroup | reader_hostgroup | comment |</span><br><span class="line">+------------------+------------------+---------+</span><br><span class="line">| 10               | 20               | <span class="built_in">test</span>    |</span><br><span class="line">+------------------+------------------+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>11.让读写表生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; LOAD MYSQL SERVERS TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>12.查看mysql_server表此时已经将服务器分组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; SELECT * FROM mysql_servers;</span><br><span class="line">+--------------+----------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname       | port | status | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+----------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 10           | 192.168.73.110 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 20           | 192.168.73.111 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+----------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>13.保存配置至磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; SAVE MYSQL SERVERS TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>

<p>至此读写分离配置完毕，接下来需要定义读写分离的规则</p>
<h3 id="三、定义读写分离规则"><a href="#三、定义读写分离规则" class="headerlink" title="三、定义读写分离规则"></a>三、定义读写分离规则</h3><p>1.在主节点上创建一个账户让客户端连接调度器去访问主从服务器（此处授予的权限较大，实际生产中可以根据需要定义指定的那张表）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;GRANT ALL ON *.* TO &#x27;sqluser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;centos&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.在ProxySQL服务器上，将sqluser用户添加至mysql_users表中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; INSERT INTO mysql_users(username,password,default_hostgroup) VALUES (<span class="string">&#x27;sqluser&#x27;</span>,<span class="string">&#x27;centos&#x27;</span>,10);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>3.查看mysql_user表信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; SELECT * FROM mysql_users;</span><br><span class="line">+----------+----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</span><br><span class="line">| username | password | active | use_ssl | default_hostgroup | default_schema | schema_locked | transaction_persistent | fast_forward | backend | frontend | max_connections |</span><br><span class="line">+----------+----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</span><br><span class="line">| sqluser  | centos   | 1      | 0       | 10                | NULL           | 0             | 1                      | 0            | 1       | 1        | 10000           |</span><br><span class="line">+----------+----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>4.生效存盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; load mysql users to runtime;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL USERS TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>5.测试</p>
<p>目前尚未设置读写路由规则，所有的请求都是发往主节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># mysql -usqluser -pcentos -h192.168.73.112 -P6033 -e &quot;SELECT @@server_id;&quot;</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure>

<p>6.在ProxySQL上定义调度规则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; INSERT INTO mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply) VALUES (1,1,<span class="string">&#x27;^SELECT.*FOR UPDATE$&#x27;</span>,10,1),(2,1,<span class="string">&#x27;^SELECT&#x27;</span>,20,1);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>7.查看定义规则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt;  SELECT * FROM mysql_query_rules\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">              rule_id: 1</span><br><span class="line">               active: 1</span><br><span class="line">             username: NULL</span><br><span class="line">           schemaname: NULL</span><br><span class="line">               flagIN: 0</span><br><span class="line">          client_addr: NULL</span><br><span class="line">           proxy_addr: NULL</span><br><span class="line">           proxy_port: NULL</span><br><span class="line">               digest: NULL</span><br><span class="line">         match_digest: ^SELECT.*FOR UPDATE$</span><br><span class="line">        match_pattern: NULL</span><br><span class="line"> negate_match_pattern: 0</span><br><span class="line">         re_modifiers: CASELESS</span><br><span class="line">              flagOUT: NULL</span><br><span class="line">      replace_pattern: NULL</span><br><span class="line">destination_hostgroup: 10</span><br><span class="line">            cache_ttl: NULL</span><br><span class="line">            reconnect: NULL</span><br><span class="line">              timeout: NULL</span><br><span class="line">              retries: NULL</span><br><span class="line">                delay: NULL</span><br><span class="line">    next_query_flagIN: NULL</span><br><span class="line">       mirror_flagOUT: NULL</span><br><span class="line">     mirror_hostgroup: NULL</span><br><span class="line">            error_msg: NULL</span><br><span class="line">               OK_msg: NULL</span><br><span class="line">          sticky_conn: NULL</span><br><span class="line">            multiplex: NULL</span><br><span class="line">                  <span class="built_in">log</span>: NULL</span><br><span class="line">                apply: 1</span><br><span class="line">              comment: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">              rule_id: 2</span><br><span class="line">               active: 1</span><br><span class="line">             username: NULL</span><br><span class="line">           schemaname: NULL</span><br><span class="line">               flagIN: 0</span><br><span class="line">          client_addr: NULL</span><br><span class="line">           proxy_addr: NULL</span><br><span class="line">           proxy_port: NULL</span><br><span class="line">               digest: NULL</span><br><span class="line">         match_digest: ^SELECT</span><br><span class="line">        match_pattern: NULL</span><br><span class="line"> negate_match_pattern: 0</span><br><span class="line">         re_modifiers: CASELESS</span><br><span class="line">              flagOUT: NULL</span><br><span class="line">      replace_pattern: NULL</span><br><span class="line">destination_hostgroup: 20</span><br><span class="line">            cache_ttl: NULL</span><br><span class="line">            reconnect: NULL</span><br><span class="line">              timeout: NULL</span><br><span class="line">              retries: NULL</span><br><span class="line">                delay: NULL</span><br><span class="line">    next_query_flagIN: NULL</span><br><span class="line">       mirror_flagOUT: NULL</span><br><span class="line">     mirror_hostgroup: NULL</span><br><span class="line">            error_msg: NULL</span><br><span class="line">               OK_msg: NULL</span><br><span class="line">          sticky_conn: NULL</span><br><span class="line">            multiplex: NULL</span><br><span class="line">                  <span class="built_in">log</span>: NULL</span><br><span class="line">                apply: 1</span><br><span class="line">              comment: NULL</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>8.生效存盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; LOAD MYSQL QUERY RULES TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL QUERY RULES TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="四、在Client端测试"><a href="#四、在Client端测试" class="headerlink" title="四、在Client端测试"></a>四、在Client端测试</h3><p>1.查询操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># mysql -usqluser -pcentos -h192.168.73.112 -P6033 -e &quot;SELECT @@server_id;&quot;</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           2 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure>

<p>2.写操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Client ~]<span class="comment"># mysql -usqluser -pcentos -h192.168.73.112 -P6033 -e &quot;BEGIN;INSERT hellodb.teachers VALUE(5,&#x27;Long&#x27;,30,&#x27;M&#x27;);SELECT @@server_id;commit;&quot;</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL进程的查杀</title>
    <url>/2019/04/17/MySQL/MySQL%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%9F%A5%E6%9D%80/MySQL%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%9F%A5%E6%9D%80/</url>
    <content><![CDATA[<h2 id="MySQL查杀进程"><a href="#MySQL查杀进程" class="headerlink" title="MySQL查杀进程"></a>MySQL查杀进程</h2><p>1.查看所要杀的进程编号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; SHOW PROCESSLIST;</span><br><span class="line">+----+-------------+-----------+---------+---------+------+---------------------------------+---------------------------------------------+----------+</span><br><span class="line">| Id | User        | Host      | db      | Command | Time | State                           | Info                                        | Progress |</span><br><span class="line">+----+-------------+-----------+---------+---------+------+---------------------------------+---------------------------------------------+----------+</span><br><span class="line">|  4 | system user |           | NULL    | Daemon  | NULL | InnoDB purge worker             | NULL                                        |    0.000 |</span><br><span class="line">|  2 | system user |           | NULL    | Daemon  | NULL | InnoDB purge worker             | NULL                                        |    0.000 |</span><br><span class="line">|  1 | system user |           | NULL    | Daemon  | NULL | InnoDB purge worker             | NULL                                        |    0.000 |</span><br><span class="line">|  3 | system user |           | NULL    | Daemon  | NULL | InnoDB purge coordinator        | NULL                                        |    0.000 |</span><br><span class="line">|  5 | system user |           | NULL    | Daemon  | NULL | InnoDB shutdown handler         | NULL                                        |    0.000 |</span><br><span class="line">| 10 | root        | localhost | hellodb | Sleep   | 6943 |                                 | NULL                                        |    0.000 |</span><br><span class="line">| 11 | root        | localhost | NULL    | Sleep   | 7393 |                                 | NULL                                        |    0.000 |</span><br><span class="line">| 13 | root        | localhost | hellodb | Query   |    0 | init                            | SHOW PROCESSLIST                            |    0.000 |</span><br><span class="line">| 14 | root        | localhost | NULL    | Query   |    3 | Waiting <span class="keyword">for</span> table metadata lock | delete from hellodb.students <span class="built_in">where</span> stuid=20 |    0.000 |</span><br><span class="line">+----+-------------+-----------+---------+---------+------+---------------------------------+---------------------------------------------+----------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>2.将其进程杀死</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; <span class="built_in">kill</span> 14;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高可用(Galera Cluster)</title>
    <url>/2019/04/13/MySQL/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8(Galera%20Cluster)/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8GC/</url>
    <content><![CDATA[<h2 id="Galera-Cluster简介"><a href="#Galera-Cluster简介" class="headerlink" title="Galera Cluster简介"></a>Galera Cluster简介</h2><p>Galera Cluster是集成了Galera插件的MySQL集群，是一种新型的，数据不共享的，高度冗余的高可用方案，目前Galera Cluster有两个版本，分别是Percona Xtradb Cluster和MariaDB Cluster，Galera本时是具有多主特性，即采用Multi-master的集群架构，是一个即稳健，又在数据一致性、完整性及高性能方面有出色表现的高可用解决方案</p>
<h3 id="Galera-Cluster内部机制"><a href="#Galera-Cluster内部机制" class="headerlink" title="Galera Cluster内部机制"></a>Galera Cluster内部机制</h3><p><img src="GC.png" alt="GC.png"></p>
<p>Galera Cluster种每个MySQLServer之间相互为主主的关系，当客户端发送指令到一个数据库时，数据库将数据修改后返回一个OK，表示用户的请求已经被收到，但是事务并没有结束依旧可以撤销。当事务结束时用户发送一个commit(提交)，服务器收到后会将数据的更新发送给其他的MySQLServer，此时会开启一个全局性的事务ID给组内的其他服务器，其他服务器会查看是否有事务冲突，如果没有冲突就确认更改成功。</p>
<h3 id="Galera-Cluster特点"><a href="#Galera-Cluster特点" class="headerlink" title="Galera Cluster特点"></a>Galera Cluster特点</h3><ol>
<li><p>多主架构：真正的多点读写的集群，在任何时候读写数据都是最新的</p>
</li>
<li><p>同步复制：集群不同节点之间数据同步，没有延迟，在数据库挂掉之后，数据不会丢失</p>
</li>
<li><p>并发复制：从节点APPLY数据时，支持并行执行有更好的性能。</p>
</li>
<li><p>故障切换：数据库故障时，因为支持多点写入，切换容易</p>
</li>
<li><p>热插拔：在服务期间，如果数据库挂了，只要监控程序发现的够快，不可服务的时间就会非常少。在节点故障期间，节点本身对集群的影响非常小</p>
</li>
<li><p>自动节点克隆： 在新增节点，或者停机维护时，增量数据或者基础数据不需要人工手动备份提供，Galera Cluster会自动拉取在线节点数据，最终集群会变为一直</p>
</li>
<li><p>对应用透明：集群的维护，对应用程序是透明的</p>
</li>
</ol>
<hr>
<h2 id="Galera-Cluster搭建"><a href="#Galera-Cluster搭建" class="headerlink" title="Galera Cluster搭建"></a>Galera Cluster搭建</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>准备3台msyql服务器</p>
<table>
<thead>
<tr>
<th align="left">主机名</th>
<th align="left">ip地址</th>
</tr>
</thead>
<tbody><tr>
<td align="left">node1</td>
<td align="left">192.168.73.110</td>
</tr>
<tr>
<td align="left">node2</td>
<td align="left">192.168.73.111</td>
</tr>
<tr>
<td align="left">node3</td>
<td align="left">192.168.73.112</td>
</tr>
</tbody></table>
<h3 id="一、配置YUM源"><a href="#一、配置YUM源" class="headerlink" title="一、配置YUM源"></a>一、配置YUM源</h3><p>在每个节点上配置YUM源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># vim /etc/yum.repos.d/mysql.repo</span></span><br><span class="line">[mysql]</span><br><span class="line">name=galera cluster</span><br><span class="line">baseurl=http://mirrors.neusoft.edu.cn/mariadb//mariadb-10.0.38/yum/centos7-amd64/</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>

<h3 id="二、安装MariaDB-Galera-server"><a href="#二、安装MariaDB-Galera-server" class="headerlink" title="二、安装MariaDB-Galera-server"></a>二、安装MariaDB-Galera-server</h3><p>在每个节点上安装MariaDB-Galera-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># yum install MariaDB-Galera-server -y</span></span><br></pre></td></tr></table></figure>

<h3 id="三、修改配置文件"><a href="#三、修改配置文件" class="headerlink" title="三、修改配置文件"></a>三、修改配置文件</h3><p>配置文件在/etc/my.cnf.d/server.cnf，有必须设置和可选设置两个配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mandatory settings                    #这里的项目为必填</span></span><br><span class="line">wsrep_provider=                         <span class="comment">#添加模块路径</span></span><br><span class="line">wsrep_cluster_address=                  <span class="comment">#添加所有服务器的地址gcomm服务器间代替通讯协议</span></span><br><span class="line">binlog_format=row                       <span class="comment">#启用二进制日志</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional setting                      #以下项为可选项</span></span><br><span class="line"><span class="comment">#wsrep_slave_threads=1</span></span><br><span class="line"><span class="comment">#innodb_flush_log_at_trx_commit=0</span></span><br><span class="line"><span class="comment">#wsrep_cluster_name=&#x27;testcluster&#x27;       #集群的名称</span></span><br><span class="line"><span class="comment">#wsrep_node_name=&#x27;node1&#x27;                #当前节点的名称</span></span><br><span class="line"><span class="comment">#wsrep_node_address=&#x27;192.168.73.110&#x27;    #当前节点的地址</span></span><br></pre></td></tr></table></figure>

<p>对每个节点配置文件进行修改，此处以node1为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># vim /etc/my.cnf.d/server.cnf</span></span><br><span class="line">[galera]</span><br><span class="line"><span class="comment"># Mandatory settings</span></span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address=<span class="string">&quot;gcomm://192.168.73.110,192.168.73.111,192.168.73.112&quot;</span></span><br><span class="line">binlog_format=row</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">bind-address=0.0.0.0</span><br></pre></td></tr></table></figure>

<h3 id="四、启动服务"><a href="#四、启动服务" class="headerlink" title="四、启动服务"></a>四、启动服务</h3><p>第一个启动的节点需要添加–wsrep-new-cluster选项，说明这是一个新的集群，其余节点启动服务无需添加参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># service mysql start --wsrep-new-cluster</span></span><br></pre></td></tr></table></figure>

<p>node2节点启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># service mysql start</span></span><br></pre></td></tr></table></figure>

<p>node3节点启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node3 ~]<span class="comment"># service mysql start</span></span><br></pre></td></tr></table></figure>

<h3 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h3><h4 id="1-测试同步"><a href="#1-测试同步" class="headerlink" title="1.测试同步"></a>1.测试同步</h4><p>从node1导入数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># mysql &lt; hellodb_innodb.sql</span></span><br></pre></td></tr></table></figure>

<p>node2查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hellodb            |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<p>node3查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node3 ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hellodb            |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<h4 id="2-测试冲突"><a href="#2-测试冲突" class="headerlink" title="2.测试冲突"></a>2.测试冲突</h4><p>同时在3节点创建表</p>
<p>在node2节点成功，其余节点都失败</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># mysql -e &quot;CREATE TABLE hellodb.test(id int auto_increment primary key,name char(20));&quot;</span></span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>node1节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># mysql -e &quot;CREATE TABLE hellodb.test(id int auto_increment primary key,name char(20));&quot;</span></span><br><span class="line">ERROR 1050 (42S01) at line 1: Table <span class="string">&#x27;test&#x27;</span> already exists</span><br></pre></td></tr></table></figure>

<p>node3节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node3 ~]<span class="comment"># mysql -e &quot;CREATE TABLE hellodb.test(id int auto_increment primary key,name char(20));&quot;</span></span><br><span class="line">ERROR 1050 (42S01) at line 1: Table <span class="string">&#x27;test&#x27;</span> already exists</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Galera Cluster系统和状态变量</p>
<p>1.查看状态变量:SHOW STATUS LIKE ‘wsrep_%’</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW STATUS LIKE <span class="string">&#x27;wsrep_%&#x27;</span>;</span><br><span class="line">+------------------------------+-------------------------------------------------------------+</span><br><span class="line">| Variable_name                | Value                                                       |</span><br><span class="line">+------------------------------+-------------------------------------------------------------+</span><br><span class="line">| wsrep_local_state_uuid       | e9f07cd3-7253-11e9-b27e-174ea2b4587d                        |</span><br><span class="line">| wsrep_protocol_version       | 9                                                           |</span><br><span class="line">| wsrep_last_committed         | 38                                                          |</span><br><span class="line">| wsrep_replicated             | 36                                                          |</span><br><span class="line">| wsrep_replicated_bytes       | 18960                                                       |</span><br><span class="line">| wsrep_repl_keys              | 144                                                         |</span><br><span class="line">| wsrep_repl_keys_bytes        | 2016                                                        |</span><br><span class="line">| wsrep_repl_data_bytes        | 14522                                                       |</span><br><span class="line">| wsrep_repl_other_bytes       | 0                                                           |</span><br><span class="line">| wsrep_received               | 12                                                          |</span><br><span class="line">| wsrep_received_bytes         | 1782                                                        |</span><br><span class="line">| wsrep_local_commits          | 6                                                           |</span><br><span class="line">| wsrep_local_cert_failures    | 0                                                           |</span><br><span class="line">| wsrep_local_replays          | 0                                                           |</span><br><span class="line">| wsrep_local_send_queue       | 0                                                           |</span><br><span class="line">| wsrep_local_send_queue_max   | 1                                                           |</span><br><span class="line">| wsrep_local_send_queue_min   | 0                                                           |</span><br><span class="line">| wsrep_local_send_queue_avg   | 0.000000                                                    |</span><br><span class="line">| wsrep_local_recv_queue       | 0                                                           |</span><br><span class="line">| wsrep_local_recv_queue_max   | 1                                                           |</span><br><span class="line">| wsrep_local_recv_queue_min   | 0                                                           |</span><br><span class="line">| wsrep_local_recv_queue_avg   | 0.000000                                                    |</span><br><span class="line">| wsrep_local_cached_downto    | 1                                                           |</span><br><span class="line">| wsrep_flow_control_paused_ns | 0                                                           |</span><br><span class="line">| wsrep_flow_control_paused    | 0.000000                                                    |</span><br><span class="line">| wsrep_flow_control_sent      | 0                                                           |</span><br><span class="line">| wsrep_flow_control_recv      | 0                                                           |</span><br><span class="line">| wsrep_cert_deps_distance     | 1.000000                                                    |</span><br><span class="line">| wsrep_apply_oooe             | 0.000000                                                    |</span><br><span class="line">| wsrep_apply_oool             | 0.000000                                                    |</span><br><span class="line">| wsrep_apply_window           | 1.000000                                                    |</span><br><span class="line">| wsrep_commit_oooe            | 0.000000                                                    |</span><br><span class="line">| wsrep_commit_oool            | 0.000000                                                    |</span><br><span class="line">| wsrep_commit_window          | 1.000000                                                    |</span><br><span class="line">| wsrep_local_state            | 4                                                           |</span><br><span class="line">| wsrep_local_state_comment    | Synced                                                      |</span><br><span class="line">| wsrep_cert_index_size        | 82                                                          |</span><br><span class="line">| wsrep_causal_reads           | 0                                                           |</span><br><span class="line">| wsrep_cert_interval          | 0.026316                                                    |</span><br><span class="line">| wsrep_open_transactions      | 0                                                           |</span><br><span class="line">| wsrep_open_connections       | 0                                                           |</span><br><span class="line">| wsrep_incoming_addresses     | 192.168.73.110:3306,192.168.73.111:3306,192.168.73.112:3306 |</span><br><span class="line">| wsrep_cluster_weight         | 3                                                           |</span><br><span class="line">| wsrep_desync_count           | 0                                                           |</span><br><span class="line">| wsrep_evs_delayed            |                                                             |</span><br><span class="line">| wsrep_evs_evict_list         |                                                             |</span><br><span class="line">| wsrep_evs_repl_latency       | 0/0/0/0/0                                                   |</span><br><span class="line">| wsrep_evs_state              | OPERATIONAL                                                 |</span><br><span class="line">| wsrep_gcomm_uuid             | e9efec79-7253-11e9-8e15-9f3e0cc2d8a1                        |</span><br><span class="line">| wsrep_cluster_conf_id        | 3                                                           |</span><br><span class="line">| wsrep_cluster_size           | 3                                                           |</span><br><span class="line">| wsrep_cluster_state_uuid     | e9f07cd3-7253-11e9-b27e-174ea2b4587d                        |</span><br><span class="line">| wsrep_cluster_status         | Primary                                                     |</span><br><span class="line">| wsrep_connected              | ON                                                          |</span><br><span class="line">| wsrep_local_bf_aborts        | 0                                                           |</span><br><span class="line">| wsrep_local_index            | 0                                                           |</span><br><span class="line">| wsrep_provider_name          | Galera                                                      |</span><br><span class="line">| wsrep_provider_vendor        | Codership Oy &lt;info@codership.com&gt;                           |</span><br><span class="line">| wsrep_provider_version       | 25.3.25(r3836)                                              |</span><br><span class="line">| wsrep_ready                  | ON                                                          |</span><br><span class="line">| wsrep_thread_count           | 2                                                           |</span><br><span class="line">+------------------------------+-------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>2.查看系统变量:SHOW VARIABLES like ‘wsrep_%’\G;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; SHOW VARIABLES like <span class="string">&#x27;wsrep_%&#x27;</span>\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Variable_name: wsrep_auto_increment_control</span><br><span class="line">        Value: ON</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">Variable_name: wsrep_causal_reads</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">Variable_name: wsrep_certification_rules</span><br><span class="line">        Value: strict</span><br><span class="line">*************************** 4. row ***************************</span><br><span class="line">Variable_name: wsrep_certify_nonpk</span><br><span class="line">        Value: ON</span><br><span class="line">*************************** 5. row ***************************</span><br><span class="line">Variable_name: wsrep_cluster_address</span><br><span class="line">        Value: gcomm://192.168.73.110,192.168.73.111,192.168.73.112</span><br><span class="line">*************************** 6. row ***************************</span><br><span class="line">Variable_name: wsrep_cluster_name</span><br><span class="line">        Value: testcluster</span><br><span class="line">*************************** 7. row ***************************</span><br><span class="line">Variable_name: wsrep_convert_lock_to_trx</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 8. row ***************************</span><br><span class="line">Variable_name: wsrep_data_home_dir</span><br><span class="line">        Value: /var/lib/mysql/</span><br><span class="line">*************************** 9. row ***************************</span><br><span class="line">Variable_name: wsrep_dbug_option</span><br><span class="line">        Value: </span><br><span class="line">*************************** 10. row ***************************</span><br><span class="line">Variable_name: wsrep_debug</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 11. row ***************************</span><br><span class="line">Variable_name: wsrep_desync</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 12. row ***************************</span><br><span class="line">Variable_name: wsrep_dirty_reads</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 13. row ***************************</span><br><span class="line">Variable_name: wsrep_drupal_282555_workaround</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 14. row ***************************</span><br><span class="line">Variable_name: wsrep_forced_binlog_format</span><br><span class="line">        Value: NONE</span><br><span class="line">*************************** 15. row ***************************</span><br><span class="line">Variable_name: wsrep_load_data_splitting</span><br><span class="line">        Value: ON</span><br><span class="line">*************************** 16. row ***************************</span><br><span class="line">Variable_name: wsrep_log_conflicts</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 17. row ***************************</span><br><span class="line">Variable_name: wsrep_max_ws_rows</span><br><span class="line">        Value: 0</span><br><span class="line">*************************** 18. row ***************************</span><br><span class="line">Variable_name: wsrep_max_ws_size</span><br><span class="line">        Value: 2147483647</span><br><span class="line">*************************** 19. row ***************************</span><br><span class="line">Variable_name: wsrep_mysql_replication_bundle</span><br><span class="line">        Value: 0</span><br><span class="line">*************************** 20. row ***************************</span><br><span class="line">Variable_name: wsrep_node_address</span><br><span class="line">        Value: 192.168.73.110</span><br><span class="line">*************************** 21. row ***************************</span><br><span class="line">Variable_name: wsrep_node_incoming_address</span><br><span class="line">        Value: AUTO</span><br><span class="line">*************************** 22. row ***************************</span><br><span class="line">Variable_name: wsrep_node_name</span><br><span class="line">        Value: node1</span><br><span class="line">*************************** 23. row ***************************</span><br><span class="line">Variable_name: wsrep_notify_cmd</span><br><span class="line">        Value: </span><br><span class="line">*************************** 24. row ***************************</span><br><span class="line">Variable_name: wsrep_on</span><br><span class="line">        Value: ON</span><br><span class="line">*************************** 25. row ***************************</span><br><span class="line">Variable_name: wsrep_osu_method</span><br><span class="line">        Value: TOI</span><br><span class="line">*************************** 26. row ***************************</span><br><span class="line">Variable_name: wsrep_provider</span><br><span class="line">        Value: /usr/lib64/galera/libgalera_smm.so</span><br><span class="line">*************************** 27. row ***************************</span><br><span class="line">Variable_name: wsrep_provider_options</span><br><span class="line">        Value: base_dir = /var/lib/mysql/; base_host = 192.168.73.110; base_port = 4567; cert.log_conflicts = no; cert.optimistic_pa = yes; debug = no; evs.auto_evict = 0; evs.causal_keepalive_period = PT1S; evs.debug_log_mask = 0x1; evs.delay_margin = PT1S; evs.delayed_keep_period = PT30S; evs.inactive_check_period = PT0.5S; evs.inactive_timeout = PT15S; evs.info_log_mask = 0; evs.install_timeout = PT7.5S; evs.join_retrans_period = PT1S; evs.keepalive_period = PT1S; evs.max_install_timeouts = 3; evs.send_window = 4; evs.stats_report_period = PT1M; evs.suspect_timeout = PT5S; evs.use_aggregate = <span class="literal">true</span>; evs.user_send_window = 2; evs.version = 0; evs.view_forget_timeout = P1D; gcache.dir = /var/lib/mysql/; gcache.keep_pages_size = 0; gcache.mem_size = 0; gcache.name = /var/lib/mysql//galera.cache; gcache.page_size = 128M; gcache.recover = no; gcache.size = 128M; gcomm.thread_prio = ; gcs.fc_debug = 0; gcs.fc_factor = 1.0; gcs.fc_limit = 16; gcs.fc_master_slave = no; gcs.max_packet_size = 64500; gcs.max_throttle = 0.25; gcs.recv_q_hard_limit = 9223372036854775807; gcs.recv_q_soft_limit = 0.25; gcs.sync_donor = no; gmcast.listen_addr = tcp://0.0.0.0:4567; gmcast.mcast_addr = ; gmcast.mcast_ttl = 1; gmcast.peer_timeout = PT3S; gmcast.segment = 0; gmcast.time_wait = PT5S; gmcast.version = 0; ist.recv_addr = 192.168.73.110; pc.announce_timeout = PT3S; pc.checksum = <span class="literal">false</span>; pc.ignore_quorum = <span class="literal">false</span>; pc.ignore_sb = <span class="literal">false</span>; pc.linger = PT20S; pc.npvo = <span class="literal">false</span>; pc.recovery = <span class="literal">true</span>; pc.version = 0; pc.wait_prim = <span class="literal">true</span>; pc.wait_prim_timeout = PT30S; pc.weight = 1; protonet.backend = asio; protonet.version = 0; repl.causal_read_timeout = PT30S; repl.commit_order = 3; repl.key_format = FLAT8; repl.max_ws_size = 2147483647; repl.proto_max = 9; socket.checksum = 2; socket.recv_buf_size = 212992; </span><br><span class="line">*************************** 28. row ***************************</span><br><span class="line">Variable_name: wsrep_recover</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 29. row ***************************</span><br><span class="line">Variable_name: wsrep_replicate_myisam</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 30. row ***************************</span><br><span class="line">Variable_name: wsrep_restart_slave</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 31. row ***************************</span><br><span class="line">Variable_name: wsrep_retry_autocommit</span><br><span class="line">        Value: 1</span><br><span class="line">*************************** 32. row ***************************</span><br><span class="line">Variable_name: wsrep_slave_fk_checks</span><br><span class="line">        Value: ON</span><br><span class="line">*************************** 33. row ***************************</span><br><span class="line">Variable_name: wsrep_slave_threads</span><br><span class="line">        Value: 1</span><br><span class="line">*************************** 34. row ***************************</span><br><span class="line">Variable_name: wsrep_slave_uk_checks</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 35. row ***************************</span><br><span class="line">Variable_name: wsrep_sst_auth</span><br><span class="line">        Value:</span><br><span class="line">*************************** 36. row ***************************</span><br><span class="line">Variable_name: wsrep_sst_donor</span><br><span class="line">        Value:</span><br><span class="line">*************************** 37. row ***************************</span><br><span class="line">Variable_name: wsrep_sst_donor_rejects_queries</span><br><span class="line">        Value: OFF</span><br><span class="line">*************************** 38. row ***************************</span><br><span class="line">Variable_name: wsrep_sst_method</span><br><span class="line">        Value: rsync</span><br><span class="line">*************************** 39. row ***************************</span><br><span class="line">Variable_name: wsrep_sst_receive_address</span><br><span class="line">        Value: AUTO</span><br><span class="line">*************************** 40. row ***************************</span><br><span class="line">Variable_name: wsrep_start_position</span><br><span class="line">        Value: 00000000-0000-0000-0000-000000000000:-1</span><br><span class="line">*************************** 41. row ***************************</span><br><span class="line">Variable_name: wsrep_sync_wait</span><br><span class="line">        Value: 0</span><br><span class="line">41 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的高可用(MHA)</title>
    <url>/2019/04/14/MySQL/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8(MHA)/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8MHA/</url>
    <content><![CDATA[<p>MHA:Master High Availability,对主节点进行监控，可实现自动故障转移至其他从节点；通过提升某一从节点为新的主节点，基于主从复制实现，还需要客户端配合实现，目前MHA主要支持一主二从，即一台充当master，一台充当备用master，另外一台充当从数据库，出于机器成本的考虑，淘宝进行了改造，目前淘宝TMHA已经一主一从。</p>
<span id="more"></span>

<h2 id="MHA架构"><a href="#MHA架构" class="headerlink" title="MHA架构"></a>MHA架构</h2><p><img src="MHA.png" alt="MHA.png"></p>
<h2 id="MHA的工作原理"><a href="#MHA的工作原理" class="headerlink" title="MHA的工作原理"></a>MHA的工作原理</h2><p><img src="MHA2.png" alt="MHA2.png"></p>
<p>MHA是由一台manager服务器远程监控主服务器,当主服务器挂了提升一台从服务器作为主服务器。  </p>
<p>当主节点挂了，manager首先要查看哪台从节点，同步的数据最多，然后提升同步最多的从节点为主节点，再将其余的MySQL服务器对他做从节点。  </p>
<p>如果原主节点没彻底死透，manager会让新的主机通过ssh协议远程连接到原先的主节点，拉取二进制日志进行同步。如果主节死透了那就放弃。　　</p>
<hr>
<h2 id="MHA搭建"><a href="#MHA搭建" class="headerlink" title="MHA搭建"></a>MHA搭建</h2><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><p>准备4台主机，管理节点1台，主节点MySQL服务器1台，从节点MySQL服务器2台<br>|主机|IP|<br>|:-|:-|<br>|Manager|192.168.73.111|<br>|Master|192.168.73.110|<br>|Slave1|192.168.73.112|<br>|Slave2|192.168.73.113|</p>
<h3 id="二、将Manager管理节点配置为时间服务器，向所有MySQL服务器提供时间同步"><a href="#二、将Manager管理节点配置为时间服务器，向所有MySQL服务器提供时间同步" class="headerlink" title="二、将Manager管理节点配置为时间服务器，向所有MySQL服务器提供时间同步"></a>二、将Manager管理节点配置为时间服务器，向所有MySQL服务器提供时间同步</h3><p>1.安装chrony服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># yum install -y chrony</span></span><br></pre></td></tr></table></figure>

<p>2.修改chrony配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line">server 172.22.0.1 iburst</span><br><span class="line">allow 192.168.0.0/16</span><br><span class="line"><span class="built_in">local</span> stratum 10</span><br></pre></td></tr></table></figure>

<p>3.启动chrony服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># systemctl start chronyd</span></span><br></pre></td></tr></table></figure>

<p>4.将MySQL服务器与Manager服务器进行时间同步</p>
<p>4.1在所有MySQL主机上修改配置文件并启动，并启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># sed -i &#x27;/^server 0/i server 192.168.73.111 iburst&#x27; /etc/chrony.conf</span></span><br><span class="line">[root@Master ~]<span class="comment"># systemctl start chronyd</span></span><br></pre></td></tr></table></figure>

<p>4.2确认时间同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># chronyc sources -v</span></span><br><span class="line">210 Number of sources = 1</span><br><span class="line"></span><br><span class="line">  .-- Source mode  <span class="string">&#x27;^&#x27;</span> = server, <span class="string">&#x27;=&#x27;</span> = peer, <span class="string">&#x27;#&#x27;</span> = <span class="built_in">local</span> clock.</span><br><span class="line"> / .- Source state <span class="string">&#x27;*&#x27;</span> = current synced, <span class="string">&#x27;+&#x27;</span> = combined , <span class="string">&#x27;-&#x27;</span> = not combined,</span><br><span class="line">| /   <span class="string">&#x27;?&#x27;</span> = unreachable, <span class="string">&#x27;x&#x27;</span> = time may be <span class="keyword">in</span> error, <span class="string">&#x27;~&#x27;</span> = time too variable.</span><br><span class="line">||                                                 .- xxxx [ yyyy ] +/- zzzz</span><br><span class="line">||      Reachability register (octal) -.           |  xxxx = adjusted offset,</span><br><span class="line">||      Log2(Polling interval) --.      |          |  yyyy = measured offset,</span><br><span class="line">||                                \     |          |  zzzz = estimated error.</span><br><span class="line">||                                 |    |           \</span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample</span><br><span class="line">===============================================================================</span><br><span class="line">^* 192.168.73.111                4   6   377    54    +25us[  +41us] +/-  105ms</span><br></pre></td></tr></table></figure>

<h3 id="三、配置ssh为的密钥认证登陆"><a href="#三、配置ssh为的密钥认证登陆" class="headerlink" title="三、配置ssh为的密钥认证登陆"></a>三、配置ssh为的密钥认证登陆</h3><p>当主节点宕机，manager会让从节点通过ssh协议去尝试连接主节点，并拉取二进制日志，所以要时用密钥的认证方式让从节点登陆到主节点拉取数据。</p>
<p>1.在manager服务器上生成私钥文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># ssh-keygen</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:yAvC2PJUlRyAf1udlrVXzmIsUljTdUdW6X6FVpQ3Ajo root@Manager</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|   ..ooo   ++. +%|</span></span><br><span class="line"><span class="string">|  .  .o   o oo.=*|</span></span><br><span class="line"><span class="string">|   ..    E = oo*o|</span></span><br><span class="line"><span class="string">| + ...... B o B.+|</span></span><br><span class="line"><span class="string">|o = ..ooS. . =...|</span></span><br><span class="line"><span class="string">| + . ...       ..|</span></span><br><span class="line"><span class="string">|  .   .         .|</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<p>2.将公钥文件复制给自己</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># ssh-copy-id 127.0.0.1</span></span><br></pre></td></tr></table></figure>

<p>3.将整个~/.ssh目录复制给所有的MySQL主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># scp -r ~/.ssh 192.168.73.110:/root</span></span><br></pre></td></tr></table></figure>

<p>至此所有环境准备完毕</p>
<h3 id="配置主从复制"><a href="#配置主从复制" class="headerlink" title="配置主从复制"></a>配置主从复制</h3><h4 id="主节点配置"><a href="#主节点配置" class="headerlink" title="主节点配置"></a>主节点配置</h4><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=1</span><br><span class="line">log-bin</span><br><span class="line">binlog-format=row</span><br><span class="line">skip_name_resolve</span><br></pre></td></tr></table></figure>

<p>2.启动数据库服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>3.创建主从复制账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;GRANT REPLICATION SLAVE ON *.* TO &#x27;repluser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;centos&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<p>4.添加mha的管理账号，让管理节点远程连接到主机用来设置主从调整</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql -e &quot;GRANT ALL ON *.* TO &#x27;mhauser&#x27;@&#x27;192.168.73.%&#x27; IDENTIFIED BY &#x27;centos&#x27;;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="从节点配置"><a href="#从节点配置" class="headerlink" title="从节点配置"></a>从节点配置</h4><p>1.修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br><span class="line">read-only</span><br><span class="line">log-bin</span><br><span class="line">relay_log_purge=0</span><br><span class="line">skip_name_resolve</span><br></pre></td></tr></table></figure>

<p>2.启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>3.配置CHANGE MASTER TO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;192.168.73.110&#x27;</span>, MASTER_USER=<span class="string">&#x27;repluser&#x27;</span>,MASTER_PASSWORD=<span class="string">&#x27;centos&#x27;</span>,MASTER_PORT=3306,MASTER_LOG_FILE=<span class="string">&#x27;mariadb-bin.000001&#x27;</span>,MASTER_LOG_POS=245;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>4.启动线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>在Slave2节点上也执行相同的操作，此处步骤省略，需要注意server-id需要修改为和其他主从节点不同  </p>
<p>5.测试  </p>
<p>主节点导入hellodb库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql &lt; hellodb_innodb.sql</span></span><br></pre></td></tr></table></figure>

<p>从节点查看是否同步</p>
<p>slave1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<p>Slave2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave2 ~]<span class="comment"># mysql -e &quot;SHOW DATABASES;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| hellodb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<h3 id="二、配置管理节点及被管理节点"><a href="#二、配置管理节点及被管理节点" class="headerlink" title="二、配置管理节点及被管理节点"></a>二、配置管理节点及被管理节点</h3><p>1.在管理节上安装mha4mysql-manager、mha4mysql-node，将两个包放在同一目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># yum install *.rpm -y  #这两个包有依赖管理需要一起安装</span></span><br></pre></td></tr></table></figure>

<p>2.在所有被管理节点上安装mha4mysql-node</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># yum install mha4mysql-node-0.56-0.el6.noarch.rpm -y</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># yum install mha4mysql-node-0.56-0.el6.noarch.rpm -y</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave2 ~]<span class="comment"># yum install mha4mysql-node-0.56-0.el6.noarch.rpm -y</span></span><br></pre></td></tr></table></figure>

<p>3.在管理节点上创建配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># vim /etc/mha/aap1.conf</span></span><br><span class="line">[server default]</span><br><span class="line">user=mhauser</span><br><span class="line">password=111111</span><br><span class="line">manager_workdir=/data/mastermha/app1/</span><br><span class="line">manager_log=/data/mastermha/app1/manager.log</span><br><span class="line">remote_workdir=/data/mastermha/app1/</span><br><span class="line">ssh_user=root</span><br><span class="line">repl_user=repluser</span><br><span class="line">repl_password=111111</span><br><span class="line">ping_interval=1</span><br><span class="line"></span><br><span class="line">[server1]</span><br><span class="line">hostname=192.168.27.31</span><br><span class="line">candidate_master=1</span><br><span class="line">[server2]</span><br><span class="line">hostname=192.168.27.32</span><br><span class="line">candidate_master=1</span><br><span class="line">[server3]</span><br><span class="line">hostname=192.168.27.33</span><br><span class="line">candidate_master=1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.做检查</p>
<p>4.1检查ssh连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># masterha_check_ssh --conf=/etc/mha/aap1.conf</span></span><br></pre></td></tr></table></figure>

<p>4.2检查主从复制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># masterha_check_repl --conf=/etc/mha/aap1.conf</span></span><br></pre></td></tr></table></figure>

<p>5.以上两项全部成功后启动程序</p>
<p>mha这个程序是跑在前台的，一次性的可以使用nohub或screen来解决跑在前台的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager ~]<span class="comment"># masterha_manager --conf=/etc/mha/aap1.conf</span></span><br></pre></td></tr></table></figure>

<h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><p>1.在master上跑个存储过程，导入存储过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># mysql hellodb &lt; testlog.sql</span></span><br></pre></td></tr></table></figure>

<p>2.调用存储过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; USE hellodb</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [hellodb]&gt; call pro_testlog;</span><br></pre></td></tr></table></figure>

<p>3.另起一个主节点窗口将主节点断网</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Master ~]<span class="comment"># ifdown ens33</span></span><br></pre></td></tr></table></figure>

<p>4.manager端完成切换退出，查看日志，查看新的主节点是哪台slave</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Manager app1]<span class="comment"># tail /data/mastermha/app1/manager.log</span></span><br><span class="line"></span><br><span class="line">Started automated(non-interactive) failover.</span><br><span class="line">The latest slave 192.168.73.112(192.168.73.112:3306) has all relay logs <span class="keyword">for</span> recovery.</span><br><span class="line">Selected 192.168.73.112(192.168.73.112:3306) as a new master.</span><br><span class="line">192.168.73.112(192.168.73.112:3306): OK: Applying all logs succeeded.</span><br><span class="line">192.168.73.113(192.168.73.113:3306): This host has the latest relay <span class="built_in">log</span> events.</span><br><span class="line">Generating relay diff files from the latest slave succeeded.</span><br><span class="line">192.168.73.113(192.168.73.113:3306): OK: Applying all logs succeeded. Slave started, replicating from 192.168.73.112(192.168.73.112:3306)</span><br><span class="line">192.168.73.112(192.168.73.112:3306): Resetting slave info succeeded.</span><br><span class="line">Master failover to 192.168.73.112(192.168.73.112:3306) completed successfully.</span><br><span class="line"><span class="comment">#此处显示最新的主节点为192.168.73.112</span></span><br></pre></td></tr></table></figure>

<p>由于从节点在配置文件中定义的为read-only，此时被提升为主能执行写操作时应为管理服务器上有管理账号，他将从节点的服务器全局变量read_only给关闭了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># mysql -e &quot;SELECT @@read_only;&quot;</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@read_only |</span><br><span class="line">+-------------+</span><br><span class="line">|           0 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure>

<p>为了防止服务服务重启再次变为read-only，此时需要对新主节点的配置文件进行修改将read-only行注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br><span class="line"><span class="comment">#read-only</span></span><br><span class="line">log-bin</span><br><span class="line">relay_log_purge=0</span><br><span class="line">skip_name_resolve</span><br></pre></td></tr></table></figure>

<h3 id="四、测试新的主节点"><a href="#四、测试新的主节点" class="headerlink" title="四、测试新的主节点"></a>四、测试新的主节点</h3><p>1.对hellodb.teachers表插入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave1 ~]<span class="comment"># mysql -e &quot;INSERT hellodb.teachers VALUES(5,&#x27;Tang San&#x27;,30,&#x27;M&#x27;);&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.Slave2主机上查看是否同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Slave2 ~]<span class="comment"># mysql -e &quot;SELECT * FROM hellodb.teachers;&quot;</span></span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">| TID | Name          | Age | Gender |</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">|   1 | Song Jiang    |  45 | M      |</span><br><span class="line">|   2 | Zhang Sanfeng |  94 | M      |</span><br><span class="line">|   3 | Miejue Shitai |  77 | F      |</span><br><span class="line">|   4 | Lin Chaoying  |  93 | F      |</span><br><span class="line">|   5 | Tang San      |  30 | M      |    <span class="comment">#已经同步</span></span><br><span class="line">+-----+---------------+-----+--------+</span><br></pre></td></tr></table></figure>

<h3 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h3><p>当原主节点被修复后，将其添加为从节点使用。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语言基础</title>
    <url>/2019/04/16/MySQL/SQL%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/SQL%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="SQL语言规范"><a href="#SQL语言规范" class="headerlink" title="SQL语言规范"></a>SQL语言规范</h2><p>SQL是一种结构化的查询语言，需要遵守以下规范：</p>
<ol>
<li>它的命令是不区分大小写的。</li>
<li>SQL语句可以单行或多行书写，以“;”结尾。</li>
<li>关键字不能够跨行或者简写。用空格缩进可以提高语句的可读性。</li>
<li>子句通常位于独立行，便于编辑，提高可读性。</li>
</ol>
<span id="more"></span>
<h2 id="数据库对象"><a href="#数据库对象" class="headerlink" title="数据库对象"></a>数据库对象</h2><p>数据库的对象有数据库、表、索引、视图、用户、存储过程、函数、触发器、事件调度器等等。这些对象在命名时需要遵守其命名的规则：</p>
<ol>
<li>必须以字母开头</li>
<li>可包括数字和三个特殊字符(#_$)</li>
<li>不要使用MySQL的保留字段</li>
<li>同一databases(Schema)下的对象不能同名</li>
</ol>
<h2 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h2><p>SQL语句有各种各样的指令，这种语句大致上分成4个类型。这4种类型不通的数据库厂商其分类也不同。</p>
<h3 id="DDL：Data-Defination-Language-数据定义语言"><a href="#DDL：Data-Defination-Language-数据定义语言" class="headerlink" title="DDL：Data Defination Language 数据定义语言"></a>DDL：Data Defination Language 数据定义语言</h3><p>定义如何来创建一个资源，比如创建一个数据库，创建一个表，也包括删除和修改</p>
<p>相关指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE、DROP、ALTER</span><br></pre></td></tr></table></figure>

<h3 id="DML：Data-Manipulation-Language-数据操纵语言"><a href="#DML：Data-Manipulation-Language-数据操纵语言" class="headerlink" title="DML：Data Manipulation Language 数据操纵语言"></a>DML：Data Manipulation Language 数据操纵语言</h3><p>数据库操纵语言主要用来操作数据库内的数据，这种数据的操作主要是指对数据的增、删、改。</p>
<p>相关指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INSERT、DELETE、UPDATE</span><br></pre></td></tr></table></figure>

<h3 id="DCL：Data-Control-Language-数据控制语言"><a href="#DCL：Data-Control-Language-数据控制语言" class="headerlink" title="DCL：Data Control Language 数据控制语言"></a>DCL：Data Control Language 数据控制语言</h3><p>数据控制语言主要指的是对数据库的各种权限控制，比如说授权、删除权限、提交、撤销</p>
<p>相关指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT、REVOKE、COMMIT、ROLLBACK</span><br></pre></td></tr></table></figure>

<h3 id="DQL：Data-Query-Language-数据查询语言"><a href="#DQL：Data-Query-Language-数据查询语言" class="headerlink" title="DQL：Data Query Language 数据查询语言"></a>DQL：Data Query Language 数据查询语言</h3><p>数据库查询语言是对数据库内的相关数据进行查询的指令，是运维人员在工作中对数据的常用操作</p>
<p>相关指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT</span><br></pre></td></tr></table></figure>

<h2 id="SQL语句构成"><a href="#SQL语句构成" class="headerlink" title="SQL语句构成"></a>SQL语句构成</h2><p>SQL语句是由关键字(keyword)加上对象的名称组合而成的子句(clause)，多个子句(clause)再构成一个完整的语句</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products WHERE price&gt;400;  </span><br><span class="line"><span class="comment">#上面这是一个完整的查询语句，他是由以下几个字句组成</span></span><br><span class="line">SELECT *                    <span class="comment">#SELECT子句</span></span><br><span class="line">FROM products               <span class="comment">#FROM子句</span></span><br><span class="line">WHERE price&gt;400             <span class="comment">#WHERE子句</span></span><br><span class="line"><span class="comment">#一组SQL语句由三个子句构成，SELECT、FROM和WHERE是关键字</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库的基础（一）</title>
    <url>/2019/04/16/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80--1/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80--1/</url>
    <content><![CDATA[<p>数据库在互联网企业中应用非常普遍，数据库在企业内一般由专业的DBA来进行管理，但是在有些公司内梅有专业的DBA管理员，这时候就需要运维人员兼任DBA。传说中删库跑路就是说的此处。</p>
<p>MySQL数据库相当复杂，首先我们先介绍下MySQL数据库基础。</p>
<span id="more"></span>

<h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><h3 id="数据的时代"><a href="#数据的时代" class="headerlink" title="数据的时代"></a>数据的时代</h3><p>现在是大数据的时代，产生了大量的数据，近代时间所产生的数据比人类文明产生到计算机诞生所产生的数据更多，所以大数据的概念应运而生，大数据就是分析各种地方产生的数据，从中能分析出一些有价值的东西。</p>
<h3 id="数据库的发展历史"><a href="#数据库的发展历史" class="headerlink" title="数据库的发展历史"></a>数据库的发展历史</h3><p>产生了那么多数据，我们要使用这些数据，就需要让其找个地方保存下来。数据库发展至今都经历了以下几个阶段。</p>
<h4 id="萌芽阶段：文件系统"><a href="#萌芽阶段：文件系统" class="headerlink" title="萌芽阶段：文件系统"></a>萌芽阶段：文件系统</h4><p>使用磁盘文件来存储数据</p>
<p>早期数据是以文件的方式存放，将数据存放在一个文件内。这种数据的存放方式到目前为止依旧在使用。但是以文件的方式来存放数据，这种方式并不专业。比如说，如果把一个具体的数据存放在一个文件中，那么当你要管理磁盘上的文件是相当麻烦的，因为我们要管理这些文件需要用到对应的文件管理工具，比如我要把文件放在word内就需要用word打开，如果将数据存放在excel内就需要使用excel进行打开。</p>
<p>使用文件来存储还存在一个问题，那就是当有2个用户同时对一个文件进行修改时，最后生效的会是哪一个用户呢？最后存盘的那个用户生效了，这时存储数据的结果就出现了一个不可预知的结果，第一个用户以为他存盘生效了实际上他所写的内容却被后存盘的用户所覆盖。</p>
<p>所以使用文件来作为数据存储的方式是相当不可靠的。所以急需一中更专业的软件，这种软件专用于管理数据库。你要是想使用数据必须要使用此软件间接去访问数据库，而不能直接的去访问数据库</p>
<p>这种数据库的专业软件有个名称叫DBMS(Databases Managerment System)，它是管理数据库的系统软件，它实现数据库系统的各种功能，是数据库系统的核心。它来和存储数据的文件进行打交道，用户访问数据库时不需要直接访问文件，所以用户无需关心文件保存的格式。DBMS自动将文件中的内容显示出来展现给用户。用户通过DBMS访问数据库时，可以不关心数据库在磁盘上的存储方式来更加方便的访问数据，访问数据时还支持并发访问数据。在并发访问时它还对文件进行加锁，避免了文件的破坏。</p>
<h4 id="初级阶段：第一代数据库"><a href="#初级阶段：第一代数据库" class="headerlink" title="初级阶段：第一代数据库"></a>初级阶段：第一代数据库</h4><p>第一代数据库系统是网状模型、层次模型的数据库</p>
<p>最早出现的是网状DBMS，1964年通用电气公司的Charles Bachman成功地开发出世界上第一个网状IDS，也是第一个数据库管理系统，IDS具有数据模型和日志的特征，只能在GE主机运行。网状模型其类似于人类的关系网，虽然网状模型符合人的逻辑思维。但是一旦数据量到了一定的程度将造成数据管理的混乱。</p>
<p>层次性数据库，将数据分层进行管理，以数形结构表示实体及其之间的联系，关系只支持一对多，代表数据库IBM IMS。层次性数据库容易造成数据的冗余，同一个数据被多次存放。造成数据量的增大。</p>
<h4 id="中级阶段：第二代数据库"><a href="#中级阶段：第二代数据库" class="headerlink" title="中级阶段：第二代数据库"></a>中级阶段：第二代数据库</h4><p>关系型数据库和结构化查询语言。</p>
<p>目前主要数据库结构为关系型数据库，其代表类型为 MySQL、Oracle、sql_server、DB2。<br>关系型数据库有个最大的问题，性能较差，在当今数据量如此的巨大的情况下，其数据库的性能是远远达不到要求的。于是又产生了一种非关系型数据库技术叫NOSQL。</p>
<p>NOSQL中No表示not only，表示除了关系型数据库还有其他的数据库，比如memcached、redis等等。</p>
<h4 id="高级阶段：新一代数据库"><a href="#高级阶段：新一代数据库" class="headerlink" title="高级阶段：新一代数据库"></a>高级阶段：新一代数据库</h4><p>现在关系型数据库的基础上添加了一些面向对象的思想，所以称之为”关系-对象” 型数据库</p>
<h3 id="数据库管理系统的优缺点"><a href="#数据库管理系统的优缺点" class="headerlink" title="数据库管理系统的优缺点"></a>数据库管理系统的优缺点</h3><h4 id="数据库管理系统的优点"><a href="#数据库管理系统的优点" class="headerlink" title="数据库管理系统的优点"></a>数据库管理系统的优点</h4><ol>
<li>相互关联的数据的集合</li>
<li>较少的数据冗余</li>
<li>程序与数据相互独立</li>
<li>保证数据的安全、可靠</li>
<li>最大限度地保证数据的正确性</li>
<li>数据可以并发使用并能同时保证一致性</li>
</ol>
<h4 id="数据库管理系统的缺点"><a href="#数据库管理系统的缺点" class="headerlink" title="数据库管理系统的缺点"></a>数据库管理系统的缺点</h4><ol>
<li>编写应用程序不方便</li>
<li>数据冗余不可避免</li>
<li>应用程序依赖性</li>
<li>不支持对文件的并发访问</li>
<li>数据间联系弱</li>
<li>难以按用户视图表示数据</li>
<li>无安全控制功能</li>
</ol>
<h3 id="数据库管理系统的基本功能"><a href="#数据库管理系统的基本功能" class="headerlink" title="数据库管理系统的基本功能"></a>数据库管理系统的基本功能</h3><p>数据库管理系统所必须的基本功能有以下这些：</p>
<p>数据定义：在关系型数据库中需要用到数据库的定义，例如表的定义、视图、触发器、存储过程。</p>
<p>数据处理：对数据库中的数据进行处理，比如增、删、改、查。</p>
<p>数据安全：对数据库设置权限等。</p>
<p>数据备份：对数据库进行备份和还原。</p>
<h3 id="数据库的架构"><a href="#数据库的架构" class="headerlink" title="数据库的架构"></a>数据库的架构</h3><p>数据库的架构有以下几种：</p>
<p>单机架构：比如说数据库安装在那台主机上，操作人员就坐在哪台主机上进行操作。典型的数据库access数据库</p>
<p>大型主机/终端架构：一个大型机上带多个终端，使用终端方式远程链接到服务器上。</p>
<p>主从式架构(C/S)：目前主流，有客户端有服务器端。</p>
<p>分布式架构：</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库的基础（二）</title>
    <url>/2019/04/16/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80--2/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80--2/</url>
    <content><![CDATA[<h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>关系型数据库就是将所有的数据基于关系的方式来保存，所谓的关系就是将所有的数据将其保存在一个一个的二维表中。</p>
<span id="more"></span>
<p>关系 ：关系就是二维表，其中：表中的行、列次序并不重要</p>
<p>行row：表中的每一行，又称为一条记录</p>
<p>列column：表中的每一列，称为属性，字段</p>
<p>主键Primary key：用于惟一确定一个记录的字段。主键是一个属性作用在某一个字段上，一旦作用在某一个字段上，那么就表示这个字段上所有的记录在这个字段内是不能重复的，注意每张表上的主键只能有一个。</p>
<p>域domain：每个字段、属性的取值范围，如，性别只能是‘男’和‘女’两个值</p>
<h3 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h3><p>数据提取：在数据集合中提取感兴趣的内容。SELECT（查）。</p>
<p>数据更新：变更数据库中的数据。INSERT、DELETE、UPDATE</p>
<h3 id="表和表之间的联系"><a href="#表和表之间的联系" class="headerlink" title="表和表之间的联系"></a>表和表之间的联系</h3><p>数据库的表和表之间是有关联的，它们之间的关联有可能是一对一的关系，也有可能是一对多的关系或者多对多的关系。</p>
<h4 id="一对一联系"><a href="#一对一联系" class="headerlink" title="一对一联系"></a>一对一联系</h4><p>比如说员工信息表和员工工资表，这两张表就是一对一的关系，但是如何将这两张表进行关联起来？这就需要靠员工编号进行关联，比如1号员工的信息是什么，1号员工的工资是多少。这样就将这两张表一对一的关联起来了。</p>
<p>表1:员工信息</p>
<table>
<thead>
<tr>
<th align="left">员工编号</th>
<th align="left">姓名</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">张三</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">李四</td>
</tr>
</tbody></table>
<p>表2:员工工资</p>
<table>
<thead>
<tr>
<th align="left">员工编号</th>
<th align="left">一月工资</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">12000</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">14000</td>
</tr>
</tbody></table>
<h4 id="一对多联系"><a href="#一对多联系" class="headerlink" title="一对多联系"></a>一对多联系</h4><p>比如说部门和员工的关系，假设一个公司有销售部，技术部等等，一个部门有多个员工，每个员工对应一个部门。如下表所示：</p>
<p>表1：员工信息表</p>
<table>
<thead>
<tr>
<th align="left">员工ID</th>
<th align="left">员工姓名</th>
<th align="left">部门ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">a</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">b</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">c</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>表2：部门表</p>
<table>
<thead>
<tr>
<th align="left">部门ID</th>
<th align="left">部门名称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">技术部</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">销售部</td>
</tr>
</tbody></table>
<p>以上两张表从逻辑上来说的确是1对1的关系，但是从技术角度来说如何保证他们的一对一关系呢？比如说添加了第4个员工，它的员工编号为4，部门编号为3，而表2的部门编号为1、2没有第三个部门，那么如何避免这种错误的记录产生？</p>
<p>在上一节中我们说到了主键，在这两张表中表1的员工ID设为主键，表2的部门ID为主键，有了主键后那么主键上的每条记录都是唯一的，有了主键之后我们怎么把两张表上多对多的关系表现出来？也就是说确保表1中的部门ID就是表2中部门ID，这时候就需要用到外键技术foreign key (FK)，外键就是将表和表之间一对多的关系表现出来。由于表1上的部门ID字段依赖于表2的部门ID字段，所以在依赖表（表1）上的部门ID字段建立一个外键，这个外键依赖于表2的部门ID字段，一旦外键建立，那就意味外键上的所有字段必须来自于表2的主键，如果此时在表1上插入一个不存在的部门字段将会报错。</p>
<p>这样就将表和表之间一对多的关系用主外键进行关联起来了，这里需要注意的是表1依赖于表2的话，那么表2上必须要有主键或者唯一键。</p>
<h4 id="多对多联系"><a href="#多对多联系" class="headerlink" title="多对多联系"></a>多对多联系</h4><p>通常还有一些情况下表和表之间的关系有可能是多对多的关系。比如以下表之间的关系，表1为学生信息表，表2为课程表，表3为学生和课程的对应关系</p>
<p>student_table<br>|ID|name|<br>|:-|:-|<br>|1|a|<br>|2|b|</p>
<p>class_table<br>|class_id|name|<br>|:-|:-|<br>|1|Linux|<br>|2|Python|</p>
<p>student_class<br>|ID|sudent_ID|Class_ID|<br>|:-|:-|:-|<br>|1|1|1|<br>|2|2|1|<br>|3|2|2|</p>
<h3 id="简易数据规划流程"><a href="#简易数据规划流程" class="headerlink" title="简易数据规划流程"></a>简易数据规划流程</h3><h4 id="第一阶段：收集数据，得到字段"><a href="#第一阶段：收集数据，得到字段" class="headerlink" title="第一阶段：收集数据，得到字段"></a>第一阶段：收集数据，得到字段</h4><p>收集必要且完整的数据项<br>转换成数据表的字段</p>
<h4 id="第二阶段：把字段分类，归入表，建立表的关联"><a href="#第二阶段：把字段分类，归入表，建立表的关联" class="headerlink" title="第二阶段：把字段分类，归入表，建立表的关联"></a>第二阶段：把字段分类，归入表，建立表的关联</h4><p>关联：表和表间的关系<br>分割数据表并建立关联的优点<br>节省空间<br>减少输入错误<br>方便数据修改</p>
<h4 id="第三阶段：规范化数据库"><a href="#第三阶段：规范化数据库" class="headerlink" title="第三阶段：规范化数据库"></a>第三阶段：规范化数据库</h4><p>数据库规范化，又称数据库或资料库的正规化、标准化，是数据库设计中的一系列原理和技术，以减少数据库中数据冗余，增进数据的一致性。关系模型的发明者埃德加·科德最早提出这一概念，并于1970年代初定义了第一范式、第二范式和第三范式的概念</p>
<h5 id="RDMBS设计范式基础概念"><a href="#RDMBS设计范式基础概念" class="headerlink" title="RDMBS设计范式基础概念"></a>RDMBS设计范式基础概念</h5><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，不同的规范要求被称为不同范式，各种范式呈递次规范，越高的范式数据库冗余越小目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴德斯科范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般数据库只需满足第三范式(3NF）即可</p>
<h5 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h5><p>1NF：无重复的列，每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性，确保每一列的原子性。除去同类型的字段，就是无重复的列<br> 说明：第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库</p>
<p>2NF：属性完全依赖于主键，第二范式必须先满足第一范式，要求表中的每个行必须可以被唯一地区分。通常为表加上一个列，以存储各个实例的唯一标识PK，非PK的字段需要与整个PK有直接相关性</p>
<p>3NF：属性不依赖于其它非主属性，满足第三范式必须先满足第二范式。第三范式要求一个数据库表中不包含已在其它表中已包含的非主关键字信息，非PK的字段间不能有从属关系</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库的基础（三）</title>
    <url>/2019/04/17/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80--3/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80--3/</url>
    <content><![CDATA[<h2 id="SQL概念"><a href="#SQL概念" class="headerlink" title="SQL概念"></a>SQL概念</h2><p>对于MySQL数据库来说，它所使用的数据库语言是数据库的标准规范语言。除了MySQL其他的关系型数据库语言如oreclo、sql_server、DB2，所使用的也都是标准的关系型数据库语言SQL语言。MySQL中的SQL就是从此处而来。</p>
<span id="more"></span>
<p>SQL的含义为结构化的查询语言，这种语言转适用于对关系型数据库进行各种增删查改的操作，这是一种国际标准的SQL语言，适用于各种关系型数据库。所以MySQL的语言是可以在其他的SQL数据库中通用的。</p>
<h3 id="MySQL服务器端"><a href="#MySQL服务器端" class="headerlink" title="MySQL服务器端"></a>MySQL服务器端</h3><p>MySQL包括其他数据库基本上都是基于C/S架构，有专门的服务器端软件按和专门的客户端软件，MySQL的服务器端软件会监听在tcp的3306端口</p>
<h3 id="MySQL客户端"><a href="#MySQL客户端" class="headerlink" title="MySQL客户端"></a>MySQL客户端</h3><p>MySQL客户端软件有图形界面的也有命令行模式，在MySQL中客户端工具是在服务端安装完毕后自带了一个命令行工具，名字叫mysql。通过mysql这个小软件就可以连接数据库进行操作，当然也有第三方图形化的软件。对于这种连接方式对用户的要求是非常高的，要求用户必须是专业的数据库的工程师才能知道去输入哪些命令去连接和管理。</p>
<p>事实上大部分普通人根本不会些SQL语句，但是他就是想对数据库中的内容做相应的操作。比如说在淘宝上下订单买了一个商品，这时候在后台数据库应为下了一个订单就会增加一个订单记录，记录下订单的时间、订单号、用户信息等等。那么如果要对订单进行操作，作为一个普通的用户来说根本不知道什么叫做SQL语句。所以我们需要通过一个友好的界面，比如在淘宝上只需要点击鼠标，但是在点鼠标的背后必须由工程师，把点鼠标的行为转换成SQL语句最终来操作数据库。所以这个过程时候开发人员来负责的，开发人员编写程序，通过对应的数据库的开发接口，连接到后端的数据库进行操作。比如说做各种开发需要连接到后台服务器，就需要用到连接数据库api接口ODBC或JDBC</p>
<h3 id="MySQL的基本概念"><a href="#MySQL的基本概念" class="headerlink" title="MySQL的基本概念"></a>MySQL的基本概念</h3><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><p>约束(constraint)，表中的数据要遵守的限制，其约束有以下几种：</p>
<table>
<thead>
<tr>
<th align="left">约束方式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">主键(PK)</td>
<td align="left">一个或多个字段的组合，填入的数据必须能在本表中唯一标识本行；必须提供数据，即NOT NULL，一个表只能有一个</td>
</tr>
<tr>
<td align="left">惟一键(UK)</td>
<td align="left">一个或多个字段的组合，填入的数据必须能在本表中唯一标识本行；允许为NULL，一个表可以存在多个</td>
</tr>
<tr>
<td align="left">外键(FK)</td>
<td align="left">一个表中的某字段可填入的数据取决于另一个表的主键或唯一键已有的数据</td>
</tr>
<tr>
<td align="left">检查</td>
<td align="left">限制一个字段的有效范围</td>
</tr>
</tbody></table>
<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>将表中的一个或多个字段中的数据复制一份另存，并且按特定次序排序存储</p>
<h4 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h4><p>选择：挑选出符合条件的行</p>
<p>投影：挑选出需要的字段</p>
<p>连接：表间字段的关联</p>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><h4 id="数据抽象"><a href="#数据抽象" class="headerlink" title="数据抽象"></a>数据抽象</h4><p>物理层：从数据存储格式的角度出发，即RDBMS在磁盘上如何组织文件，如何存储数据。</p>
<p>逻辑层：从DBA角度出发，描述存储什么数据，以及数据间存在什么样的关系。</p>
<p>视图层：从用户角度出发，描述DB中的部分数据。比如在网站上购物时你只能看到出售的价格，但看不到进货价格。</p>
<h4 id="关系模型的分类"><a href="#关系模型的分类" class="headerlink" title="关系模型的分类"></a>关系模型的分类</h4><p>关系模型</p>
<p>基于对象的关系模型</p>
<p>半结构化的关系模型：XML数据</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器</title>
    <url>/2019/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>服务器(Server)是计算机的一种，是网络中为客户端计算机提供各种服务的高性能的计算机，服务器在网络操作系统的控制下，将与其相连的硬盘、磁带、打印机及昂贵的专用通讯设备提供给网络上的客户站点共享，也能为网络用户提供集中计算、信息发布及数据管理等服务。</p>
<h3 id="服务器分类"><a href="#服务器分类" class="headerlink" title="服务器分类"></a>服务器分类</h3><h4 id="按应用功能分类："><a href="#按应用功能分类：" class="headerlink" title="按应用功能分类："></a>按应用功能分类：</h4><p>Web服务器、数据库服务器、文件服务器、中间件应用服务器、日志服务器、监控服务器、程序版本控制服务器、虚拟机服务器、邮件服务器、打印服务器、域控制服务器、多媒体服务器、通讯服务器、ERP服务器等</p>
<h4 id="按外形分类："><a href="#按外形分类：" class="headerlink" title="按外形分类："></a>按外形分类：</h4><h5 id="塔式服务器"><a href="#塔式服务器" class="headerlink" title="塔式服务器"></a>塔式服务器</h5><p>早期的服务器形式，外形以及结构和平时使用的立式PC差不多，机箱空间大，主板扩展性较强，插槽较多，预留了足够的内部空间，以便日后进行硬盘和电源的冗余扩展， 设计一般都考虑降噪，目前较少使用。</p>
<p> <img src="clip_image002.gif" alt="塔式服务器"></p>
<h5 id="刀片式服务器"><a href="#刀片式服务器" class="headerlink" title="刀片式服务器"></a>刀片式服务器</h5><p>在标准高度的机架式机箱内可插装多个卡式的服务器单元，实现高可用和高密度</p>
<p>更高的密度，集中管理，高性能，灵活扩展， 按需配置</p>
<p>可以使用系统软件将这些母板集合成一个服务器集群。在集群模式下，所有的母板可以连接起来提供高速的网络环境，并同时共享资源， 为相同的用户群服务</p>
<p> <img src="clip_image003.gif" alt="刀片式服务器"></p>
<p> <img src="clip_image004.gif" alt="刀片式服务器"></p>
<h5 id="机架式服务器"><a href="#机架式服务器" class="headerlink" title="机架式服务器"></a>机架式服务器</h5><p>按照统一标准设计，配合机柜统一使用，便于统计管理，高密度，节省空间。</p>
<p>机架服务器的宽度为19英寸（48.26cm）， 高度以U为单位，如42U。1U=1.75英寸=44.45毫米，通常有1U， 2U，3U，4U，5U，7U几种标准的服务器。机柜的尺寸也是采用通用的工业标准。</p>
<p>现阶段销售数量最多的服务器，机箱尺寸比较小巧，在机柜中可以同时放置多台服务器。</p>
<p> <img src="2.png" alt="1U机架式服务器"></p>
<p> <img src="123.png" alt="2U机架式服务器"></p>
<p><img src="image-20200627123600272.gif" alt="4U机架式服务器"></p>
<p><img src="image-20200627123533440.gif" alt="机柜"></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器cpu</title>
    <url>/2019/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%9C%8D%E5%8A%A1%E5%99%A8CPU/%E6%9C%8D%E5%8A%A1%E5%99%A8CPU/</url>
    <content><![CDATA[<h2 id="服务器CPU"><a href="#服务器CPU" class="headerlink" title="服务器CPU"></a>服务器CPU</h2><p>CPU是Central Processing Unit的缩写，即中央处理器。由控制器和运算器构成，是整个计算机系统中最重要的部分。</p>
<h3 id="服务器cpu公司"><a href="#服务器cpu公司" class="headerlink" title="服务器cpu公司"></a>服务器cpu公司</h3><p><strong>Intel</strong>: Xeon志强 Itaniun安腾</p>
<p><img src="image-20200628215234451.png" alt="Intel"></p>
<p><strong>AMD</strong>: Althlon MP</p>
<p><img src="image-20200628215253194.png" alt="AMD"></p>
<p><strong>IBM</strong>: Power</p>
<p><img src="image-20200628215314866.png" alt="IBM"></p>
<h3 id="CPU相关术语"><a href="#CPU相关术语" class="headerlink" title="CPU相关术语"></a>CPU相关术语</h3><p>主频：主频是CPU的时钟频率(CPU Clock Speed)，是CPU运算时的工作的频率（1秒内发生的同步脉冲数）的简称。单位是Hz。一般说来，主频越高，CPU的速度越快，由于内部结构不同，并非所有的时钟频率相同的CPU的性能都一样</p>
<p>外频：系统总线的工作频率， CPU与外部（主板芯片组）交换数据、指令的工作时钟频率</p>
<p>倍频：倍频则是指CPU外频与主频相差的倍数</p>
<p>三者关系是：主频=外频x倍频</p>
<p>高速缓存（cache）：高速交换的存储器。CPU缓存分为一级，二级，三级缓存， 即L1，L2，L3</p>
<p>内存总线速度(Memory-Bus Speed)：一般等同于CPU的外频，指CPU与二级(L2)高速缓存和内存之间的通信速度</p>
<p>地址总线宽度：决定了CPU可以访问的物理地址空间</p>
<h3 id="CPU类型"><a href="#CPU类型" class="headerlink" title="CPU类型"></a>CPU类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x86</span><br><span class="line">x64（CISC）</span><br><span class="line">ARM（Acorn RISC Machine）</span><br><span class="line">m68000, m68k（moto）</span><br><span class="line">Power（IBM）</span><br><span class="line">Powerpc（apple,ibm,moto）</span><br><span class="line">Ultrasparc （Sun）</span><br><span class="line">Alpha（HP）</span><br><span class="line">安腾（compaq）</span><br></pre></td></tr></table></figure>

<p>按照CPU体系架构来区分，服务器主要分为两类：</p>
<p><strong>非x86服务器</strong>：使用RISC（精简指令集）或EPIC（并行指令代码） 处理器，并且主要采用UNIX和其它专用操作系统的服务器，指令系统相对简单，它只要求硬件执行很有限且最常用的那部分执令，CPU主要有Compaq的Alpha、HP的PA-RISC、IBM的Power PC、MIPS的MIPS和SUN的Sparc、Intel研发的EPIC 安腾处理器等。这种服务器价格昂贵，体系封闭，但是稳定性好，性能强，主要用在金融、电信等大型企业的核心系统。</p>
<p><strong>x86服务器</strong>：又称CISC（复杂指令集）架构服务器，即通常所讲的PC服务器， 它是基于PC机体系结构，使用Intel或其它兼容x86指令集的处理器芯片的服务器。目前主要为intel的Xeon E3，E5，E7系列，价格相对便宜、兼容性好、稳定性较差、安全性不算太高。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器主板</title>
    <url>/2019/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BB%E6%9D%BF/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BB%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="服务器主板"><a href="#服务器主板" class="headerlink" title="服务器主板"></a>服务器主板</h2><p>主板mainboard、系统板systemboard或母板motherboard，安装在机箱内， 是计算机最基本的也是最重要的部件之一。</p>
<p>主板一般为矩形电路板，上面安装了组成计算机的主要电路系统，一般有BIOS 芯片、I/O控制芯片、键盘和面板控制开关接口、指示灯插接件、扩充插槽、主板及插卡的直流电源供电接插件等元件。</p>
<p><img src="image-20200627215201433.png" alt="服务器主板"></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器内存</title>
    <url>/2019/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<h2 id="服务器内存"><a href="#服务器内存" class="headerlink" title="服务器内存"></a>服务器内存</h2><h3 id="内存和外存"><a href="#内存和外存" class="headerlink" title="内存和外存"></a>内存和外存</h3><p>内存是介于CPU和外部存储之间，是CPU对外部存储中程序与数据进行高速运算时存放程序指令、数据和中间结果的临时场所，它的物理实质就是一组具备数据输入输出和数据存储功能的高速集成电路，内存是CPU能直接寻址的存储空间，由半导体器件制成。内存的特点是存取速度快，计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。</p>
<p> <img src="clip_image002.jpg" alt="内存"></p>
<p>外存：硬盘，U盘，软盘，光盘</p>
<h4 id="内存和外存的区别："><a href="#内存和外存的区别：" class="headerlink" title="内存和外存的区别："></a>内存和外存的区别：</h4><ul>
<li><p>内存断电后数据丢失</p>
</li>
<li><p>外存断电后数据可以保存</p>
</li>
</ul>
<h3 id="内存相关术语"><a href="#内存相关术语" class="headerlink" title="内存相关术语"></a>内存相关术语</h3><p><strong>容量</strong>：即该内存的存储容量，单位一般为“MB”或“GB”</p>
<p><strong>内存带宽</strong>：内存带宽是指内存与北桥芯片之间的数据传输率，单通道内存节制器一般都是64-bit的，8个二进制位相当于1个字节，换算成字节是64/8=8，再乘以内存的运行频率，如果是DDR内存就要再乘以2。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算公式：</span><br><span class="line">内存带宽=内存总线频率×数据总线位数/8</span><br><span class="line">示例：DDR内存带宽计算</span><br><span class="line">DDR2 667,运行频率为333MHz，带宽为333×2×64/8=5400MB/s=5.4GB/s</span><br><span class="line">DDR2 800,运行频率为400MHz，带宽为400×2×64/8=6400MB/s=6.4GB/s</span><br></pre></td></tr></table></figure>

<h3 id="服务器内存所使用的技术"><a href="#服务器内存所使用的技术" class="headerlink" title="服务器内存所使用的技术"></a>服务器内存所使用的技术</h3><h4 id="在线备用内存技术"><a href="#在线备用内存技术" class="headerlink" title="在线备用内存技术"></a>在线备用内存技术</h4><p>当主内存或者是扩展内存中的内存出现多位错误时或者出现物理内存故障时，服务器仍继续运行，由备用内存接替出现故障内存的工作，备用的内存区域必须比其它区域的内存容量要大或相同。</p>
<p><img src="backup.PNG" alt="在线备用内存技术"></p>
<h4 id="内存镜像"><a href="#内存镜像" class="headerlink" title="内存镜像"></a>内存镜像</h4><p>镜像为系统在出现多位错或内存物理故障时提供数据保护功能，以保证系统仍能正常的运行，数据同时写入两个镜像的内存区域，从一个区域进行数据的读取。 </p>
<p><img src="image-20200628214553325.png" alt="内存镜像"></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器硬盘</title>
    <url>/2019/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E7%9B%98/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<h2 id="服务器硬盘"><a href="#服务器硬盘" class="headerlink" title="服务器硬盘"></a>服务器硬盘</h2><p>硬盘分为机械硬盘和固态硬盘</p>
<h3 id="机械硬盘"><a href="#机械硬盘" class="headerlink" title="机械硬盘"></a>机械硬盘</h3><h4 id="机械硬盘结构"><a href="#机械硬盘结构" class="headerlink" title="机械硬盘结构"></a>机械硬盘结构</h4><p><strong>存储介质（Media）——盘片</strong></p>
<p>盘片的基板是金属或玻璃材质制成，为达到高密度高稳定的质量，基板要求表面光滑平整，不可有任何暇疵。</p>
<p><strong>读写头（Read Write Head）——磁头</strong></p>
<p>磁头是硬盘读取数据的关键部件，它的主要作用就是将存储在硬盘盘片上的磁信息转化为电信号向外传输。</p>
<p><strong>马达（ Spindle Motor &amp; Voice Coil Motor ）</strong></p>
<p>马达上装有一至多片盘片，以7200，10000，15000 RPM等定速旋转，为保持其平衡不可抖动，所以其质量要求严谨，不产生高温躁音。</p>
<p><img src="clip_image002.jpg" alt="机械硬盘"></p>
<h4 id="硬盘基本参数"><a href="#硬盘基本参数" class="headerlink" title="硬盘基本参数"></a>硬盘基本参数</h4><p><strong>容量</strong>：容量是硬盘最主要的参数。单位有MB、GB、TB</p>
<p><strong>转速</strong>：转速是指硬盘盘片每分钟转动的圈数，单位为rpm。现在硬盘的转速已经达到10000rpm，15000rpm</p>
<p><strong>传输速率</strong>：传输速率(Data Transfer Rate) 。硬盘的数据传输率是指硬盘读写数据的速度，单位为兆字节每秒（MB/s）</p>
<p><strong>缓存</strong>：硬盘缓存的目的是为了解决系统前后级读写速度不匹配的问题，以提高硬盘的读写速度</p>
<h4 id="硬盘接口类型"><a href="#硬盘接口类型" class="headerlink" title="硬盘接口类型"></a>硬盘接口类型</h4><p><strong>IDE接口</strong>：硬盘接口规范，采用ATA技术规范</p>
<p><strong>SCSI接口</strong>：应用于小型机上的高速数据传输技术</p>
<p><strong>SATA接口</strong>： Serial ATA，提高传输速率，支持热插拔</p>
<p><strong>SAS接口</strong>： Serial Attached SCSI，兼容SATA</p>
<p>目前主流的硬盘接口为<code>SATA</code>和<code>SAS</code>接口</p>
<h3 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h3><p>SSD(Solid State Disk)泛指使用NAND Flash组成的固态硬盘。其特别之处在于没有机械结构，以区块写入和抹除的方式作读写的功能，因此在读写的效率上，非常依赖读写技术上的设计SSD读写存取速度快，性能稳定，防震性高，发热低，耐低温，电耗低，无噪音。因为没有机械部分，所以长时间使用也出现故障几率也较小。</p>
<p>缺点：价格高，容量小，在普通硬盘前毫无性价比优势</p>
<p> <img src="clip_image005.jpg" alt="普通固态"></p>
<p> <img src="clip_image006.jpg" alt="pci接口固态"></p>
<h3 id="服务器的性能短板"><a href="#服务器的性能短板" class="headerlink" title="服务器的性能短板"></a>服务器的性能短板</h3><p>如果CPU有每秒处理1000个服务请求的能力，各种总线的负载能力能达到500个， 但网卡只能接受200个请求，而硬盘只能负担150个的话，那这台服务器得处理能力只能是150个请求/秒，有85%的处理器计算能力浪费了。在计算机系统当中，硬盘的读写速率已经成为影响系统性能进一步提高的瓶颈。</p>
<p><strong>各硬件的处理速度</strong></p>
<p> <img src="clip_image013.jpg" alt="硬件处理速度对比"></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统组成</title>
    <url>/2019/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90/</url>
    <content><![CDATA[<h2 id="计算机系统组成"><a href="#计算机系统组成" class="headerlink" title="计算机系统组成"></a>计算机系统组成</h2><p>计算机系统由<code>硬件系统</code>（Hardware）和<code>软件系统</code>（Software）两大部分组成。</p>
<p><img src="image-20200626111327218.png" alt="计算机系统组成"></p>
<h3 id="计算机硬件"><a href="#计算机硬件" class="headerlink" title="计算机硬件"></a>计算机硬件</h3><p>计算机（Computer）：俗称电脑，是一种能接收和存储信息，并按照存储在其内部的程序对海量数据进行自动、高速地处理，然后把处理结果输出的现代化智能电子设备</p>
<table>
<thead>
<tr>
<th>发展历史：</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>第一代计算机（1946-1957）</td>
<td>电子管时代</td>
</tr>
<tr>
<td>第二代计算机（1958-1964）</td>
<td>晶体管时代</td>
</tr>
<tr>
<td>第三代计算机（1965-1970）</td>
<td>集成电路时代</td>
</tr>
<tr>
<td>第四代计算机（1971以后）</td>
<td>大规模集成电路时代</td>
</tr>
</tbody></table>
<h4 id="世界上第一台计算机"><a href="#世界上第一台计算机" class="headerlink" title="世界上第一台计算机"></a>世界上第一台计算机</h4><p>1946年,世界上第一台计算机ENIAC(electronic numerical integrator and calculator)在美国宾州大学诞生，是美国奥伯丁武器试验场为了满足计算弹道需要而研制成的。使用了17468只电子管，占地170平方米,重达30吨，耗电174千瓦，耗资40多万美元。每秒可进行5000次加法或减法运算。</p>
<p><img src="image-20200626113422577.png" alt="世界上第一台计算机"></p>
<h4 id="冯·诺依曼体系结构"><a href="#冯·诺依曼体系结构" class="headerlink" title="冯·诺依曼体系结构"></a>冯·诺依曼体系结构</h4><p>1945年6月，冯•诺依曼提出了在数字计算机内部的存储器中存放程序的概念(Stored Program Concept)，这是所有现代电子计算机的范式，被称为“冯• 诺依曼结构”，按这一结构建造的电脑称为存储程序计算机(Stored Program Computer)，又称为通用计算机。冯•诺依曼计算机主要由运算器、控制器、存储器和输入输出设备组成，它的的特点是：程序以二进制代码的形式存放在存储器中；所有的指令都是由操作码和地址码组成；指令在其存储过程中按照执行的顺序；以运算器和控制器作为计算机结构的中心等。冯诺依曼计算机广泛应用于数据的处理和控制方面，但是存在一些局限性。</p>
<p><img src="image-20200626115536182.png" alt="冯诺依曼体系"></p>
<p><strong>运算器</strong>：计算机中执行各种算术和逻辑运算操作的部件。运算器的基本操作包括加、减、乘、除四则运算，与、或、非、异或等逻辑操作，以及移位、比较和传送等操作，亦称算术逻辑部件（ALU）。</p>
<p><strong>控制器</strong>：由程序计数器、指令寄存器、指令译码器、时序产生器和操作控制器组成，它是发布命令的“决策机构”，即完成协调和指挥整个计算机系统的操作。运算器和控制器统称中央处理器，也叫做CPU。中央处理器是电脑的心脏。</p>
<p><strong>存储器</strong>：存储器分为内存和外存。内存是电脑的记忆部件，用于存放电脑运行中的原始数据、中间结果以及指示电脑工作的程序。外存就像笔记本一样，用来存放一些需要长期保存的程序或数据，断电后也不会丢失，容量比较大，但存取速度慢。当电脑要执行外存里的程序，处理外存中的数据时，需要先把外存里的数据读入内存，然后中央处理器才能进行处理。外存储器包括硬盘、光盘和优盘。</p>
<p><strong>输入设备</strong>：输入设备是向计算机输入数据和信息的设备。是计算机与用户或其他设备通信的桥梁。输入设备是用户和计算机系统之间进行信息交换的主要装置之一。键盘，鼠标，摄像头，扫描仪，光笔等都属于输入设备。</p>
<p><strong>输出设备</strong>：是计算机硬件系统的终端设备，用于接收计算机数据的输出显示、打印、声音、控制外围设备操作等。也是把各种计算结果数据或信息以数字、字符、图像、声音等形式表现出来。常见的输出设备有显示器、打印机等。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab数据备份和恢复</title>
    <url>/2019/05/03/CICD/gitlab/gitlab%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/gitlab%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<p>gitlab的数据目录在/var/opt/gitlab目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># ll /var/opt/gitlab/</span></span><br><span class="line">total 96</span><br><span class="line">drwxr-xr-x 20 root              root       4096 Jul 18 11:48 ./</span><br><span class="line">drwxr-xr-x  3 root              root       4096 Jul 18 11:46 ../</span><br><span class="line">drwxr-x---  3 gitlab-prometheus root       4096 Jul 18 11:48 alertmanager/</span><br><span class="line">drwx------  2 git               root       4096 Jul 18 11:46 backups/</span><br><span class="line">-rw-------  1 root              root         38 Jul 18 11:48 bootstrapped</span><br><span class="line">drwxr-xr-x  2 git               git        4096 Jul 18 11:46 .bundle/</span><br><span class="line">drwx------  2 git               root       4096 Jul 18 11:48 gitaly/</span><br><span class="line">-rw-r--r--  1 git               git         286 Jul 18 11:46 .gitconfig</span><br><span class="line">drwx------  3 git               root       4096 Jul 18 11:46 git-data/</span><br><span class="line">drwxr-xr-x  3 git               root       4096 Jul 18 11:46 gitlab-ci/</span><br><span class="line">drwxr-xr-x  2 git               root       4096 Jul 18 11:48 gitlab-monitor/</span><br><span class="line">drwxr-xr-x  9 git               root       4096 Jul 18 11:47 gitlab-rails/</span><br><span class="line">drwx------  2 git               root       4096 Jul 18 11:46 gitlab-shell/</span><br><span class="line">drwxr-x---  2 git               gitlab-www 4096 Jul 18 11:48 gitlab-workhorse/</span><br><span class="line">drwx------  3 root              root       4096 Jul 18 13:58 logrotate/</span><br><span class="line">drwxr-x---  9 root              gitlab-www 4096 Jul 18 11:47 nginx/</span><br><span class="line">drwxr-xr-x  3 root              root       4096 Jul 18 11:48 node-exporter/</span><br><span class="line">drwx------  2 gitlab-psql       root       4096 Jul 18 11:48 postgres-exporter/</span><br><span class="line">drwxr-xr-x  3 gitlab-psql       root       4096 Jul 18 11:47 postgresql/</span><br><span class="line">drwxr-x---  4 gitlab-prometheus root       4096 Jul 18 11:48 prometheus/</span><br><span class="line">-rw-r--r--  1 root              root        226 Jul 18 11:48 public_attributes.json</span><br><span class="line">drwxr-x---  2 gitlab-redis      git        4096 Jul 19 00:57 redis/</span><br><span class="line">drwx------  2 git               git        4096 Jul 18 13:20 .ssh/</span><br><span class="line">-rw-r--r--  1 root              root         40 Jul 18 11:47 trusted-certs-directory-hash</span><br></pre></td></tr></table></figure>

<p>开发提交的数据在以下目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># ll /var/opt/gitlab/git-data/</span></span><br><span class="line">total 12</span><br><span class="line">drwx------  3 git  root 4096 Jul 18 11:46 ./</span><br><span class="line">drwxr-xr-x 20 root root 4096 Jul 18 11:48 ../</span><br><span class="line">drwxrws---  3 git  root 4096 Jul 18 12:29 repositories/</span><br></pre></td></tr></table></figure>

<h2 id="gitlab的数据备份"><a href="#gitlab的数据备份" class="headerlink" title="gitlab的数据备份"></a>gitlab的数据备份</h2><p>gitlab数据备份需要使用gitlab-rake命令，在数据备份之前需要先停止unicorn和sidekiq这两个服务</p>
<h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>暂停服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># gitlab-ctl stop unicorn</span></span><br><span class="line">ok: down: unicorn: 0s, normally up</span><br><span class="line">root@mylinuxops:~<span class="comment"># gitlab-ctl stop sidekiq</span></span><br><span class="line">ok: down: sidekiq: 1s, normally up</span><br></pre></td></tr></table></figure>

<p>执行数据备份命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># gitlab-rake gitlab:backup:create</span></span><br></pre></td></tr></table></figure>

<p>备份完毕后会在gitlab的数据目录下的backups目录下生成一个打包文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># ll /var/opt/gitlab/backups/</span></span><br><span class="line">total 128</span><br><span class="line">drwx------  2 git  root   4096 Jul 19 01:11 ./</span><br><span class="line">drwxr-xr-x 20 root root   4096 Jul 18 11:48 ../</span><br><span class="line">-rw-------  1 git  git  122880 Jul 19 01:11 1563498718_2019_07_19_11.11.5_gitlab_backup.tar</span><br></pre></td></tr></table></figure>

<p>备份完毕后启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># gitlab-ctl start</span></span><br></pre></td></tr></table></figure>

<h2 id="gitlab的数据恢复"><a href="#gitlab的数据恢复" class="headerlink" title="gitlab的数据恢复"></a>gitlab的数据恢复</h2><p>先将gitlab上的数据进行删除</p>
<p><img src="delete.png" alt="delete.png"></p>
<p><img src="delete1.png" alt="delete1.png"></p>
<p>数据被误删除后，先停止unicorn和sidekiq服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># gitlab-ctl stop unicorn</span></span><br><span class="line">ok: down: unicorn: 0s, normally up</span><br><span class="line">root@mylinuxops:~<span class="comment"># gitlab-ctl stop sidekiq</span></span><br><span class="line">ok: down: sidekiq: 0s, normally up</span><br></pre></td></tr></table></figure>

<p>恢复时一般使用最近的时间的备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先查看下所有的备份</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># ll /var/opt/gitlab/backups/</span></span><br><span class="line">total 128</span><br><span class="line">drwx------  2 git  root   4096 Jul 19 01:11 ./</span><br><span class="line">drwxr-xr-x 20 root root   4096 Jul 18 11:48 ../</span><br><span class="line">-rw-------  1 git  git  122880 Jul 19 01:11 1563498718_2019_07_19_11.11.5_gitlab_backup.tar</span><br><span class="line"><span class="comment">#使用备份</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># gitlab-rake gitlab:backup:restore BACKUP=1563498718_2019_07_19_11.11.5</span></span><br></pre></td></tr></table></figure>

<p>恢复完毕后再次启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># gitlab-ctl start unicorn</span></span><br><span class="line">ok: run: unicorn: (pid 87294) 1s</span><br><span class="line">root@mylinuxops:~<span class="comment"># gitlab-ctl start sidekiq</span></span><br><span class="line">ok: run: sidekiq: (pid 87348) 1s</span><br></pre></td></tr></table></figure>

<p>查看代码是否恢复</p>
<p><img src="back.png" alt="back.png"></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab简单使用</title>
    <url>/2019/05/03/CICD/gitlab/gitlab%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/gitlab%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>配置完毕后使用浏览器登录</p>
<p><img src="gitlab1.png" alt="gitlab1.png"></p>
<p><img src="gitlab2.png" alt="gitlab2.png"></p>
<p>创建组</p>
<p><img src="gitlab3.png" alt="gitlab3.png"></p>
<p><img src="gitlab4.png" alt="gitlab4.png"></p>
<p>创建用户</p>
<p><img src="gitlab5.png" alt="gitlab5.png"></p>
<p><img src="gitlab6.png" alt="gitlab6.png"></p>
<p>修改用户密码</p>
<p><img src="gitlab7.png" alt="gitlab7.png"></p>
<p><img src="gitlab8.png" alt="gitlab8.png"></p>
<p>将用户添加到组中</p>
<p><img src="gitlab9.png" alt="gitlab9.png"></p>
<p>创建项目</p>
<p><img src="gitlab10.png" alt="gitlab10.png"></p>
<p><img src="gitlab11.png" alt="gitlab11.png"></p>
<p><img src="gitlab12.png" alt="gitlab12.png"></p>
<p><img src="gitlab13.png" alt="gitlab13.png"></p>
<p>创建一个文件</p>
<p><img src="gitlab13.png" alt="gitlab13.png"></p>
<p><img src="gitlab14.png" alt="gitlab14.png"></p>
<p><img src="gitlab15.png" alt="gitlab15.png"></p>
<p><img src="gitlab16.png" alt="gitlab16.png"></p>
<h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><p>本地克隆项目，先获取克隆的链接</p>
<p><img src="gitlab17.png" alt="gitlab17.png"></p>
<h3 id="使用http克隆"><a href="#使用http克隆" class="headerlink" title="使用http克隆"></a>使用http克隆</h3><p>获得到httpd地址后直接使用git clone来克隆项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># git clone http://192.168.27.11/mylinuxops/web1.git</span></span><br><span class="line">Cloning into <span class="string">&#x27;web1&#x27;</span>...</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;http://192.168.27.11&#x27;</span>: masuri</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;http://masuri@192.168.27.11&#x27;</span>: </span><br><span class="line">remote: Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>

<p>使用git clone命令后会在当前目录下生成克隆项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前目录下的内容</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># ls</span></span><br><span class="line">web1</span><br><span class="line"><span class="comment">#查看目录的结构</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">└── web1</span><br><span class="line">    └── index.html</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br><span class="line"><span class="comment">#查看index.html内的文件内容</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># cat web1/index.html </span></span><br><span class="line">welcome to mylinuxops.com       v1</span><br><span class="line"><span class="comment">#文件内的内容就是刚才在web界面上所创建的文件</span></span><br></pre></td></tr></table></figure>
<h3 id="使用ssh克隆"><a href="#使用ssh克隆" class="headerlink" title="使用ssh克隆"></a>使用ssh克隆</h3><p>使用ssh克隆，需要在本机生成一个ssh的公钥，并将公钥配置到gitlab的账号中</p>
<p>生成ssh公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># ssh-keygen </span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:FoqVq5Jo4lm5MSMGeJUrRXi+neDgmRW4DT3i6byE/Oc root@mylinuxops</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|   +.            |</span></span><br><span class="line"><span class="string">|  =.=. .         |</span></span><br><span class="line"><span class="string">| . O+oo .        |</span></span><br><span class="line"><span class="string">|. =o=+ o .       |</span></span><br><span class="line"><span class="string">|+=o*o+o.S        |</span></span><br><span class="line"><span class="string">|o+Bo+.o.         |</span></span><br><span class="line"><span class="string">|o=+B.            |</span></span><br><span class="line"><span class="string">|= =o=.           |</span></span><br><span class="line"><span class="string">| o .oE           |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<p>查看公钥将公钥复制到gitlab的配置界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># cat /root/.ssh/id_rsa.pub </span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDWyPPvaNxHvwXwjqQjhfmH+hS7E5BzcjV5UWKwjvXQFa6d9LBnJTPfG+kAWXBeQGJQHRxz+2sdrv2Le0bcE+5NYJbn7Dxe/iDwUSJeWk6lJHa4OEzgFMWoljXZY4kGbhFlZSYikhV7KpZdrtHW5SwbgFjn4ewuFw+yacsydK8DA6X8mPZcS5YI6EKALGHSCqqepBuBInSP8fYPp16qXpNbd3OQ8VrOrHB5zKrpq2lMv0OSSrQJVxbc2Ut8fCMH3+uT2oIiLijAXmS6lBbnYu8YjO69xkY0KSB4oWdA2s6MTHRYxaQjT08n56M5SPrjX1Zq5tWbDVQRaFYGlmsoXok9 root@mylinuxops</span><br></pre></td></tr></table></figure>

<p><img src="gitlab18.png" alt="gitlab18.png"></p>
<p>将当前目录下的web1目录删除后再次克隆，在使用克隆时当前目录下不能存在与像目录相同的目录，否则将会认为项目已经存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># rm -rf web1</span></span><br><span class="line"><span class="comment">#使用ssh克隆时无需再输入账号和密码</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># git clone git@192.168.27.11:mylinuxops/web1.git</span></span><br><span class="line">Cloning into <span class="string">&#x27;web1&#x27;</span>...</span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.27.11 (192.168.27.11)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:tcC7W8ATUPjHG7RdNF1sFEUkSiV/19CrLk5loLaTkO0.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.27.11<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">remote: Enumerating objects: 3, done.</span></span><br><span class="line"><span class="string">remote: Counting objects: 100% (3/3), done.</span></span><br><span class="line"><span class="string">remote: Total 3 (delta 0), reused 0 (delta 0)</span></span><br><span class="line"><span class="string">Receiving objects: 100% (3/3), done.</span></span><br></pre></td></tr></table></figure>

<p>查看目录及目录中的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">└── web1</span><br><span class="line">    └── index.html</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br><span class="line">root@mylinuxops:~<span class="comment"># cat web1/</span></span><br><span class="line">.git/       index.html  </span><br><span class="line">root@mylinuxops:~<span class="comment"># cat web1/index.html </span></span><br><span class="line">welcome to mylinuxops.com       v1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab部署</title>
    <url>/2019/05/03/CICD/gitlab/gitlab%E9%83%A8%E7%BD%B2/gitlab%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="GitLab部署"><a href="#GitLab部署" class="headerlink" title="GitLab部署"></a>GitLab部署</h2><p>在gitlab官网获取gitlab的相应版本的安装包，本次部署的版本为gitlab-ce_11.11.5-ce，使用的linux系统为ubuntu 18.04.2.</p>
<p>gitlab官方下载地址：</p>
<p><a href="https://packages.gitlab.com/gitlab/gitlab-ce">https://packages.gitlab.com/gitlab/gitlab-ce</a></p>
<p>将下载后的安装包上传到linux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># ls</span></span><br><span class="line">gitlab-ce_11.11.5-ce.0_amd64.deb</span><br></pre></td></tr></table></figure>

<p>安装gitlab，getlab对系统有一定的要求要求内存为4G</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># dpkg -i gitlab-ce_11.11.5-ce.0_amd64.deb </span></span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># vim /etc/gitlab/gitlab.rb </span></span><br><span class="line"><span class="comment"># 配置url的ip地址</span></span><br><span class="line">external_url <span class="string">&#x27;http://192.168.27.11&#x27;</span></span><br><span class="line"><span class="comment"># 配置邮箱</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 465</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;438214186@qq.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;hghrqwjeoprscbcb&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;qq.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = :login</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_email_from&#x27;</span>] = <span class="string">&quot;438214186@qq.com&quot;</span></span><br><span class="line">user[<span class="string">&quot;git_user_email&quot;</span>] = <span class="string">&quot;438214186@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>让配置文件重新生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># gitlab-ctl reconfigure</span></span><br></pre></td></tr></table></figure>
<h2 id="gitlab的简单使用"><a href="#gitlab的简单使用" class="headerlink" title="gitlab的简单使用"></a>gitlab的简单使用</h2><p>配置完毕后使用浏览器登录</p>
<p><img src="gitlab1.png" alt="gitlab1.png"></p>
<p><img src="gitlab2.png" alt="gitlab2.png"></p>
<p>创建组</p>
<p><img src="gitlab3.png" alt="gitlab3.png"></p>
<p><img src="gitlab4.png" alt="gitlab4.png"></p>
<p>创建用户</p>
<p><img src="gitlab5.png" alt="gitlab5.png"></p>
<p><img src="gitlab6.png" alt="gitlab6.png"></p>
<p>修改用户密码</p>
<p><img src="gitlab7.png" alt="gitlab7.png"></p>
<p><img src="gitlab8.png" alt="gitlab8.png"></p>
<p>将用户添加到组中</p>
<p><img src="gitlab9.png" alt="gitlab9.png"></p>
<p>创建项目</p>
<p><img src="gitlab10.png" alt="gitlab10.png"></p>
<p><img src="gitlab11.png" alt="gitlab11.png"></p>
<p><img src="gitlab12.png" alt="gitlab12.png"></p>
<p><img src="gitlab13.png" alt="gitlab13.png"></p>
<p>创建一个文件</p>
<p><img src="gitlab13.png" alt="gitlab13.png"></p>
<p><img src="gitlab14.png" alt="gitlab14.png"></p>
<p><img src="gitlab15.png" alt="gitlab15.png"></p>
<p><img src="gitlab16.png" alt="gitlab16.png"></p>
<h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><p>本地克隆项目，先获取克隆的链接</p>
<p><img src="gitlab17.png" alt="gitlab17.png"></p>
<h3 id="使用http克隆"><a href="#使用http克隆" class="headerlink" title="使用http克隆"></a>使用http克隆</h3><p>获得到httpd地址后直接使用git clone来克隆项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># git clone http://192.168.27.11/mylinuxops/web1.git</span></span><br><span class="line">Cloning into <span class="string">&#x27;web1&#x27;</span>...</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;http://192.168.27.11&#x27;</span>: masuri</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;http://masuri@192.168.27.11&#x27;</span>: </span><br><span class="line">remote: Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>

<p>使用git clone命令后会在当前目录下生成克隆项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前目录下的内容</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># ls</span></span><br><span class="line">web1</span><br><span class="line"><span class="comment">#查看目录的结构</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">└── web1</span><br><span class="line">    └── index.html</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br><span class="line"><span class="comment">#查看index.html内的文件内容</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># cat web1/index.html </span></span><br><span class="line">welcome to mylinuxops.com       v1</span><br><span class="line"><span class="comment">#文件内的内容就是刚才在web界面上所创建的文件</span></span><br></pre></td></tr></table></figure>
<h3 id="使用ssh克隆"><a href="#使用ssh克隆" class="headerlink" title="使用ssh克隆"></a>使用ssh克隆</h3><p>使用ssh克隆，需要在本机生成一个ssh的公钥，并将公钥配置到gitlab的账号中</p>
<p>生成ssh公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># ssh-keygen </span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:FoqVq5Jo4lm5MSMGeJUrRXi+neDgmRW4DT3i6byE/Oc root@mylinuxops</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|   +.            |</span></span><br><span class="line"><span class="string">|  =.=. .         |</span></span><br><span class="line"><span class="string">| . O+oo .        |</span></span><br><span class="line"><span class="string">|. =o=+ o .       |</span></span><br><span class="line"><span class="string">|+=o*o+o.S        |</span></span><br><span class="line"><span class="string">|o+Bo+.o.         |</span></span><br><span class="line"><span class="string">|o=+B.            |</span></span><br><span class="line"><span class="string">|= =o=.           |</span></span><br><span class="line"><span class="string">| o .oE           |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<p>查看公钥将公钥复制到gitlab的配置界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># cat /root/.ssh/id_rsa.pub </span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDWyPPvaNxHvwXwjqQjhfmH+hS7E5BzcjV5UWKwjvXQFa6d9LBnJTPfG+kAWXBeQGJQHRxz+2sdrv2Le0bcE+5NYJbn7Dxe/iDwUSJeWk6lJHa4OEzgFMWoljXZY4kGbhFlZSYikhV7KpZdrtHW5SwbgFjn4ewuFw+yacsydK8DA6X8mPZcS5YI6EKALGHSCqqepBuBInSP8fYPp16qXpNbd3OQ8VrOrHB5zKrpq2lMv0OSSrQJVxbc2Ut8fCMH3+uT2oIiLijAXmS6lBbnYu8YjO69xkY0KSB4oWdA2s6MTHRYxaQjT08n56M5SPrjX1Zq5tWbDVQRaFYGlmsoXok9 root@mylinuxops</span><br></pre></td></tr></table></figure>

<p><img src="gitlab18.png" alt="gitlab18.png"></p>
<p>将当前目录下的web1目录删除后再次克隆，在使用克隆时当前目录下不能存在与像目录相同的目录，否则将会认为项目已经存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># rm -rf web1</span></span><br><span class="line"><span class="comment">#使用ssh克隆时无需再输入账号和密码</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># git clone git@192.168.27.11:mylinuxops/web1.git</span></span><br><span class="line">Cloning into <span class="string">&#x27;web1&#x27;</span>...</span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.27.11 (192.168.27.11)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:tcC7W8ATUPjHG7RdNF1sFEUkSiV/19CrLk5loLaTkO0.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.27.11<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">remote: Enumerating objects: 3, done.</span></span><br><span class="line"><span class="string">remote: Counting objects: 100% (3/3), done.</span></span><br><span class="line"><span class="string">remote: Total 3 (delta 0), reused 0 (delta 0)</span></span><br><span class="line"><span class="string">Receiving objects: 100% (3/3), done.</span></span><br></pre></td></tr></table></figure>

<p>查看目录及目录中的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">└── web1</span><br><span class="line">    └── index.html</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br><span class="line">root@mylinuxops:~<span class="comment"># cat web1/</span></span><br><span class="line">.git/       index.html  </span><br><span class="line">root@mylinuxops:~<span class="comment"># cat web1/index.html </span></span><br><span class="line">welcome to mylinuxops.com       v1</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p>1.克隆</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># git clone git@192.168.27.11:mylinuxops/web1.git</span></span><br><span class="line">Cloning into <span class="string">&#x27;web1&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (3/3), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>

<p>2.提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对代码做更改</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># echo &quot;welcome to mylinuxops.com    V2&quot; &gt;&gt; web1/index.html </span></span><br><span class="line"><span class="comment">#提交代码</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git add index.html </span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git commit -m &quot;v2&quot;</span></span><br><span class="line"></span><br><span class="line">*** Please tell me who you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">  git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"></span><br><span class="line">to <span class="built_in">set</span> your account<span class="string">&#x27;s default identity.</span></span><br><span class="line"><span class="string">Omit --global to set the identity only in this repository.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fatal: unable to auto-detect email address (got &#x27;</span>root@mylinuxops.(none)<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#第一次提交时需要配置提交的用户和账户</span></span><br><span class="line"><span class="string">root@mylinuxops:~/web1# git config --global user.email &quot;438214186@qq.com&quot;</span></span><br><span class="line"><span class="string">root@mylinuxops:~/web1# git config --global user.name &quot;masuri&quot;</span></span><br><span class="line"><span class="string">#提交用户名和账户后会在家里目录下生成.gitconfig文件里面为提交的信息</span></span><br><span class="line"><span class="string">root@mylinuxops:~/web1# cat ~/.gitconfig </span></span><br><span class="line"><span class="string">[user]</span></span><br><span class="line"><span class="string">	email = 438214186@qq.com</span></span><br><span class="line"><span class="string">	name = masuri</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#再次提交版本信息</span></span><br><span class="line"><span class="string">[master 54e4d4f] v2</span></span><br><span class="line"><span class="string"> 1 file changed, 1 insertion(+), 1 deletion(-)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#现在文件还在本机的缓存中，需要将其提交到gitlab上还需要将其push上去</span></span><br><span class="line"><span class="string">root@mylinuxops:~/web1# git push</span></span><br><span class="line"><span class="string">Counting objects: 3, done.</span></span><br><span class="line"><span class="string">Delta compression using up to 12 threads.</span></span><br><span class="line"><span class="string">Compressing objects: 100% (2/2), done.</span></span><br><span class="line"><span class="string">Writing objects: 100% (3/3), 265 bytes | 265.00 KiB/s, done.</span></span><br><span class="line"><span class="string">Total 3 (delta 0), reused 0 (delta 0)</span></span><br><span class="line"><span class="string">To 192.168.27.11:mylinuxops/web1.git</span></span><br><span class="line"><span class="string">   39130ff..54e4d4f  master -&gt; master</span></span><br></pre></td></tr></table></figure>

<p>3.第一次克隆像目录时需要将像目录完整的克隆下来，之后是需要使用pull就行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~/web1<span class="comment"># git pull</span></span><br><span class="line">remote: Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From 192.168.27.11:mylinuxops/web1</span><br><span class="line">   9da11e0..07a9e44  master     -&gt; origin/master</span><br><span class="line">Updating 9da11e0..07a9e44</span><br><span class="line">Fast-forward</span><br><span class="line"> index.html | 3 ++-</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>4.获取git日志，可以根据日志中的tag号对其进行版本的回滚操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~/web1<span class="comment"># git log</span></span><br><span class="line">commit 07a9e4447c8809ce4c08087549f3a8f7c98065d7 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: Administrator &lt;admin@example.com&gt;</span><br><span class="line">Date:   Thu Jul 18 13:45:09 2019 +0000</span><br><span class="line"></span><br><span class="line">    v4</span><br><span class="line"></span><br><span class="line">commit 9da11e042c623ec6555cbb559c210da666a05572</span><br><span class="line">Author: masuri &lt;438214186@qq.com&gt;</span><br><span class="line">Date:   Thu Jul 18 13:42:19 2019 +0000</span><br><span class="line"></span><br><span class="line">    v3</span><br><span class="line"></span><br><span class="line">commit 54e4d4fc15bc8b34fd736784ebd883b33afc666a</span><br><span class="line">Author: masuri &lt;438214186@qq.com&gt;</span><br><span class="line">Date:   Thu Jul 18 13:39:06 2019 +0000</span><br><span class="line"></span><br><span class="line">    v2</span><br><span class="line"></span><br><span class="line">commit 39130ff04585cbf48064adb9fd9f1e9a1c847044</span><br><span class="line">Author: Administrator &lt;admin@example.com&gt;</span><br><span class="line">Date:   Thu Jul 18 12:52:52 2019 +0000</span><br><span class="line"></span><br><span class="line">    test-v1</span><br></pre></td></tr></table></figure>

<p>4.版本的回滚</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#版本回滚有2种方法</span></span><br><span class="line"><span class="comment">#1.使用&quot;^&quot;将其恢复到上一个版本，也可以使用&quot;^^&quot;将其恢复到上上一个版本</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git reset --hard HEAD^</span></span><br><span class="line">HEAD is now at 9da11e0 v3</span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git reset --hard HEAD^^</span></span><br><span class="line">HEAD is now at 39130ff test-v1</span><br><span class="line"><span class="comment">#2.使用tag号来进行回滚，先找到相应的tag号</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git reflog</span></span><br><span class="line">07a9e44 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 07a9e44</span><br><span class="line">7b5ebd9 (origin/master, origin/HEAD) HEAD@&#123;1&#125;: commit: v5</span><br><span class="line">07a9e44 (HEAD -&gt; master) HEAD@&#123;2&#125;: <span class="built_in">clone</span>: from git@192.168.27.11:mylinuxops/web1.git</span><br><span class="line"><span class="comment">#执行回滚操作</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git reset --hard 7b5ebd9</span></span><br><span class="line">HEAD is now at 7b5ebd9 v5</span><br></pre></td></tr></table></figure>

<p>5.查看当前项目所属的分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~/web1<span class="comment"># git branch</span></span><br><span class="line">* master</span><br><span class="line"><span class="comment">#master一般只有像目录的负责人能看到</span></span><br></pre></td></tr></table></figure>

<p>创建新的分支</p>
<p><img src="gitlab19.png" alt="gitlab19.png"></p>
<p><img src="gitlab20.png" alt="gitlab20.png"></p>
<p>切换分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先删除之前目录</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># rm -rf web1</span></span><br><span class="line"><span class="comment">#克隆项目</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># git clone git@192.168.27.11:mylinuxops/web1.git</span></span><br><span class="line"><span class="comment">#进入到项目目录进行分支切换</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># cd web1/</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git checkout develop</span></span><br><span class="line">Branch <span class="string">&#x27;develop&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;develop&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br><span class="line">Switched to a new branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git branch</span></span><br><span class="line">* develop</span><br><span class="line">  master</span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git checkout master</span></span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is up to date with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git branch</span></span><br><span class="line">  develop</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2019/05/03/CICD/gitlab/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="git基本使用"><a href="#git基本使用" class="headerlink" title="git基本使用"></a>git基本使用</h2><p>1.克隆</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># git clone git@192.168.27.11:mylinuxops/web1.git</span></span><br><span class="line">Cloning into <span class="string">&#x27;web1&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (3/3), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>

<p>2.提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对代码做更改</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># echo &quot;welcome to mylinuxops.com    V2&quot; &gt;&gt; web1/index.html </span></span><br><span class="line"><span class="comment">#提交代码</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git add index.html </span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git commit -m &quot;v2&quot;</span></span><br><span class="line"></span><br><span class="line">*** Please tell me who you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">  git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"></span><br><span class="line">to <span class="built_in">set</span> your account<span class="string">&#x27;s default identity.</span></span><br><span class="line"><span class="string">Omit --global to set the identity only in this repository.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fatal: unable to auto-detect email address (got &#x27;</span>root@mylinuxops.(none)<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#第一次提交时需要配置提交的用户和账户</span></span><br><span class="line"><span class="string">root@mylinuxops:~/web1# git config --global user.email &quot;438214186@qq.com&quot;</span></span><br><span class="line"><span class="string">root@mylinuxops:~/web1# git config --global user.name &quot;masuri&quot;</span></span><br><span class="line"><span class="string">#提交用户名和账户后会在家里目录下生成.gitconfig文件里面为提交的信息</span></span><br><span class="line"><span class="string">root@mylinuxops:~/web1# cat ~/.gitconfig </span></span><br><span class="line"><span class="string">[user]</span></span><br><span class="line"><span class="string">	email = 438214186@qq.com</span></span><br><span class="line"><span class="string">	name = masuri</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#再次提交版本信息</span></span><br><span class="line"><span class="string">[master 54e4d4f] v2</span></span><br><span class="line"><span class="string"> 1 file changed, 1 insertion(+), 1 deletion(-)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#现在文件还在本机的缓存中，需要将其提交到gitlab上还需要将其push上去</span></span><br><span class="line"><span class="string">root@mylinuxops:~/web1# git push</span></span><br><span class="line"><span class="string">Counting objects: 3, done.</span></span><br><span class="line"><span class="string">Delta compression using up to 12 threads.</span></span><br><span class="line"><span class="string">Compressing objects: 100% (2/2), done.</span></span><br><span class="line"><span class="string">Writing objects: 100% (3/3), 265 bytes | 265.00 KiB/s, done.</span></span><br><span class="line"><span class="string">Total 3 (delta 0), reused 0 (delta 0)</span></span><br><span class="line"><span class="string">To 192.168.27.11:mylinuxops/web1.git</span></span><br><span class="line"><span class="string">   39130ff..54e4d4f  master -&gt; master</span></span><br></pre></td></tr></table></figure>

<p>3.第一次克隆像目录时需要将像目录完整的克隆下来，之后是需要使用pull就行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~/web1<span class="comment"># git pull</span></span><br><span class="line">remote: Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From 192.168.27.11:mylinuxops/web1</span><br><span class="line">   9da11e0..07a9e44  master     -&gt; origin/master</span><br><span class="line">Updating 9da11e0..07a9e44</span><br><span class="line">Fast-forward</span><br><span class="line"> index.html | 3 ++-</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<p>4.获取git日志，可以根据日志中的tag号对其进行版本的回滚操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~/web1<span class="comment"># git log</span></span><br><span class="line">commit 07a9e4447c8809ce4c08087549f3a8f7c98065d7 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: Administrator &lt;admin@example.com&gt;</span><br><span class="line">Date:   Thu Jul 18 13:45:09 2019 +0000</span><br><span class="line"></span><br><span class="line">    v4</span><br><span class="line"></span><br><span class="line">commit 9da11e042c623ec6555cbb559c210da666a05572</span><br><span class="line">Author: masuri &lt;438214186@qq.com&gt;</span><br><span class="line">Date:   Thu Jul 18 13:42:19 2019 +0000</span><br><span class="line"></span><br><span class="line">    v3</span><br><span class="line"></span><br><span class="line">commit 54e4d4fc15bc8b34fd736784ebd883b33afc666a</span><br><span class="line">Author: masuri &lt;438214186@qq.com&gt;</span><br><span class="line">Date:   Thu Jul 18 13:39:06 2019 +0000</span><br><span class="line"></span><br><span class="line">    v2</span><br><span class="line"></span><br><span class="line">commit 39130ff04585cbf48064adb9fd9f1e9a1c847044</span><br><span class="line">Author: Administrator &lt;admin@example.com&gt;</span><br><span class="line">Date:   Thu Jul 18 12:52:52 2019 +0000</span><br><span class="line"></span><br><span class="line">    test-v1</span><br></pre></td></tr></table></figure>

<h2 id="版本的回滚"><a href="#版本的回滚" class="headerlink" title="版本的回滚"></a>版本的回滚</h2><p>版本回滚有2种方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.使用&quot;^&quot;将其恢复到上一个版本，也可以使用&quot;^^&quot;将其恢复到上上一个版本</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git reset --hard HEAD^</span></span><br><span class="line">HEAD is now at 9da11e0 v3</span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git reset --hard HEAD^^</span></span><br><span class="line">HEAD is now at 39130ff test-v1</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.使用tag号来进行回滚，先找到相应的tag号</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git reflog</span></span><br><span class="line">07a9e44 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 07a9e44</span><br><span class="line">7b5ebd9 (origin/master, origin/HEAD) HEAD@&#123;1&#125;: commit: v5</span><br><span class="line">07a9e44 (HEAD -&gt; master) HEAD@&#123;2&#125;: <span class="built_in">clone</span>: from git@192.168.27.11:mylinuxops/web1.git</span><br><span class="line"><span class="comment">#执行回滚操作</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git reset --hard 7b5ebd9</span></span><br><span class="line">HEAD is now at 7b5ebd9 v5</span><br></pre></td></tr></table></figure>

<p>查看当前项目所属的分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~/web1<span class="comment"># git branch</span></span><br><span class="line">* master</span><br><span class="line"><span class="comment">#master一般只有像目录的负责人能看到</span></span><br></pre></td></tr></table></figure>

<h2 id="创建新的分支"><a href="#创建新的分支" class="headerlink" title="创建新的分支"></a>创建新的分支</h2><p><img src="gitlab19.png" alt="gitlab19.png"></p>
<p><img src="gitlab20.png" alt="gitlab20.png"></p>
<h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先删除之前目录</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># rm -rf web1</span></span><br><span class="line"><span class="comment">#克隆项目</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># git clone git@192.168.27.11:mylinuxops/web1.git</span></span><br><span class="line"><span class="comment">#进入到项目目录进行分支切换</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># cd web1/</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git checkout develop</span></span><br><span class="line">Branch <span class="string">&#x27;develop&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;develop&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br><span class="line">Switched to a new branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git branch</span></span><br><span class="line">* develop</span><br><span class="line">  master</span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git checkout master</span></span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is up to date with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line">root@mylinuxops:~/web1<span class="comment"># git branch</span></span><br><span class="line">  develop</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础</title>
    <url>/2019/06/10/Docker/Dockerfile%E5%9F%BA%E7%A1%80/Dockerfile%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><code>Dockerfile</code>仅仅是一个用来构建<code>docker</code>镜像的源码，一旦有了此文件，<code>Docker</code>就可以去读取对应的指令来自动构建镜像，<code>Dockerfile</code>是一个纯文本文件，只不过这个纯文本文件中的内容被称作<code>Dockerfile</code>的指令，这个指令是有特定格式的，所谓特定指令是指<code>Dockerfile</code>所支持识别的指令，<code>Dockerfile</code>文件制作完毕后，就可以构建<code>docker</code>镜像。</p>
<p>构建<code>docker</code>镜像时，必须要有一个工作目录，工作目录内只存放<code>dockerfile</code>以及被<code>dockerfile</code>所依赖的文件，或者需要被复制到镜像内的文件，并且需要被复制到镜像内的文件只能起始于此目录中，否则将无法复制进镜像内。不要放任何与当前镜像构建无关的文件。使用<code>docker build</code>构建镜像时，只需要指定<code>Dockerfile</code>文件所在的目录即可，并且<code>Dockerfile</code>文件的命名只能是<code>Dockerfile</code></p>
<h3 id="Dockerfile文件格式"><a href="#Dockerfile文件格式" class="headerlink" title="Dockerfile文件格式"></a><code>Dockerfile</code>文件格式</h3><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p><code>Dockerfile</code>文件是由2类指令构成：</p>
<ol>
<li><code># Comment</code>: 注释信息</li>
<li><code>INSTRUCTION arguments</code>: 指令参数信息</li>
</ol>
<p>指令本身不区分字符大小写，但是一般写为纯大写。</p>
<p>一般来说第一条指令为<code>FROM</code>，用来指定基础镜像</p>
<p><strong>注意</strong>：<code>Dockerfile</code>每一条命令生成一层镜像。层级越多读写性能越差，因为首次访问为<code>COW</code>机制，但是在镜像拉取和分发时实现并行提高速度，而且精细的镜像层可以被其他镜像所共享。层级太少可能导致其底层无法被其他镜像共享使用，每次拉取镜像时将是一个很大的文件。所以应该将关系比较精密的操作放在一层中进行构建。</p>
<h4 id="entrypoint脚本"><a href="#entrypoint脚本" class="headerlink" title="entrypoint脚本"></a><code>entrypoint</code>脚本</h4><p>传统的程序运行时需要使用到配置文件，以<code>nginx</code>为例，更具其使用的方式不同其对应的配置也不同，而每个环境（<code>dev</code>, <code>test</code>, <code>pre</code>, <code>prod</code>）所设置的配置参数更是不一样，这将将会产生十几到二十几套配置文件。而到了容器时代，再使用配置文件来进行对程序的参数进行调整后打入镜像这将会产生众多的镜像层，并且易于管理。</p>
<p>所以<code>Dockerfile</code>采用了传环境变量+<code>entrypoint</code>脚本的方式来应对多种不同的环境，在<code>entrypoint</code>脚本中配置好各种不同环境所需要的参数，更具传入的变量不同，配置不同的参数，在<code>entrypoint</code>脚本的最后将容器中所需要运行的程序运行起来。</p>
<h4 id="Environment-replacement"><a href="#Environment-replacement" class="headerlink" title="Environment replacement"></a><code>Environment replacement</code></h4><p>环境变量与<code>shell</code>中所说的没有本质上的区别，变量定义完毕后就可以进行引用，引用方式<code>$variable_name</code>或<code>$&#123;variable_name&#125;</code>。</p>
<p>定义变量：<code>ENV</code>指令    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENV &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure>

<p>变量引用时支持<code>bash</code>中的两种引用方式：</p>
<ul>
<li><code>$&#123;variable:-word&#125;</code>: 当<code>var</code>为空或未设定时，则使用<code>word</code>为此变量的默认值。</li>
<li><code>$&#123;variable:+word&#125;</code>: 变量有值时使用<code>word</code>为此变量的返回值，为空或未设定时返回空。</li>
</ul>
<h4 id="Dockerignore-File"><a href="#Dockerignore-File" class="headerlink" title="Dockerignore File"></a><code>Dockerignore File</code></h4><p><code>Docker</code>的工作目录可以用来存放众多与<code>Dockerfile</code>文件相关连的文件，但是某些时候可能在其工作目录内产生一些不需要被打入进行的文件或者某些临时文件。这时候可以在工作目录下写一个<code>.dockerignore</code>的文件，文件内一行写入一个不需要被打入镜像的文件名（可以使用通配符）。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile指令详解</title>
    <url>/2019/06/10/Docker/Dockerfile%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/Dockerfile%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="1-FROM指令"><a href="#1-FROM指令" class="headerlink" title="1.FROM指令"></a>1.<code>FROM</code>指令</h3><ul>
<li><p><code>FROM</code>指令是最重要的一个且必须为<code>Dockerfile</code>文件开篇的第一个非注释行，用于为映像文件构建过程指定基准镜像，后续的指令运行于此基准镜像所提供的运行环境。</p>
</li>
<li><p>实践中，基准镜像可以是仍和可用镜像文件，默认情况下，<code>docker build</code>会在<code>docker</code>主机上查找指定的镜像文件，在其不存在时，则会从<code>Docker Hub Registry</code>上拉取所需的镜像文件。</p>
<ul>
<li>如果找不到指定的镜像文件，<code>docker build</code>会返回一个错误信息</li>
</ul>
</li>
</ul>
<p>格式：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM &lt;repository&gt;[:&lt;tag&gt;] </span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">FROM &lt;repository&gt;@&lt;digest&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;repository&gt;: 指定作为baseimage的名称</span></span><br><span class="line"><span class="comment"># &lt;tag&gt;: base image的标签，为可选项，省略时默认为lastest</span></span><br></pre></td></tr></table></figure>

<h3 id="2-MAINTANIER指令"><a href="#2-MAINTANIER指令" class="headerlink" title="2.MAINTANIER指令"></a>2.<code>MAINTANIER</code>指令</h3><ul>
<li>用于让<code>Dockerfile</code>制作者提供本人的详细信息</li>
<li><code>Dockerfile</code>并不限制<code>MAINTAINER</code>指令可出现的位置，但推荐将其放置于<code>FROM</code>指令之后</li>
</ul>
<p>格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MAINTANIER &lt;authtor<span class="string">&#x27;s detail&gt;</span></span><br><span class="line"><span class="string"># &lt;authtor&#x27;</span>s detail&gt;可以是任何文本信息，但约定俗成地使用作者名称及邮件地址</span><br><span class="line"></span><br><span class="line">MAINTANIER <span class="string">&quot;masuri&lt;438214186@qq.com&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-LABEL指令"><a href="#3-LABEL指令" class="headerlink" title="3.LABEL指令"></a>3.<code>LABEL</code>指令</h3><ul>
<li><p><code>LABEL</code>指令用于替代<code>MAINTANIER</code></p>
</li>
<li><p>LABEL是key-value对，可以提供众多的信息。</p>
</li>
</ul>
<p>格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LABEL &lt;KEY&gt;=&lt;VALUE&gt; &lt;KEY&gt;=&lt;VALUE&gt; &lt;KEY&gt;=&lt;VALUE&gt; ...</span><br></pre></td></tr></table></figure>

<h3 id="4-COPY指令"><a href="#4-COPY指令" class="headerlink" title="4.COPY指令"></a>4.<code>COPY</code>指令</h3><ul>
<li>用于从Docker主机复制文件至创建的新镜像文件</li>
</ul>
<p>格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">COPY &lt;SRC&gt;...&lt;DEST&gt; </span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">COPY [<span class="string">&quot;&lt;SRC&gt;&quot;</span>,...<span class="string">&quot;&lt;DEST&gt;&quot;</span>]</span><br><span class="line"><span class="comment"># &lt;SRC&gt;: 要复制的源文件或目录，支持使用通配符</span></span><br><span class="line"><span class="comment"># &lt;DEST&gt;: 目标路劲给，即正在创建的image的文件系统的路径；建议为&lt;dest&gt;使用绝对路径，否则，COPY指定则以WORKDIR指令所指的路径为起始路径;</span></span><br><span class="line"><span class="comment"># 在路径中有空白字符时，通常使用第二种格式</span></span><br></pre></td></tr></table></figure>

<p>文件复制准则：</p>
<ul>
<li><code>&lt;SRC&gt;</code>必须是build上下文中的路径，不能是其父目录中的文件</li>
<li>如果<code>&lt;SRC&gt;</code>是目录，则其内部文件或子目录会被递归复制，但<code>&lt;SRC&gt;</code>目录本身不会被复制</li>
<li>如果指定了多个<code>&lt;SRC&gt;</code>，或在<code>&lt;SRC&gt;</code>中使用了通配符，则<code>&lt;DEST&gt;</code>必须是以<code>/</code>结尾</li>
<li>如果<code>&lt;DEST&gt;</code>事先不存在，他将会被自动创建，这包括其父目录路径</li>
</ul>
<h4 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h4><p>建立一个<code>docker build</code>工作目录，在工作目录内创建一个<code>html</code>目录，在<code>html</code>目录中创建多个<code>.html</code>文件，要求<code>test1.html</code>文件不被打入镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建出工作目录，html目录及html文件</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># mkdir build_workshop</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># cd build_workshop/</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># mkdir html</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># echo &quot;tiny web server based on busybox&quot; &gt;&gt; html/index.html</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># echo &quot;test1 file&quot; &gt;&gt; html/test1.html</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># echo &quot;test2 file&quot; &gt;&gt; html/test2.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写dockerignore文件</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># echo &quot;html/test1.html&quot; &gt;&gt; .dockerignore</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写Dockerfile文件</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM busybox:latest</span><br><span class="line">LABEL maintanier=<span class="string">&quot;Masuri&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line">COPY html /data/www/html/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在工作目录内build docker镜像</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker build . -t masuri/myweb:v0.01</span></span><br><span class="line">Sending build context to Docker daemon  5.632kB</span><br><span class="line">Step 1/3 : FROM busybox:latest</span><br><span class="line"> ---&gt; 388056c9a683</span><br><span class="line">Step 2/3 : LABEL maintanier=<span class="string">&quot;Masuri&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; db9675c45b91</span><br><span class="line">Step 3/3 : COPY html /data/www/html/</span><br><span class="line"> ---&gt; 81da6ac19386</span><br><span class="line">Successfully built 81da6ac19386</span><br><span class="line">Successfully tagged masuri/myweb:v0.01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动镜像为容器，验证内容</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker run --name t1 -it --rm masuri/myweb:v0.01 /bin/sh</span></span><br><span class="line">/ <span class="comment"># ls /data/www/html/</span></span><br><span class="line">index.html  test2.html                    <span class="comment"># test1.html文件被忽略了</span></span><br></pre></td></tr></table></figure>

<h3 id="5-ADD指令"><a href="#5-ADD指令" class="headerlink" title="5.ADD指令"></a>5.<code>ADD</code>指令</h3><ul>
<li><code>ADD</code>指令类似于<code>COPY</code>指令，<code>ADD</code>支持使用<code>tar</code>文件和<code>url</code>路径</li>
</ul>
<p>格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ADD &lt;SRC&gt;...&lt;DEST&gt;</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">ADD [<span class="string">&quot;&lt;SRC&gt;&quot;</span>,...<span class="string">&quot;&lt;DEST&gt;&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>操作准则</p>
<ul>
<li>同<code>COPY</code>指令</li>
<li>如果<code>&lt;SRC&gt;</code>为<code>URL</code>且<code>&lt;DEST&gt;</code>不以<code>/</code>结尾，则<code>&lt;src&gt;</code>指定的文件被下载并直接被创建为<code>&lt;dest&gt;</code>;如果<code>&lt;dest&gt;</code>以<code>/</code>结尾，则文件名<code>URL</code>指定的文件将被直接下载并保存为<code>&lt;dest&gt;/&lt;filename&gt;</code>。</li>
<li>如果<code>&lt;SRC&gt;</code>是一个本地系统上的压缩格式的tar文件，它将被展开为一个目录，其行为类似于<code>tar -x</code>命令；然而通过<code>URL</code>获取到的<code>tar</code>文件将不会自动展开。</li>
<li>如果<code>&lt;src&gt;</code>有多个，或其间接或直接使用了通配符，则<code>&lt;dest&gt;</code>必须是一个以/结尾的目录路径；如果<code>&lt;dest&gt;</code>不以<code>/</code>结尾，则其被视作一个普通文件，<code>&lt;src&gt;</code>的内容将被直接写入到<code>&lt;dest&gt;</code></li>
</ul>
<h4 id="ADD指令示例"><a href="#ADD指令示例" class="headerlink" title="ADD指令示例"></a><code>ADD</code>指令示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建工作目录</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># mkdir build_workshop</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># cd build_workshop/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个nginx打包压缩文件</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># wget http://nginx.org/download/nginx-1.20.0.tar.gz</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># ls</span></span><br><span class="line">nginx-1.20.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写dockerfile，分别使用URL和本地文件两种方式添加文件</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM busybox:latest</span><br><span class="line">LABEL maintanier=<span class="string">&quot;Masuri&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line">ADD http://nginx.org/download/nginx-1.18.0.tar.gz /tmp/</span><br><span class="line">ADD nginx-1.20.0.tar.gz /usr/src/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 制作镜像</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker build . -t masuri/myweb:v0.02</span></span><br><span class="line">Sending build context to Docker daemon  1.064MB</span><br><span class="line">Step 1/4 : FROM busybox:latest</span><br><span class="line"> ---&gt; 388056c9a683</span><br><span class="line">Step 2/4 : LABEL maintanier=<span class="string">&quot;Masuri&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; db9675c45b91</span><br><span class="line">Step 3/4 : ADD http://nginx.org/download/nginx-1.18.0.tar.gz /tmp/</span><br><span class="line">Downloading [==================================================&gt;]   1.04MB/1.04MB</span><br><span class="line"> ---&gt; b76454839061</span><br><span class="line">Step 4/4 : ADD nginx-1.20.0.tar.gz /usr/src/</span><br><span class="line"> ---&gt; 5a2400adf1b0</span><br><span class="line">Successfully built 5a2400adf1b0</span><br><span class="line">Successfully tagged masuri/myweb:v0.02</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器验证</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker run --name t2 --rm -it masuri/myweb:v0.02 /bin/sh</span></span><br><span class="line">/ <span class="comment"># ls /usr/src</span></span><br><span class="line">nginx-1.20.0			<span class="comment"># 本地的tar文件放到src目录下被解压</span></span><br><span class="line">/ <span class="comment"># ls /tmp</span></span><br><span class="line">nginx-1.18.0.tar.gz		<span class="comment"># 使用url的tar文件没有被解压</span></span><br></pre></td></tr></table></figure>

<h3 id="6-WORKDIR指令"><a href="#6-WORKDIR指令" class="headerlink" title="6.WORKDIR指令"></a>6.<code>WORKDIR</code>指令</h3><ul>
<li>用于为<code>Dockerfile</code>中所有的<code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>COPY</code>和<code>ADD</code>指定设定工作目录</li>
</ul>
<p>格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WORKDIR &lt;DIRPATH&gt;</span><br><span class="line"><span class="comment"># 在Dockerfile文件中，WORKDIR指令可以出现多次，其路径也可以为相对路径，不过，其是相对此前一个WORKDIR指令指定的路径</span></span><br><span class="line"><span class="comment"># 另外WORKDIR也可以调用由ENV指定定义的变量</span></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">WORKDIR /var/<span class="built_in">log</span></span><br><span class="line">WORKDIR <span class="variable">$STATEPATH</span></span><br></pre></td></tr></table></figure>

<h3 id="7-VOLUME指令"><a href="#7-VOLUME指令" class="headerlink" title="7.VOLUME指令"></a>7.<code>VOLUME</code>指令</h3><ul>
<li>用于在<code>image</code>中创建一个挂载点目录，以挂载<code>Docker host</code>上的卷或其他容器上的卷</li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VOLUME &lt;MOUNTPOINT&gt;</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">VOLUME [<span class="string">&quot;&lt;MOUNTPOINT&gt;&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果挂载点目录下此前存在文件，<code>docker run</code>命令会在卷挂载完成后将此前目录中所存在的所有文件复制到新挂载的卷中</p>
</li>
<li><p>如果<code>docker run</code>指令不指定<code>-v</code>选项来绑定宿主机上的卷路径，<code>volume</code>指令使用的将是<code>docker</code>所管理的卷</p>
</li>
</ul>
<h4 id="VOLUME示例"><a href="#VOLUME示例" class="headerlink" title="VOLUME示例"></a><code>VOLUME</code>示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前目录下文件</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── html</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── test1.html</span><br><span class="line">│   └── test2.html</span><br><span class="line">└── nginx-1.20.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Dockerfile文件，指定WORKDIR，以及挂载的卷</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM busybox:latest</span><br><span class="line">LABEL maintanier=<span class="string">&quot;Masuri&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line">COPY html /data/www/html/</span><br><span class="line">ADD http://nginx.org/download/nginx-1.18.0.tar.gz /tmp/</span><br><span class="line">ADD nginx-1.20.0.tar.gz /usr/src/</span><br><span class="line">WORKDIR /data/www/</span><br><span class="line">VOLUME /data/www/html/</span><br><span class="line"></span><br><span class="line"><span class="comment"># build镜像</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker build . -t masuri/myweb:v0.03</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器验证，原先html目录下的内容依旧存在</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker run --name t1 -it masuri/myweb:v0.03 /bin/sh</span></span><br><span class="line">/data/www <span class="comment"># ls</span></span><br><span class="line">html</span><br><span class="line">/data/www <span class="comment"># cd html/</span></span><br><span class="line">/data/www/html <span class="comment"># ls</span></span><br><span class="line">index.html  test1.html  test2.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在宿主机上查看挂载卷位置</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker inspect -f &#123;&#123;.Mounts&#125;&#125; t1</span></span><br><span class="line">[&#123;volume 8a8764f450c705c226918c80a9e408f56620244be86969e668ff455ca96fbbe8 /var/lib/docker/volumes/8a8764f450c705c226918c80a9e408f56620244be86969e668ff455ca96fbbe8/_data /data/www/html <span class="built_in">local</span>  <span class="literal">true</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看卷内数据</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># ls /var/lib/docker/volumes/8a8764f450c705c226918c80a9e408f56620244be86969e668ff455ca96fbbe8/_data</span></span><br><span class="line">index.html  test1.html  test2.html</span><br></pre></td></tr></table></figure>

<h3 id="8-EXPOSE指令"><a href="#8-EXPOSE指令" class="headerlink" title="8.EXPOSE指令"></a>8.<code>EXPOSE</code>指令</h3><ul>
<li>用于为容器打开指定要监听的端口以实现与外部通信</li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EXPOSE &lt;port&gt;[/&lt;protocol&gt;] [&lt;port&gt;[/&lt;protocol&gt;]...]</span><br><span class="line"><span class="comment"># &lt;protocol&gt; 用于指定传输层协议，可为tcp或udp二者之一，默认为TCP协议</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>EXPOSE</code>指令可一次指定多个端口，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EXPOSE 11211/udp 11211/tcp</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="EXPOSE示例"><a href="#EXPOSE示例" class="headerlink" title="EXPOSE示例"></a><code>EXPOSE</code>示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前目录下文件</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── html</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── test1.html</span><br><span class="line">│   └── test2.html</span><br><span class="line">└── nginx-1.20.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Dockerfile文件，暴露出80端口</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM busybox:latest</span><br><span class="line">LABEL maintanier=<span class="string">&quot;Masuri&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line">COPY html /data/www/html</span><br><span class="line">ADD http://nginx.org/download/nginx-1.18.0.tar.gz /tmp/</span><br><span class="line">ADD nginx-1.20.0.tar.gz /usr/src/</span><br><span class="line">WORKDIR /data/www/</span><br><span class="line">VOLUME /data/www/html</span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像文件</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker build . -t masuri/myweb:v0.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker run --name t1 -it -P  masuri/myweb:v0.04 /bin/sh</span></span><br><span class="line"><span class="comment"># 需要注意虽然Dockerfile中带了暴露80端口，若是容器运行时不使用-P是不会将端口暴露出去的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口映射</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker port t1</span></span><br><span class="line">80/tcp -&gt; 0.0.0.0:49153</span><br><span class="line">80/tcp -&gt; :::49153</span><br></pre></td></tr></table></figure>

<h3 id="9-ENV指令"><a href="#9-ENV指令" class="headerlink" title="9.ENV指令"></a>9.<code>ENV</code>指令</h3><ul>
<li>用于为镜像定义所需的环境变量，并可被<code>Dockerfile</code>文件中位于其后的其他指令(如<code>ENV</code>、<code>ADD</code>、<code>COPY</code>等)所调用</li>
<li>调用格式为<code>$variable_name</code>或<code>$&#123;variable_name&#125;</code></li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENV &lt;KEY&gt; &lt;VALUE&gt; </span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">ENV &lt;KEY&gt;=&lt;VALUE&gt; ...</span><br></pre></td></tr></table></figure>

<ul>
<li>第一种格式中，<code>&lt;key&gt;</code>之后的所有内容均会被视作其<code>&lt;value&gt;</code>的组成部分，因此一次只能设置一个变量；</li>
<li>第二种格式可以一次设置多个变量，每个变量为一个”<code>&lt;key&gt;=&lt;value&gt;</code>“的键值对，如果<code>&lt;value&gt;</code>中包含空格，可以以反斜线<code>\</code>进行转义，也可通过对<code>&lt;value&gt;</code>加引号进行标识；另外，反斜线也可用于续行；</li>
<li>定义多个变量时，建议使用第二种方式，以便在同一层中完成所有功能。</li>
</ul>
<h4 id="ENV示例"><a href="#ENV示例" class="headerlink" title="ENV示例"></a><code>ENV</code>示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前目录下文件</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── html</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── test1.html</span><br><span class="line">│   └── test2.html</span><br><span class="line">└── nginx-1.20.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将/data/www/html/目录定义成变量，之后使用时进行调用</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM busybox:latest</span><br><span class="line">LABEL maintanier=<span class="string">&quot;Masuri&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line">ENV webhome=<span class="string">&quot;/data/www/html/&quot;</span></span><br><span class="line">COPY html <span class="variable">$webhome</span></span><br><span class="line">ADD http://nginx.org/download/nginx-1.18.0.tar.gz /tmp/</span><br><span class="line">ADD nginx-1.20.0.tar.gz /usr/src/</span><br><span class="line">WORKDIR /data/www/</span><br><span class="line">VOLUME <span class="variable">$webhome</span></span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像文件</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker build . -t masuri/myweb:v0.05</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器验证ENV是否生效</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker run --name t1 -P -it masuri/myweb:v0.05 /bin/sh</span></span><br><span class="line">/data/www <span class="comment"># ls html/</span></span><br><span class="line">index.html  test1.html  test2.html  <span class="comment"># 文件已存在</span></span><br></pre></td></tr></table></figure>

<h3 id="10-ARG指令"><a href="#10-ARG指令" class="headerlink" title="10.ARG指令"></a>10.<code>ARG</code>指令</h3><ul>
<li><p><code>ENV</code>指令在容器构建时直接被定死无法改变，如果需要改变则需要对<code>Dockerfile</code>文件进行修改。<code>ARG</code>指令可以定义一个变量并且此变量可以没有值，让用户在构建镜像时使用<code>--build-arg &lt;varname&gt;=&lt;value&gt;</code>，来临时进行更改。</p>
</li>
<li></li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ARG &lt;NAME&gt;[=default value]</span><br></pre></td></tr></table></figure>

<h4 id="ARG指令示例"><a href="#ARG指令示例" class="headerlink" title="ARG指令示例"></a><code>ARG</code>指令示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前目录下文件</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── html</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── test1.html</span><br><span class="line">│   └── test2.html</span><br><span class="line">└── nginx-1.20.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将/data/www/html/目录定义成ARG指令变量，之后使用时进行调用</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM busybox:latest</span><br><span class="line">LABEL maintanier=<span class="string">&quot;Masuri&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line">ARG webhome=<span class="string">&quot;/data/www/html/&quot;</span></span><br><span class="line">COPY html <span class="variable">$webhome</span></span><br><span class="line">ADD http://nginx.org/download/nginx-1.18.0.tar.gz <span class="variable">$webhome</span></span><br><span class="line">ADD nginx-1.20.0.tar.gz /usr/src/</span><br><span class="line">WORKDIR <span class="variable">$webhome</span></span><br><span class="line">VOLUME <span class="variable">$webhome</span></span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像文件，将webhome变量更改</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker build --build-arg webhome=&quot;/data/htdocs/&quot; . -t masuri/myweb:v0.06</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器验证，构建时的webhome生效</span></span><br><span class="line">[root@CentOS8 build_workshop]<span class="comment"># docker run --name t1 -it masuri/myweb:v0.06 /bin/sh</span></span><br><span class="line">/data/htdocs <span class="comment"># ls</span></span><br><span class="line">index.html           nginx-1.18.0.tar.gz  test1.html           test2.html</span><br></pre></td></tr></table></figure>

<h3 id="11-RUN指令"><a href="#11-RUN指令" class="headerlink" title="11.RUN指令"></a>11.<code>RUN</code>指令</h3><ul>
<li>用于指定<code>docker build</code>过程中运行的程序，其可以是任何命令</li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN &lt;COMMAND&gt;</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">RUN [<span class="string">&quot;&lt;executable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一种格式中，<code>&lt;command&gt;</code>通常是一个shell命令，且以<code>/bin/sh -c</code>来运行它，这意味着此进程在容器中的<code>PID</code>不为1，不能接收UNIX信号，因此，当使用<code>docker stop &lt;container&gt;</code>命令停止容器时，此进程接收不到<code>SIGTERM</code>信号</p>
</li>
<li><p>第二种语法格式中的参数是一个<code>JSON</code>格式的数组，其中<code>&lt;executable&gt;</code>为要运行的命令，后面的<code>&lt;parmN&gt;</code>为传递给命令的选项或参数；然而，此种格式指定的命令不会以<code>/bin/sh -c</code>来发起，因此常见的shell操作如变量替换以及通配符(?*)替换将不会进行；不过，如果要运行的命令依赖于shell特性的话，可以将其替换为类似下面的格式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;&lt;executable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="RUN指令示例"><a href="#RUN指令示例" class="headerlink" title="RUN指令示例"></a>RUN指令示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建工作目录</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># mkdir ap</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># cd ap/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建dockerfile文件</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM centos:7</span><br><span class="line">LABEL maintanier=<span class="string">&quot;Masuri&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line">RUN yum makecache &amp;&amp; \</span><br><span class="line">    yum install httpd php php-mysql -y &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    rm -rf /var/cache/yum/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># docker build . -t masuri/apache-php:v0.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器，验证php和httpd已安装</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># docker run --name web1 --rm -it masuri/apache-php:v0.01 /bin/bash</span></span><br><span class="line">[root@d7428d971121 /]<span class="comment"># rpm -q httpd php</span></span><br><span class="line">httpd-2.4.6-97.el7.centos.x86_64</span><br><span class="line">php-5.4.16-48.el7.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="12-CMD指令"><a href="#12-CMD指令" class="headerlink" title="12.CMD指令"></a>12.<code>CMD</code>指令</h3><ul>
<li>类似于<code>RUN</code>指令，<code>CMD</code>指令也可用于运行任何命令或应用程序，不过，二者的运行时间点不同<ul>
<li><code>RUN</code>指令运行于镜像文件构建过程，而<code>CMD</code>指令运行于基于<code>Dockerfile</code>构建出的新镜像文件启动一个容器时。</li>
<li><code>CMD</code>指令的首要目的在于为启动的容器指定默认要运行的程序，而其运行结束后，容器也将终止；不过，<code>CMD</code>指定的命令其可以被docker run的命令行选项所覆盖</li>
<li>在<code>Dockerfile</code>中可以存在多个<code>CMD</code>指令，但仅最后一个会生效</li>
</ul>
</li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CMD &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">CMD [<span class="string">&quot;&lt;executable&gt;&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">CMD [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>前两种语法格式的意义同<code>RUN</code></li>
<li>第三种则用于为<code>ENTRYPOINT</code>指令提供默认参数</li>
</ul>
<h4 id="CMD指令示例"><a href="#CMD指令示例" class="headerlink" title="CMD指令示例"></a><code>CMD</code>指令示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建工作目录</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># mkdir ap</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># cd ap/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写Dockerfile</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM centos:7</span><br><span class="line">LABEL maintanier=<span class="string">&quot;Masuri&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line">ARG hthome=<span class="string">&quot;/var/www/html/&quot;</span></span><br><span class="line">RUN yum makecache &amp;&amp; \</span><br><span class="line">    yum install httpd php php-mysql -y &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    rm -rf /var/cache/yum/*</span><br><span class="line">VOLUME <span class="variable">$hthome</span></span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line">CMD [<span class="string">&quot;/usr/sbin/httpd&quot;</span>,<span class="string">&quot;-DFOREGROUND&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># build镜像</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># docker build . -t masuri/apache-php:v0.02</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># docker run --name myweb -d masuri/apache-php:v0.02</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器IP验证http服务启动</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># docker inspect -f &#123;&#123;.NetworkSettings&#125;&#125; myweb</span></span><br><span class="line">&#123;&#123; 684c5a78c68f8033f346be128ce33b61b6cd5c4e9e4b1682f30b2f9335b86325 <span class="literal">false</span>  0 map[80/tcp:[]] /var/run/docker/netns/684c5a78c68f [] []&#125; &#123;67ca06b4be8473338927d206cea9585786d8f894b19235a7607de6c9a555b931 172.31.0.1  0 172.31.0.4 16  02:42:ac:1f:00:04&#125; map[bridge:0xc00019a000]&#125;</span><br><span class="line"></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># curl -I 172.31.0.4HTTP/1.1 403 Forbidden</span></span><br><span class="line">Date: Fri, 30 Apr 2021 02:07:27 GMT</span><br><span class="line">Server: Apache/2.4.6 (CentOS) PHP/5.4.16</span><br><span class="line">Last-Modified: Thu, 16 Oct 2014 13:20:58 GMT</span><br><span class="line">ETag: <span class="string">&quot;1321-5058a1e728280&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 4897</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure>

<h3 id="13-ENTRYPOINT指令"><a href="#13-ENTRYPOINT指令" class="headerlink" title="13.ENTRYPOINT指令"></a>13.<code>ENTRYPOINT</code>指令</h3><ul>
<li>类似<code>CMD</code>指令的功能，用于为容器指定默认运行程序，从而使得容器像是一个单独的可执行程序</li>
<li>与<code>CMD</code>不同的是，由<code>ENTRYPOINT</code>启动的程序不会被<code>docker run</code>命令行指定的参数所覆盖，而且这些命令行参数会被当做参数传递给<code>ENTRYPOINT</code>指令指定的程序<ul>
<li>不过，<code>docker run</code>命令的<code>--entrypoint</code>选项的参数可覆盖<code>ENTRYPOINT</code>指令指定的程序</li>
</ul>
</li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENTRYPOINT &lt;COMMAND&gt;</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;&lt;executable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>docker run</code>命令传入的命令参数会覆盖<code>CMD</code>指令的内容并且附加到<code>ENTRYPOINT</code>命令最后最为其参数使用</li>
<li><code>Dockerfile</code>文件中也可以存在多个<code>ENTRYPOINT</code>指令，但仅有最后一个会生效</li>
</ul>
<h4 id="ENTRYPOINT示例1"><a href="#ENTRYPOINT示例1" class="headerlink" title="ENTRYPOINT示例1"></a><code>ENTRYPOINT</code>示例1</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编写php测试页面</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># echo -e &quot;&lt;?php\n\tphpinfo();\n?&gt;&quot; &gt; index.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写dockerfile文件</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM centos:7</span><br><span class="line">LABEL maintanier=<span class="string">&quot;&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line">ARG htroot=<span class="string">&quot;/var/www/html/&quot;</span></span><br><span class="line">RUN yum makecache &amp;&amp; \</span><br><span class="line">    yum install -y httpd php php-mysql &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    rm -rf /var/cache/yum/*</span><br><span class="line">VOLUME <span class="variable">$htroot</span></span><br><span class="line">ADD index.php <span class="variable">$htroot</span></span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;/usr/sbin/httpd&quot;</span>,<span class="string">&quot;-DFOREGROUND&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># docker build . -t masuri/apache-php:v0.03</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于使用了entrypoint，在docker run后执行的命令参数将作为entrypoint的参数，不会覆盖原先entrypoint的命令</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># docker run --name web1 -it --rm masuri/apache-php:v0.03 /bin/bash</span></span><br><span class="line">Usage: /usr/sbin/httpd [-D name] [-d directory] [-f file]</span><br><span class="line">                       [-C <span class="string">&quot;directive&quot;</span>] [-c <span class="string">&quot;directive&quot;</span>]</span><br><span class="line">                       [-k start|restart|graceful|graceful-stop|stop]</span><br><span class="line">                       [-v] [-V] [-h] [-l] [-L] [-t] [-T] [-S] [-X]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要让其覆盖需要使用--entrypoint参数来指定</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># docker run --name web1 --rm -it --entrypoint=/bin/bash masuri/apache-php:v0.03</span></span><br><span class="line">[root@38a5d059f368 /]<span class="comment">#</span></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="ENTRYPOINT示例2"><a href="#ENTRYPOINT示例2" class="headerlink" title="ENTRYPOINT示例2"></a><code>ENTRYPOINT</code>示例2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 编写dockerfile文件</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># vim Dockerfile</span></span><br><span class="line">FROM centos:7</span><br><span class="line"></span><br><span class="line">LABEL maintanier=<span class="string">&quot;&lt;438214186@qq.com&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">ARG htroot=<span class="string">&quot;/var/www/html/&quot;</span></span><br><span class="line"></span><br><span class="line">RUN yum makecache &amp;&amp; \</span><br><span class="line">    yum install -y httpd php php-mysql &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    rm -rf /var/cache/yum/*</span><br><span class="line"></span><br><span class="line">VOLUME <span class="variable">$htroot</span></span><br><span class="line"></span><br><span class="line">ADD index.php <span class="variable">$htroot</span></span><br><span class="line">ADD entrypoint.sh /bin/</span><br><span class="line"></span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/usr/sbin/httpd&quot;</span>,<span class="string">&quot;-DFOREGROUND&quot;</span>]</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;/bin/entrypoint.sh&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写entrypoint脚本</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># vim entrypoint.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">listen_port=<span class="variable">$&#123;LISTEN_PORT:-80&#125;</span></span><br><span class="line">server_name=<span class="variable">$&#123;SERVER_NAME:-localhost&#125;</span></span><br><span class="line">doc_root=<span class="variable">$&#123;DOC_ROOT:-/var/www/html/&#125;</span></span><br><span class="line"></span><br><span class="line">cat &gt; /etc/httpd/conf.d/myweb.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">Listen $listen_port</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;VirtualHost *:$&#123;listen_port&#125;&gt;</span></span><br><span class="line"><span class="string">    ServerName &quot;$server_name&quot;</span></span><br><span class="line"><span class="string">    DocumentRoot &quot;$doc_root&quot;</span></span><br><span class="line"><span class="string">    &lt;Directory &quot;$doc_root&quot;&gt;</span></span><br><span class="line"><span class="string">        Options none</span></span><br><span class="line"><span class="string">        AllowOverride none</span></span><br><span class="line"><span class="string">        Require all granted</span></span><br><span class="line"><span class="string">    &lt;/Directory&gt;</span></span><br><span class="line"><span class="string">&lt;/VirtualHost&gt;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写index文件</span></span><br><span class="line">[root@CentOS8 ap]<span class="comment"># cat index.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">        phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="14-USER指令"><a href="#14-USER指令" class="headerlink" title="14.USER指令"></a>14.<code>USER</code>指令</h3><ul>
<li>用于指定运行<code>image</code>时或运行<code>Dockerfile</code>中任何<code>RUN</code>、<code>CMD</code>或<code>ENTRYPOINT</code>指令指定的程序时的用户名或<code>UID</code></li>
<li>默认情况下，<code>container</code>的运行身份为<code>root</code>用户</li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USER &lt;UID&gt;|&lt;UserName&gt;</span><br><span class="line"><span class="comment"># 需要注意的是，&lt;UID&gt;可以为任意数字，但实践中其必须为/etc/passwd中某用户的有效ID,否则docker run命令将运行失败</span></span><br></pre></td></tr></table></figure>

<h3 id="15-HEALTHCHECK指令"><a href="#15-HEALTHCHECK指令" class="headerlink" title="15.HEALTHCHECK指令"></a>15.<code>HEALTHCHECK</code>指令</h3><ul>
<li><code>HEALHCHECK</code>指令是用来告诉容器如何去测试容器内的进程是在正常工作的。</li>
<li><code>HEALTHCHECK</code>指令可以防止一个容器的进程是正常存活的但是，其本身已经不工作了，如<code>java</code>程序可能会发生这种情况。</li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HEALTHCHECK指令使用方式有2种</span></span><br><span class="line">HEALTHCHECK [OPTIONS] CMD <span class="built_in">command</span> (check container health by running a <span class="built_in">command</span> inside the container)</span><br><span class="line"></span><br><span class="line">HEALTHCHECK NONE (<span class="built_in">disable</span> any healthcheck inherited from the base image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The options that can appear before CMD are:</span></span><br><span class="line"><span class="comment"># --interval=DURATION(default:30s)</span></span><br><span class="line"><span class="comment"># --timeout=DURATION(default:30s)</span></span><br><span class="line"><span class="comment"># --start-period=DURATION(default:0s)</span></span><br><span class="line"><span class="comment"># --retries=N(default:3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The command&#x27;s exit status indicates the health status of the container.The possible values are:</span></span><br><span class="line"><span class="comment"># 0:success——the container is healthy and readyfor use</span></span><br><span class="line"><span class="comment"># 1:unhealthy——the container is not working correctly</span></span><br><span class="line"><span class="comment"># 2:reserved——do not use this exit code</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line">HEALTHCHECK --interval=5m --timeout=3s \</span><br><span class="line">    CMD curl -f http://localhost/ || <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure>

<h4 id="HEALTHCHECK示例"><a href="#HEALTHCHECK示例" class="headerlink" title="HEALTHCHECK示例"></a><code>HEALTHCHECK</code>示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 16.`SHELL`指令</span></span><br><span class="line"></span><br><span class="line">* `SHELL`指令用来指定运行命令时的默认`shell`类型</span><br><span class="line">* `Linux`中默认shell为`[<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>]`，windows默认为`[<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/S&quot;</span>,<span class="string">&quot;/C&quot;</span>]`</span><br><span class="line"></span><br><span class="line">* `SHELL`指令所指定的shell类型必须以`json`格式指定</span><br><span class="line"></span><br><span class="line">格式</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">SHELL [<span class="string">&quot;EXECUTABLE&quot;</span>,<span class="string">&quot;PARAMETERS&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>SHELL</code>指令可以出现多次，每个<code>SHELL</code>指令覆盖前一个<code>SHELL</code>指令，并且在其之后的<code>SHELL</code>指令出现前生效。</li>
</ul>
<h3 id="17-STOPSIGNAL指令"><a href="#17-STOPSIGNAL指令" class="headerlink" title="17.STOPSIGNAL指令"></a>17.<code>STOPSIGNAL</code>指令</h3><ul>
<li><p><code>STOPSIGNAL</code>指令用来设置向容器发送什么信号停止容器的</p>
</li>
<li><p>这个信号可以是一个无符号数字，它与内核的<code>syscall</code>中的一个位置相匹配，例如9，或者一个信号名是<code>SIGNAME</code>格式，例如<code>SIGKILL</code></p>
</li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">STOPSIGNAL signal</span><br></pre></td></tr></table></figure>

<h3 id="18-ONBUILD指令"><a href="#18-ONBUILD指令" class="headerlink" title="18.ONBUILD指令"></a>18.<code>ONBUILD</code>指令</h3><ul>
<li>用于在<code>Dockerfile</code>中定义一个触发器</li>
<li><code>Dockerfile</code>用于<code>build</code>镜像文件，此镜像文件亦可作为<code>base image</code>被另一个<code>Dockerfile</code>用做<code>FROM</code>指令的参数，并以之构建新的镜像文件。</li>
<li>在后面的这个<code>Dockerfile</code>中的<code>FROM</code>指令在<code>build</code>过程中被执行时，将会出发创建其<code>base image</code>的<code>Dockerfile</code>文件中的<code>ONBUILD</code>指令的触发器</li>
</ul>
<p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ONBUILD &lt;INSTRUCTION&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>尽管仍和指令都可注册成为触发器指令，但<code>ONBUILD</code>不能自我嵌套，且不会触发<code>FORM</code>和<code>MAINTANIER</code>指令</li>
<li>使用包含<code>ONBUILD</code>指令的<code>Dockerfile</code>构建的镜像应该使用特殊的标签，例如: <code>ruby:2.0-onbuild</code></li>
<li>在<code>ONBUILD</code>指令中使用<code>ADD</code>或<code>COPY</code>指令应该格外小心，因为新构建过程的上下文在缺少指定的源文件时会失败</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Harbor</title>
    <url>/2019/06/10/Docker/docker-harbor/docker-harbor/</url>
    <content><![CDATA[<h2 id="docker仓库之分布式Harbor"><a href="#docker仓库之分布式Harbor" class="headerlink" title="docker仓库之分布式Harbor"></a>docker仓库之分布式Harbor</h2><p><code>Harbor</code>是一个用于存储和分发<code>Docker</code>镜像的企业级<code>Registry</code>服务器，由<code>vmware</code>开源，其通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源<code>Docker Distribution</code>。</p>
<p>作为一个企业级私有<code>Registry</code>服务器，<code>Harbor</code>提供了更好的性能和安全。提升用户使用<code>Registry</code>构建和运行环境传输镜像的效率。<code>Harbor</code>支持安装在多个<code>Registry</code>节点的镜像资源复制，镜像全部保存在私有<code>Registry</code>中， 确保数据和知识产权在公司内部网络中管控，另外，<code>Harbor</code>也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p>
<p>官网地址：<a href="https://vmware.github.io/harbor/cn/">https://vmware.github.io/harbor/cn/</a></p>
<p>官方<code>github</code>地址：<a href="https://github.com/vmware/harbor">https://github.com/vmware/harbor</a></p>
<h3 id="Harbor功能官方介绍："><a href="#Harbor功能官方介绍：" class="headerlink" title="Harbor功能官方介绍："></a><code>Harbor</code>功能官方介绍：</h3><p>基于角色的访问控制：用户与<code>Docker</code>镜像仓库通过“项目”进行组织管理，一个用户可以对多个镜像仓库在同一命名空间（project）里有不同的权限。</p>
<p>镜像复制：镜像可以在多个<code>Registry</code>实例中复制（同步）。尤其适合于负载均衡，高可用，混合云和多云的场景。</p>
<p>图形化用户界面：用户可以通过浏览器来浏览，检索当前<code>Docker</code>镜像仓库，管理项目和命名空间。</p>
<p><code>AD/LDAP</code>支持：<code>Harbor</code>可以集成企业内部已有的<code>AD/LDAP</code>，用于鉴权认证管理。</p>
<p>审计管理：所有针对镜像仓库的操作都可以被记录追溯，用于审计管理。</p>
<p>国际化：已拥有英文、中文、德文、日文和俄文的本地化版本。更多的语言将会添加进来。</p>
<p><code>RESTful API</code>-<code>RESTful API</code> ：提供给管理员对于<code>Harbor</code>更多的操控, 使得与其它管理软件集成变得更容易。</p>
<p>部署简单：提供在线和离线两种安装工具， 也可以安装到<code>vSphere</code>平台(OVA 方式)虚拟设备。</p>
<h2 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h2><p>下载地址：<a href="https://github.com/vmware/harbor/releases">https://github.com/vmware/harbor/releases</a></p>
<p>安装文档：<a href="https://github.com/vmware/harbor/blob/master/docs/installation_guide.md">https://github.com/vmware/harbor/blob/master/docs/installation_guide.md</a></p>
<p>本次安装示范使用harbor1.7.5版本</p>
<hr>
<p>1.添加一块磁盘用来当harbor的存储使用，将磁盘格式化挂载到docker目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将磁盘格式化为xfs，需要注意格式化完毕后查看ftype是否为1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkfs.xfs /dev/sdb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建出docker的数据目录，并把磁盘挂载上去</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir /var/lib/docker</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount /dev/sdb /var/lib/docker/</span></span><br></pre></td></tr></table></figure>

<p>2.下载并安装docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>3.下载harbor</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget https://storage.googleapis.com/harbor-releases/release-1.7.0/harbor-offline-installer-v1.7.5.tgz</span></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar xf harbor-offline-installer-v1.7.5.tgz -C /usr/local/src</span></span><br></pre></td></tr></table></figure>

<p>4.编辑配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /usr/local/harbor/harbor.cfg </span></span><br><span class="line"><span class="comment">#hostname改为本机地址</span></span><br><span class="line">hostname = 192.168.27.10</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改密码</span></span><br><span class="line">harbor_admin_password = 123456</span><br></pre></td></tr></table></figure>

<p>5.安装docker组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要启用epel源</span></span><br><span class="line">[root@localhost harbor]<span class="comment"># yum install docker-compose -y</span></span><br></pre></td></tr></table></figure>

<p>6.执行安装脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /usr/local/src/harbor/</span></span><br><span class="line">[root@localhost harbor]<span class="comment"># ./install.sh </span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker存储卷</title>
    <url>/2019/06/10/Docker/docker%E5%AD%98%E5%82%A8%E5%8D%B7/docker%E5%AD%98%E5%82%A8%E5%8D%B7/</url>
    <content><![CDATA[<p><code>Docker</code>在运行时，是基于分层镜像联合挂载机制实现的，而这种分层构建镜像，联合挂载并在最上层实现读写层的时候，所有容器中生成的数据都被最上层的可写层所包含，而这个可写层，本身不属于镜像层属于容器，若是容器删了，可写层也将删除。如果要持久保存，则需要将其做成镜像，若要将其进行分发，则可以将其推送到仓库中。</p>
<p>所以我们不能将数据保存在容器的可写层上，通常可写层上只用来保存临时数据。我们需要容器内用来存放数据的目录与容器外的某个目录建立其关联关系，容器中进程所有写入到此目录内的数据都将保存到宿主机上。因此容器停止或删除后，或者再次创建出容器时，其依旧会与宿主机上的目录相关联，那么数据就不会丢失了。</p>
<p>如果此目录属于网络文件系统中的目录，那么即使宿主机挂了，那么数据依然不会丢失。在其他宿主机上再次创建出相同的容器并挂在，数据依旧可用。这种技术就叫做数据卷（<code>data volume</code>）</p>
<h3 id="数据卷类型"><a href="#数据卷类型" class="headerlink" title="数据卷类型"></a>数据卷类型</h3><p><code>Docker</code>有两种类型的卷，每种类型都在容器中存在一个挂载点，但其在宿主机上的位置有所有不同；</p>
<ul>
<li><code>Bind mount volume</code><ul>
<li>在宿主机上的目录是用户指定的，容器中的目录也是用户指定的。</li>
</ul>
</li>
<li><code>Docker-managed volue</code><ul>
<li>容器中的目录是用户指定的，宿主机中的目录是由系统指定的生成在<code>/var/lib/docker/vfs/dir/&lt;some volume ID&gt;</code></li>
</ul>
</li>
</ul>
<h4 id="Docker管理卷实现"><a href="#Docker管理卷实现" class="headerlink" title="Docker管理卷实现"></a>Docker管理卷实现</h4><p>1.创建容器并指定容器内的卷位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用-v选项，指定容器内的目录，并与宿主机上目录创建关联关系，容器运行时不能带--rm否则一旦退出数据卷也将被销毁，容器停止后再删除容器，其数据卷会被保留。</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name mbbox -it -v /data busybox</span></span><br><span class="line">/ <span class="comment"># ls</span></span><br><span class="line">bin   data  dev   etc   home  proc  root  sys   tmp   usr   var</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.查看宿主机上<code>/data</code>目录所关联的位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     2c6cc96bea89bcaadb720efbc1e34663874368223f6e7eb515b3056b96e82657</span><br><span class="line"><span class="built_in">local</span>     13c7c5c87970e55e34edfbea16acfec4885d39a439499c276a5b5c5b0efd03b0</span><br><span class="line"></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker inspect mbbox</span></span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;13c7c5c87970e55e34edfbea16acfec4885d39a439499c276a5b5c5b0efd03b0&quot;</span>,</span><br><span class="line">                <span class="comment"># 以下路径就是宿主机上被关联的目录路径</span></span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/13c7c5c87970e55e34edfbea16acfec4885d39a439499c276a5b5c5b0efd03b0/_data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line"><span class="comment"># 可以使用-f指定字段名称来获取相关字段的值        </span></span><br><span class="line">[root@CentOS8 v1]<span class="comment"># docker inspect -f &#123;&#123;.Mounts&#125;&#125; mbbox</span></span><br><span class="line">[&#123;<span class="built_in">bind</span>  /data/volume/v1 /my/data   <span class="literal">true</span> rprivate&#125;]</span><br></pre></td></tr></table></figure>

<p>3.在宿主机上相关联的位置创建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># cd /var/lib/docker/volumes/13c7c5c87970e55e34edfbea16acfec4885d39a439499c276a5b5c5b0efd03b0/_data</span></span><br><span class="line">[root@CentOS8 _data]<span class="comment"># echo hello &gt;&gt; test.txt</span></span><br></pre></td></tr></table></figure>

<p>4.进入容器内进行查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 _data]<span class="comment"># docker attach mbbox</span></span><br><span class="line">/ <span class="comment"># cat /data/test.txt</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<h4 id="绑定挂载卷"><a href="#绑定挂载卷" class="headerlink" title="绑定挂载卷"></a>绑定挂载卷</h4><p>1.在宿主机上创建一个目录，并生成文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># mkdir /data/volume/v1 -p</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># echo &quot;&lt;h1&gt;hello world&lt;\h1&gt;&quot; &gt;&gt; /data/volume/v1/index.html</span></span><br></pre></td></tr></table></figure>

<p>2.创建出容器，并指定容器外与容器内对应的目录关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name mbbox -it --rm -v /data/volume/v1:/mydata busybox /bin/sh</span></span><br><span class="line"><span class="comment"># 查看容器内指定目录/mydata中的内容</span></span><br><span class="line">/ <span class="comment"># cat /mydata/index.html</span></span><br><span class="line">&lt;h1&gt;hello world&lt;\h1&gt;</span><br><span class="line">/ <span class="comment"># exit</span></span><br></pre></td></tr></table></figure>

<p>3.容器退出删除后，宿主机上目录内的内容依然存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># cd /data/volume/v1/</span></span><br><span class="line">[root@CentOS8 v1]<span class="comment"># ls</span></span><br><span class="line">index.html</span><br></pre></td></tr></table></figure>

<h4 id="多容器间共享数据"><a href="#多容器间共享数据" class="headerlink" title="多容器间共享数据"></a>多容器间共享数据</h4><p>1.创建出第一个容器并挂载卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 v1]<span class="comment"># docker run --name mbbox --rm -it -v /data/volume/v1:/my/data busybox /bin/sh</span></span><br><span class="line">/ <span class="comment"># cat /my/data/index.html</span></span><br><span class="line">&lt;h1&gt;hello world&lt;\h1&gt;</span><br></pre></td></tr></table></figure>

<p>2.创建第二个容器并挂载与第一个容器相同的卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 v1]<span class="comment"># docker run --name mbbox1 --rm -it --volumes-from mbbox busybox /bin/sh</span></span><br><span class="line">/ <span class="comment"># ls /my/data/</span></span><br><span class="line">index.html</span><br><span class="line">/ <span class="comment"># cat /my/data/index.html</span></span><br><span class="line">&lt;h1&gt;hello world&lt;\h1&gt;</span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h3 id="容器化运行wordpress"><a href="#容器化运行wordpress" class="headerlink" title="容器化运行wordpress"></a>容器化运行<code>wordpress</code></h3><p>1.在宿主机上创建出<code>MySQL</code>的数据目录，以及<code>PHP</code>项目的数据目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 /]<span class="comment"># mkdir -p /data/volume/&#123;db,html&#125;</span></span><br></pre></td></tr></table></figure>

<p>2.创建出<code>php</code>容器并指定项目路径与本地数据目录的对应关系，开放80端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name apache-php -d -v /data/volume/html:/var/www/html -p 80:80 php:apache</span></span><br></pre></td></tr></table></figure>

<p>3.官方镜像默认没有安装<code>mysqli</code>和<code>pdo_mysql</code>模块，需要手动安装模块，重启容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker exec php /usr/local/bin/docker-php-ext-install mysqli pdo_mysql</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker restart php</span></span><br></pre></td></tr></table></figure>

<p>4.创建出<code>MySQL</code>容器，指定数据目录与本地数据目录的对应关系。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name db -d -v /data/volume/db:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=masuri mysql:latest</span></span><br></pre></td></tr></table></figure>

<p>5.查询出<code>php</code>和<code>db</code>容器内的<code>IP</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># php容器ip=172.31.0.2</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker inspect -f &#123;&#123;.NetworkSettings&#125;&#125; php</span></span><br><span class="line">&#123;&#123; ed65b06db1fe1904e47ba9d98f8ea632a67b9d267717e568702b933f9735b672 <span class="literal">false</span>  0 map[80/tcp:[&#123;0.0.0.0 80&#125; &#123;:: 80&#125;]] /var/run/docker/netns/ed65b06db1fe [] []&#125; &#123;f615f0719cbbc9133d3e721e874bcc9abee8d0643abbfb9d48ced74c5f361db1 172.31.0.1  0 172.31.0.2 16  02:42:ac:1f:00:02&#125; map[bridge:0xc000174000]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># db容器ip=172.31.0.3</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker inspect -f &#123;&#123;.NetworkSettings&#125;&#125; db</span></span><br><span class="line">&#123;&#123; b9d56c4d94c741a6d72f3e9c8791d16d59c34c7aadb65890609c8e71f22b07b3 <span class="literal">false</span>  0 map[3306/tcp:[] 33060/tcp:[]] /var/run/docker/netns/b9d56c4d94c7 [] []&#125; &#123;821c35750cc1f23b924dabde31a9e5949a59bca511e3ecada80e7170ef7687b9172.31.0.1  0 172.31.0.3 16  02:42:ac:1f:00:03&#125; map[bridge:0xc000176000]&#125;</span><br></pre></td></tr></table></figure>

<p>6.在<code>db</code>中创建出<code>wordpress</code>的库，以及管理用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker exec db mysql -uroot -pmasuri -e &quot;CREATE DATABASE wordpress;&quot;</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker exec db mysql -uroot -pmasuri -e &quot;CREATE USER wpuser@&#x27;172.31.0.2&#x27; IDENTIFIED BY &#x27;111111&#x27;;&quot;</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker exec db mysql -uroot -pmasuri -e &quot;GRANT ALL ON wordpress.* TO wpuser@&#x27;172.31.0.2&#x27;;&quot;</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br></pre></td></tr></table></figure>

<p>7.测试数据库连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># vim /data/volume/html/index.php</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:host=172.31.0.3;dbname=wordpress&#x27;</span>;</span><br><span class="line"><span class="variable">$username</span>=<span class="string">&#x27;wpuser&#x27;</span>; <span class="variable">$passwd</span>=<span class="string">&#x27;111111&#x27;</span>;</span><br><span class="line"><span class="variable">$dbh</span>=new PDO(<span class="variable">$dsn</span>,<span class="variable">$username</span>,<span class="variable">$passwd</span>);</span><br><span class="line">var_dump(<span class="variable">$dbh</span>);</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="./image-20210429092633764.png" alt="image-20210429092633764"></p>
<p>8.部署<code>wordpress</code>代码，修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># unzip latest-zh_CN.zip</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># cp -a wordpress/. /data/volume/html/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制出配置文件，并配置</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># cp /data/volume/html/&#123;wp-config-sample.php,wp-config.php&#125;</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># vim /data/volume/html/wp-config.php</span></span><br><span class="line"></span><br><span class="line">// ** MySQL settings - You can get this info from your web host ** //</span><br><span class="line">/** The name of the database <span class="keyword">for</span> WordPress */</span><br><span class="line">define( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL database username */</span><br><span class="line">define( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;wpuser&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL database password */</span><br><span class="line">define( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;111111&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** MySQL hostname */</span><br><span class="line">define( <span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;172.31.0.3&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** Database Charset to use <span class="keyword">in</span> creating database tables. */</span><br><span class="line">define( <span class="string">&#x27;DB_CHARSET&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span> );</span><br><span class="line"></span><br><span class="line">/** The Database Collate <span class="built_in">type</span>. Don<span class="string">&#x27;t change this if in doubt. */</span></span><br><span class="line"><span class="string">define( &#x27;</span>DB_COLLATE<span class="string">&#x27;, &#x27;</span><span class="string">&#x27; );</span></span><br></pre></td></tr></table></figure>

<p>9.访问页面继续安装</p>
<p><img src="./image-20210429093444306.png" alt="image-20210429093444306"></p>
<p><img src="./image-20210429093620815.png" alt="image-20210429093620815"></p>
<p><img src="./image-20210429093719882.png" alt="image-20210429093719882"></p>
<p><img src="./image-20210429093757806.png" alt="image-20210429093757806"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-CE的安装</title>
    <url>/2019/06/10/Docker/docker%E5%AE%89%E8%A3%85/docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>官方网址：<a href="https://www.docker.com/">https://www.docker.com/</a></p>
<p>系统版本选择：</p>
<p>Docker目前已经支持多种操作系统的安装运行，比如 Ubuntu、CentOS、Redhat、Debian、Fedora，甚至是还支持了Mac和Windows，在linux系统上需要内核版本在3.10或以上，docker版本号之前一直是0.x版本或1.X版本，但是从2017年3月1号开始改为每个季度发布一次稳版，其版本号规则也统一变更为YY.MM，例如17.09表示是 2017年9月份发布的，本次演示的操作系统使用 Centos 7.6为例。</p>
<p>Docker版本选择：</p>
<p>Docker之前没有区分版本，但是2017年推出(将docker更名为)新的项目Moby，github 地址：<a href="https://github.com/moby/moby%EF%BC%8CMoby%E9%A1%B9%E7%9B%AE%E5%B1%9E%E4%BA%8EDocker%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%85%A8%E6%96%B0%E4%B8%8A%E6%B8%B8%EF%BC%8CDocker">https://github.com/moby/moby，Moby项目属于Docker项目的全新上游，Docker</a> 将是一个隶属于的 Moby 的子产品，而且之后的版本之后开始区分为CE版本（社区版本）和EE（企业收费版），CE社区版本和EE企业版本都是每个季度发布一个新版本，但是EE版本提供后期安全维护1年，而CE版本是4个月，本次演示的Docker版本为18.03，以下为官方原文：<br><a href="https://blog.docker.com/2017/03/docker-enterprise-edition/">https://blog.docker.com/2017/03/docker-enterprise-edition/</a></p>
<hr>
<h3 id="使用官方安装脚本自动安装（仅适用于公网环境）"><a href="#使用官方安装脚本自动安装（仅适用于公网环境）" class="headerlink" title="使用官方安装脚本自动安装（仅适用于公网环境）"></a>使用官方安装脚本自动安装（仅适用于公网环境）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="手动安装Docker-Ubuntu"><a href="#手动安装Docker-Ubuntu" class="headerlink" title="手动安装Docker(Ubuntu)"></a>手动安装Docker(Ubuntu)</h3><p>使用系统Ubuntu 18.04.2  </p>
<p>1.安装必要的一些系统工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update </span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>
<p>2.安装gpg证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p>3.写入软件源信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>

<p>4.安装Docker-CE</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>

<p>5.配置阿里云的docker镜像加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://gy97ij1m.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://gy97ij1m.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>6.查看docker的版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.7</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.8</span><br><span class="line"> Git commit:        2d0083d</span><br><span class="line"> Built:             Thu Jun 27 17:56:23 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.7</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.8</span><br><span class="line">  Git commit:       2d0083d</span><br><span class="line">  Built:            Thu Jun 27 17:23:02 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>7.验证docker信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">masuri@mylinuxops:~$ sudo docker info</span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 18.09.7</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Supports d_type: <span class="literal">true</span></span><br><span class="line"> Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: <span class="built_in">local</span></span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk syslog</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line">runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line">init version: fec3683</span><br><span class="line">Security Options:</span><br><span class="line"> apparmor</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line">Kernel Version: 4.15.0-54-generic</span><br><span class="line">Operating System: Ubuntu 18.04.2 LTS</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 12</span><br><span class="line">Total Memory: 3.83GiB</span><br><span class="line">Name: mylinuxops</span><br><span class="line">ID: 6DNE:LEH7:IBXO:PGXW:ZRAB:AQL4:TSBN:2QKT:ZBF3:HOPB:CZAF:AOWB</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line">Debug Mode (client): <span class="literal">false</span></span><br><span class="line">Debug Mode (server): <span class="literal">false</span></span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Labels:</span><br><span class="line">Experimental: <span class="literal">false</span></span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://gy97ij1m.mirror.aliyuncs.com/</span><br><span class="line">Live Restore Enabled: <span class="literal">false</span></span><br><span class="line">Product License: Community Engine</span><br><span class="line"></span><br><span class="line">WARNING: No swap <span class="built_in">limit</span> support</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="手动安装docker-CentOS7"><a href="#手动安装docker-CentOS7" class="headerlink" title="手动安装docker(CentOS7)"></a>手动安装docker(CentOS7)</h3><p>1.安装一些必要工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>2.添加软件源信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>3.更新并安装 Docker-CE</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure>

<p>4.启动镜像服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<p>5.配置阿里云的docker镜像加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://gy97ij1m.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>6.验证docker版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.7</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.8</span><br><span class="line"> Git commit:        2d0083d</span><br><span class="line"> Built:             Thu Jun 27 17:56:06 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.7</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.8</span><br><span class="line">  Git commit:       2d0083d</span><br><span class="line">  Built:            Thu Jun 27 17:26:28 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>7.验证docker信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker info</span></span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 18.09.7</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: xfs</span><br><span class="line"> Supports d_type: <span class="literal">true</span></span><br><span class="line"> Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: <span class="built_in">local</span></span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk syslog</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line">runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line">init version: fec3683</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line">Kernel Version: 3.10.0-957.el7.x86_64</span><br><span class="line">Operating System: CentOS Linux 7 (Core)</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 1</span><br><span class="line">Total Memory: 468.6MiB</span><br><span class="line">Name: localhost.localdomain</span><br><span class="line">ID: ONTA:5VC5:GYUU:CQ6P:SZFM:2R6K:4ZEJ:MUIK:R7NR:ROC5:NYZL:OLFS</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line">Debug Mode (client): <span class="literal">false</span></span><br><span class="line">Debug Mode (server): <span class="literal">false</span></span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Labels:</span><br><span class="line">Experimental: <span class="literal">false</span></span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://gy97ij1m.mirror.aliyuncs.com/</span><br><span class="line">Live Restore Enabled: <span class="literal">false</span></span><br><span class="line">Product License: Community Engine</span><br><span class="line"></span><br><span class="line">WARNING: bridge-nf-call-iptables is disabled</span><br><span class="line">WARNING: bridge-nf-call-ip6tables is disabled</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="二进制安装Docker"><a href="#二进制安装Docker" class="headerlink" title="二进制安装Docker"></a>二进制安装<code>Docker</code></h3><p>通常公司内部大批量部署<code>docker</code>时，一般会使用二进制安装+<code>ansible</code>来实现批量安装<code>docker</code>。</p>
<p><code>docker</code>官方二进制包下载路径:<a href="https://download.docker.com/linux/static/stable/x86_64/">https://download.docker.com/linux/static/stable/x86_64/</a></p>
<p>1.下载docker二进制程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker01 ~]<span class="comment"># wget https://download.docker.com/linux/static/stable/x86_64/docker-20.10.6.tgz</span></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># tar xf docker-20.10.6.tgz -C .</span></span><br></pre></td></tr></table></figure>

<p>2.从一台使用rpm安装的docker机器上获取启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker启动依赖于以下2个脚本和1个socket文件</span></span><br><span class="line">[root@CentOS8 system]<span class="comment"># pwd</span></span><br><span class="line">/lib/systemd/system</span><br><span class="line">[root@CentOS8 system]<span class="comment"># ll docker* containerd.*</span></span><br><span class="line">-rw-r--r-- 1 root root 1263 Mar  9 06:55 containerd.service</span><br><span class="line">-rw-r--r-- 1 root root 1695 Apr 10 06:44 docker.service</span><br><span class="line">-rw-r--r-- 1 root root  175 Apr 10 06:44 docker.socket</span><br><span class="line"><span class="comment"># 将这些文件复制到需要安装docker的主机上</span></span><br><span class="line">[root@CentOS8 system]<span class="comment"># pwd</span></span><br><span class="line">/lib/systemd/system</span><br><span class="line">[root@CentOS8 system]<span class="comment"># scp containerd.service 172.16.11.64:/lib/systemd/system</span></span><br><span class="line">[root@CentOS8 system]<span class="comment"># scp docker.* 172.16.11.64:/lib/systemd/system</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.根据启动脚本内的二进制文件路径来放置相关二进制文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker.service中二进制文件路径</span></span><br><span class="line">[root@docker01 docker]<span class="comment"># grep -v &quot;^[[:space:]]*$\|^#&quot; /lib/systemd/system/docker.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service containerd.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Requires=docker.socket containerd.service</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">TimeoutSec=0</span><br><span class="line">RestartSec=2</span><br><span class="line">Restart=always</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TasksMax=infinity</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">OOMScoreAdjust=-500</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># containerd.service中二进制文件路径</span></span><br><span class="line">[root@docker01 docker]<span class="comment"># grep -v &quot;^[[:space:]]*$\|^#&quot; /lib/systemd/system/containerd.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=containerd container runtime</span><br><span class="line">Documentation=https://containerd.io</span><br><span class="line">After=network.target local-fs.target</span><br><span class="line">[Service]</span><br><span class="line">ExecStartPre=-/sbin/modprobe overlay</span><br><span class="line">ExecStart=/usr/bin/containerd</span><br><span class="line">Type=notify</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">LimitNOFILE=1048576</span><br><span class="line">TasksMax=infinity</span><br><span class="line">OOMScoreAdjust=-999</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker.socket文件内容</span></span><br><span class="line">[root@docker01 system]<span class="comment"># cat docker.socket</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Socket <span class="keyword">for</span> the API</span><br><span class="line">[Socket]</span><br><span class="line">ListenStream=/var/run/docker.sock</span><br><span class="line">SocketMode=0660</span><br><span class="line">SocketUser=root</span><br><span class="line">SocketGroup=docker</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=sockets.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.复制二进制文件到相应位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker01 docker]<span class="comment"># ls</span></span><br><span class="line">containerd  containerd-shim  containerd-shim-runc-v2  ctr  docker  dockerd  docker-init  docker-proxy  runc</span><br><span class="line">[root@docker01 docker]<span class="comment"># cd ..</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># cp docker/* /usr/bin/</span></span><br></pre></td></tr></table></figure>

<p>5.创建<code>docker</code>用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker.socket文件中需要有docker组所以此处创建docker用户，否则将报错</span></span><br><span class="line">[root@docker01 system]<span class="comment"># useradd docker</span></span><br></pre></td></tr></table></figure>

<p>6.设置开机自己动，启动<code>docker</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker01 system]<span class="comment"># systemctl enable docker.socket docker.service containerd.service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要先启动containerd，其被docker所依赖</span></span><br><span class="line">[root@docker01 system]<span class="comment"># systemctl start containerd.service &amp;&amp; systemctl start docker</span></span><br></pre></td></tr></table></figure>

<p>7.测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker01 system]<span class="comment"># docker run hello-world</span></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">b8dfde127a29: Pull complete</span><br><span class="line">Digest: sha256:f2266cbfc127c960fd30e76b7c792dc23b588c0db76233517e1891a4e357d519</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="docker存储引擎"><a href="#docker存储引擎" class="headerlink" title="docker存储引擎"></a><code>docker</code>存储引擎</h3><p>目前<code>docker</code>的默认存储引擎为<code>overlay2</code>，需要磁盘分区支持<code>d-type</code>文件分层功能，因此需要系统磁盘的额外支持。</p>
<p>官方文档关于存储引擎的选择文档：<a href="https://docs.docker.com/storage/storagedriver/select-storage-driver/">https://docs.docker.com/storage/storagedriver/select-storage-driver/</a></p>
<p><code>Docker</code>官方推荐首选存储引擎为<code>overlay2</code>其次为<code>devicemapper</code>，但是<code>devicemapper</code>存在使用空间方面的一些限制存储空间的上限为<code>100G</code>，虽然可以通过后期配置解决，但官方依然推荐使用<code>overlay2</code>。</p>
<p>如果<code>docker</code>数据目录是一块单独的磁盘分区而且是<code>xfs</code>格式的，那么需要在格式化的时候加上参数<code>-n ftype=1</code>，否则后期在启动容器的时候会报错不支持<code>dtype</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># xfs_info /</span></span><br><span class="line">meta-data=/dev/mapper/centos-root isize=512    agcount=4, agsize=13041408 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=52165632, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1      <span class="comment"># ftype必须为1，否则将不支持dtype</span></span><br><span class="line"><span class="built_in">log</span>      =internal               bsize=4096   blocks=25471, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/2019/06/10/Docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>docker命令是最常使用的docker客户端命令，其后面可以加不同的参数以实现响应的功能，常用的命令如下：</p>
<h3 id="镜像的操作命令"><a href="#镜像的操作命令" class="headerlink" title="镜像的操作命令"></a>镜像的操作命令</h3><h4 id="搜索镜像-docker-search"><a href="#搜索镜像-docker-search" class="headerlink" title="搜索镜像 docker search"></a>搜索镜像 docker search</h4><p>在官方的docker仓库中搜索指定名称的docker镜像，也会有很多三方镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">masuri@mylinuxops:~$ sudo docker search centos:7.6  <span class="comment"># 带上版本号，指定版本号</span></span><br><span class="line">masuri@mylinuxops:~$ sudo docker search centos  <span class="comment"># 不带版本号默认为latest</span></span><br></pre></td></tr></table></figure>

<h4 id="下载镜像-docker-pull"><a href="#下载镜像-docker-pull" class="headerlink" title="下载镜像 docker pull"></a>下载镜像 docker pull</h4><p>从docker仓库下载镜像到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull 仓库服务器:端口/项目名称/镜像名称:tag号</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/mylinuxops/neginx:latest</span><br></pre></td></tr></table></figure>

<p>如果不指定镜像仓库默认为官方仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">masuri@mylinuxops:~$ sudo docker pull centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">8ba884070f61: Pull complete </span><br><span class="line">Digest: sha256:a799dd8a2ded4a83484bbae769d97655392b3f86533ceb7dd96bbac929809f3c</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:latest</span><br></pre></td></tr></table></figure>

<h4 id="查看本地镜像-docker-images"><a href="#查看本地镜像-docker-images" class="headerlink" title="查看本地镜像 docker images"></a>查看本地镜像 docker images</h4><p>下载完成后使用<code>docker images</code>进行镜像的查看，下载完成后的镜像比下载的镜像要大，因为下载后会解压。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">masuri@mylinuxops:~$ sudo docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              f68d6e55e065        2 days ago          109MB</span><br><span class="line">centos              latest              9f38484d220f        3 months ago        202MB</span><br><span class="line"></span><br><span class="line">REPOSITORY <span class="comment"># 镜像所属的仓库名称</span></span><br><span class="line">TAG <span class="comment"># 镜像版本号（标识符），默认为 latest</span></span><br><span class="line">IMAGE ID <span class="comment"># 镜像唯一 ID 标示</span></span><br><span class="line">CREATED <span class="comment"># 镜像创建时间</span></span><br><span class="line">VIRTUAL SIZE <span class="comment"># 镜像的大小</span></span><br></pre></td></tr></table></figure>

<h4 id="镜像导出-docker-save"><a href="#镜像导出-docker-save" class="headerlink" title="镜像导出 docker save"></a>镜像导出 docker save</h4><p>可以将镜像从本地导出为一个压缩文件，然后复制到其他服务器导入使用。镜像导出有2种方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1：</span></span><br><span class="line">masuri@mylinuxops:~$ sudo docker save nginx -o /data/nginx.tar.gz</span><br><span class="line">masuri@mylinuxops:~$ ll /data/nginx.tar.gz </span><br><span class="line">-rw------- 1 root root 113087488 Jul  4 08:24 /data/nginx.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：</span></span><br><span class="line">masuri@mylinuxops:~$ sudo bash -c <span class="string">&quot;docker save nginx &gt; /data/nginx-1.tar.gz&quot;</span></span><br><span class="line">masuri@mylinuxops:~$ ll /data/</span><br><span class="line">total 220888</span><br><span class="line">drwxr-xr-x  2 root root      4096 Jul  4 08:32 ./</span><br><span class="line">drwxr-xr-x 24 root root      4096 Jul  4 08:24 ../</span><br><span class="line">-rw-r--r--  1 root root 113087488 Jul  4 08:32 nginx-1.tar.gz</span><br><span class="line">-rw-------  1 root root 113087488 Jul  4 08:24 nginx.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="镜像导入-docker-load"><a href="#镜像导入-docker-load" class="headerlink" title="镜像导入 docker load"></a>镜像导入 docker load</h4><p>和镜像导出一样，镜像的导入也有两种方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker images        #当前镜像</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker load &lt; /data/nginx.tar.gz  </span></span><br><span class="line">cf5b3c6798f7: Loading layer  58.45MB/58.45MB</span><br><span class="line">197c666de9dd: Loading layer  54.62MB/54.62MB</span><br><span class="line">d2f0b6dea592: Loading layer  3.584kB/3.584kB</span><br><span class="line">Loaded image: nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看本地镜像</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              f68d6e55e065        2 days ago          109MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法2</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker loads -i /data/nginx.tar.gz </span></span><br></pre></td></tr></table></figure>

<h4 id="镜像删除-docker-rmi"><a href="#镜像删除-docker-rmi" class="headerlink" title="镜像删除 docker rmi"></a>镜像删除 docker rmi</h4><p>本地仓库中旧版本的镜像要记得及时删除，否则镜像迟早空间占满，一般生产中删除镜像时是基于镜像TAG号来删除的，镜像在制作时在tag号中会带有镜像制作时的时间，将所标注的时间取出，然后就能根据时间将某事件点之前的镜像全部删除了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前镜像</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              f68d6e55e065        2 days ago          109MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除nginx镜像</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker rmi nginx     #参数可以是镜像名也可以是镜像的ID</span></span><br><span class="line">Untagged: nginx:latest</span><br><span class="line">Deleted: sha256:f68d6e55e06520f152403e6d96d0de5c9790a89b4cfc99f4626f68146fa1dbdc</span><br><span class="line">Deleted: sha256:1b0c768769e2bb66e74a205317ba531473781a78b77feef8ea6fd7be7f4044e1</span><br><span class="line">Deleted: sha256:34138fb60020a180e512485fb96fd42e286fb0d86cf1fa2506b11ff6b945b03f</span><br><span class="line">Deleted: sha256:cf5b3c6798f77b1f78bf4e297b27cfa5b6caa982f04caeb5de7d13c255fd7a1e</span><br><span class="line"></span><br><span class="line"><span class="comment">#再次查看本地镜像</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br></pre></td></tr></table></figure>

<h3 id="容器操作的基础命令"><a href="#容器操作的基础命令" class="headerlink" title="容器操作的基础命令"></a>容器操作的基础命令</h3><h4 id="启动容器-docker-run"><a href="#启动容器-docker-run" class="headerlink" title="启动容器 docker run"></a>启动容器 docker run</h4><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>

<p>1.从镜像启动一个容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动一个容器并直接进入容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker run -it centos bash</span></span><br><span class="line">[root@36d4d4f48ad1 /]<span class="comment"># </span></span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line">[root@36d4d4f48ad1 /]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>2.一般将容器启动后都是将其运行在后台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用-d选项将容器运行在后台</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker run -d -it centos </span></span><br><span class="line">e9440765b19c81bfada4d8f4b26dfc2ec61c40ef79e0573a9267ccbf3ee060ad</span><br><span class="line">root@mylinuxops:~<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>3.自定义容器名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行容器时使用--name指定容器的名称</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker run -it --name nginx-test nginx</span></span><br></pre></td></tr></table></figure>

<p>4.创建并进入容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在创建容器时需要使用 -i指定进入容器 -t指定tty，在最后还要加上具体的命令</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker run -it --name nginx-test-1 nginx /bin/bash</span></span><br><span class="line">root@26dccaaabe88:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 退出后容器将退出</span></span><br></pre></td></tr></table></figure>

<p>5.容器单次运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 制作镜像和测试的环境下使用，进入容器执行操作后退出即将容器删除</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker run -it --name nginx-rm nginx /bin/bash</span></span><br><span class="line">root@7cc02218c515:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps -f name=nginx-rm</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure>

<h4 id="查看所有容器的进程-docker-ps"><a href="#查看所有容器的进程-docker-ps" class="headerlink" title="查看所有容器的进程  docker ps"></a>查看所有容器的进程  docker ps</h4><p>1.查看启动的容器的进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看启动的容器的进程</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">e9440765b19c        centos              <span class="string">&quot;/bin/bash&quot;</span>         11 minutes ago      Up 11 minutes                           nervous_fermi</span><br></pre></td></tr></table></figure>

<p>2.查看所有容器的进程，包括未启动的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">e9440765b19c        centos              <span class="string">&quot;/bin/bash&quot;</span>         20 minutes ago      Up 20 minutes                                      nervous_fermi</span><br><span class="line">36d4d4f48ad1        centos              <span class="string">&quot;bash&quot;</span>              About an hour ago   Exited (0) About an hour ago                       infallible_carson</span><br><span class="line"><span class="comment">#36d4d4f48ad1 此为已经关闭的容器进程</span></span><br></pre></td></tr></table></figure>

<h4 id="删除运行中的容器-docker-rm"><a href="#删除运行中的容器-docker-rm" class="headerlink" title="删除运行中的容器  docker rm"></a>删除运行中的容器  docker rm</h4><p>即使容器正在运行也会被删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前所有容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps -a     </span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">e9440765b19c        centos              <span class="string">&quot;/bin/bash&quot;</span>         20 minutes ago      Up 20 minutes                                      nervous_fermi</span><br><span class="line">36d4d4f48ad1        centos              <span class="string">&quot;bash&quot;</span>              About an hour ago   Exited (0) About an hour ago                       infallible_carson</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器id为36d4d4f48ad1的容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker rm -f 36d4d4f48ad1  </span></span><br><span class="line">36d4d4f48ad1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看所有容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">e9440765b19c        centos              <span class="string">&quot;/bin/bash&quot;</span>         34 minutes ago      Up 34 minutes                           nervous_fermi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 36d4d4f48ad1 容器已经被关闭</span></span><br></pre></td></tr></table></figure>

<p>2.批量删除已经退出的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前所有的容器进程，可以看到当前有许多已经退出的容器，逐个删除太麻烦可以一次性将多个退出的容器退出</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">4af198cb73a9        centos              <span class="string">&quot;/bin/bash&quot;</span>         4 minutes ago       Exited (0) 4 minutes ago                       fervent_lumiere</span><br><span class="line">1fd78f369bdc        centos              <span class="string">&quot;/bin/bash&quot;</span>         4 minutes ago       Exited (0) 4 minutes ago                       relaxed_perlman</span><br><span class="line">a0bf4772d01b        centos              <span class="string">&quot;/bin/bash&quot;</span>         5 minutes ago       Exited (0) 5 minutes ago                       boring_yonath</span><br><span class="line">e9440765b19c        centos              <span class="string">&quot;/bin/bash&quot;</span>         42 minutes ago      Up 42 minutes                                  nervous_fermi</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用ps查找出所有状态为exited的容器然后将其关闭，使用-v表示将其容器内的数据一起删除</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker rm -fv `docker ps -qf status=exited`</span></span><br><span class="line">4af198cb73a9</span><br><span class="line">1fd78f369bdc</span><br><span class="line">a0bf4772d01b</span><br></pre></td></tr></table></figure>

<p>3.删除所有容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 产看当前的所有容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">03087c03827a        centos              <span class="string">&quot;/bin/bash&quot;</span>         10 seconds ago      Exited (0) 9 seconds ago                        keen_meitner</span><br><span class="line">6522e6efb71e        centos              <span class="string">&quot;/bin/bash&quot;</span>         12 seconds ago      Exited (0) 10 seconds ago                       ecstatic_johnson</span><br><span class="line">1c36d3d550f1        centos              <span class="string">&quot;/bin/bash&quot;</span>         13 seconds ago      Exited (0) 12 seconds ago                       keen_montalcini</span><br><span class="line">e9440765b19c        centos              <span class="string">&quot;/bin/bash&quot;</span>         About an hour ago   Up About an hour                                nervous_fermi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找出所有的容器的id然后将其删除</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker rm -fv `docker ps -aq`</span></span><br><span class="line">03087c03827a</span><br><span class="line">6522e6efb71e</span><br><span class="line">1c36d3d550f1</span><br><span class="line">e9440765b19c</span><br></pre></td></tr></table></figure>

<h4 id="指定端口映射"><a href="#指定端口映射" class="headerlink" title="指定端口映射"></a>指定端口映射</h4><p>1.从本地端口映射到容器端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动一个nginx容器，将本机的81号端口映射到容器的80端口</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker run -d --name nginx-1 -p 81:80 nginx</span></span><br><span class="line">4b396fbe1379073a2c197263384400fd6a1f952f44ffc0135d47aa945bc8c659</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                NAMES</span><br><span class="line">4b396fbe1379        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute   0.0.0.0:81-&gt;80/tcp   nginx-1</span><br></pre></td></tr></table></figure>

<p>2.本地的IP+端口映射到容器的端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这种方法一般使用于宿主机有多个地址的情况下</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker run -d -p 192.168.27.10:82:80 --name nginx-2 nginx</span></span><br><span class="line">3e87d3dc7722bcfc3def3f7e519c8f9fb2673c70ff906d5246c5e5962528b4d8</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看nginx-2的端口映射</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps -f &quot;name=nginx-2&quot;</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES</span><br><span class="line">3e87d3dc7722        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   3 minutes ago       Up 3 minutes        192.168.27.10:82-&gt;80/tcp   nginx-2</span><br></pre></td></tr></table></figure>

<p>3.本地的IP的随机端口映射到容器的端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker run -d -p 192.168.27.10::80 --name nginx-3 nginx</span></span><br><span class="line">7066dcf8a065</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps -f &quot;name=nginx-3&quot;</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                         NAMES</span><br><span class="line">7066dcf8a065        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute   192.168.27.10:32768-&gt;80/tcp   nginx-3</span><br></pre></td></tr></table></figure>

<p>4.使用本机的ip+port/协议，默认为tcp协议</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker run -d -p192.168.27.10:53:53/udp --name nginx-4 nginx</span></span><br><span class="line">e2b5651195f42afeb3b315afd692853fcbe72c93c65b783e638f7d72167ab299</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps -f name=nginx-4</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                              NAMES</span><br><span class="line">e2b5651195f4        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   49 seconds ago      Up 48 seconds       192.168.27.10:53-&gt;53/udp, 80/tcp   nginx-4</span><br></pre></td></tr></table></figure>

<p>5.一次性映射多个端口和协议</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker run -d-p 86:80/tcp -p 443:443/tcp -p 54:54/udp --name nginx-6 nginx</span></span><br><span class="line">1d96f3555909</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps -f name=nginx-6</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                                          NAMES</span><br><span class="line">1d96f3555909        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   6 minutes ago       Up 6 minutes        0.0.0.0:54-&gt;54/udp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:86-&gt;80/tcp   nginx-6</span><br></pre></td></tr></table></figure>

<h4 id="随机映射端口"><a href="#随机映射端口" class="headerlink" title="随机映射端口"></a>随机映射端口</h4><p>使用-P分配随机端口，随机端口映射默认从32768开始向后分配端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                              NAMES</span><br><span class="line">e1b1e33b68f1        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute   0.0.0.0:32768-&gt;80/tcp              infallible_colden</span><br></pre></td></tr></table></figure>

<h4 id="查看容器已经映射的端口-docker-port"><a href="#查看容器已经映射的端口-docker-port" class="headerlink" title="查看容器已经映射的端口 docker port"></a>查看容器已经映射的端口 docker port</h4><p>使用docker port [容器名称] 查看映射的段口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker port nginx-1</span></span><br><span class="line">80/tcp -&gt; 0.0.0.0:81</span><br></pre></td></tr></table></figure>

<h4 id="容器的启动和关闭"><a href="#容器的启动和关闭" class="headerlink" title="容器的启动和关闭"></a>容器的启动和关闭</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start|stop  容器ID</span><br></pre></td></tr></table></figure>

<h3 id="进入到正在运行的容器"><a href="#进入到正在运行的容器" class="headerlink" title="进入到正在运行的容器"></a>进入到正在运行的容器</h3><h4 id="1-使用attach命令"><a href="#1-使用attach命令" class="headerlink" title="1.使用attach命令"></a>1.使用attach命令</h4><p>语法格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker attach 容器名</span><br></pre></td></tr></table></figure>

<p>attach类似于vnc，操作会在各个容器界面显示，所有使用此方式进入容器的操作都是同步显示的且exit后容器将被关闭，且使用exit退出后容器关闭，不推荐使用，需要进入到有shell环境的容器。</p>
<h4 id="2-使用exec命令"><a href="#2-使用exec命令" class="headerlink" title="2.使用exec命令"></a>2.使用exec命令</h4><p>执行单次命令与进入容器，不是很推荐此方式，虽然exit退出容器还在运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前正在运行的容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">7cc02218c515        nginx               <span class="string">&quot;/bin/bash&quot;</span>         6 minutes ago       Up 4 seconds        80/tcp              nginx-rm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用docker exec进入容器，需要带上-it选项和执行的命令</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker exec -it 7cc02218c515 /bin/bash</span></span><br><span class="line">root@7cc02218c515:/<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<h4 id="3-使用nsenter命令"><a href="#3-使用nsenter命令" class="headerlink" title="3.使用nsenter命令"></a>3.使用nsenter命令</h4><p>推荐使用此方式，nsenter命令需要通过PID进入到容器内部，不过可以使用<code>docker inspect</code>获取到容器的PID:</p>
<p>1.首先需要安装nsenter命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># apt install util-linux -y</span></span><br></pre></td></tr></table></figure>

<p>2.使用docker inspect + 容器ID 可以获取到容器的各种信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不过滤参数为列出容器所有的信息</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker inspect 7cc02218c515</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询容器相关的某个参数可以使用-f选项加上参数名，比如获取容器的ip地址</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker inspect -f &quot;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&quot; 7cc02218c515</span></span><br><span class="line">172.17.0.2          <span class="comment">#获得了容器的IP地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或取容器的PID号，最后所带的参数可以时容器名称也可以是容器ID</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker inspect -f &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; 7cc02218c515  </span></span><br><span class="line">10874       <span class="comment">#获得了容器的PID号</span></span><br></pre></td></tr></table></figure>

<p>3.使用PID号进入容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行nsenter命令进入容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># nsenter -t 10874 -m -u -i -n -p</span></span><br><span class="line">root@7cc02218c515:/<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<h4 id="4-使用脚本进入容器"><a href="#4-使用脚本进入容器" class="headerlink" title="4.使用脚本进入容器"></a>4.使用脚本进入容器</h4><p>在使用nsenter命令进入容器时，一般会将命令写入脚本然后进行调用，一般建议在每台运行k8s的主机上都存放一个脚本方便进入容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># vim docker-in.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">docker_in</span></span>()&#123;</span><br><span class="line">        NAME_ID=<span class="variable">$1</span></span><br><span class="line">        PID=$(docker inspect -f <span class="string">&quot;&#123;&#123;.State.Pid&#125;&#125;&quot;</span> <span class="variable">$&#123;NAME_ID&#125;</span>)</span><br><span class="line">        nsenter -t <span class="variable">$&#123;PID&#125;</span> -m -u -i -n -p</span><br><span class="line">&#125;</span><br><span class="line">docker_in <span class="variable">$1</span></span><br></pre></td></tr></table></figure>

<p>测试脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动一个容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker run -d --name nginx-test nginx </span></span><br><span class="line">81c2c728e5cc22f94a551778df0d61260faa1f269e86d0e36002b7ba4869f819</span><br><span class="line"><span class="comment">#执行脚本进入容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># bash docker-in.sh nginx-test</span></span><br><span class="line">root@81c2c728e5cc:/<span class="comment">#              </span></span><br></pre></td></tr></table></figure>

<h4 id="指定容器DNS"><a href="#指定容器DNS" class="headerlink" title="指定容器DNS"></a>指定容器DNS</h4><p>容器的DNS服务，默认采用宿主机的dns地址</p>
<p>一是将dns地址配置在宿主机</p>
<p>二是将参数配置在docker启动脚本里，使用–dns IP 来指定dns</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker run -it --dns 223.6.6.6 nginx bash</span></span><br><span class="line">root@813870a2f3a8:/<span class="comment"># cat /etc/resolv.conf </span></span><br><span class="line">nameserver 223.6.6.6</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker的镜像与制作</title>
    <url>/2019/06/10/Docker/docker%E7%9A%84%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/docker%E7%9A%84%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="docker镜像的内核"><a href="#docker镜像的内核" class="headerlink" title="docker镜像的内核"></a>docker镜像的内核</h3><p>从镜像大小上面来说，一个比较小的镜像只有十几MB，而内核文件需要一百多兆，因此镜像里面是没有内核的，镜像在被启动为容器后将直接使用宿主机的内核，而镜像本身则只提供相应的<code>rootfs</code>，即系统正常运行所必须的用户空间的文件系统，比如<code>/dev/</code>，<code>/proc</code>，<code>/bin</code>，<code>/etc</code>等目录，所以容器当中基本是没有<code>/boot</code>目录的，而/boot 当中保存的就是与内核相关的文件和目录。</p>
<p>由于容器启动和运行过程中是直接使用了宿主机的内核，所以没有直接调用过物理硬件，所以也不会涉及到硬件驱动，因此也用不上内核和驱动，另外有内核的那是虚拟机。</p>
<h3 id="docker镜像的制作"><a href="#docker镜像的制作" class="headerlink" title="docker镜像的制作"></a>docker镜像的制作</h3><p>Docker制作镜像类似于虚拟机的镜像制作，即按照公司的实际业务务求将需要安装的软件、相关配置等基础环境配置完成，然后将其做成镜像，最后再批量从镜像批量生产实例，这样可以极大的简化相同环境的部署工作，Docker 的镜像制作分为手动制作和自动制作(基于 <code>DockerFile</code>)。</p>
<h3 id="手动制作镜像"><a href="#手动制作镜像" class="headerlink" title="手动制作镜像"></a>手动制作镜像</h3><h4 id="手动制作基于yum安装的nginx镜像"><a href="#手动制作基于yum安装的nginx镜像" class="headerlink" title="手动制作基于yum安装的nginx镜像"></a>手动制作基于<code>yum</code>安装的<code>nginx</code>镜像</h4><p>由于是基于基础镜像制作的镜像，所以需要先下载基础镜像</p>
<p>1.下载<code>centos</code>基础镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker pull centos</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">8ba884070f61: Pull complete </span><br><span class="line">Digest: sha256:a799dd8a2ded4a83484bbae769d97655392b3f86533ceb7dd96bbac929809f3c</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:latest</span><br></pre></td></tr></table></figure>

<p>2.启动容器并进入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker run -it centos bash</span></span><br><span class="line">[root@806443b4db62 /]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>3.<code>yum</code>安装<code>nginx</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@806443b4db62 /]<span class="comment"># yum install epel-release -y</span></span><br><span class="line">[root@806443b4db62 /]<span class="comment"># yum install nginx -y</span></span><br></pre></td></tr></table></figure>

<p>4.修改配置文件，关闭后台功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@806443b4db62 /]<span class="comment"># vi /etc/nginx/nginx.conf</span></span><br><span class="line">daemon off;</span><br></pre></td></tr></table></figure>

<p>5.修改首页文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@806443b4db62 /]<span class="comment"># echo &quot;welcome to mylinuxops.com&quot; &gt; /usr/share/nginx/html/index.html </span></span><br></pre></td></tr></table></figure>

<p>6.另启一个终端，将容器提交为一个新的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行docker ps 找到刚才运行的容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">806443b4db62        centos              <span class="string">&quot;bash&quot;</span>              9 minutes ago       Up 9 minutes                            nervous_ardinghelli</span><br><span class="line"></span><br><span class="line"><span class="comment">#将容器提交为新的镜像</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker commit -a &quot;438214186@qq.com&quot; -m &quot;yum install nginx&quot; -c &quot;CMD [&quot;nginx&quot;]&quot; 806443b4db62 nginx:v1</span></span><br><span class="line">sha256:7946e43749460308e610488b73d0cae68f25fd7844d721128ff27a67bf5b9849</span><br><span class="line"></span><br><span class="line"><span class="comment">#容器提交为新镜像使用docker commit命令</span></span><br><span class="line"><span class="comment">#相关参数</span></span><br><span class="line">-a:填写镜像制作者的相关信息</span><br><span class="line">-m:填写此容器了什么改变</span><br><span class="line">-c:容器启动时在dockerfile内执行的命令</span><br><span class="line">-p:暂停镜像</span><br></pre></td></tr></table></figure>

<p>7.提交完毕后查看本地镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               v1                  7946e4374946        4 minutes ago       405MB</span><br><span class="line">centos              latest              9f38484d220f        3 months ago        202MB</span><br></pre></td></tr></table></figure>

<p>8.启动制作好的<code>nginx</code>镜像，并进行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker run -d -p 80:80 nginx:v1 nginx</span></span><br><span class="line">1db57e2236c1130dcfcbf1c93e0c9afb3e933238036667d860f177a5e65fe1b3</span><br><span class="line">root@mylinuxops:~<span class="comment"># curl 192.168.27.10</span></span><br><span class="line">welcome to mylinuxops.com</span><br></pre></td></tr></table></figure>

<h3 id="基于Dockerfile制作镜像"><a href="#基于Dockerfile制作镜像" class="headerlink" title="基于Dockerfile制作镜像"></a>基于<code>Dockerfile</code>制作镜像</h3><p><code>DockerFile</code>可以说是一种可以被<code>Docker</code>程序解释的脚本，<code>DockerFile</code>是由一条条的命令组成的，每条命令对应<code>linux</code>下面的一条命令，<code>Docker</code>程序将这些<code>DockerFile</code>指令再翻译成真正的<code>linux</code>命令，其有自己的书写方式和支持的命令，<code>Docker</code>程序读取<code>DockerFile</code>并根据指令生成<code>Docker</code>镜像，相比手动制作镜像的方式，<code>DockerFile</code>更能直观的展示镜像是怎么产生的，有了<code>DockerFile</code>，当后期有额外的需求时，只要在之前的<code>DockerFile</code>添加或者修改响应的命令即可重新生成新的<code>Docker</code>镜像，避免了重复手动制作镜像的麻烦。</p>
<h4 id="DockerFile制作yum版nginx镜像"><a href="#DockerFile制作yum版nginx镜像" class="headerlink" title="DockerFile制作yum版nginx镜像"></a><code>DockerFil</code>e制作<code>yum</code>版<code>nginx</code>镜像</h4><p>1.先下载一个基础镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker pull centos</span></span><br></pre></td></tr></table></figure>

<p>2.创建出<code>Dockerfile</code>的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># mkdir /opt/dockerfile/nginx-v1 -p</span></span><br></pre></td></tr></table></figure>

<p>3.进入目录内创建<code>Dockerfile</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># cd /opt/dockerfile/nginx-v1/</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/nginx-v1<span class="comment"># vim Dockerfile</span></span><br><span class="line"><span class="comment"># nginx images</span></span><br><span class="line">FROM centos:latest</span><br><span class="line">MAINTAINER masuri 438214186@qq.com</span><br><span class="line">RUN yum install epel-release -y &amp;&amp; yum install nginx -y</span><br><span class="line"><span class="comment"># 保存退出，进行build做测试</span></span><br></pre></td></tr></table></figure>

<p>4.进行镜像的制作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/nginx-v1<span class="comment"># docker build -t nginx-v1 .</span></span><br></pre></td></tr></table></figure>

<p>5.启动容器并进入容器验证<code>nginx</code>是否安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/nginx-v1<span class="comment"># docker run -it --rm nginx-v1</span></span><br><span class="line">[root@9ca08f4568d0 /]<span class="comment"># nginx -v       </span></span><br><span class="line">nginx version: nginx/1.12.2</span><br></pre></td></tr></table></figure>

<p>6.修改配置文件并提取出<code>nginx</code>配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@06825037a42e /]<span class="comment"># cd /etc/nginx/</span></span><br><span class="line">[root@06825037a42e nginx]<span class="comment"># vi /etc/nginx/nginx.conf     #修改配置文件</span></span><br><span class="line">daemon off;         <span class="comment">#关闭后台启动</span></span><br><span class="line">[root@06825037a42e nginx]<span class="comment"># sz nginx.conf        #提取配置文件</span></span><br><span class="line">[root@06825037a42e nginx]<span class="comment"># exit             #退出容器</span></span><br></pre></td></tr></table></figure>

<p>7.继续编写<code>dockerfile</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/nginx-v1<span class="comment"># vim Dockerfile </span></span><br><span class="line"><span class="comment"># nginx images</span></span><br><span class="line">FROM centos:latest</span><br><span class="line">MAINTAINER masuri 438214186@qq.com</span><br><span class="line">RUN yum install epel-release -y &amp;&amp; yum install nginx -y</span><br><span class="line">ADD nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">ADD code.tar.gz /usr/share/nginx/html/</span><br><span class="line">EXPOSE 80 443</span><br><span class="line">CMD [<span class="string">&quot;nginx&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>8.创建出测试首页文件，并打包为代码包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/nginx-v1<span class="comment"># echo &quot;welcome to mylinuxops.com&quot; &gt; index.html</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/nginx-v1<span class="comment"># tar czvf code.tar.gz index.html </span></span><br><span class="line">index.html</span><br></pre></td></tr></table></figure>

<p>9.将<code>nginx</code>的配置文件导入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/nginx-v1<span class="comment"># ll</span></span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  5 13:00 ./</span><br><span class="line">drwxr-xr-x 3 root root 4096 Jul  5 12:34 ../</span><br><span class="line">-rw-r--r-- 1 root root  145 Jul  5 13:00 code.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root  229 Jul  5 12:58 Dockerfile</span><br><span class="line">-rw-r--r-- 1 root root   26 Jul  5 12:59 index.html</span><br><span class="line">-rw-r--r-- 1 root root 2478 Jul  5 12:54 nginx.conf</span><br></pre></td></tr></table></figure>

<p>10.再次打包镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/nginx-v1<span class="comment"># docker build -t nginx-v1 .</span></span><br></pre></td></tr></table></figure>

<p>11.启动容器测试镜像能否使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/nginx-v1<span class="comment"># docker run --rm -d -p 80:80 nginx-v1</span></span><br><span class="line">a9fcb3d8907792f76f46f665f81370258d1d7c8c22bec5872f9ae1f44bd74ea0</span><br><span class="line">root@mylinuxops:/opt/dockerfile/nginx-v1<span class="comment"># curl 192.168.27.10</span></span><br><span class="line">welcome to mylinuxops.com</span><br></pre></td></tr></table></figure>

<p>基于yum的镜像制作完毕</p>
<h4 id="Dockerfile制作编译版本的nginx"><a href="#Dockerfile制作编译版本的nginx" class="headerlink" title="Dockerfile制作编译版本的nginx"></a><code>Dockerfile</code>制作编译版本的<code>nginx</code></h4><p>1.准备工作，下载<code>nginx</code>源码包，下载<code>centos</code>基础镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># wget http://nginx.org/download/nginx-1.17.1.tar.gz</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker pull centos</span></span><br></pre></td></tr></table></figure>

<p>2.创建<code>dockerfile</code>目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment">#  mkdir /opt/dockerfile/&#123;web/&#123;nginx,tomcat,jdk,apache&#125;,system/&#123;centos,ubuntu,redhat&#125;&#125; -pv</span></span><br><span class="line"><span class="comment">#目录结构按照业务类型或系统类型进行划分，方便后期镜像较多时进行分类</span></span><br></pre></td></tr></table></figure>

<p>3.修改下官方镜像的标签，将latest改为7.6.1810</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># cd /opt/dockerfile/system/centos/</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/system/centos<span class="comment"># docker tag centos centos:7.6.1810</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/system/centos<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              7.6.1810            9f38484d220f        3 months ago        202MB</span><br><span class="line">centos              latest              9f38484d220f        3 months ago        202MB</span><br></pre></td></tr></table></figure>

<p>4.对官方镜像进行修改，制作为带有基本命令的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/system/centos<span class="comment"># vim Dockerfile</span></span><br><span class="line"><span class="comment"># centos </span></span><br><span class="line">FROM centos:7.6.1810</span><br><span class="line">MAINTAINER masuri 438214186@qq.com</span><br><span class="line">RUN yum install vim iotop bc gcc gcc-c++ glibc glibc-devel pcre pcre-devel openssl openssl-devel zip unzip zlib-devel net-tools lrzsz tree ntpdate telnet lsof tcpdump wget libevent libevent-devel bc systemd-devel bash-completion traceroute bridge-utils -y</span><br><span class="line"><span class="comment"># 保存退出</span></span><br></pre></td></tr></table></figure>

<p>5.重新构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/system/centos<span class="comment"># docker build -t centos:tools .</span></span><br><span class="line"><span class="comment"># 重新构建后确认镜像已经生成</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/system/centos<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              tools               4c18b4654352        20 seconds ago      507MB</span><br><span class="line">centos              7.6.1810            9f38484d220f        3 months ago        202MB</span><br><span class="line">centos              latest              9f38484d220f        3 months ago        202MB</span><br></pre></td></tr></table></figure>

<p>6.基于带有基本命令的<code>centos</code>镜像编写编译安装<code>nginx</code>的<code>dockerfile</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># cd /opt/dockerfile/web/nginx/</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/nginx<span class="comment"># vim Dockerfile </span></span><br><span class="line"><span class="comment"># nginx make</span></span><br><span class="line">FROM centos:tools</span><br><span class="line">MAINTAINER masuri 438214186@qq.com</span><br><span class="line">ADD nginx.sh /usr/<span class="built_in">local</span>/src/        <span class="comment">#将编译安装脚本上传到/usr/local/src目录</span></span><br><span class="line">ADD nginx-1.17.1.tar.gz /usr/<span class="built_in">local</span>/src/     <span class="comment">#将nginx源码上传到/usr/local/src目录</span></span><br><span class="line">ADD code.tar.gz /apps/nginx/html/   <span class="comment">#将站点的源码上传到相应的目录</span></span><br><span class="line">RUN <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src &amp;&amp; /usr/<span class="built_in">local</span>/src/nginx.sh   <span class="comment">#编译安装nginx</span></span><br><span class="line">EXPOSE 80 443</span><br><span class="line">CMD [<span class="string">&quot;nginx&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>7.创建出站点源码并打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/web/nginx<span class="comment"># echo &quot;welcome to mylinuxops.com&quot; &gt; index.html</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/nginx<span class="comment"># tar -czvf code.tar.gz index.html </span></span><br></pre></td></tr></table></figure>

<p>8.编写编译安装脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/web/nginx<span class="comment"># vim nginx.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">FILE=<span class="string">&quot;nginx-1.17.1&quot;</span></span><br><span class="line">useradd -u 2000 nginx</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;FILE&#125;</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cat &lt;&lt; <span class="string">eof &gt; /usr/lib/systemd/system/nginx.service</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">PIDFile=/apps/nginx/logs/nginx.pid                   </span></span><br><span class="line"><span class="string">ExecStart=/apps/nginx/sbin/nginx -c /apps/nginx/conf/nginx.conf         </span></span><br><span class="line"><span class="string">ExecReload=/bin/kill -s HUP \$MAINPID</span></span><br><span class="line"><span class="string">ExecStop=/bin/kill -s TERM \$MAINPID</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">eof</span></span><br><span class="line"></span><br><span class="line">ln -s /apps/nginx/sbin/nginx /sbin/nginx</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/^#user.*/user nginx;/&quot;</span> /apps/nginx/conf/nginx.conf</span><br><span class="line">sed -i <span class="string">&quot;s/^#pid.*/pid \/apps\/nginx\/logs\/nginx.pid;/&quot;</span> /apps/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment">#修改配置文件前台运行</span></span><br><span class="line">sed -i <span class="string">&quot;/^worker/adaemon off;&quot;</span> /apps/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<p>9.打包镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:/opt/dockerfile/web/nginx<span class="comment"># docker build -t nginx:v1 .</span></span><br></pre></td></tr></table></figure>

<p>10.启动容器测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动容器为后台运行</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/nginx<span class="comment"># docker run -d -p 80:80 nginx:v1</span></span><br><span class="line">8ee49c974ee68f232e7aab6c8472572b77e093085931b92f60f57de6bedacac3</span><br><span class="line"><span class="comment">#测试访问容器的nginx</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/nginx<span class="comment"># curl 192.168.27.10</span></span><br><span class="line">welcome to mylinuxops.com</span><br></pre></td></tr></table></figure>

<h4 id="自定义tomcat镜像"><a href="#自定义tomcat镜像" class="headerlink" title="自定义tomcat镜像"></a>自定义tomcat镜像</h4><p>生产环境中通常一个业务一个镜像，每个业务以不同的层级进行划分，以下为分层的结构</p>
<p><img src="yw.png" alt="yw.png"></p>
<p>首先下载基础镜像<code>centos</code>，基于基础镜像安装上各种基础命令生成企业内部的基础镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载官方的基础镜像</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker pull centos</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据业务创建出相应的目录结构</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># mkdir /opt/dockerfile/&#123;web/&#123;nginx,tomcat,jdk,apache&#125;,system/&#123;centos,ubuntu,redhat&#125;&#125; -pv</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入centos目录，创建dockerfile文件</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># cd /opt/dockerfile/system/centos/</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/jdk<span class="comment"># vim /opt/dockerfile/system/centos/Dockerfile </span></span><br><span class="line"><span class="comment"># centos:base</span></span><br><span class="line">FROM centos:7.6.1810</span><br><span class="line">MAINTAINER masuri 438214186@qq.com</span><br><span class="line">RUN yum install vim iotop bc gcc gcc-c++ glibc glibc-devel pcre pcre-devel openssl openssl-devel zip unzip zlib-devel net-tools lrzsz tree ntpdate telnet lsof tcpdump wget libevent libevent-devel bc systemd-devel bash-completion traceroute bridge-utils -y &amp;&amp; useradd -u 2000 nginx &amp;&amp; useradd -u 2001 tomcat &amp;&amp; rm -rf /etc/localtime &amp;&amp; ln -sv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="comment"># 由于官方镜像的时区和宿主机的不同所以需要进行修改</span></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑build镜像的脚本</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/system/centos<span class="comment"># vim docker-build.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">docker build -t centos:base .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本进行制作基础镜像</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/system/centos<span class="comment"># bash docker-build.sh </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/system/centos<span class="comment"># docker images centos:base </span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              base                dcc236b38998        23 seconds ago      508MB</span><br></pre></td></tr></table></figure>

<p>基于企业内部的基础镜像制作出<code>jdk</code>的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换到JDK的dockerfile目录，编辑dockerfile文件</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># cd /opt/dockerfile/web/jdk/</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/jdk<span class="comment"># vim Dockerfile </span></span><br><span class="line"><span class="comment"># jdk:8u202</span></span><br><span class="line">FROM centos:base</span><br><span class="line">add jdk-8u202-linux-x64.tar.gz /usr/<span class="built_in">local</span>/src/</span><br><span class="line">run ln -sv /usr/<span class="built_in">local</span>/src/jdk1.8.0_202 /usr/<span class="built_in">local</span>/jdk</span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk</span><br><span class="line">ENV JRE_HOME <span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/:<span class="variable">$JRE_HOME</span>/lib/</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑build脚本</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/jdk<span class="comment"># vim docker_build.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">docker build -t jdk:8u202 .</span><br><span class="line"></span><br><span class="line"><span class="comment"># jdk二进制包放到dockerfile目录下</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/jdk<span class="comment"># ls</span></span><br><span class="line">docker_build.sh  Dockerfile  jdk-8u202-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包镜像</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/jdk<span class="comment"># bash docker_build.sh </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器查看java是否能够运行</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/jdk<span class="comment"># docker run -it --rm jdk:1.8.0_202 bash</span></span><br><span class="line">[root@13df38659baa /]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_202&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_202-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)</span><br><span class="line"><span class="comment"># jdk镜像打造完毕</span></span><br></pre></td></tr></table></figure>

<p>基于<code>jdk</code>镜像制作<code>tomcat</code>镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入dockerfile的tomcat目录</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># cd /opt/dockerfile/web/tomcat/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写dockerfile文件</span></span><br><span class="line"><span class="comment"># tomcat:8.5.42</span></span><br><span class="line">FROM jdk:8u202</span><br><span class="line">add apache-tomcat-8.5.42.tar.gz /usr/<span class="built_in">local</span>/src</span><br><span class="line">run ln -sv /usr/<span class="built_in">local</span>/src/apache-tomcat-8.5.42 /usr/<span class="built_in">local</span>/tomcat &amp;&amp; chown -R tomcat.tomcat /usr/<span class="built_in">local</span>/tomcat/* &amp;&amp; mkdir -pv /data/webapps &amp;&amp; chown -R tomcat.tomcat /data/webapps</span><br><span class="line">add start.sh /usr/<span class="built_in">local</span>/src</span><br><span class="line">env CATALINA_HOME /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">env PATH <span class="variable">$PATH</span>:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line">user tomcat</span><br><span class="line">cmd [<span class="string">&quot;/usr/local/src/start.sh&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写tomcat启动脚本</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/tomcat<span class="comment"># vim start.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh start</span><br><span class="line"><span class="comment">#建议启动时以一个文件作为守护进程，当服务发生假死状态时，可以进入容器重启服务。</span></span><br><span class="line">tail -f /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment">#给与脚本执行权限</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/tomcat<span class="comment"># chmod +x start.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编写build脚本</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/tomcat<span class="comment"># vim docker_build.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">docker build -t tomcat:8.5.42 .</span><br><span class="line"></span><br><span class="line"><span class="comment">#制作镜像</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/tomcat<span class="comment"># bash docker_build.sh </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动容器测试</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/web/tomcat<span class="comment"># docker run -d --rm -p 8080:8080 tomcat:8.5.42 </span></span><br><span class="line">d51b6a0470567a9dc62b8998184923b427bce7e7d058ab7d31f0de75405bf1bf</span><br></pre></td></tr></table></figure>

<p><img src="tomcat.png" alt="tomcat.png"></p>
<h4 id="haproxy镜像制作"><a href="#haproxy镜像制作" class="headerlink" title="haproxy镜像制作"></a><code>haproxy</code>镜像制作</h4><p>基于<code>centos:base</code>来制作<code>haproxy</code>镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建haproxy的目录</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># mkdir /opt/dockerfile/haproxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入haproxy目录上传haproxy源码包</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># cd /opt/dockerfile/haproxy</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/haproxy<span class="comment"># ls</span></span><br><span class="line">haproxy-1.8.17.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建dockerfile文件</span></span><br><span class="line"><span class="comment"># haproxy:1.8.17</span></span><br><span class="line">FROM centos:base</span><br><span class="line">MAINTAINER masuri 438214186@qq.com</span><br><span class="line">add haproxy-1.8.17.tar.gz /usr/<span class="built_in">local</span>/src</span><br><span class="line">run <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/haproxy-1.8.17 &amp;&amp; make  ARCH=x86_64 TARGET=linux2628 USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1  USE_CPU_AFFINITY=1  PREFIX=/usr/<span class="built_in">local</span>/haproxy &amp;&amp; make install PREFIX=/usr/<span class="built_in">local</span>/haproxy &amp;&amp; cp haproxy /usr/sbin/ &amp;&amp; mkdir  /usr/<span class="built_in">local</span>/haproxy/run</span><br><span class="line">add haproxy.cfg /etc/haproxy/haproxy.cfg</span><br><span class="line">add run_haproxy.sh /usr/bin/run_haproxy.sh</span><br><span class="line">cmd [<span class="string">&quot;/usr/bin/run_haproxy.sh&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#准备haproxy配置文件</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/haproxy<span class="comment"># ls</span></span><br><span class="line">docker_build.sh  haproxy-1.8.17.tar.gz</span><br><span class="line">Dockerfile       haproxy.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#编写启动脚本</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/haproxy<span class="comment"># vim run_haproxy.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">tail -f /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment">#为启动脚本添加执行权限</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/haproxy<span class="comment"># chmod +x run_haproxy.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编写镜像制作脚本</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/haproxy<span class="comment"># vim docker_build.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">docker build -t haproxy:1.8.17 .</span><br><span class="line"></span><br><span class="line"><span class="comment">#制作haproxy镜像</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/haproxy<span class="comment"># bash docker_build.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动容器测试</span></span><br><span class="line">root@mylinuxops:/opt/dockerfile/haproxy<span class="comment"># docker run -it -d --rm -p 9999:9999 haproxy:1.8.17 </span></span><br></pre></td></tr></table></figure>

<p><img src="haproxy.png" alt="haproxy.png"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker简介</title>
    <url>/2019/06/10/Docker/docker%E7%AE%80%E4%BB%8B/docker%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>统称来说，容器是一种工具，指的是可以装下其它物品的工具，以方便人类归纳放置物品、存储和异地运输，具体来说比如人类使用的衣柜、行李箱、背包等可以成为容器，但今天我们所说的容器是一种 IT 技术。</p>
<p>容器技术是虚拟化、云计算、大数据之后的一门新兴的并且是炙手可热的新技术，容器技术提高了硬件资源利用率、方便了企业的业务快速横向扩容、实现了业务宕机自愈功能，因此未来数年会是一个容器愈发流行的时代，这是一个对于IT行业来说非常有影响和价值的技术，而对于 IT 行业的从业者来说，熟练掌握容器技术无疑是一个很有前景的行业工作机会。<br>容器技术最早出现在freebsd叫做 jail。</p>
<h3 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h3><p>首先Docker是一个在2013年开源的应用程序并且是一个基于go语言编写是一个开源的pass服务(Platform as a Service，平台即服务的缩写)，go语言是由google开发，docker公司最早叫dotCloud后由于Docker开源后大受欢迎就将公司改名为Docker Inc，总部位于美国加州的旧金山，Docker是基于linux内核实现，Docker最早采用LXC技术(LinuX Container 的简写，LXC是Linux原生支持的容器技术，可以提供轻量级的虚拟化，可以说docker就是基于LXC发展起来的，提供LXC的高级封装，发展标准的配置方法)，而虚拟化技术 KVM(Kernelbased Virtual Machine)基于模块实现，Docker后改为自己研发并开源的runc技术运行容器。</p>
<p>Docker相比虚拟机的交付速度更快，资源消耗更低，Docker采用客户端/服务端架构，使用远程API来管理和创建Docker容器，其可以轻松的创建一个轻量级的、可移植的、自给自足的容器，docker的三大理念是 build(构建)、ship(运输)、run(运行)，Docker遵从apache 2.0协议，并通过（namespace及cgroup等）来提供容器的资源隔离与安全保障等，所以Docker容器在运行时不需要类似虚拟机（空运行的虚拟机占用物理机6-8%性能）的额外资源开销，因此可以大幅提高资源利用率，总而言之Docker是一种用了新颖方式实现的轻量级虚拟机。类似于VM但是在原理和应用上和VM的差别还是很大的，并且docker的专业叫法是应用容器(Application Container)。</p>
<h4 id="Docker的组成"><a href="#Docker的组成" class="headerlink" title="Docker的组成"></a>Docker的组成</h4><p>Docker 主机(HOST): 一个物理机或虚拟机，运行于Docker服务进程和容器</p>
<p>Docker 服务端(Server): Docker守护进程，运行docker容器。</p>
<p>Docker 客户端(Client): 客户端使用docker命令或其他功能调用Docker API</p>
<p>Docker 镜像(images): 镜像可以理解为创建实例使用的模板</p>
<p>Docker 容器(Container): 容器时从镜像生成对外提供服务的一个或一组服务。</p>
<h4 id="Docker对比虚拟机"><a href="#Docker对比虚拟机" class="headerlink" title="Docker对比虚拟机"></a>Docker对比虚拟机</h4><p>资源利用率更高: 一台物理机可以运行数百个容器，但是一般只能运行数十个虚拟机</p>
<p>开销更小: 不需要启动单独的虚拟机占用硬件资源</p>
<p>启动速度更快: 可以在数秒内完成启动。</p>
<p>使用虚拟机是为了更好的实现服务运行环境隔离，每个虚拟机都有独立的内核，虚拟化可以实现不同操作系统的虚拟机，但是通常一个虚拟机只能运行一个服务，很明显资源利用率比较低且造成不必要的性能损耗，我们创建虚拟机的目的是为了运行应用程序，比如Nginx、PHP、Tomcat等Web程序，使用虚拟机无疑带俩了一些不必要的资源开销，但是容器技术则基本减少了中间环节带来较大的性能提升。</p>
<p>但是，一个宿主机运行了N个容器，多个容器带来的一以下问题怎么解决：</p>
<ol>
<li>如何保证每个容器都有不同文件系统并且互不影响?</li>
<li>一个docker主进程内的各个容器都是其子进程，那么实现同一个主进程下不同类型的子进程，各个进程间通信能相互访问内存数据么？</li>
<li>每个容器怎么解决IP及端口的分配</li>
<li>多个容器的主机名能一样么？</li>
<li>每个容器都要不要有root用户？怎么解决账户重名问题？</li>
</ol>
<h3 id="Linux-Namespace技术："><a href="#Linux-Namespace技术：" class="headerlink" title="Linux Namespace技术："></a>Linux Namespace技术：</h3><p>namespace是Linux系统的的底层概念，在内核层实现，即有一些不同类型的命名空间被部署在内核内，各个docker容器运行在同一个dockers宿主机进程并且公用一个宿主机系统内核，各个dockers容器运行在宿主机的用户空间，每个容器都要有类似于虚拟机一样的相互隔离的运行空间，但是容器技术时在一个进程内实现循行指定服务的运行环境，并且还可以保护宿主机内核不受其他进程的干扰和影响，如文件系统空间、网络空间、进程空间等、主要通过以下技术实现容器运行空间的相互隔离：</p>
<table>
<thead>
<tr>
<th align="left">隔离类型</th>
<th align="left">功能</th>
<th align="left">系统调用参数</th>
<th align="left">内核版本</th>
</tr>
</thead>
<tbody><tr>
<td align="left">MNT Namespace(mount)</td>
<td align="left">提供磁盘挂载点和文件系统的隔离能力</td>
<td align="left">CLONE_NEWS</td>
<td align="left">Linux 2.4.19</td>
</tr>
<tr>
<td align="left">IPC Namespace(Inter-Process Communication)</td>
<td align="left">提供进程间通信的隔离能力</td>
<td align="left">CLONE_NEWIPC</td>
<td align="left">Linux 2.6.19</td>
</tr>
<tr>
<td align="left">UTS Namespace(UNIX Timesharing System)</td>
<td align="left">提供主机名隔离能力</td>
<td align="left">CLONE_NEWUTS</td>
<td align="left">Linux 2.6.19</td>
</tr>
<tr>
<td align="left">PID Namespace(Process Identification)</td>
<td align="left">提供进程隔离能力</td>
<td align="left">CLONCE_NEWPID</td>
<td align="left">Linux2.6.24</td>
</tr>
<tr>
<td align="left">Net Namespace(network)</td>
<td align="left">提供网络隔离能力</td>
<td align="left">CLONE_NEWNET</td>
<td align="left">Linux 2.6.29</td>
</tr>
<tr>
<td align="left">User Namespace(user)</td>
<td align="left">提供用户隔离能力</td>
<td align="left">CLONE_NEWUSER</td>
<td align="left">Linux 3.8</td>
</tr>
</tbody></table>
<h4 id="MNT-Namespace"><a href="#MNT-Namespace" class="headerlink" title="MNT Namespace"></a>MNT Namespace</h4><p>每个容器都要有独立的根文件系统有独立的用户空间，以实现在容器里启动服务并且使用容器的运行环境，即一个宿主机是Ubuntu的服务器，可以在里面启动一个centos运行环境的容器并且在容器里面启动一个Nginx服务，此Nginx运行时使用的运行换环境就是centos系统目录的运行环境，但是在容器里面是不能访问宿主机的资源，宿主机是使用了chroot技术把容器锁定到了一个指定的目录里面</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/lib/containerd/io.containerd.runtime.v1.linux/moby/容器ID</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>启动3个容器，查看目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker run -d --name nginx-1 -p 80:80 nginx</span></span><br><span class="line">e23cb322256dfb8dc3033bc2eb7efbad7cb594fd5440968135e6ca879025f02f</span><br><span class="line">root@mylinuxops:~<span class="comment"># docker run -d --name nginx-2 -p 81:80 nginx</span></span><br><span class="line">d4dd4830462c0ef61168728e5f6aedd2c86faf2374ae00f980b3a1f8fe061566</span><br><span class="line">root@mylinuxops:~<span class="comment"># docker run -d --name nginx-3 -p 82:80 nginx</span></span><br><span class="line">b255239688bc201fae0a4fdfff91e76f6fbe983b87d1c643edb50c41c83560b7</span><br></pre></td></tr></table></figure>

<p>进入容器，查看容器的根文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker exec -it b255239688bc bash</span></span><br><span class="line">root@b255239688bc:/<span class="comment"># ls /</span></span><br><span class="line">bin  boot  dev	etc  home  lib	lib64  media  mnt  opt	proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的系统信息</span></span><br><span class="line">root@b255239688bc:/<span class="comment"># cat /etc/os-release </span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;Debian GNU/Linux 9 (stretch)&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;Debian GNU/Linux&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;9&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;9 (stretch)&quot;</span></span><br><span class="line">ID=debian</span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.debian.org/&quot;</span></span><br><span class="line">SUPPORT_URL=<span class="string">&quot;https://www.debian.org/support&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.debian.org/&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="IPC-Namespace"><a href="#IPC-Namespace" class="headerlink" title="IPC Namespace"></a>IPC Namespace</h4><p>一个容器内的进程间通信，允许一个容器内不同进程的内存、缓存等数据访问，但是不能跨容器访问其他容器的数据。</p>
<h4 id="UTS-Namespace"><a href="#UTS-Namespace" class="headerlink" title="UTS Namespace"></a>UTS Namespace</h4><p>UTS namespace(Unix Timesharing System 包含了运行内核的名称、版本、底层体系结构类型等信息)用于系统标识，其中包含了hostname和域名domainname，它使得一个容器拥有属于自己的hostname标识，这个主机名标识独立于宿主机系统和其上的其他容器。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看宿主机内核</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># uname -a</span></span><br><span class="line">Linux mylinuxops 4.15.0-54-generic <span class="comment">#58-Ubuntu SMP Mon Jun 24 10:55:24 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"><span class="comment"># 进入容器查看内核</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker exec -it nginx-1 bash         #进入容器内部</span></span><br><span class="line">root@e23cb322256d:/<span class="comment"># uname -a               #查看内核版本</span></span><br><span class="line">Linux e23cb322256d 4.15.0-54-generic <span class="comment">#58-Ubuntu SMP Mon Jun 24 10:55:24 UTC 2019 x86_64 GNU/Linux               #容器内部的内核和宿主机的内核相同</span></span><br><span class="line">root@e23cb322256d:/<span class="comment"># hostname       #查看容器的主机名</span></span><br><span class="line">e23cb322256d                        <span class="comment">#容器有自己独立的主机名</span></span><br></pre></td></tr></table></figure>

<h4 id="PID-Namesapce"><a href="#PID-Namesapce" class="headerlink" title="PID Namesapce"></a>PID Namesapce</h4><p>Linux系统中，有一个PID为1的进程（init/systemd）是其他所有进程的父进程，在每个容器内也有一个父进程来管理其下属的子进程，那么多个容器的进程通过PID namespace进程隔离（比如PID编号重复、容器内的主机成生成与回收子进程等）</p>
<p>示例：</p>
<p>进入容器内查看容器的进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># docker pull centos</span></span><br></pre></td></tr></table></figure>

<h4 id="Net-Namespace"><a href="#Net-Namespace" class="headerlink" title="Net Namespace"></a>Net Namespace</h4><p>每个容器都类似于虚拟机一样有自己的网卡、监听端口、TCP/IP协议栈等，Docker使用network namespace启动一个vethx接口，这样你的容器将有拥有它自己的桥接IP地址，通常是docker0，而docker0实质就是Linux的虚拟网桥，网桥是在OSI七层模型的数据链路层的网络设备，通过mac地址对网络进行划分，并且在不同网络直接传递数据。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动3个容器</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># for i in &#123;1..3&#125;;do docker run -d --name nginx-$i -p 8$&#123;i&#125;:80  nginx; done</span></span><br><span class="line">b13ed304f010ed4acd23e5a3c8f89c3aaf9aa8a4d24aba1453fc41696a558040</span><br><span class="line">3c9dabd0b717f337dfa3c533845107cebc8ce29162b29146315d3139326c002b</span><br><span class="line">c0fd384a3a51ea583f9c05b4e625e3a0f45a6d03d2c741e6f6c085b0b17110c9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网卡的信息</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># ifconfig</span></span><br><span class="line">docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::42:73ff:fe76:6a7b  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 02:42:73:76:6a:7b  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 108  bytes 3024 (3.0 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 27  bytes 2226 (2.2 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.27.10  netmask 255.255.255.0  broadcast 192.168.27.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe1b:c184  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:1b:c1:84  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 182858  bytes 250983216 (250.9 MB)</span><br><span class="line">        RX errors 0  dropped 131  overruns 0  frame 0</span><br><span class="line">        TX packets 28867  bytes 2095806 (2.0 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 372  bytes 34620 (34.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 372  bytes 34620 (34.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下3张以veth开头的网卡为容器的桥接网卡</span></span><br><span class="line">vethceb8fb1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::9069:e9ff:fe78:d8ea  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 92:69:e9:78:d8:ea  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 9  bytes 726 (726.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">vethe036446: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::4:2ff:fe8f:a6d9  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 02:04:02:8f:a6:d9  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 9  bytes 726 (726.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">vethe370c87: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::9cb6:94ff:fefc:37aa  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 9e:b6:94:<span class="built_in">fc</span>:37:aa  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 11  bytes 906 (906.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看宿主机桥接设备</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># brctl show</span></span><br><span class="line">bridge name	bridge id		STP enabled	interfaces</span><br><span class="line">docker0		8000.024273766a7b	no		vethceb8fb1</span><br><span class="line">						            	vethe036446</span><br><span class="line">						            	vethe370c87</span><br><span class="line"><span class="comment"># 3张veth网卡全都桥接在了docker0这张网卡上</span></span><br></pre></td></tr></table></figure>

<p>容器向外网以及内网访问是通过IPtables规则来进行定义的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看NAT表上的规则</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># iptables -t nat -nvL</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 3 packets, 449 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    7  5655 DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 2 packets, 401 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 10 packets, 776 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 DOCKER     all  --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 10 packets, 776 bytes)         <span class="comment"># 源地址转换让容器通过宿主机地址向外网进行访问</span></span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0           </span><br><span class="line">    0     0 MASQUERADE  tcp  --  *      *       172.17.0.2           172.17.0.2           tcp dpt:80</span><br><span class="line">    0     0 MASQUERADE  tcp  --  *      *       172.17.0.3           172.17.0.3           tcp dpt:80</span><br><span class="line">    0     0 MASQUERADE  tcp  --  *      *       172.17.0.4           172.17.0.4           tcp dpt:80</span><br><span class="line"></span><br><span class="line">Chain DOCKER (2 references)             <span class="comment"># 目标地址转换，以实现外网访问宿主机内部的容器</span></span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:81 to:172.17.0.2:80</span><br><span class="line">    0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:82 to:172.17.0.3:80</span><br><span class="line">    0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:83 to:172.17.0.4:80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看filter表的规则</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># iptables -nvL</span></span><br><span class="line">Chain INPUT (policy ACCEPT 750 packets, 80690 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy DROP 0 packets, 0 bytes)                  <span class="comment">#此为转发规则</span></span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 DOCKER-USER  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 DOCKER-ISOLATION-STAGE-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 ACCEPT     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</span><br><span class="line">    0     0 DOCKER     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 ACCEPT     all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 ACCEPT     all  --  docker0 docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 499 packets, 49638 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain DOCKER (1 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 ACCEPT     tcp  --  !docker0 docker0  0.0.0.0/0            172.17.0.2           tcp dpt:80</span><br><span class="line">    0     0 ACCEPT     tcp  --  !docker0 docker0  0.0.0.0/0            172.17.0.3           tcp dpt:80</span><br><span class="line">    0     0 ACCEPT     tcp  --  !docker0 docker0  0.0.0.0/0            172.17.0.4           tcp dpt:80</span><br><span class="line"></span><br><span class="line">Chain DOCKER-ISOLATION-STAGE-1 (1 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 DOCKER-ISOLATION-STAGE-2  all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain DOCKER-ISOLATION-STAGE-2 (1 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 DROP       all  --  *      docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain DOCKER-USER (1 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br></pre></td></tr></table></figure>

<h4 id="User-Namespace"><a href="#User-Namespace" class="headerlink" title="User Namespace"></a>User Namespace</h4><p>各个容器可能会出现重名的用户和用户组名称，或重复的用户UID或者GID，那么怎么隔离各个容器内的用户空间呢？</p>
<p>User Namespace允许在各个宿主机的各个容器空间内创建相同的用户名以及相同的用户UID和GID，只是会把用户的作用范围限制在每个容器内，即A容器和B容器可以有相同的用户名称和ID账户，但是此用户的有效范围仅为当前的容器内，不能访问另外一个容器内的文件系统，即相互隔离、互不影响、永不相见。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器查看容器内部的用户</span></span><br><span class="line">root@mylinuxops:~<span class="comment"># docker exec -it nginx-1 bash</span></span><br><span class="line">root@b13ed304f010:/<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@b13ed304f010:/<span class="comment"># cat /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:100:65534::/nonexistent:/bin/<span class="literal">false</span></span><br><span class="line">nginx:x:101:101:nginx user,,,:/nonexistent:/bin/<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="Linux-Control-Groups"><a href="#Linux-Control-Groups" class="headerlink" title="Linux Control Groups"></a>Linux Control Groups</h3><p>在一个容器，如果不对其做任何资源限制，则宿主机会允许其占用无限大的内存空间，有时候会因为代码bug程序会一直盛情内存，直到把宿主机内存占完，为了避免此类为题的出现，宿主机有必要对容器进行资源分配限制，比如CPU、内存、磁盘、网络带宽等等。此外，还能够对进程进行优先级设置，以及将进程挂起和恢复等操作。</p>
<h4 id="验证系统cgroups"><a href="#验证系统cgroups" class="headerlink" title="验证系统cgroups"></a>验证系统cgroups</h4><p>Cgroups在内核层默认已经开启</p>
<p>查看Ubuntu的cgroup</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mylinuxops:~<span class="comment"># cat /boot/config-4.15.0-54-generic | grep CGROUP</span></span><br><span class="line">CONFIG_CGROUPS=y</span><br><span class="line">CONFIG_BLK_CGROUP=y</span><br><span class="line"><span class="comment"># CONFIG_DEBUG_BLK_CGROUP is not set</span></span><br><span class="line">CONFIG_CGROUP_WRITEBACK=y</span><br><span class="line">CONFIG_CGROUP_SCHED=y</span><br><span class="line">CONFIG_CGROUP_PIDS=y</span><br><span class="line">CONFIG_CGROUP_RDMA=y</span><br><span class="line">CONFIG_CGROUP_FREEZER=y</span><br><span class="line">CONFIG_CGROUP_HUGETLB=y</span><br><span class="line">CONFIG_CGROUP_DEVICE=y</span><br><span class="line">CONFIG_CGROUP_CPUACCT=y</span><br><span class="line">CONFIG_CGROUP_PERF=y</span><br><span class="line">CONFIG_CGROUP_BPF=y</span><br><span class="line"><span class="comment"># CONFIG_CGROUP_DEBUG is not set</span></span><br><span class="line">CONFIG_SOCK_CGROUP_DATA=y</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_CGROUP=m</span><br><span class="line">CONFIG_NET_CLS_CGROUP=m</span><br><span class="line">CONFIG_CGROUP_NET_PRIO=y</span><br><span class="line">CONFIG_CGROUP_NET_CLASSID=y</span><br></pre></td></tr></table></figure>

<p>查看CentOS的Cgroup</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /boot/config-3.10.0-957.el7.x86_64 | grep CGROUP</span></span><br><span class="line">CONFIG_CGROUPS=y</span><br><span class="line"><span class="comment"># CONFIG_CGROUP_DEBUG is not set</span></span><br><span class="line">CONFIG_CGROUP_FREEZER=y</span><br><span class="line">CONFIG_CGROUP_PIDS=y</span><br><span class="line">CONFIG_CGROUP_DEVICE=y</span><br><span class="line">CONFIG_CGROUP_CPUACCT=y</span><br><span class="line">CONFIG_CGROUP_HUGETLB=y</span><br><span class="line">CONFIG_CGROUP_PERF=y</span><br><span class="line">CONFIG_CGROUP_SCHED=y</span><br><span class="line">CONFIG_BLK_CGROUP=y</span><br><span class="line"><span class="comment"># CONFIG_DEBUG_BLK_CGROUP is not set</span></span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_CGROUP=m</span><br><span class="line">CONFIG_NET_CLS_CGROUP=y</span><br><span class="line">CONFIG_NETPRIO_CGROUP=y</span><br></pre></td></tr></table></figure>

<p>对比centos和ubuntu，内核较新的ubuntu支持功能的比centos更加多</p>
<h4 id="cgroups具体实现"><a href="#cgroups具体实现" class="headerlink" title="cgroups具体实现"></a>cgroups具体实现</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blkio：块设备IO限制。</span><br><span class="line">cpu：使用调度程序为cgroup任务提供cpu的访问。</span><br><span class="line">cpuacct：产生cgroup任务的cpu资源报告。</span><br><span class="line">cpuset：如果是多核心的cpu，这个子系统会为cgroup任务分配单独的cpu和内存。</span><br><span class="line">devices：允许或拒绝cgroup任务对设备的访问。</span><br><span class="line">freezer：暂停和恢复cgroup任务。</span><br><span class="line">memory：设置每个cgroup的内存限制以及产生内存资源报告。</span><br><span class="line">net_cls：标记每个网络包以供cgroup方便使用。</span><br><span class="line">ns：命名空间子系统。</span><br><span class="line">perf_event：增加了对每group的监测跟踪的能力，可以监测属于某个特定的group的所有线程以及运行在特定CPU上的线程。</span><br></pre></td></tr></table></figure>

<h4 id="查看系统cgroups"><a href="#查看系统cgroups" class="headerlink" title="查看系统cgroups"></a>查看系统cgroups</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /sys/fs/cgroup/</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 2 root root  0 Jul  4 21:49 blkio</span><br><span class="line">lrwxrwxrwx 1 root root 11 Jul  4 21:49 cpu -&gt; cpu,cpuacct</span><br><span class="line">lrwxrwxrwx 1 root root 11 Jul  4 21:49 cpuacct -&gt; cpu,cpuacct</span><br><span class="line">drwxr-xr-x 2 root root  0 Jul  4 21:49 cpu,cpuacct</span><br><span class="line">drwxr-xr-x 2 root root  0 Jul  4 21:49 cpuset</span><br><span class="line">drwxr-xr-x 2 root root  0 Jul  4 21:49 devices</span><br><span class="line">drwxr-xr-x 2 root root  0 Jul  4 21:49 freezer</span><br><span class="line">drwxr-xr-x 2 root root  0 Jul  4 21:49 hugetlb</span><br><span class="line">drwxr-xr-x 2 root root  0 Jul  4 21:49 memory</span><br><span class="line">lrwxrwxrwx 1 root root 16 Jul  4 21:49 net_cls -&gt; net_cls,net_prio</span><br><span class="line">drwxr-xr-x 2 root root  0 Jul  4 21:49 net_cls,net_prio</span><br><span class="line">lrwxrwxrwx 1 root root 16 Jul  4 21:49 net_prio -&gt; net_cls,net_prio</span><br><span class="line">drwxr-xr-x 2 root root  0 Jul  4 21:49 perf_event</span><br><span class="line">drwxr-xr-x 2 root root  0 Jul  4 21:49 pids</span><br><span class="line">drwxr-xr-x 4 root root  0 Jul  4 21:49 systemd</span><br></pre></td></tr></table></figure>

<p>有了以上的chroot、namespace、cgroups就具备了基础的容器运行环境，但是还需要有相应的容器创建与删除的管理工具、以及怎么样把容器运行起来、容器数据怎么处理、怎么进行启动与关闭等问题需要解决，于是容器管理技术出现了。</p>
<h3 id="容器管理工具"><a href="#容器管理工具" class="headerlink" title="容器管理工具"></a>容器管理工具</h3><p>目前主要是使用docker，早期有使用lxc</p>
<h4 id="lxc"><a href="#lxc" class="headerlink" title="lxc"></a>lxc</h4><p>LXC: lxc为linux container的缩写。可以提供轻量级的虚拟化，以便隔离进程和资源，官方网站：：<a href="https://linuxcontainers.org/">https://linuxcontainers.org/</a></p>
<p>lxc启动容器依赖于模板，清华模板源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/lxc-images/%EF%BC%8C%E4%BD%86%E6%98%AF%E5%81%9A%E6%A8%A1%E6%9D%BF%E7%9B%B8%E5%AF%B9%E8%BE%83%E9%9A%BE%EF%BC%8C%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%88%9B%E6%9E%84%E5%BB%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E3%80%81%E5%87%86%E5%A4%87%E5%9F%BA%E7%A1%80%E7%9B%AE%E5%BD%95%E5%8F%8A%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E7%AD%89%EF%BC%8C%E8%80%8C%E4%B8%94%E5%9C%A8%E5%A4%A7%E8%A7%84%E6%A8%A1%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E7%9A%84%E5%9C%BA%E6%99%AF%E5%BE%88%E9%9A%BE%E6%A8%AA%E5%90%91%E6%89%A9%E5%B1%95%EF%BC%8C%E5%8F%A6%E5%A4%96%E5%90%8E%E6%9C%9F%E4%BB%A3%E7%A0%81%E5%8D%87%E7%BA%A7%E4%B9%9F%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E4%BB%8E%E5%A4%B4%E6%9E%84%E5%BB%BA%E6%A8%A1%E6%9D%BF%EF%BC%8C%E5%9F%BA%E4%BA%8E%E4%BB%A5%E4%B8%8A%E7%A7%8D%E7%A7%8D%E5%8E%9F%E5%9B%A0%E4%BE%BF%E6%9C%89%E4%BA%86docker%E3%80%82">https://mirrors.tuna.tsinghua.edu.cn/help/lxc-images/，但是做模板相对较难，需要手动一步步创构建文件系统、准备基础目录及可执行程序等，而且在大规模使用容器的场景很难横向扩展，另外后期代码升级也需要重新从头构建模板，基于以上种种原因便有了docker。</a></p>
<h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><p>Docker启动一个容器也需要一个外部模板但是叫做镜像，docker的镜像可以保存在一个公共的地方共享使用，只要把镜像下载下来就可以使用，最主要的是可以在镜像基础之上做自定义配置并且可以再把其提交为一个镜像，一个镜像可以被启动为多个容器。</p>
<p>Docker的镜像是分层的，镜像底层为库文件且只读层即不能写入也不能删除数据，从镜像加载启动为一个容器后会生成一个可写层，其写入的数据会复制到容器目录，但是容器内的数据在删除容器后也会被随之删除。</p>
<h5 id="docker的优势和缺点"><a href="#docker的优势和缺点" class="headerlink" title="docker的优势和缺点"></a>docker的优势和缺点</h5><p>优势：</p>
<ol>
<li>快速部署：短时间内可以部署成百上千个应用，更快速交付到线上。</li>
<li>高效虚拟化：不需要额外的hypervisor支持，直接基于linux实现应用虚拟化，相比虚拟机大幅提高性能和效率。</li>
<li>节省开支：提高服务器利用率，降低IT支出。</li>
<li>简化配置：将运行环境打包保存至容器，使用时直接启动即可。</li>
<li>快速迁移和扩展：可夸平台运行在物理机、虚拟机、公有云等环境，良好的兼</li>
<li>容性可以方便将应用从A宿主机迁移到B宿主机，甚至是A平台迁移到B平台。</li>
</ol>
<p>缺点：</p>
<ol>
<li>隔离性：各应用之间的隔离不如虚拟机彻底。</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker网络</title>
    <url>/2019/06/10/Docker/docker%E7%BD%91%E7%BB%9C/docker%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p><code>docker</code>提供了4种网络:</p>
<ol>
<li>桥网络：docker中默认为<code>docker0 NAT</code>，可以进行改变，可以设置成隔离桥，仅主机桥，路由桥等等。</li>
<li>共享桥（联盟式网络）：每个容器是靠内核中的名称空间来映射，<code>IPC</code>, <code>NAT</code>, <code>Mount</code>, <code>PID</code>, <code>User</code>, <code>UTS</code>。这些名称空间是可以被共享的。我们可以让每个容器内的<code>Mount</code>,<code>User</code>,<code>PID</code>进行独立，让<code>IPC</code>, <code>NAT</code>, <code>UTS</code>共享。这样可以实现让其进程，用户和文件系统独立，而网络空间是同一组。两个容器内通信可以直接通过<code>IPC</code>进行通信，对外可以使用一个主机名进行访问。这样类似于回到了早期的虚拟机。</li>
<li>共享宿主机网络（host网络）：容器有自己的<code>Mount</code>, <code>User</code>, <code>Pid</code>, 但是其同时使用的宿主机的网络名称空间，也就是说其使用的是宿主机的网卡设备。当容器监听在某个套接字上，实际上则是监听在宿主机的套接字上。如容器监听在<code>*:80</code>，则意味着监听在宿主机的<code>*:80</code>上。</li>
<li>空网络（none网路）：某些容器只是用来计算数据，数据运行完毕后就删除容器，此种容器无需使用到网络。所以在运行时，不分配网路。</li>
</ol>
<p>查看当前主机上能被docker所使用的网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">a9dd9148cc49   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">5ee81e8f87a3   host      host      <span class="built_in">local</span></span><br><span class="line">9bd2843207da   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure>

<h3 id="封闭式网络实现"><a href="#封闭式网络实现" class="headerlink" title="封闭式网络实现"></a>封闭式网络实现</h3><p>创建一个封闭式网络，使用<code>--network</code>参数来指定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name tinyweb2 --rm --network none -it  masuri/myimg /bin/sh</span></span><br><span class="line">/ <span class="comment"># ifconfig -a</span></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="bridge网络实现"><a href="#bridge网络实现" class="headerlink" title="bridge网络实现"></a><code>bridge</code>网络实现</h3><p><code>docker</code>容器创建时默认就是bridge网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name tinyweb2 --rm --network bridge -it  masuri/myimg /bin/sh</span></span><br><span class="line">/ <span class="comment"># ifconfig -a</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:06</span><br><span class="line">          inet addr:172.17.0.6  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:516 (516.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure>

<p>可以使用<code>network inspect</code>命令来查看桥所关联的网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker network inspect bridge</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;a9dd9148cc499a95b78db267f1e68ec6df531a339c816812e28bbe8e8f9dcc63&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-04-27T14:11:26.720523679+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.17.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;367070d7060bc6335a62860e27e80eb165bbfd3076999cf40673acfbfa0dfcf2&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;c2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;34c51821392b836a479ad7907c351ac8d7da20088dae9a965599ba11f443317e&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.3/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;76c823f4e87295de37dc738879d7eab73a4870af4c57382b5e0f03ed8346bb49&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tinyweb2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;2e7e2c047e7ff02450a12ab78c6b0825f241937921feab0be354c672709c389d&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:06&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.6/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;7e27895e233ee44db06d2e2514903a0e91881f12e99bce2bd5629ad507225f69&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;b1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;f7f0e391fd29a1c7dda7d304859579f0651cfd0655293364bac9eee7d2dd8896&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:04&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.4/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;9876cf5e0a27ce6b85a12c83fb4cf51de5ddc74b5e6a9a7a45d873e34b45cad5&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;web&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;c5dab9abad14f83948ae6df2a8ec6624e5fbe718b873b5ef6cf27b0d0406641d&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;ce4c0ab76c8ef8e9523b1b918c635cdc286609b49199e6d96e6d9f291ec72646&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tinyweb&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;602f973090d5f2dc83464ecda71d5b11431dc86f9643adf3a7adb1057cfe9b69&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:05&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.5/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="联盟式网络实现"><a href="#联盟式网络实现" class="headerlink" title="联盟式网络实现"></a>联盟式网络实现</h3><ol>
<li>创建出第一个桥接式容器</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name tinyweb2 --rm --network bridge -it  masuri/myimg /bin/sh</span></span><br><span class="line">/ <span class="comment"># ifconfig -a</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:06</span><br><span class="line">          inet addr:172.17.0.6  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:516 (516.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">          </span><br><span class="line">/ <span class="comment"># hostname</span></span><br><span class="line">76c823f4e872</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建第二个容器，加入第一个容器的网络。需要使用<code>--netwok container:</code>前缀来指定需要加入哪个容器的网络。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name joinedtw1 -it --rm --network container:tinyweb2 masuri/myimg /bin/sh</span></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:06</span><br><span class="line">          inet addr:172.17.0.6  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:16 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:4 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:1216 (1.1 KiB)  TX bytes:280 (280.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># hostname</span></span><br><span class="line">76c823f4e872</span><br></pre></td></tr></table></figure>

<h3 id="host网络实现"><a href="#host网络实现" class="headerlink" title="host网络实现"></a><code>host</code>网络实现</h3><p>容器创建时使用<code>--network host</code>来指定使用<code>host</code>网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name tinyweb2 --network host --rm -it masuri/myimg /bin/sh</span></span><br><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">docker0   Link encap:Ethernet  HWaddr 02:42:8D:88:5D:52</span><br><span class="line">          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          inet6 addr: fe80::42:8dff:fe88:5d52/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1679 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2999 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:80438 (78.5 KiB)  TX bytes:14751045 (14.0 MiB)</span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:73:18:F5</span><br><span class="line">          inet addr:172.16.11.63  Bcast:172.16.11.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::a131:a51e:a1c9:b27e/64 Scope:Link</span><br><span class="line">          inet6 addr: fe80::a164:dff:80b1:6133/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:150390 errors:0 dropped:434 overruns:0 frame:0</span><br><span class="line">          TX packets:73539 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:340005632 (324.2 MiB)  TX bytes:7096199 (6.7 MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">veth1d95d8e Link encap:Ethernet  HWaddr C6:E2:FE:A4:78:5F</span><br><span class="line">          inet6 addr: fe80::c4e2:feff:fea4:785f/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:25 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:714 (714.0 B)  TX bytes:1820 (1.7 KiB)</span><br><span class="line"></span><br><span class="line">veth70e93df Link encap:Ethernet  HWaddr 8A:94:F3:33:83:09</span><br><span class="line">          inet6 addr: fe80::8894:f3ff:fe33:8309/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:18 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:1300 (1.2 KiB)</span><br><span class="line"></span><br><span class="line">veth96b8ea7 Link encap:Ethernet  HWaddr CA:6F:EA:B6:B0:E5</span><br><span class="line">          inet6 addr: fe80::c86f:eaff:feb6:b0e5/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:7 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:30 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:1273 (1.2 KiB)  TX bytes:2178 (2.1 KiB)</span><br><span class="line"></span><br><span class="line">vetha75e35d Link encap:Ethernet  HWaddr D6:3B:12:F4:32:F5</span><br><span class="line">          inet6 addr: fe80::d43b:12ff:fef4:32f5/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:19 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:1370 (1.3 KiB)</span><br><span class="line">          </span><br><span class="line">/ <span class="comment"># hostname</span></span><br><span class="line">CentOS8</span><br></pre></td></tr></table></figure>

<h3 id="其他网络相关参数"><a href="#其他网络相关参数" class="headerlink" title="其他网络相关参数"></a>其他网络相关参数</h3><ol>
<li>在容器运行时使用<code>--hostname</code>为容器注入主机名</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name bbox2 -it --hostname mylinuxops --rm busybox:latest /bin/sh</span></span><br><span class="line">/ <span class="comment"># hostname</span></span><br><span class="line">mylinuxops</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在容器运行时使用<code>--add-host</code>注入主机名的解析，<code>--add-host</code>选项可以重复使用多次，注入多条解析记录。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name bbox2 -it --hostname bbox.mylinuxops.com --rm --add-host gw.mylinuxops.com:172.16.11.63 --add-host js.mylinuxops.com:172.16.11.61 busybox</span></span><br><span class="line">/ <span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.16.11.63    gw.mylinuxops.com</span><br><span class="line">172.16.11.61    js.mylinuxops.com</span><br><span class="line">172.17.0.2      bbox.mylinuxops.com bbox</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>容器运行时，使用<code>--dns</code>选项向容器中注入<code>DNS</code>服务器，使用<code>--dns-search</code>注入搜索域.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name bbox2 -it --hostname bbox.mylinuxops.com --rm --add-host gw.mylinuxops.com:172.16.11.63 --dns 172.16.11.1 --dns-search mylinuxops.com busybox</span></span><br><span class="line">/ <span class="comment"># cat /etc/resolv.conf</span></span><br><span class="line">search mylinuxops.com</span><br><span class="line">nameserver 172.16.11.1</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p><code>-p</code>选项使用格式</p>
<ol>
<li><code>-p &lt;containerPort&gt;</code>: 将指定的容器端口<code>&lt;containerPort&gt;</code>映射到主机所有地址的一个动态端口</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将容器内的80端口映射到宿主机的动态端口</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name tinyweb -d -p 80 nginx:alpine</span></span><br><span class="line">8c21ba59714f85abb6f79712da783f36c05baf63befe1eb51f8d642530991f55</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将容器内的80端口映射到宿主及的动态端口49153</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                     NAMES</span><br><span class="line">8c21ba59714f   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   5 seconds ago   Up 3 seconds   0.0.0.0:49153-&gt;80/tcp, :::49153-&gt;80/tcp   tinyweb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看那宿主机上的端口</span></span><br><span class="line">[[root@CentOS8 ~]<span class="comment"># ss -tnl | grep &quot;49153&quot;</span></span><br><span class="line">LISTEN    0         20480              0.0.0.0:49153            0.0.0.0:*</span><br><span class="line">LISTEN    0         20480                 [::]:49153               [::]:*</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>-p &lt;hostPort&gt;:&lt;containerPort&gt;</code>: 将容器的端口<code>&lt;containerPort&gt;</code>映射到指定的宿主机端口<code>&lt;hostPort&gt;</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将容器内的80端口映射给宿主机的80端口</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name tinyweb -d --rm -p 80:80 nginx:alpine</span></span><br><span class="line">969db1943b12c8d828c0121cfd83b3093f5a430ce4b7ace703673a7b27b92030</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的运行状态。</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                               NAMES</span><br><span class="line">969db1943b12   nginx:alpine   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   19 seconds ago   Up 17 seconds   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   tinyweb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宿主计算上80端口已经开启</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># ss -tnl | grep 80</span></span><br><span class="line">LISTEN    0         20480              0.0.0.0:80               0.0.0.0:*</span><br><span class="line">LISTEN    0         20480                 [::]:80                  [::]:*</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>-p &lt;ip&gt;::&lt;containerPort&gt;</code>: 将指定的容器端口<code>&lt;containerPort&gt;</code>映射至主机指定<code>&lt;ip&gt;</code>的动态端口</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name tinyweb --rm -d -p 172.16.11.63::80 nginx:alpine</span></span><br><span class="line">3665182641d7b8ac622269bc37c3d7c7116c2e4137d684bfbcf4d399d973ea09</span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker port tinyweb</span></span><br><span class="line">80/tcp -&gt; 172.16.11.63:49153</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>-p &lt;ip&gt;:&lt;hostPort&gt;:&lt;containerPort&gt;</code>: 将指定的容器端口<code>&lt;containerPort&gt;</code>映射至主机指定<code>&lt;ip&gt;</code>的端口<code>&lt;hostPort&gt;</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name tinyweb -d --rm -p 172.16.11.63:80:80 nginx:alpine</span></span><br><span class="line">6daeebc3bb1fe22d1cc163786a306b0ca618643814800d01a14a17ec92f5af77</span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker port tinyweb</span></span><br><span class="line">80/tcp -&gt; 172.16.11.63:80</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="docker自建网络"><a href="#docker自建网络" class="headerlink" title="docker自建网络"></a><code>docker</code>自建网络</h3><ol>
<li>使用<code>docker network create</code>创建出网络</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker network create --subnet 10.10.0.0/24 --gateway 10.10.0.1 mybr0</span></span><br><span class="line">52d5f694537615125d090970bc87e5fea017088e9b5fabce2c9d786946db1dfb</span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">a9dd9148cc49   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">5ee81e8f87a3   host      host      <span class="built_in">local</span></span><br><span class="line">52d5f6945376   mybr0     bridge    <span class="built_in">local</span></span><br><span class="line">9bd2843207da   none      null      <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># br开头的网卡为新建的网络</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># ifconfig</span></span><br><span class="line">br-52d5f6945376: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.10.0.1  netmask 255.255.255.0  broadcast 10.10.0.255</span><br><span class="line">        ether 02:42:b6:02:c0:e7  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更改网卡名</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker run --name tinyweb --rm --network mybr0 -it nginx:alpine /bin/sh</span></span><br><span class="line">557b49eef280d80ea4be651e5b2cfeeeff711ea60e39f21ebaeffc3c45c5d506</span><br><span class="line"><span class="comment"># 查看IP</span></span><br><span class="line">/bin/sh: ifocnfig: not found</span><br><span class="line">/ <span class="comment"># ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">52: eth0@if52: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UP</span><br><span class="line">    link/ether 02:42:0a:0a:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.10.0.2/24 brd 10.10.0.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将<code>tinyweb</code>这个容器连接到默认的桥接网络</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># docker network connect bridge tinyweb</span></span><br><span class="line"><span class="comment"># 拆除网络需要使用 docker network disconnect命令</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># docker exec tinyweb ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">52: eth0@if53: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UP</span><br><span class="line">    link/ether 02:42:0a:0a:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.10.0.2/24 brd 10.10.0.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="comment"># 默认桥接网络也加入容器内了</span></span><br><span class="line">54: eth1@if55: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UP</span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<h3 id="修改docker默认的docker0桥"><a href="#修改docker默认的docker0桥" class="headerlink" title="修改docker默认的docker0桥"></a>修改<code>docker</code>默认的<code>docker0</code>桥</h3><p>修改<code>docker</code>默认的<code>docker0</code>桥需要修改其配置文件：<code>/etc/docker/daemon.json</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在配置文件中加入一行bip来指定docker0桥网关地址</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://gy97ij1m.mirror.aliyuncs.com&quot;</span>,<span class="string">&quot;https://registry.docker-cn.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;bip&quot;</span>: <span class="string">&quot;172.31.0.1/16&quot;</span>   <span class="comment"># 新的docker0桥地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[root@CentOS8 ~]<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<p>重启后查看<code>docker0</code>地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS8 ~]<span class="comment"># ifconfig docker0</span></span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.31.0.1  netmask 255.255.0.0  broadcast 172.31.255.255</span><br><span class="line">        inet6 fe80::42:8dff:fe88:5d52  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 02:42:8d:88:5d:52  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 1686  bytes 81613 (79.7 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 3026  bytes 14753301 (14.0 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker的镜像管理</title>
    <url>/2019/06/10/Docker/docker%E9%95%9C%E5%83%8F/docker%E7%9A%84%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p><code>Docker</code>镜像含有启动容器所需要的文件系统及所需要的内容，因此镜像主要用于创建并启动<code>docker</code>容器。</p>
<p><code>Docker</code>镜像含里面是一层层文件系统，叫做<code>UnionFS</code>（联合文件系统），联合文件系统，可以将几层目录挂载到一起，形成一个虚拟文件系统，虚拟文件系统的目录结构就像普通<code>linux</code>的目录结构一样，<code>docker</code>通过这些文件再加上宿主机的内核提供了一个<code>linux</code>的虚拟环境，每一层文件系统我们叫做一层<code>layer</code>，联合文件系统可以对每一层文件系统设置三种权限，只读（<code>readonly</code>）、读写（<code>readwrite</code>）和写出（<code>whiteout-able</code>），但是<code>docker</code>镜像中每一层文件系统都是只读的，构建镜像的时候，从一个最基本的操作系统开始,每个构建的操作都相当于做一层的修改，增加了一层文件系统，一层层往上叠加,上层的修改会覆盖底层该位置的可见性，这也很容易理解，就像上层把底层遮住了一样，当使用镜像的时候，我们只会看到一个完全的整体，不知道里面有几层也不需要知道里面有几层，结构如下：</p>
<p><img src="images1.png" alt="images1.png"></p>
<p>一个典型的<code>Linux</code>文件系统由<code>bootfs</code>和<code>rootfs</code>两部分组成，<code>bootfs</code>(<code>bootfilesystem</code>)主要包含<code>bootloader</code>和<code>kernel</code>，<code>bootloader</code>主要用于引导加载<code>kernel</code>，当<code>kernel</code>被加载到内存中后<code>bootfs</code>会被<code>umount</code>掉，<code>rootfs</code>(<code>rootfilesystem</code>)包含的就是典型<code>Linux</code>系统中的<code>/dev</code>，<code>/proc</code>，<code>/bin</code>，<code>/etc</code>等标准目录和文件，下图就是<code>dockerimage</code>中最基础的两层结构，不同的<code>linux</code>发行版（如<code>ubuntu</code>和<code>CentOS</code>)在<code>rootfs</code>这一层会有所区别。</p>
<p>但是对于<code>docker</code>镜像通常都比较小，官方提供的<code>centos</code>基础镜像在200MB左右，一些其他版本的镜像甚至只有几MB，<code>docker</code>镜像直接调用宿主机的内核，镜像中只提供<code>rootfs</code>，也就是只需要包括最基本的命令、工具和程序库就可以了，比如<code>alpine</code>镜像，在5M左右。</p>
<p>下图就是有两个不同的镜像在一个宿主机内核上实现不同的<code>rootfs</code>。</p>
<p><img src="images2.png" alt="images2.png"></p>
<p>容器、镜像父镜像：</p>
<p><img src="images3.png" alt="images3.png"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo头部规范</title>
    <url>/2019/01/20/Hexo/Hexo%E5%A4%B4%E9%83%A8%E8%A7%84%E8%8C%83/Hexo%E5%A4%B4%E9%83%A8%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: apache虚拟主机</span><br><span class="line">date: 2019-04-20 6:25:02</span><br><span class="line">top_img: /images/httpd.jpg</span><br><span class="line">cover: /images/httpd.jpg</span><br><span class="line">categories: Apache</span><br><span class="line">tags: Apache</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo安装+Butterfly配置</title>
    <url>/2019/01/20/Hexo/Hexo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/Hexo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>1.安装Node.js v17.x:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Using Ubuntu</span></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_17.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using Debian, as root</span></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_17.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

<p>2.安装Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h3 id="安装配置Butterfly"><a href="#安装配置Butterfly" class="headerlink" title="安装配置Butterfly"></a>安装配置Butterfly</h3><p>1.在<code>hexo</code>根目录下克隆项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>

<p>2.应用主题</p>
<p>修改Hexo根目录下的<code>_config.yml</code>，把主题改为<code>butterfly</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure>

<p>3.安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装pug、stylus及本地搜索引擎插件</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus hexo-generator-searchdb hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>4.升级建议</p>
<p>在<code>hexo</code>的根目录创建一个文件<code>_config.butterfly.yml</code>，並把主题目录的<code>_config.yml</code>內容复制到<code>_config.butterfly.yml</code>去。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在hexo的更目录下复制文件</span></span><br><span class="line"> cp themes/butterfly/_config.yml _config.butterfly.yml</span><br></pre></td></tr></table></figure>

<p>Hexo会自动合并主题中的<code>_config.yml</code>和<code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度交高。</p>
<p>5.配置butterfly</p>
<p>修改<code>_config.butterfly.yml</code>里面的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启菜单栏相关选项</span></span><br><span class="line">menu:</span><br><span class="line">   Home: / || fas fa-home</span><br><span class="line">   Archives: /archives/ || fas fa-archive</span><br><span class="line">   Tags: /tags/ || fas fa-tags</span><br><span class="line">   Categories: /categories/ || fas fa-folder-open</span><br><span class="line">  <span class="comment"># List||fas fa-list:</span></span><br><span class="line">  <span class="comment">#   Music: /music/ || fas fa-music</span></span><br><span class="line">  <span class="comment">#   Movie: /movies/ || fas fa-video</span></span><br><span class="line">  <span class="comment"># Link: /link/ || fas fa-link</span></span><br><span class="line">   About: /about/ || fas fa-heart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启本地搜索</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Favicon（網站圖標）</span></span><br><span class="line">favicon: /img/favicon.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># Avatar (頭像)</span></span><br><span class="line">avatar:</span><br><span class="line">  img: https://i.loli.net/2021/02/24/5O1day2nriDzjSu.png</span><br><span class="line">  effect: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable all banner image</span></span><br><span class="line">disable_top_img: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line">index_img: https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/index.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line">default_top_img: https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/index.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of archive page</span></span><br><span class="line">archive_img: https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/index.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of tag page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># note: tag page, not tags page (子標籤頁面的 top_img)</span></span><br><span class="line">tag_img:</span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of tag page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - tag name: xxxxx</span></span><br><span class="line">tag_per_img:</span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of category page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># note: category page, not categories page (子分類頁面的 top_img)</span></span><br><span class="line">category_img: https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/index.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of category page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - category name: xxxxx</span></span><br><span class="line">category_per_img:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="部署Hexo到git"><a href="#部署Hexo到git" class="headerlink" title="部署Hexo到git"></a>部署Hexo到git</h3><p>1.在github上创建一个项目</p>
<p><img src="img1.png" alt="img1.png"></p>
<p>2.配置hexo主配置文件<code>_config.yml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在配置文件最后段找到deploy配置段，修改如下</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  repo: git@github.com:Masuri-Y/Masuri-Y.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>3.配置git信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置Git的user name和email</span></span><br><span class="line">git config --global user.email <span class="string">&quot;438214186@qq.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Masuri-Y&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成密钥</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;438214186@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将公钥添加到github</span></span><br></pre></td></tr></table></figure>

<p>4.将Hexo部署到github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在hexo根目录下执行以下命令</span></span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>部署完毕后就可以访问地址为:<a href="https://masuri-y.github.io/">https:\\Masuri-Y.github.io</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes基础</title>
    <url>/2021/07/03/Kubernetes/01Kubernetes%E5%9F%BA%E7%A1%80/01Kubernetes%E5%9F%BA%E7%A1%80/Kubernetes%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>k8s是将一组主机上的内存、cpu、硬盘等资源，整合为一个大的资源池。当需要运行容器时，用户不需要指定其运行再哪个主机上，只需要向k8s的接口提出请求，然后由k8s自行调度运行到一个最适合其运行的宿主机上作为容器运行起来。用户无需再面对一个个独立的主机，只需要向k8s资源池的接口提出请求即可。</p>
<p>若用户需要运行两个容器，且2个容器间需要通信，k8s则会抽象出一些组件。当一个服务容器启动时，会注册到k8s的注册中心，当第二个容器启动后要访问第一个容器时，先向k8s的注册中心查询服务，而后直接拿着查询获得的地址直接请求即可。</p>
<p>当所创建的实例无法承载客户端的请求时，传统的做法是，加服务器部署服务接入负载均均衡。而k8s则为自动扩展一个容器，然后自动加入到负载均衡中。当然可以手动介入。</p>
<p>k8s的自动扩容也可以为纯自动模式的，只需要在各个容器前加一个控制器用来监控控制器下面容器的数量要完全符合用户的请求。我们还可以在此控制器之前再加一层控制器，此二层控制器接入到监控系统上去，监控系统用来监控容器的CPU、内存等容量，当发现容器内资源不足时，自动指挥其一级控制器进行添加实例。当容器的CPU和内存使用率低于一定指标后，k8s会自动删除一些实例。从而实现自动扩缩容。</p>
<h3 id="控制器相关"><a href="#控制器相关" class="headerlink" title="控制器相关"></a>控制器相关</h3><p>在k8s上有2种控制器，<code>controller</code>和<code>operator</code>。</p>
<ul>
<li>controller：为简单的控制器</li>
<li>operator：为复杂的、能单独管理应用集群的控制器。</li>
</ul>
<h3 id="k8s运行流程"><a href="#k8s运行流程" class="headerlink" title="k8s运行流程"></a>k8s运行流程</h3><p>当需要在k8s集群上运行容器时，首先需要先创建出一个控制器，并告诉控制器需要干什么（如运行3个nginx容器），其会自己调用k8s的api，更具用户需要创建的容器的要求，如镜像、容器数等等，在k8s上创建出相应的容器。</p>
<h3 id="k8s节点的角色"><a href="#k8s节点的角色" class="headerlink" title="k8s节点的角色"></a>k8s节点的角色</h3><p>k8s的节点分为2类角色，第一类角色为Master，第二类为worker。</p>
<ul>
<li>Master Node：主要用来管理集群中的所有Worker Node，包括Master Node自己。</li>
<li>Worker Node：主要为集群中的工作节点，所有的容器均会运行在此节点上。</li>
</ul>
<h3 id="k8s的组件"><a href="#k8s的组件" class="headerlink" title="k8s的组件"></a>k8s的组件</h3><p>k8s在Master和Worker上的组件拥有各种组件。</p>
<ul>
<li><p>Master Node:</p>
</li>
<li><p>API server：用来提供API</p>
</li>
<li><p>Controller Manager：控制器管理器，负责管理各种各样的控制器。</p>
</li>
<li><p>Scheduler：调度器</p>
</li>
<li><p>Etcd：强一致的分分布式注册中心，KV存储服务器，此为Master的状态存储。</p>
</li>
<li><p>Worker Node：</p>
</li>
<li><p>kubelet：用来和master建立通信，始终watch着API server，执行Master所下发的任务。</p>
</li>
<li><p>kube-proxy：代理服务组件。</p>
</li>
<li><p>continer engine：容器引擎，docker或其他。</p>
</li>
</ul>
<p>Worker Node上的三个组件和API server建立关联关系，他们都是API server的客户端，他们不和Master的其他组件建立交互。所以API server为整体的交互中心，但是API server除了交互不做其他事情，真正做事情的是Controller Manager。</p>
<h3 id="k8s各组件的工作流程"><a href="#k8s各组件的工作流程" class="headerlink" title="k8s各组件的工作流程"></a>k8s各组件的工作流程</h3><p>当用户请求创建容器时，API server接收到请求将其写入<code>etcd</code>中，<code>Controller Manager</code>和<code>Scheduler</code>根据<code>API server</code>中保存的所有<code>worker</code>节点 的相关状态和用户所需要创建的容器的相关要求，选出最优的节点发送给<code>API server</code>。各<code>worker</code>节点 上的<code>kubelet</code> 始终watch着<code>API server</code>，当查看到有和自己节点相关的创建容器请求时，自动在自己的<code>worker</code>节点上创建出相应的容器。</p>
<p><img src="k8s%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="k8s工作流程"></p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes基础</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes基本概念</title>
    <url>/2021/07/03/Kubernetes/01Kubernetes%E5%9F%BA%E7%A1%80/02Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>k8s的最终目标就是以应用为中心，来组织和围绕如何更好的以容器化的方式运行应用。而在k8s上运行容器的做小的原子单元是由k8s抽象出的pod。</p>
<p><img src="img1.png" alt="pod"></p>
<p>Pod的含义是豌豆荚的意思，它意味着一个豆荚内存在着好几个豌豆。而在k8s中pod则代表着一组关联度非常密切的容器。如主容器为应用容器，而辅助容器为日志收集的agent之类的容器。这种辅助容器可以称之为容器的SideCar。</p>
<p>在k8s中pod内的容器组合有以下几种：</p>
<ul>
<li>SideCar</li>
<li>Adapter</li>
<li>Ambassador</li>
</ul>
<p>在k8s的容器应用中，容器之间是存在关系的。这种关系是需要由容器编排系统进行管理，这种关系分为亲密和非紧密。</p>
<ul>
<li>亲密：k8s会将其放入几个pod内实现同进退。这些容器中的Network、IPC、UTS是共享的。并且共享一组存储卷。所以主容器会挂载一组存储卷，将所有数据写入存储卷中，SideCar也挂载同一组存储卷，所以主容器所写的内容都会被sidecar所收集。容器间通信使用lo接口即可。</li>
<li>非紧密：容器各自是各自的Pod。通信需要借助网络插件。</li>
<li>pod-to-pod：网络插件实现</li>
<li>pod-to-service：ipvs、iptables规则实现</li>
<li>kube-proxy：kube-proxy会监视着apiserver上service的变动。把集群上的每一个service的定义转换为本地的ipvs或iptables规则。当service发生增删改查，kube-proxy会将其变化为本机iptables规则上的增删改查。</li>
</ul>
<h3 id="容器间的通信"><a href="#容器间的通信" class="headerlink" title="容器间的通信"></a>容器间的通信</h3><p>容器间的通信有以下两种：</p>
<ul>
<li>同一主机：两个pod地址在同一网段内，直接通过宿主机的bridge进行通信。</li>
<li>跨主机：使用叠加或者承载网络来进行通信，需要依靠网络插件来实现。</li>
</ul>
<h4 id="flannel的网络通信"><a href="#flannel的网络通信" class="headerlink" title="flannel的网络通信"></a>flannel的网络通信</h4><p>在flannel网络插件中，默认创建的pod会自动挂载到宿主机的CNI0桥上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 宿主机上的cni0网桥</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># ifconfig cni0</span></span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.0.1  netmask 255.255.255.0  broadcast 10.244.0.255</span><br><span class="line">        inet6 fe80::d8ca:b5ff:fea1:a90a  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether da:ca:b5:a1:a9:0a  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 143158  bytes 11677858 (11.6 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 154789  bytes 14020277 (14.0 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

<p>各宿主机上不但有cni0这个bridge设备，还存在一个flannel.1这个隧道网络，跨主机通信时报文会发送给bridge网络，bridge网络会通过flannel.1这个隧道网络发送给目标主机，目标主机发现为本地的地址转发给pod，从而实现pod间跨主机通信。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># ifconfig flannel.1</span></span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.0.0  netmask 255.255.255.255  broadcast 10.244.0.0</span><br><span class="line">        inet6 fe80::f0ff:71ff:fed7:612c  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether f2:ff:71:d7:61:2c  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 2944  bytes 4796228 (4.7 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1831  bytes 139032 (139.0 KB)</span><br><span class="line">        TX errors 0  dropped 34 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

<p>需要注意的是隧道报文需要封装一个额外的首部，这个首部会映像MTU，因此要设定内部容器间通信的MTU要小于1500，以便于额外封装首部时不会产生巨型帧。</p>
<h3 id="控制器和pod间关系"><a href="#控制器和pod间关系" class="headerlink" title="控制器和pod间关系"></a>控制器和pod间关系</h3><p><img src="img2.png" alt="控制器和pod关系"></p>
<p>控制器使用标签选择器关联的pod上来，我们要定义一个控制器，需要指定运行几个副本(replicas)、pod的模板(template)。</p>
<p>当控制器中所关联的某个pod宕机后，控制器会自动再创建出一个pod以确保副本数量与指定的数量相同。</p>
<p>pod的宕机会被kubelet发现，kubelet会运行control loop来监控节点上的所有pod状态是否健康，当发现有pod宕机，kubelet会报告给apiserver。而控制器则会监视着apiserver，当发现有被自己所关联的pod宕机时，控制器会重新创建一个pod，并把原来宕机的pod删除。</p>
<h3 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h3><p>k8s的API Server提供的是一个RESTful风格的接口，他把一切的资源都抽象为资源resource。</p>
<p>资源类型：Pod，Deployment，Service等等。</p>
<p>可以将每一个资源类型看作是一张表，每个表都存在一些对象。如果期望向这些表中插入数据，则需要向API Sever发送指令。调用API Server的API。</p>
<h4 id="API-server客户端"><a href="#API-server客户端" class="headerlink" title="API server客户端"></a>API server客户端</h4><p>kubectl就是KUBE API Server的专用api调用客户端。</p>
<p>kubectl向资源列表中插入数据时有3种方式：</p>
<ul>
<li>命令式命令：在命令行种使用命令及选项实现。</li>
<li>命令式配置文件：使用命令并通过选项传递一个配置文件来实现。</li>
<li>声明式配置文件：使用命令并通过选项传递配置文件来实现。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明式配置文件资源规范,yaml格式数据项。</span></span><br><span class="line">apiVersion: ...  <span class="comment"># 资源对象所属的API群组及版本</span></span><br><span class="line">kind: ...        <span class="comment"># </span></span><br><span class="line">metadata:    		 <span class="comment"># 资源对象的元数据</span></span><br><span class="line">	...</span><br><span class="line">spec:   				 <span class="comment"># 所需状态，或称为期望状态</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<h3 id="API群组及版本"><a href="#API群组及版本" class="headerlink" title="API群组及版本"></a>API群组及版本</h3><p>k8s上存在的API群组和版本信息非常多，为了方便管理k8s把许多的资源类型按照相关性分成了组，每个组可以单独演进。</p>
<h4 id="查询系统上所有的API群组版本"><a href="#查询系统上所有的API群组版本" class="headerlink" title="查询系统上所有的API群组版本"></a>查询系统上所有的API群组版本</h4><p>当前k8s上存在的所有API群组和版本可以通过命令查询获得。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl api-versions</span></span><br><span class="line">admissionregistration.k8s.io/v1</span><br><span class="line">admissionregistration.k8s.io/v1beta1</span><br><span class="line">apiextensions.k8s.io/v1</span><br><span class="line">apiextensions.k8s.io/v1beta1</span><br><span class="line">apiregistration.k8s.io/v1</span><br><span class="line">apiregistration.k8s.io/v1beta1</span><br><span class="line">apps/v1</span><br><span class="line">authentication.k8s.io/v1</span><br><span class="line">authentication.k8s.io/v1beta1</span><br><span class="line">authorization.k8s.io/v1</span><br><span class="line">authorization.k8s.io/v1beta1</span><br><span class="line">autoscaling/v1</span><br><span class="line">autoscaling/v2beta1</span><br><span class="line">autoscaling/v2beta2</span><br><span class="line">batch/v1</span><br><span class="line">batch/v1beta1</span><br><span class="line">certificates.k8s.io/v1</span><br><span class="line">certificates.k8s.io/v1beta1</span><br><span class="line">coordination.k8s.io/v1</span><br><span class="line">coordination.k8s.io/v1beta1</span><br><span class="line">discovery.k8s.io/v1</span><br><span class="line">discovery.k8s.io/v1beta1</span><br><span class="line">events.k8s.io/v1</span><br><span class="line">events.k8s.io/v1beta1</span><br><span class="line">extensions/v1beta1</span><br><span class="line">flowcontrol.apiserver.k8s.io/v1beta1</span><br><span class="line">longhorn.io/v1beta1</span><br><span class="line">networking.k8s.io/v1</span><br><span class="line">networking.k8s.io/v1beta1</span><br><span class="line">node.k8s.io/v1</span><br><span class="line">node.k8s.io/v1beta1</span><br><span class="line">policy/v1</span><br><span class="line">policy/v1beta1</span><br><span class="line">rbac.authorization.k8s.io/v1</span><br><span class="line">rbac.authorization.k8s.io/v1beta1</span><br><span class="line">scheduling.k8s.io/v1</span><br><span class="line">scheduling.k8s.io/v1beta1</span><br><span class="line">storage.k8s.io/v1</span><br><span class="line">storage.k8s.io/v1beta1</span><br><span class="line">v1</span><br></pre></td></tr></table></figure>

<p>api群组的版本分为3种：</p>
<ul>
<li>v1：稳定版</li>
<li>v1beta1：beta版本，公测。</li>
<li>alpha：内测版本，在下个版本可能被丢弃。</li>
</ul>
<h4 id="查看某个资源所在的群组"><a href="#查看某个资源所在的群组" class="headerlink" title="查看某个资源所在的群组"></a>查看某个资源所在的群组</h4><p>以下以pod为例来查看其资源的群组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用kubectl explain命令来查看相应资源的群组和配置清单的使用方式</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl explain pod</span></span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1			<span class="comment"># pod属于核心群组的v1版本</span></span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     Pod is a collection of containers that can run on a host. This resource is</span><br><span class="line">     created by clients and scheduled onto hosts.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   apiVersion   &lt;string&gt;</span><br><span class="line">     APIVersion defines the versioned schema of this representation of an</span><br><span class="line">     object. Servers should convert recognized schemas to the latest internal</span><br><span class="line">     value, and may reject unrecognized values. More info:</span><br><span class="line">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="comment">#resources</span></span><br><span class="line"></span><br><span class="line">   kind &lt;string&gt;</span><br><span class="line">     Kind is a string value representing the REST resource this object</span><br><span class="line">     represents. Servers may infer this from the endpoint the client submits</span><br><span class="line">     requests to. Cannot be updated. In CamelCase. More info:</span><br><span class="line">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="comment">#types-kinds</span></span><br><span class="line"></span><br><span class="line">   metadata     &lt;Object&gt;</span><br><span class="line">     Standard object<span class="string">&#x27;s metadata. More info:</span></span><br><span class="line"><span class="string">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   spec &lt;Object&gt;</span></span><br><span class="line"><span class="string">     Specification of the desired behavior of the pod. More info:</span></span><br><span class="line"><span class="string">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   status       &lt;Object&gt;</span></span><br><span class="line"><span class="string">     Most recently observed status of the pod. This data may not be up to date.</span></span><br><span class="line"><span class="string">     Populated by the system. Read-only. More info:</span></span><br><span class="line"><span class="string">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status</span></span><br></pre></td></tr></table></figure>

<h3 id="k8s资源类型分类"><a href="#k8s资源类型分类" class="headerlink" title="k8s资源类型分类"></a>k8s资源类型分类</h3><p>k8s上资源类型分为以下几种：</p>
<ul>
<li>工作负载型(workload)：Pod。</li>
<li>stateful：StatefulSet，Operator。</li>
<li>stateless：Deployment，DaemonSet</li>
<li>Job，Cronjob</li>
<li>服务发现和负载均衡</li>
<li>service，Ingress</li>
<li>配置和存储：</li>
<li>ConfigMap/Secret</li>
<li>PVC/PV</li>
<li>Downward API</li>
<li>名称空间级别资源</li>
<li>role，rolebinding</li>
<li>集群级别资源</li>
<li>namespace，node，clusterrole，clusterrolebinding</li>
<li>元数据类型</li>
<li>LimitRange，…</li>
</ul>
<h3 id="k8s资源作用域的级别"><a href="#k8s资源作用域的级别" class="headerlink" title="k8s资源作用域的级别"></a>k8s资源作用域的级别</h3><p>k8s资源作用域的级别分为集群级别，名称空间级别。</p>
<p>名称空间级别的资源只能创建在名称空间内部。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes基础</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群部署</title>
    <url>/2021/07/03/Kubernetes/01Kubernetes%E5%9F%BA%E7%A1%80/03Kubernetes%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/Kubernetes%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="k8s基本部署要求"><a href="#k8s基本部署要求" class="headerlink" title="k8s基本部署要求"></a>k8s基本部署要求</h3><ol>
<li>每个节点的时间必须同步。</li>
<li>要求各节点的防火墙必须关闭</li>
<li>禁用swap设备，k8s要求必须关闭swap，除非安装时强行忽略此错误</li>
<li>确保所有节点的ID为唯一的。</li>
</ol>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>一个Master节点，三个Worker节点.</p>
<table>
<thead>
<tr>
<th>HostName</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>k8s-master01</td>
<td>172.16.11.71</td>
</tr>
<tr>
<td>k8s-node01</td>
<td>172.16.11.81</td>
</tr>
<tr>
<td>k8s-node02</td>
<td>172.16.11.82</td>
</tr>
<tr>
<td>k8s-node03</td>
<td>172.16.11.83</td>
</tr>
</tbody></table>
<h3 id="部署Docker"><a href="#部署Docker" class="headerlink" title="部署Docker"></a>部署Docker</h3><p>kubeadm部署k8s要求所有主机上预先安装有docker环境。</p>
<h4 id="安装Docker服务"><a href="#安装Docker服务" class="headerlink" title="安装Docker服务"></a>安装Docker服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<h4 id="启动docker并设置为开机启动"><a href="#启动docker并设置为开机启动" class="headerlink" title="启动docker并设置为开机启动"></a>启动docker并设置为开机启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<p>注意：若IPtables规则在安装docker前没有清除，可以在安装完docker后清除规则然后重启docker服务。</p>
<h4 id="修改cgoupfs为systemd"><a href="#修改cgoupfs为systemd" class="headerlink" title="修改cgoupfs为systemd"></a>修改cgoupfs为systemd</h4><p>默认安装docker的cgroup dirve为cgroupfs ，需要将其改为systemd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; <span class="string">EOF &gt;&gt; /etc/docker/daemon.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://gy97ij1m.mirror.aliyuncs.com&quot;],</span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h4 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="部署k8s"><a href="#部署k8s" class="headerlink" title="部署k8s"></a>部署k8s</h3><p>部署k8s要求在各节点上部署以下组件：</p>
<ul>
<li>master：kube-apiserver，kube-controller-manager，kube-scheduler，etcd</li>
<li>worker：kubelet，kube-proxy，docker</li>
</ul>
<p>但是本次是以k8s官方提供的kubeadm来进行部署，kubeadm将每一个组件运行为pod的方式来部署，因此在master节点上也需要部署docker和kubelet。</p>
<p>所以每个节点都需要部署docker，kubelet，kubeadm。主节点上还需要部署kubectl。</p>
<h4 id="配置阿里云k8s源"><a href="#配置阿里云k8s源" class="headerlink" title="配置阿里云k8s源"></a>配置阿里云k8s源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - </span><br><span class="line">cat &lt;&lt;<span class="string">EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h4 id="查看所有版本的kubeadm"><a href="#查看所有版本的kubeadm" class="headerlink" title="查看所有版本的kubeadm"></a>查看所有版本的kubeadm</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-cache madison kubeadm</span><br></pre></td></tr></table></figure>

<h4 id="选择出所要安装的版本，并安装"><a href="#选择出所要安装的版本，并安装" class="headerlink" title="选择出所要安装的版本，并安装"></a>选择出所要安装的版本，并安装</h4><p>在所有节点上安装kubeadm、kubectl、kubelet</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本次安装选择1.21.1-00版本进行安装</span></span><br><span class="line">apt-get install kubeadm=1.21.2-00 kubectl=1.21.2-00 kubelet=1.21.2-00 -y</span><br><span class="line"><span class="comment"># 设置为开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure>

<h4 id="初始化控制平面节点"><a href="#初始化控制平面节点" class="headerlink" title="初始化控制平面节点"></a>初始化控制平面节点</h4><p>安装完kubeadm后需要先对初始化集群的控制平面，但是在初始化之前，需要将所有节点注册到DNS中，确保主机名能被DNS解析，此处使用hosts文件直接做解析。</p>
<h5 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; <span class="string">EOF &gt;&gt; /etc/hosts</span></span><br><span class="line"><span class="string">172.16.11.71 k8s-master01 kube-api</span></span><br><span class="line"><span class="string">172.16.11.81 k8s-node01</span></span><br><span class="line"><span class="string">172.16.11.82 k8s-node02</span></span><br><span class="line"><span class="string">172.16.11.83 k8s-node03</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h5 id="初始化控制平面"><a href="#初始化控制平面" class="headerlink" title="初始化控制平面"></a>初始化控制平面</h5><p>使用kubeadm init初始化集群。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init --apiserver-advertise-address=172.16.11.71 \</span><br><span class="line">             --control-plane-endpoint=kube-api \</span><br><span class="line">             --kubernetes-version=v1.21.2 \</span><br><span class="line">             --pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">             --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># --image-repository:为指定镜像仓库</span></span><br><span class="line"><span class="comment"># --kubernetes-version:指定k8s的版本，版本需要和kubeadm版本一致</span></span><br><span class="line"><span class="comment"># --control-plane-endpoint:用来告诉所有客户端链接控制端时使用什么主机名。</span></span><br><span class="line"><span class="comment"># --apiserver-advertise-address:指定apiserver的地址和端口，端口不指定默认为6443</span></span><br><span class="line"><span class="comment"># --pod-network-cidr:用来指定哪段网络地址用来给容器内pod的网段地址。</span></span><br><span class="line"><span class="comment"># 不同的网络地址，其默认的地址也不一样。</span></span><br><span class="line"><span class="comment"># flannl: 默认10.244.0.0/16</span></span><br><span class="line"><span class="comment"># calico: 默认192.168.0.0/16</span></span><br></pre></td></tr></table></figure>

<p>初始化集群会做很多步骤：</p>
<ol>
<li>preflight: 进行预检测，如果检测不通过操作将终止。</li>
<li>生成各种证书，每个组件相互间通信使用https进行。</li>
<li>生成kubeconfig配置文件。</li>
<li>启动kubelet。</li>
<li>创建控制平面。</li>
<li>上传配置</li>
<li>上传证书</li>
<li>生成引导令牌，以方便其他节点加入。</li>
</ol>
<h5 id="初始化控制平面后会生成以下信息"><a href="#初始化控制平面后会生成以下信息" class="headerlink" title="初始化控制平面后会生成以下信息"></a>初始化控制平面后会生成以下信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and <span class="keyword">then</span> running the following as root:</span><br><span class="line"><span class="comment"># 此为添加控制平面的命令</span></span><br><span class="line">  kubeadm join kube-api:6443 --token 4oo3c2.ur24gwcotgi9pwt8 \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:0a2facf32492adf109c3eb0d45fa03e27b080298e3ae7ee4ef7063052c8cd626 \</span><br><span class="line">        --control-plane</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"><span class="comment"># 此为添加worker节点的命令</span></span><br><span class="line">kubeadm join kube-api:6443 --token 4oo3c2.ur24gwcotgi9pwt8 \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:0a2facf32492adf109c3eb0d45fa03e27b080298e3ae7ee4ef7063052c8cd626</span><br></pre></td></tr></table></figure>

<h5 id="按照所生成的提示信息操作"><a href="#按照所生成的提示信息操作" class="headerlink" title="按照所生成的提示信息操作"></a>按照所生成的提示信息操作</h5><p>在用户家目录下创建出config</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p>安装flannel网络插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p>使用令牌将各work节点加入到k8s集群中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm join kube-api:6443 --token 4oo3c2.ur24gwcotgi9pwt8 \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:0a2facf32492adf109c3eb0d45fa03e27b080298e3ae7ee4ef7063052c8cd626</span><br></pre></td></tr></table></figure>

<p>查看各节点状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl  get nodes</span></span><br><span class="line">NAME           STATUS   ROLES                  AGE     VERSION</span><br><span class="line">k8s-master01   Ready    control-plane,master   17m     v1.21.1</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;                 2m51s   v1.21.1</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;                 2m46s   v1.21.1</span><br><span class="line">k8s-node03     Ready    &lt;none&gt;                 2m43s   v1.21.1</span><br><span class="line"><span class="comment"># 各节点STATUS状态均为Ready，k8s节点部署完毕。</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes基础</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes标签和标签选择器</title>
    <url>/2021/07/03/Kubernetes/01Kubernetes%E5%9F%BA%E7%A1%80/05Kubernetes%E6%A0%87%E7%AD%BE%E5%92%8C%E6%A0%87%E7%AD%BE%E9%80%89%E6%8B%A9%E5%99%A8/Kubernetes%E6%A0%87%E7%AD%BE%E5%92%8C%E6%A0%87%E7%AD%BE%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>标签中的键名称通常由“键前缀”和“键名”组成，其格式形如“KEY_PREFIX/KEY_NAME”，键前缀为可选部分。键名至多能使用63个字符，支持字母、数字、连接号（-）、下划线（_）、点号（.）等字符，且只能以字母或数字开头。而键前缀必须为DNS子域名格式，且不能超过253个字符。省略键前缀时，键将被视为用户的私有数据。那些由Kubernetes系统组件或第三方组件自动为用户资源添加的键必须使用键前缀，<code>kubernetes.io/</code>和<code>k8s.io/</code>前缀预留给了kubernetes的核心组件使用，例如Node对象上常用的<code>kubernetes.io/os</code>、<code>kubernetes.io/arch</code>和<code>kubernetes.io/hostname</code>等。</p>
<p>标签的键值必须不能多于63个字符，它要么为空，要么是以字母或数字开头及结尾，且中间仅使用了字母、数字、连接号（-）、下划线（_）或点号（.）等字符的数据。</p>
<h4 id="添加删除标签"><a href="#添加删除标签" class="headerlink" title="添加删除标签"></a>添加删除标签</h4><p>命令行下添加删除标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Update pod &#x27;foo&#x27; with the label &#x27;unhealthy&#x27; and the value &#x27;true&#x27;.</span></span><br><span class="line">kubectl label pods foo unhealthy=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update pod &#x27;foo&#x27; with the label &#x27;status&#x27; and the value &#x27;unhealthy&#x27;, overwriting any existing value.</span></span><br><span class="line">kubectl label --overwrite pods foo status=unhealthy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update all pods in the namespace</span></span><br><span class="line">kubectl label pods --all status=unhealthy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update a pod identified by the type and name in &quot;pod.json&quot;</span></span><br><span class="line">kubectl label -f pod.json status=unhealthy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update pod &#x27;foo&#x27; only if the resource is unchanged from version 1.</span></span><br><span class="line">kubectl label pods foo status=unhealthy --resource-version=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update pod &#x27;foo&#x27; by removing a label named &#x27;bar&#x27; if it exists.</span></span><br><span class="line"><span class="comment"># Does not require the --overwrite flag.</span></span><br><span class="line">kubectl label pods foo bar-</span><br></pre></td></tr></table></figure>

<h4 id="应用打标规范"><a href="#应用打标规范" class="headerlink" title="应用打标规范"></a>应用打标规范</h4><ul>
<li>版本标签：”release” : “stable”，”release” : “canary”，”release” : “beta”。</li>
<li>环境标签：”environment” : “dev”，”environment” : “qa”，”environment” : “prod”。</li>
<li>应用标签：”app” : “ui”，”app” : “as”，”app” : “pc”，”app” : “sc”。</li>
<li>架构层级标签：”tier” : “frontend”，”tier” : “backend”, “tier” : “cache”。</li>
<li>分区标签：”partition” : “customerA”，”partition” : “customerB”。</li>
<li>品控级别标签：”track” : “daily”，”track” : “weekly”。</li>
</ul>
<h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>标签选择器用于表达标签的查询条件或选择标准，Kubernetes API目前支持两个选择器：基于等值关系（equality-based）的标签选项器以及基于集合关系（set-based）的标签选择器。同时指定多个选择器时需要以逗号将其分隔，各选择器之间遵循“与”逻辑，即必须要满足所有条件，而且空值的选择器将不选择任何对象。</p>
<p>基于等值关系的标签选择器的可用操作符有=、==和!=三种，其中前两个意义相同，都表示“等值”关系，最后一个表示“不等”。例如env=dev和env!=prod都是基于等值关系的选择器，而tier in (frontend,backend)则是基于集合关系的选择器。</p>
<p>创建标签时：release=alpha,  表示为资源进行打标。</p>
<p>标签选择器使用：release==alpha，表示过滤有release=alpha这个标签的资源，才符合条件。</p>
<ul>
<li>KEY in (VALUE1,VALUE2,…) ：指定的键名的值存在于给定的列表中即满足条件；</li>
<li>KEY notin (VALUE1,VALUE2,…) ：指定的键名的值不存在于给定列表中即满足条件；</li>
<li>KEY：所有存在此键名标签的资源；</li>
<li>!KEY：所有不存在此键名标签的资源。</li>
</ul>
<h4 id="标签选择器使用示例"><a href="#标签选择器使用示例" class="headerlink" title="标签选择器使用示例"></a>标签选择器使用示例</h4><p>当前集群中的pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get pods --show-labels </span></span><br><span class="line">NAME                                READY   STATUS             RESTARTS   AGE     LABELS</span><br><span class="line">all-in-one                          2/2     Running            0          20h     &lt;none&gt;</span><br><span class="line">demoapp-5f7d8f9847-jrfm6            1/1     Running            0          6d21h   app=demoapp,pod-template-hash=5f7d8f9847</span><br><span class="line">demoapp-5f7d8f9847-r7h7b            1/1     Running            0          6d18h   app=demoapp,pod-template-hash=5f7d8f9847</span><br><span class="line">demoapp-5f7d8f9847-v7ft8            1/1     Running            0          6d21h   app=demoapp,pod-template-hash=5f7d8f9847</span><br><span class="line">init-container-demo                 1/1     Running            0          2d23h   &lt;none&gt;</span><br><span class="line">lifecycle-demo                      1/1     Running            0          3d1h    &lt;none&gt;</span><br><span class="line">liveness-exec-demo                  1/1     Running            2          3d19h   &lt;none&gt;</span><br><span class="line">liveness-httpget-demo               1/1     Running            1          3d6h    &lt;none&gt;</span><br><span class="line">liveness-tcpsocket-demo             1/1     Running            1410       3d7h    &lt;none&gt;</span><br><span class="line">memleak-pod                         0/1     CrashLoopBackOff   563        47h     app=memleak</span><br><span class="line">mypod                               1/1     Running            0          5d23h   app=mypod,release=canary</span><br><span class="line">mypod-host-network                  1/1     Running            0          5d      app=demoapp,release=canary</span><br><span class="line">mypod-with-env-var                  1/1     Running            0          5d1h    app=mypod,release=canary</span><br><span class="line">mypod-with-ports                    1/1     Running            0          5d      app=mypod,release=canary</span><br><span class="line">readiness-httpget-demo              0/1     Running            0          3d2h    &lt;none&gt;</span><br><span class="line">securitycontext-capabilities-demo   1/1     Running            0          4d      &lt;none&gt;</span><br><span class="line">securitycontext-runasuser-demo      1/1     Running            0          4d1h    &lt;none&gt;</span><br><span class="line">securitycontext-sysctls-demo        1/1     Running            0          3d23h   &lt;none&gt;</span><br><span class="line">sidecar-container-demo              2/2     Running            0          2d23h   &lt;none&gt;</span><br><span class="line">stress-pod                          1/1     Running            1          47h     &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>过滤出有<code>app=demoapp</code>的pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get pods -l app=demoapp --show-labels </span></span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">demoapp-5f7d8f9847-jrfm6   1/1     Running   0          6d21h   app=demoapp,pod-template-hash=5f7d8f9847</span><br><span class="line">demoapp-5f7d8f9847-r7h7b   1/1     Running   0          6d19h   app=demoapp,pod-template-hash=5f7d8f9847</span><br><span class="line">demoapp-5f7d8f9847-v7ft8   1/1     Running   0          6d21h   app=demoapp,pod-template-hash=5f7d8f9847</span><br><span class="line">mypod-host-network         1/1     Running   0          5d      app=demoapp,release=canary</span><br></pre></td></tr></table></figure>

<p>也可以使用不等来过滤pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get pods -l app!=demoapp --show-labels </span></span><br><span class="line">NAME                                READY   STATUS             RESTARTS   AGE     LABELS</span><br><span class="line">all-in-one                          2/2     Running            0          21h     &lt;none&gt;</span><br><span class="line">init-container-demo                 1/1     Running            0          3d      &lt;none&gt;</span><br><span class="line">lifecycle-demo                      1/1     Running            0          3d1h    &lt;none&gt;</span><br><span class="line">liveness-exec-demo                  1/1     Running            2          3d19h   &lt;none&gt;</span><br><span class="line">liveness-httpget-demo               1/1     Running            1          3d6h    &lt;none&gt;</span><br><span class="line">liveness-tcpsocket-demo             0/1     CrashLoopBackOff   1415       3d7h    &lt;none&gt;</span><br><span class="line">memleak-pod                         0/1     CrashLoopBackOff   566        47h     app=memleak</span><br><span class="line">mypod                               1/1     Running            0          5d23h   app=mypod,release=canary</span><br><span class="line">mypod-with-env-var                  1/1     Running            0          5d1h    app=mypod,release=canary</span><br><span class="line">mypod-with-ports                    1/1     Running            0          5d      app=mypod,release=canary</span><br><span class="line">readiness-httpget-demo              0/1     Running            0          3d2h    &lt;none&gt;</span><br><span class="line">securitycontext-capabilities-demo   1/1     Running            0          4d      &lt;none&gt;</span><br><span class="line">securitycontext-runasuser-demo      1/1     Running            0          4d1h    &lt;none&gt;</span><br><span class="line">securitycontext-sysctls-demo        1/1     Running            0          3d23h   &lt;none&gt;</span><br><span class="line">sidecar-container-demo              2/2     Running            0          2d23h   &lt;none&gt;</span><br><span class="line">stress-pod                          1/1     Running            2          2d      &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要注意此处使用不等于时，没有LABEL的pod也会被选中。</span></span><br></pre></td></tr></table></figure>

<p>选中所有没有app标签的pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get pods -l &#x27;!app&#x27; --show-labels     # 需要注意此处需要使用单引号，否则将作为shell命令执行。</span></span><br><span class="line">NAME                                READY   STATUS             RESTARTS   AGE     LABELS</span><br><span class="line">all-in-one                          2/2     Running            0          21h     &lt;none&gt;</span><br><span class="line">init-container-demo                 1/1     Running            0          3d      &lt;none&gt;</span><br><span class="line">lifecycle-demo                      1/1     Running            0          3d1h    &lt;none&gt;</span><br><span class="line">liveness-exec-demo                  1/1     Running            2          3d19h   &lt;none&gt;</span><br><span class="line">liveness-httpget-demo               1/1     Running            1          3d6h    &lt;none&gt;</span><br><span class="line">liveness-tcpsocket-demo             0/1     CrashLoopBackOff   1417       3d7h    &lt;none&gt;</span><br><span class="line">readiness-httpget-demo              0/1     Running            0          3d3h    &lt;none&gt;</span><br><span class="line">securitycontext-capabilities-demo   1/1     Running            0          4d      &lt;none&gt;</span><br><span class="line">securitycontext-runasuser-demo      1/1     Running            0          4d2h    &lt;none&gt;</span><br><span class="line">securitycontext-sysctls-demo        1/1     Running            0          3d23h   &lt;none&gt;</span><br><span class="line">sidecar-container-demo              2/2     Running            0          2d23h   &lt;none&gt;</span><br><span class="line">stress-pod                          1/1     Running            2          2d      &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>对app键的值做判断</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get pods -l &#x27;app in (mypod,demoapp)&#x27; --show-labels </span></span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">demoapp-5f7d8f9847-jrfm6   1/1     Running   0          6d21h   app=demoapp,pod-template-hash=5f7d8f9847</span><br><span class="line">demoapp-5f7d8f9847-r7h7b   1/1     Running   0          6d19h   app=demoapp,pod-template-hash=5f7d8f9847</span><br><span class="line">demoapp-5f7d8f9847-v7ft8   1/1     Running   0          6d22h   app=demoapp,pod-template-hash=5f7d8f9847</span><br><span class="line">mypod                      1/1     Running   0          5d23h   app=mypod,release=canary</span><br><span class="line">mypod-host-network         1/1     Running   0          5d      app=demoapp,release=canary</span><br><span class="line">mypod-with-env-var         1/1     Running   0          5d1h    app=mypod,release=canary</span><br><span class="line">mypod-with-ports           1/1     Running   0          5d1h    app=mypod,release=canary</span><br></pre></td></tr></table></figure>

<p>对app键做不存在判断</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get pods -l &#x27;app notin (mypod,demoapp)&#x27; --show-labels </span></span><br><span class="line">NAME                                READY   STATUS             RESTARTS   AGE     LABELS</span><br><span class="line">all-in-one                          2/2     Running            0          21h     &lt;none&gt;</span><br><span class="line">init-container-demo                 1/1     Running            0          3d      &lt;none&gt;</span><br><span class="line">lifecycle-demo                      1/1     Running            0          3d1h    &lt;none&gt;</span><br><span class="line">liveness-exec-demo                  1/1     Running            2          3d19h   &lt;none&gt;</span><br><span class="line">liveness-httpget-demo               1/1     Running            1          3d6h    &lt;none&gt;</span><br><span class="line">liveness-tcpsocket-demo             0/1     CrashLoopBackOff   1419       3d8h    &lt;none&gt;</span><br><span class="line">memleak-pod                         0/1     CrashLoopBackOff   569        2d      app=memleak</span><br><span class="line">readiness-httpget-demo              0/1     Running            0          3d3h    &lt;none&gt;</span><br><span class="line">securitycontext-capabilities-demo   1/1     Running            0          4d      &lt;none&gt;</span><br><span class="line">securitycontext-runasuser-demo      1/1     Running            0          4d2h    &lt;none&gt;</span><br><span class="line">securitycontext-sysctls-demo        1/1     Running            0          3d23h   &lt;none&gt;</span><br><span class="line">sidecar-container-demo              2/2     Running            0          3d      &lt;none&gt;</span><br><span class="line">stress-pod                          1/1     Running            2          2d      &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># app键不存在和app的值非mypod或demoapp时都会被选中</span></span><br></pre></td></tr></table></figure>

<p>对多个键值过滤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get pods -l &#x27;app=demoapp,release=canary&#x27; --show-labels </span></span><br><span class="line">NAME                 READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">mypod-host-network   1/1     Running   0          5d    app=demoapp,release=canary</span><br><span class="line"></span><br><span class="line"><span class="comment"># app和release之间为与逻辑必须要同时满足</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes基础</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群的部署和运行</title>
    <url>/2021/07/03/Kubernetes/01Kubernetes%E5%9F%BA%E7%A1%80/04Kubernetes%E9%9B%86%E7%BE%A4%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E8%BF%90%E8%A1%8C/Kubernetes%E9%9B%86%E7%BE%A4%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<p><code>kubernetes</code>集群的部署和运行模型分为3种：</p>
<h4 id="二进制程序部署"><a href="#二进制程序部署" class="headerlink" title="二进制程序部署"></a>二进制程序部署</h4><p>二进制程序：Master和Worker节点上的所有组件，都需要rpm包或者二进制程序文件手动部署管理。</p>
<h4 id="Pod模式运行"><a href="#Pod模式运行" class="headerlink" title="Pod模式运行"></a>Pod模式运行</h4><p>Pod：以Pod模式运行的kubernetes又分为2类：</p>
<ul>
<li>Static Pod：静态pod，kubelet和docker都以守护进程进行运行，而其余的组件都运行为静态Pod，而这些Pod不受控制器管理，而是由kubelet直接管理。kubelet监视着宿主机上的某个目录中应用的manifest是否存在，如果存在则将其创建起来，并实时监控，一旦发现某个pod不存在了会将应用其清单再再次将其创建出来。这种称之为静态pod。</li>
<li>Master静态pod：kube-apiserver、kube-scheduler、kube-controller-manager、cni、etcd、kube-proxy</li>
<li>Worker静态pod：kube-proxy、cni</li>
<li>Pod：除开静态pod的其他组件都由controller-manager管控而非kubelet直接管控。</li>
<li>受controller-manager管控pod：Metrics-Server、Dashboard、CoreDNS、EFK、Prometheus、Ingress-controller</li>
</ul>
<h4 id="KAAS模式运行"><a href="#KAAS模式运行" class="headerlink" title="KAAS模式运行"></a>KAAS模式运行</h4><p>kaas：将所有的Master组件和Worker组件都运行为受controller-manager管控的pod。用户只需要将需要创建k8s的Master节点数量和Worker节点数量发送给相应的API接口即可以拉起一个k8s集群。这种部署的方式一般出现在公有云供应商。费用较高。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes基础</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Namespace资源</title>
    <url>/2021/07/03/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/01Namespace%E8%B5%84%E6%BA%90/Namespace%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h3 id="获取名称空间"><a href="#获取名称空间" class="headerlink" title="获取名称空间"></a>获取名称空间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get ns</span></span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   24h</span><br><span class="line">kube-node-lease   Active   24h</span><br><span class="line">kube-public       Active   24h</span><br><span class="line">kube-system       Active   24h</span><br><span class="line">longhorn-system   Active   8h</span><br></pre></td></tr></table></figure>

<h3 id="查看名称空间的资源清单"><a href="#查看名称空间的资源清单" class="headerlink" title="查看名称空间的资源清单"></a>查看名称空间的资源清单</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get ns default -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-06-28T10:53:44Z&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/metadata.name: default</span><br><span class="line">  name: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;209&quot;</span></span><br><span class="line">  uid: 2bef0068-5658-4f23-a2a2-c3f712cdaa7b</span><br><span class="line">spec:</span><br><span class="line">  finalizers:</span><br><span class="line">  - kubernetes</span><br><span class="line">status:</span><br><span class="line">  phase: Active</span><br></pre></td></tr></table></figure>

<h3 id="创建名称空间"><a href="#创建名称空间" class="headerlink" title="创建名称空间"></a>创建名称空间</h3><h4 id="使用资源清单创建名称空间"><a href="#使用资源清单创建名称空间" class="headerlink" title="使用资源清单创建名称空间"></a>使用资源清单创建名称空间</h4><p>1.创建资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: dev</span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl apply -f namespace.yaml</span></span><br><span class="line">namespace/dev created</span><br><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl get ns</span></span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   24h</span><br><span class="line">dev               Active   4s			<span class="comment"># dev名称空间已经创建</span></span><br><span class="line">kube-node-lease   Active   24h</span><br><span class="line">kube-public       Active   24h</span><br><span class="line">kube-system       Active   24h</span><br><span class="line">longhorn-system   Active   9h</span><br></pre></td></tr></table></figure>

<h4 id="命令创建名称空间"><a href="#命令创建名称空间" class="headerlink" title="命令创建名称空间"></a>命令创建名称空间</h4><p>使用命令创建出namespace。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl create ns test</span></span><br><span class="line">namespace/<span class="built_in">test</span> created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl get ns</span></span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   24h</span><br><span class="line">dev               Active   76s</span><br><span class="line">kube-node-lease   Active   24h</span><br><span class="line">kube-public       Active   24h</span><br><span class="line">kube-system       Active   24h</span><br><span class="line">longhorn-system   Active   9h</span><br><span class="line"><span class="built_in">test</span>              Active   4s</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>NameSpace</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>CRD资源</title>
    <url>/2021/07/03/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/03CRD%E8%B5%84%E6%BA%90/CRD%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>CRD: CustomResourceDefinition。自定义资源类型。</p>
<p>k8s有个特性将以前所使用的各种IT设施进行抽象，使用k8s自身的API向外进行提供。</p>
<p>目前，扩展Kubernetes API的常用方式有3种：</p>
<ol>
<li>使用CRD（CustomResourceDefinitions）自定义资源类型</li>
<li>开发自定义的API Server并聚合至主API Server</li>
<li>定制扩展API Server源码</li>
</ol>
<p>这其中，CRD最为易用但限制颇多，自定义API Server更富于弹性但代码工作量偏大，而仅在必须添加新的核心类型才能确保专用的Kubernetes集群功能正常，才应该定制系统源码。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>CRD</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Node资源</title>
    <url>/2021/07/03/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/02Node%E8%B5%84%E6%BA%90/Node%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>Nodes资源在k8s中是集群级别的资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取集群中的Nodes信息</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME           STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k8s-master01   Ready    control-plane,master   38h   v1.21.1</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;                 38h   v1.21.1</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;                 38h   v1.21.1</span><br><span class="line">k8s-node03     Ready    &lt;none&gt;                 38h   v1.21.1</span><br></pre></td></tr></table></figure>

<p>查看指定node节点的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get nodes k8s-node01 -o wide</span></span><br><span class="line">NAME         STATUS   ROLES    AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME</span><br><span class="line">k8s-node01   Ready    &lt;none&gt;   38h   v1.21.1   172.16.11.81   &lt;none&gt;        Ubuntu 20.04.2 LTS   5.4.0-74-generic   docker://20.10.7</span><br></pre></td></tr></table></figure>

<p>查看node节点的yaml信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get nodes k8s-node01 -o yaml | kubectl-neat</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Node</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    csi.volume.kubernetes.io/nodeid: <span class="string">&#x27;&#123;&quot;driver.longhorn.io&quot;:&quot;k8s-node01&quot;&#125;&#x27;</span></span><br><span class="line">    flannel.alpha.coreos.com/backend-data: <span class="string">&#x27;&#123;&quot;VNI&quot;:1,&quot;VtepMAC&quot;:&quot;7e:c5:0b:9e:6a:5c&quot;&#125;&#x27;</span></span><br><span class="line">    flannel.alpha.coreos.com/backend-type: vxlan</span><br><span class="line">    flannel.alpha.coreos.com/kube-subnet-manager: <span class="string">&quot;true&quot;</span></span><br><span class="line">    flannel.alpha.coreos.com/public-ip: 172.16.11.81</span><br><span class="line">    kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock</span><br><span class="line">    node.alpha.kubernetes.io/ttl: <span class="string">&quot;0&quot;</span></span><br><span class="line">    volumes.kubernetes.io/controller-managed-attach-detach: <span class="string">&quot;true&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    beta.kubernetes.io/arch: amd64</span><br><span class="line">    beta.kubernetes.io/os: linux</span><br><span class="line">    kubernetes.io/arch: amd64</span><br><span class="line">    kubernetes.io/hostname: k8s-node01</span><br><span class="line">    kubernetes.io/os: linux</span><br><span class="line">  name: k8s-node01</span><br><span class="line">spec:</span><br><span class="line">  podCIDR: 10.244.1.0/24</span><br><span class="line">  podCIDRs:</span><br><span class="line">  - 10.244.1.0/24</span><br></pre></td></tr></table></figure>

<p>需要注意的是节点虽然能够以yaml的资源清单创建，但是意义不大。</p>
<p>正常情况下一个节点的健康与否是被节点控制器所管控，节点控制器主要是负责节点生命周期中的多个管理任务。</p>
<p>k8s上的每一个资源类型，必须由相应的资源控制器来进行管控。否则我们所创建的数据仅仅是存放在apiserver中的数据项，而不会真正的发挥做用。</p>
<p>一个控制器有可能控制多个资源类型，所以二者并不是一一对应的，而节点控制器是专门给用来负责节点资源的控制器，它负责节点生命周期中的多个管理任务，如节点注册到集群时分配子网，与服务器列表交互以维护节点的可用信息，监控节点的健康状态，一旦发现节点不健康则拒绝调度器调度pod到节点上。因此对于每一个节点对象，节点控制器会更具其元数据字段中的name执行健康状态检测，以验证节点是否可用。</p>
<p>在节点上kubelet是运行于节点上的代理程序，它负责从apiserver接受并执行由自身所承载的相关管理任务。并向master上报自身的运行状态，以维持集群的正常运行。</p>
<h3 id="节点租约"><a href="#节点租约" class="headerlink" title="节点租约"></a>节点租约</h3><p>在1.13前版本kubelet会每隔10秒向master发送心跳信息，以及上报节点上的node status的信息，当master经过4个周期的时间没有收到节点的心跳信息则认为节点宕机，会将该节点上的所有pod迁移到其他节点运行起来。当节点增多时，这种频繁的发送心跳信息，以及节点上大量的node status信息的发送会对master造成压力，所以在新的版本中kubernetes引入了节点租约的概念。</p>
<p>节点租约的相关信息存放在kuber-node-lease名称空间中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示节点租约</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get lease -n kube-node-lease</span></span><br><span class="line">NAME           HOLDER         AGE</span><br><span class="line">k8s-master01   k8s-master01   39h</span><br><span class="line">k8s-node01     k8s-node01     39h</span><br><span class="line">k8s-node02     k8s-node02     39h</span><br><span class="line">k8s-node03     k8s-node03     39h</span><br></pre></td></tr></table></figure>

<h4 id="节点租约和kubelet协同工作"><a href="#节点租约和kubelet协同工作" class="headerlink" title="节点租约和kubelet协同工作"></a>节点租约和kubelet协同工作</h4><p>正常情况下kubelet依然是每10秒定期跟新节点租约内的数据，而且kubelet定期(10s)计算下node status但不上报，仅在node status发生变动时才上报或者超过了5分钟才会上报。</p>
<h5 id="Node-Status信息"><a href="#Node-Status信息" class="headerlink" title="Node Status信息"></a>Node Status信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get nodes k8s-node01 -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Node</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    csi.volume.kubernetes.io/nodeid: <span class="string">&#x27;&#123;&quot;driver.longhorn.io&quot;:&quot;k8s-node01&quot;&#125;&#x27;</span></span><br><span class="line">    flannel.alpha.coreos.com/backend-data: <span class="string">&#x27;&#123;&quot;VNI&quot;:1,&quot;VtepMAC&quot;:&quot;7e:c5:0b:9e:6a:5c&quot;&#125;&#x27;</span></span><br><span class="line">    flannel.alpha.coreos.com/backend-type: vxlan</span><br><span class="line">    flannel.alpha.coreos.com/kube-subnet-manager: <span class="string">&quot;true&quot;</span></span><br><span class="line">    flannel.alpha.coreos.com/public-ip: 172.16.11.81</span><br><span class="line">    kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock</span><br><span class="line">    node.alpha.kubernetes.io/ttl: <span class="string">&quot;0&quot;</span></span><br><span class="line">    volumes.kubernetes.io/controller-managed-attach-detach: <span class="string">&quot;true&quot;</span></span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-06-28T11:08:03Z&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    beta.kubernetes.io/arch: amd64</span><br><span class="line">    beta.kubernetes.io/os: linux</span><br><span class="line">    kubernetes.io/arch: amd64</span><br><span class="line">    kubernetes.io/hostname: k8s-node01</span><br><span class="line">    kubernetes.io/os: linux</span><br><span class="line">  name: k8s-node01</span><br><span class="line">  resourceVersion: <span class="string">&quot;295806&quot;</span></span><br><span class="line">  uid: 0e86e892-f859-49dd-83fb-e030fd955026</span><br><span class="line">spec:</span><br><span class="line">  podCIDR: 10.244.1.0/24</span><br><span class="line">  podCIDRs:</span><br><span class="line">  - 10.244.1.0/24</span><br><span class="line">status:</span><br><span class="line">  addresses:</span><br><span class="line">  - address: 172.16.11.81						<span class="comment"># 节点地址</span></span><br><span class="line">    <span class="built_in">type</span>: InternalIP							<span class="comment"># 类型为内部通信使用</span></span><br><span class="line">  - address: k8s-node01							<span class="comment"># 主机名称</span></span><br><span class="line">    <span class="built_in">type</span>: Hostname</span><br><span class="line">  allocatable:									<span class="comment"># 可分配的</span></span><br><span class="line">    cpu: <span class="string">&quot;6&quot;</span>									<span class="comment"># 可分配CPU</span></span><br><span class="line">    ephemeral-storage: <span class="string">&quot;188319986991&quot;</span>			<span class="comment"># 本地磁盘可用大小</span></span><br><span class="line">    hugepages-1Gi: <span class="string">&quot;0&quot;</span>							<span class="comment"># 大内存页1G，可用为0</span></span><br><span class="line">    hugepages-2Mi: <span class="string">&quot;0&quot;</span>							<span class="comment"># 大内存页2M，可用为0</span></span><br><span class="line">    memory: 8049876Ki							<span class="comment"># 可用内存总数</span></span><br><span class="line">    pods: <span class="string">&quot;110&quot;</span>									<span class="comment"># 节点最大可运行pods，此值可以调整。</span></span><br><span class="line">  capacity:										<span class="comment"># 资源容量</span></span><br><span class="line">    cpu: <span class="string">&quot;6&quot;</span>														</span><br><span class="line">    ephemeral-storage: 204340264Ki</span><br><span class="line">    hugepages-1Gi: <span class="string">&quot;0&quot;</span></span><br><span class="line">    hugepages-2Mi: <span class="string">&quot;0&quot;</span></span><br><span class="line">    memory: 8152276Ki</span><br><span class="line">    pods: <span class="string">&quot;110&quot;</span></span><br><span class="line">  conditions:									<span class="comment"># 自身所处的境况，每个条件需要使用bool值来判断是否满足境况。</span></span><br><span class="line">  - lastHeartbeatTime: <span class="string">&quot;2021-06-28T11:08:48Z&quot;</span></span><br><span class="line">    lastTransitionTime: <span class="string">&quot;2021-06-28T11:08:48Z&quot;</span></span><br><span class="line">    message: Flannel is running on this node	<span class="comment"># 当前信息</span></span><br><span class="line">    reason: FlannelIsUp</span><br><span class="line">    status: <span class="string">&quot;False&quot;</span>								<span class="comment"># false表示没有发生</span></span><br><span class="line">    <span class="built_in">type</span>: NetworkUnavailable					<span class="comment"># 网络不可用是否发生</span></span><br><span class="line">  - lastHeartbeatTime: <span class="string">&quot;2021-06-30T02:47:23Z&quot;</span></span><br><span class="line">    lastTransitionTime: <span class="string">&quot;2021-06-28T11:08:03Z&quot;</span></span><br><span class="line">    message: kubelet has sufficient memory available		<span class="comment"># kubelet有充足的内存资源</span></span><br><span class="line">    reason: KubeletHasSufficientMemory									</span><br><span class="line">    status: <span class="string">&quot;False&quot;</span>											<span class="comment"># 不紧张</span></span><br><span class="line">    <span class="built_in">type</span>: MemoryPressure									<span class="comment"># 内存资源紧张与否</span></span><br><span class="line">  - lastHeartbeatTime: <span class="string">&quot;2021-06-30T02:47:23Z&quot;</span></span><br><span class="line">    lastTransitionTime: <span class="string">&quot;2021-06-28T11:08:03Z&quot;</span></span><br><span class="line">    message: kubelet has no disk pressure</span><br><span class="line">    reason: KubeletHasNoDiskPressure</span><br><span class="line">    status: <span class="string">&quot;False&quot;</span></span><br><span class="line">    <span class="built_in">type</span>: DiskPressure										<span class="comment"># 磁盘是否满了</span></span><br><span class="line">  - lastHeartbeatTime: <span class="string">&quot;2021-06-30T02:47:23Z&quot;</span></span><br><span class="line">    lastTransitionTime: <span class="string">&quot;2021-06-28T11:08:03Z&quot;</span></span><br><span class="line">    message: kubelet has sufficient PID available</span><br><span class="line">    reason: KubeletHasSufficientPID</span><br><span class="line">    status: <span class="string">&quot;False&quot;</span></span><br><span class="line">    <span class="built_in">type</span>: PIDPressure										<span class="comment"># PID是否满了</span></span><br><span class="line">  - lastHeartbeatTime: <span class="string">&quot;2021-06-30T02:47:23Z&quot;</span></span><br><span class="line">    lastTransitionTime: <span class="string">&quot;2021-06-28T11:08:53Z&quot;</span></span><br><span class="line">    message: kubelet is posting ready status. AppArmor enabled</span><br><span class="line">    reason: KubeletReady									<span class="comment"># kubelet自身是否ready</span></span><br><span class="line">    status: <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="built_in">type</span>: Ready</span><br><span class="line">  daemonEndpoints:</span><br><span class="line">    kubeletEndpoint:</span><br><span class="line">      Port: 10250</span><br><span class="line">  images:</span><br><span class="line">  - names:</span><br><span class="line">    - longhornio/longhorn-engine@sha256:e484ec73816c9620615d65ec61c75b07dadb3b3f6d3cb69a3d2d863df4f003d7</span><br><span class="line">    - longhornio/longhorn-engine:v1.1.1</span><br><span class="line">    sizeBytes: 315055800</span><br><span class="line">  - names:</span><br><span class="line">    - longhornio/longhorn-instance-manager@sha256:7d867436d6b5597a31c0dd958f642e970b9921fbe0d0fb6af9ba0a2233b33ae3</span><br><span class="line">    - longhornio/longhorn-instance-manager:v1_20201216</span><br><span class="line">    sizeBytes: 289445107</span><br><span class="line">  - names:</span><br><span class="line">    - longhornio/longhorn-manager@sha256:ede61fe2a472099e8fef562bab36c27add9430a6adf6402424f76e2865a5b0b7</span><br><span class="line">    - longhornio/longhorn-manager:v1.1.1</span><br><span class="line">    sizeBytes: 277611575</span><br><span class="line">  - names:</span><br><span class="line">    - registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy@sha256:53af05c2a6cddd32cebf5856f71994f5d41ef2a62824b87f140f2087f91e4a38</span><br><span class="line">    - registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.21.1</span><br><span class="line">    sizeBytes: 130788187</span><br><span class="line">  - names:</span><br><span class="line">    - ikubernetes/demoapp@sha256:6698b205eb18fb0171398927f3a35fe27676c6bf5757ef57a35a4b055badf2c3</span><br><span class="line">    - ikubernetes/demoapp:v1.0</span><br><span class="line">    sizeBytes: 92665704</span><br><span class="line">  - names:</span><br><span class="line">    - quay.io/coreos/flannel@sha256:4a330b2f2e74046e493b2edc30d61fdebbdddaaedcb32d62736f25be8d3c64d5</span><br><span class="line">    - quay.io/coreos/flannel:v0.14.0</span><br><span class="line">    sizeBytes: 67927607</span><br><span class="line">  - names:</span><br><span class="line">    - longhornio/csi-provisioner@sha256:d440c337b7ad7afdc812dc41ae3b56b61022357e0f20b0bc80d0b1916f1f4fc5</span><br><span class="line">    - longhornio/csi-provisioner:v1.6.0-lh1</span><br><span class="line">    sizeBytes: 48156165</span><br><span class="line">  - names:</span><br><span class="line">    - longhornio/csi-snapshotter@sha256:8104ea0f3dbe5dd2398978c31dcbf78bf59c74c1aa807943b3d200c9fcb486fb</span><br><span class="line">    - longhornio/csi-snapshotter:v2.1.1-lh1</span><br><span class="line">    sizeBytes: 46206695</span><br><span class="line">  - names:</span><br><span class="line">    - longhornio/csi-attacher@sha256:022425bc7a2b80d3c4bfc4d187624e86cf395374c0112834fcc0556860249979</span><br><span class="line">    - longhornio/csi-attacher:v2.2.1-lh1</span><br><span class="line">    sizeBytes: 44149287</span><br><span class="line">  - names:</span><br><span class="line">    - longhornio/csi-resizer@sha256:b62f052065a7b473790ad84fc553635ae733136b5c1dbe28cdb9b0320dcbf1b8</span><br><span class="line">    - longhornio/csi-resizer:v0.5.1-lh1</span><br><span class="line">    sizeBytes: 44083990</span><br><span class="line">  - names:</span><br><span class="line">    - longhornio/csi-node-driver-registrar@sha256:65c823d262048f728b7f5b933abbcf4e4a2faa0f1c58de1e7abb28b9d878924a</span><br><span class="line">    - longhornio/csi-node-driver-registrar:v1.2.0-lh1</span><br><span class="line">    sizeBytes: 16388083</span><br><span class="line">  - names:</span><br><span class="line">    - registry.cn-hangzhou.aliyuncs.com/google_containers/pause@sha256:6c3835cab3980f11b83277305d0d736051c32b17606f5ec59f1dda67c9ba3810</span><br><span class="line">    - registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.4.1</span><br><span class="line">    sizeBytes: 682696</span><br><span class="line">  nodeInfo:</span><br><span class="line">    architecture: amd64</span><br><span class="line">    bootID: b1c34ce5-a7f3-4aae-8fbb-fe110a4eb1fb</span><br><span class="line">    containerRuntimeVersion: docker://20.10.7</span><br><span class="line">    kernelVersion: 5.4.0-74-generic</span><br><span class="line">    kubeProxyVersion: v1.21.1</span><br><span class="line">    kubeletVersion: v1.21.1</span><br><span class="line">    machineID: 4d678ef4cd0d4081a377e1b7cd7ec000</span><br><span class="line">    operatingSystem: linux</span><br><span class="line">    osImage: Ubuntu 20.04.2 LTS</span><br><span class="line">    systemUUID: d5beffc8-337a-4fbc-934e-e276b2c42f09</span><br></pre></td></tr></table></figure>

<p>status信息中需要注意，allocatable、capacity和conditions中的所有信息。</p>
<h5 id="Node-describe信息"><a href="#Node-describe信息" class="headerlink" title="Node describe信息"></a>Node describe信息</h5><p>节点的信息除了可以查看yaml信息，还可以通过describe来查看节点状态信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe nodes k8s-node01</span></span><br><span class="line">Name:               k8s-node01</span><br><span class="line">Roles:              &lt;none&gt;</span><br><span class="line">Labels:             beta.kubernetes.io/arch=amd64</span><br><span class="line">                    beta.kubernetes.io/os=linux</span><br><span class="line">                    kubernetes.io/arch=amd64</span><br><span class="line">                    kubernetes.io/hostname=k8s-node01</span><br><span class="line">                    kubernetes.io/os=linux</span><br><span class="line">Annotations:        csi.volume.kubernetes.io/nodeid: &#123;<span class="string">&quot;driver.longhorn.io&quot;</span>:<span class="string">&quot;k8s-node01&quot;</span>&#125;</span><br><span class="line">                    flannel.alpha.coreos.com/backend-data: &#123;<span class="string">&quot;VNI&quot;</span>:1,<span class="string">&quot;VtepMAC&quot;</span>:<span class="string">&quot;7e:c5:0b:9e:6a:5c&quot;</span>&#125;</span><br><span class="line">                    flannel.alpha.coreos.com/backend-type: vxlan</span><br><span class="line">                    flannel.alpha.coreos.com/kube-subnet-manager: <span class="literal">true</span></span><br><span class="line">                    flannel.alpha.coreos.com/public-ip: 172.16.11.81</span><br><span class="line">                    kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock</span><br><span class="line">                    node.alpha.kubernetes.io/ttl: 0</span><br><span class="line">                    volumes.kubernetes.io/controller-managed-attach-detach: <span class="literal">true</span></span><br><span class="line">CreationTimestamp:  Mon, 28 Jun 2021 11:08:03 +0000</span><br><span class="line">Taints:             &lt;none&gt;</span><br><span class="line">Unschedulable:      <span class="literal">false</span></span><br><span class="line">Lease:</span><br><span class="line">  HolderIdentity:  k8s-node01</span><br><span class="line">  AcquireTime:     &lt;<span class="built_in">unset</span>&gt;</span><br><span class="line">  RenewTime:       Wed, 30 Jun 2021 03:10:46 +0000</span><br><span class="line">Conditions:</span><br><span class="line">  Type                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message</span><br><span class="line">  ----                 ------  -----------------                 ------------------                ------                       -------</span><br><span class="line">  NetworkUnavailable   False   Mon, 28 Jun 2021 11:08:48 +0000   Mon, 28 Jun 2021 11:08:48 +0000   FlannelIsUp                  Flannel is running on this node</span><br><span class="line">  MemoryPressure       False   Wed, 30 Jun 2021 03:07:34 +0000   Mon, 28 Jun 2021 11:08:03 +0000   KubeletHasSufficientMemory   kubelet has sufficient memory available</span><br><span class="line">  DiskPressure         False   Wed, 30 Jun 2021 03:07:34 +0000   Mon, 28 Jun 2021 11:08:03 +0000   KubeletHasNoDiskPressure     kubelet has no disk pressure</span><br><span class="line">  PIDPressure          False   Wed, 30 Jun 2021 03:07:34 +0000   Mon, 28 Jun 2021 11:08:03 +0000   KubeletHasSufficientPID      kubelet has sufficient PID available</span><br><span class="line">  Ready                True    Wed, 30 Jun 2021 03:07:34 +0000   Mon, 28 Jun 2021 11:08:53 +0000   KubeletReady                 kubelet is posting ready status. AppArmor enabled</span><br><span class="line">Addresses:</span><br><span class="line">  InternalIP:  172.16.11.81</span><br><span class="line">  Hostname:    k8s-node01</span><br><span class="line">Capacity:</span><br><span class="line">  cpu:                6</span><br><span class="line">  ephemeral-storage:  204340264Ki</span><br><span class="line">  hugepages-1Gi:      0</span><br><span class="line">  hugepages-2Mi:      0</span><br><span class="line">  memory:             8152276Ki</span><br><span class="line">  pods:               110</span><br><span class="line">Allocatable:</span><br><span class="line">  cpu:                6</span><br><span class="line">  ephemeral-storage:  188319986991</span><br><span class="line">  hugepages-1Gi:      0</span><br><span class="line">  hugepages-2Mi:      0</span><br><span class="line">  memory:             8049876Ki</span><br><span class="line">  pods:               110</span><br><span class="line">System Info:</span><br><span class="line">  Machine ID:                 4d678ef4cd0d4081a377e1b7cd7ec000</span><br><span class="line">  System UUID:                d5beffc8-337a-4fbc-934e-e276b2c42f09</span><br><span class="line">  Boot ID:                    b1c34ce5-a7f3-4aae-8fbb-fe110a4eb1fb</span><br><span class="line">  Kernel Version:             5.4.0-74-generic</span><br><span class="line">  OS Image:                   Ubuntu 20.04.2 LTS</span><br><span class="line">  Operating System:           linux</span><br><span class="line">  Architecture:               amd64</span><br><span class="line">  Container Runtime Version:  docker://20.10.7</span><br><span class="line">  Kubelet Version:            v1.21.1</span><br><span class="line">  Kube-Proxy Version:         v1.21.1</span><br><span class="line">PodCIDR:                      10.244.1.0/24</span><br><span class="line">PodCIDRs:                     10.244.1.0/24</span><br><span class="line">Non-terminated Pods:          (13 <span class="keyword">in</span> total)       <span class="comment"># 非终止状态的Pod</span></span><br><span class="line">  Namespace                   Name                                CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age</span><br><span class="line">  ---------                   ----                                ------------  ----------  ---------------  -------------  ---</span><br><span class="line">  default                     demoapp-5f7d8f9847-r7h7b            0 (0%)        0 (0%)      0 (0%)           0 (0%)         37h</span><br><span class="line">  kube-system                 kube-flannel-ds-7rzqr               100m (1%)     100m (1%)   50Mi (0%)        50Mi (0%)      40h</span><br><span class="line">  kube-system                 kube-proxy-5splm                    0 (0%)        0 (0%)      0 (0%)           0 (0%)         40h</span><br><span class="line">  longhorn-system             csi-attacher-5dcdcd5984-6frz7       0 (0%)        0 (0%)      0 (0%)           0 (0%)         24h</span><br><span class="line">  longhorn-system             csi-attacher-5dcdcd5984-lqvk5       0 (0%)        0 (0%)      0 (0%)           0 (0%)         24h</span><br><span class="line">  longhorn-system             csi-provisioner-5c9dfb6446-nxp28    0 (0%)        0 (0%)      0 (0%)           0 (0%)         24h</span><br><span class="line">  longhorn-system             csi-resizer-6696d857b6-ptjw6        0 (0%)        0 (0%)      0 (0%)           0 (0%)         24h</span><br><span class="line">  longhorn-system             csi-snapshotter-96bfff7c9-z5nrc     0 (0%)        0 (0%)      0 (0%)           0 (0%)         24h</span><br><span class="line">  longhorn-system             engine-image-ei-611d1496-chh2q      0 (0%)        0 (0%)      0 (0%)           0 (0%)         24h</span><br><span class="line">  longhorn-system             instance-manager-e-ef4e3ece         720m (12%)    0 (0%)      0 (0%)           0 (0%)         24h</span><br><span class="line">  longhorn-system             instance-manager-r-0b9ddd42         720m (12%)    0 (0%)      0 (0%)           0 (0%)         24h</span><br><span class="line">  longhorn-system             longhorn-csi-plugin-rdtn8           0 (0%)        0 (0%)      0 (0%)           0 (0%)         24h</span><br><span class="line">  longhorn-system             longhorn-manager-7h57m              0 (0%)        0 (0%)      0 (0%)           0 (0%)         24h</span><br><span class="line">Allocated resources:									<span class="comment"># 已分配的资源。</span></span><br><span class="line">  (Total limits may be over 100 percent, i.e., overcommitted.)</span><br><span class="line">  Resource           Requests     Limits</span><br><span class="line">  --------           --------     ------</span><br><span class="line">  cpu                1540m (25%)  100m (1%)</span><br><span class="line">  memory             50Mi (0%)    50Mi (0%)</span><br><span class="line">  ephemeral-storage  0 (0%)       0 (0%)</span><br><span class="line">  hugepages-1Gi      0 (0%)       0 (0%)</span><br><span class="line">  hugepages-2Mi      0 (0%)       0 (0%)</span><br><span class="line">Events:              &lt;none&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>存储卷基础</title>
    <url>/2021/07/06/Kubernetes/03Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/01%E5%AD%98%E5%82%A8%E5%8D%B7%E5%9F%BA%E7%A1%80/%E5%AD%98%E5%82%A8%E5%8D%B7%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>在Docker中，文件系统与Docker容器具有相同的生命周期。在多节点运行Docker的环境中，应用会因为各种原因而退出。于是在多节点中运行的容器就面临着一种境况，如某个容器崩溃、节点崩溃、用户误删除而导致容器被删除。若我们直接将数据存在容器内的文件系统上数据也将丢失，为了避免数据与容器产生直接绑定关系，我们应该将其数据存储在容器文件系统之外，而存储方式则是为容器引入外部的存储空间。</p>
<h3 id="外部存储分类"><a href="#外部存储分类" class="headerlink" title="外部存储分类"></a>外部存储分类</h3><p>外部的存储空间分为两类：</p>
<ul>
<li>Host：宿主机级别，在节点本地进行存储。</li>
<li>Network Storage：网络存储</li>
</ul>
<p>对于Host类型的存储来说，若在其节点上运行的容器崩溃了，再次启动容器时，只能在同一个节点上进行复，而对于集群环境的k8s来说这种类型的存储不适用。因此使用网络存储更加合适。</p>
<h4 id="共享式存储设备"><a href="#共享式存储设备" class="headerlink" title="共享式存储设备"></a>共享式存储设备</h4><p>共享式存储设备分为：</p>
<ul>
<li>多路并行读写</li>
<li>多路只读</li>
<li>单路读写</li>
</ul>
<h4 id="pod使用Volume步骤"><a href="#pod使用Volume步骤" class="headerlink" title="pod使用Volume步骤"></a>pod使用Volume步骤</h4><ol>
<li>在Pod上定义存储卷，并关联到目标存储服务上</li>
<li>在需要用到存储卷的容器上挂载其所属的Pod的存储卷</li>
</ol>
<h5 id="pod中使用volume的资源清单格式"><a href="#pod中使用volume的资源清单格式" class="headerlink" title="pod中使用volume的资源清单格式"></a>pod中使用volume的资源清单格式</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">  - name &lt;string&gt;  <span class="comment"># 存储卷名称标识，仅可使用DNS标签格式的字符，在当前Pod中必须唯一</span></span><br><span class="line">    VOL_TYPE &lt;Object&gt;  <span class="comment"># 存储卷类型。存储卷插件及具体的目标存储供给方的相关配置</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: …</span><br><span class="line">    image: …</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name &lt;string&gt;  <span class="comment"># 要挂载的存储卷的名称，必须匹配存储卷列表中某项的定义</span></span><br><span class="line">      mountPath &lt;string&gt; <span class="comment"># 容器文件系统上的挂载点路径</span></span><br><span class="line">      readOnly &lt;boolean&gt;  <span class="comment"># 是否挂载为只读模式，默认为“否”</span></span><br><span class="line">      subPath &lt;string&gt;     <span class="comment"># 挂载存储卷上的一个子目录至指定的挂载点</span></span><br><span class="line">      subPathExpr &lt;string&gt;  <span class="comment"># 挂载由指定的模式匹配到的存储卷的文件或目录至挂载点</span></span><br></pre></td></tr></table></figure>

<h4 id="VOL-TYPE-存储卷类型"><a href="#VOL-TYPE-存储卷类型" class="headerlink" title="VOL_TYPE 存储卷类型"></a>VOL_TYPE 存储卷类型</h4><p>存储卷指的是pod外部某个存储空间，而要想访问存储空间通常需要在节点上能适配到存储空间，也就是所谓的驱动程序。</p>
<p>管理存储卷的功能是kubelet实现的，在kubelet中实现此功能的位置叫做Volume Plugin，也叫做卷类型。</p>
<p>卷插件分为以下几种类型：</p>
<ul>
<li>Host级别：hostPath、Local</li>
<li>网络级别：NFS、GlusterFS、rbd(块设备)、CephFS(文件系统)、OSS(aliyun)</li>
<li>临时存储：emptyDir（空目录，将内存空间作为存储使用）</li>
</ul>
<p>对于任何一种存储卷都需要，kubelet通过<code>Volume Plugin</code>的支持才能实现。</p>
<p>如果Volume Plugin无法支持，也想让其能被使用则需要借助一种特殊形式CSI来使用</p>
<h4 id="CSI-Container-Storage-Interface"><a href="#CSI-Container-Storage-Interface" class="headerlink" title="CSI(Container Storage Interface)"></a>CSI(Container Storage Interface)</h4><p>CSI容器存储接口，一旦借助于CSI来实现，就意味任何存储服务商可以自己开发一个专用的外部存储插件，通过CSI对接到kubelet之上，如此其扩展能力就强大了，任何服务商都能提供。</p>
<p>目前来说有很多服务都能被CSI所对接，如Longhorn、</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>存储卷</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm部署k8s下ceph的StorageClass支持方法</title>
    <url>/2021/07/06/Kubernetes/03Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/03kubeadm%E9%83%A8%E7%BD%B2k8s%E4%B8%8Bceph%E7%9A%84StorageClass%E6%94%AF%E6%8C%81%E6%96%B9%E6%B3%95/kubeadm%E9%83%A8%E7%BD%B2k8s%E4%B8%8Bceph%E7%9A%84StorageClass%E6%94%AF%E6%8C%81%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>ceph中的rbd支持动态预配，但kubeadm部署的k8s集群，却不支持该功能，原因在于<code>kube-controller-manager</code>镜像内部未内置ceph客户端工具。</p>
<p>需要自己手动重打kube-controller-manager镜像将ceph客户端工具打入后，重新运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ARG KUBE_VERSION=<span class="string">&quot;v1.19.4&quot;</span></span><br><span class="line">FROM registry.aliyuncs.com/google_containers/kube-controller-manager:<span class="variable">$&#123;KUBE_VERSION&#125;</span></span><br><span class="line">RUN apt update &amp;&amp; apt install -y wget  gnupg lsb-release</span><br><span class="line">ARG CEPH_VERSION=<span class="string">&quot;octopus&quot;</span></span><br><span class="line">RUN wget -q -O - https://mirrors.aliyun.com/ceph/keys/release.asc | apt-key add - &amp;&amp; \</span><br><span class="line">      <span class="built_in">echo</span> deb https://mirrors.aliyun.com/ceph/debian-<span class="variable">$&#123;CEPH_VERSION&#125;</span>/ $(lsb_release -sc) main &gt; /etc/apt/sources.list.d/ceph.list &amp;&amp; \</span><br><span class="line">      apt update &amp;&amp; \</span><br><span class="line">      apt install -y ceph-common ceph-fuse  </span><br><span class="line">RUN rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>存储卷</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>PV、PVC和StorageClass</title>
    <url>/2021/07/06/Kubernetes/03Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/02PV%E3%80%81PVC%E5%92%8CStorageClass/PV%E3%80%81PVC%E5%92%8CStorageClass/</url>
    <content><![CDATA[<p>在k8s上如果直接在pod上，以Volumes的形式定义存储卷然后挂载，那就要求所有使用挂载卷的用户必须对所使用的存储有所了解，否则用户将无法使用存储卷。k8s为了解决这种使用门槛，从而引入了PV和PVC的概念，让用户无需直接面对存储。</p>
<h3 id="PV和PVC概念"><a href="#PV和PVC概念" class="headerlink" title="PV和PVC概念"></a>PV和PVC概念</h3><p>PVC：Persistent Volume Claim，持久卷申请，简称PVC；k8s上标准的资源类型之一；由用户使用；名称空间级别；</p>
<p>PV：Persistent Volume，持久卷，可被PVC绑定；而PV一定要与某个真正的存储空间（一般是网络存储服务上的存储空间）对应起来，才能真正存储数据。由集群管理员负责管理。集群级别。</p>
<h4 id="pv和pvc的使用逻辑"><a href="#pv和pvc的使用逻辑" class="headerlink" title="pv和pvc的使用逻辑"></a>pv和pvc的使用逻辑</h4><p><img src="img1.png" alt="pv&amp;pvc"></p>
<p>为了更方便用户的使用，k8s在存储卷上加入了中间层，用户需要使用存储卷时，只需要向PVC申请所需要的存储卷大小和相关参数，PVC会从后端的PV中自动挑出一个符合的PV将其绑定到pod之上。但是这种方式还存在一个弊端，PV必须要预先创建好，如果PV没有创建，那么PVC将无法从后段的PV中跳出可用的存储。从而让容器处于pending状态。</p>
<p><img src="img2.png" alt="pv&amp;pvc"></p>
<p>k8s为了解决上述问题，还引入了Storage Class，按用户的需求动态的生成PV。</p>
<h3 id="StorageClass"><a href="#StorageClass" class="headerlink" title="StorageClass"></a>StorageClass</h3><p>StorageClass是为pv和pvc额外模拟出一层名称空间。PV是集群级别的，而PVC是名称空间级别的，其可以绑定任何PV，但为了能收束以下PVC的作用范围，所以使用模板来进行定义。</p>
<p>StorageClass的作用：</p>
<ul>
<li>一个PVC一旦属于某个模板(StorageClass)。那么其只能在当前的SC下找PV。</li>
<li>作为创建PV的模板，可以将某个存储服务与SC关联起来，并且将该存储服务的管理接口提供给SC，从而让SC能狗仔存储服务上CRUD存储单元。</li>
<li>在同一个SC上声明PVC时，若无现存可匹配的PV，则SC能够调用管理接口直接创建出一个符合PVC声明的需求的PV来，这种PV的提供机制就称为Dynamic Provision(动态预配)。</li>
</ul>
<h3 id="存储卷使用逻辑"><a href="#存储卷使用逻辑" class="headerlink" title="存储卷使用逻辑"></a>存储卷使用逻辑</h3><p>正常逻辑如下：</p>
<p><img src="img3.png" alt="存储卷使用逻辑"></p>
<h4 id="Pod的使用步骤"><a href="#Pod的使用步骤" class="headerlink" title="Pod的使用步骤"></a>Pod的使用步骤</h4><p>Pod使用这类存储的步骤：</p>
<ol>
<li>Admin：创建好PV；</li>
<li>User: 按需创建PVC，而后创建Pod，在Pod调用persistentVolumeClaim类型的存储卷插件调用同一个名称空间中的PVC资源；</li>
</ol>
<h4 id="PV资源清单字段"><a href="#PV资源清单字段" class="headerlink" title="PV资源清单字段"></a>PV资源清单字段</h4><p>除了存储卷插件之外，PersistentVolume资源规范Spec字段主要支持嵌套以下几个通用字段，它们用于定义PV的容量、访问模式和回收策略等属性。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">capacity &lt;map[string]string&gt;：指定PV的容量；目前，Capacity仅支持存储容量设定，将来还应该可以指定IOPS和吞吐量（throughput）。</span><br><span class="line">accessModes  &lt;[]string&gt;：指定当前PV支持访问模式；存储系统支持存取能力大体可分为ReadWriteOnce（单路读写）、ReadOnlyMany（多路只读）和ReadWriteMany（多路读写）三种类型，某个特定的存储系统可能会支持其中的部分或全部的能力。</span><br><span class="line">persistentVolumeReclaimPolicy &lt;string&gt;：PV空间被释放时的处理机制；可用类型仅为Retain（默认）、Recycle或Delete。目前，仅nfs和hostPath支持Recycle策略，也仅有部分存储系统支持Delete策略。</span><br><span class="line">volumeMode &lt;string&gt;：该PV的卷模型，用于指定此存储卷被格式化为文件系统使用还是直接使用裸格式的块设备；默认值为Filesystem，仅块设备接口的存储系统支持该功能。</span><br><span class="line">storageClassName &lt;string&gt;：当前PV所属的StorageClass资源的名称，指定的存储类需要事先存在；默认为空值，即不属于任何存储类。</span><br><span class="line">mountOptions &lt;string&gt;：挂载选项组成的列表，例如ro、soft和hard等。</span><br><span class="line">nodeAffinity &lt;Object&gt;：节点亲和性，用于限制能够访问该PV的节点，进而会影响到使用与该PV关联的PVC的Pod的调度结果。</span><br></pre></td></tr></table></figure>

<h4 id="PVC资源清单字段"><a href="#PVC资源清单字段" class="headerlink" title="PVC资源清单字段"></a>PVC资源清单字段</h4><p>定义PVC时，用户可通过访问模式（accessModes）、数据源（dataSource）、存储资源空间需求和限制（resources）、存储类、标签选择器、卷模型和卷名称等匹配标准来筛选集群上的PV资源，其中，resources和accessModes是最重的筛选标准。PVC的Spec字段的可嵌套字段有如下几个。</p>
<p>accessModes &lt;[]string&gt;：PVC的访问模式；它同样支持RWO、RWX和ROX三种模式；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dataSources &lt;Object&gt;：用于从指定的数据源恢复该PVC卷，它目前支持的数据源包括一个现在卷快照对象（snapshot.storage.k8s.io/VolumeSnapshot）、一个既有PVC对象（PersistentVolumeClaim）或一个既有的用于数据转存的自定义资源对象（resource/object）；</span><br><span class="line">resources &lt;Object&gt;：声明使用的存储空间的最小值和最大值；目前，PVC的资源限定仅支持空间大小一个维度；</span><br><span class="line">selector &lt;Object&gt;：筛选PV时额外使用的标签选择器（matchLabels）或匹配条件表达式（matchExpressions）；  </span><br><span class="line">storageClassName &lt;string&gt;：该PVC资源隶属的存储类资源名称；指定了存储类资源的PVC仅能在同一个存储类下筛选PV资源，否则，就只能从所有不具有存储类的PV中进行筛选；</span><br><span class="line">volumeMode &lt;string&gt;：卷模型，用于指定此卷可被用作文件系统还是裸格式的块设备；默认值为Filesystem；</span><br><span class="line">volumeName &lt;string&gt;：直接指定要绑定的PV资源的名称。</span><br></pre></td></tr></table></figure>

<h4 id="StorageClass资源清单字段"><a href="#StorageClass资源清单字段" class="headerlink" title="StorageClass资源清单字段"></a>StorageClass资源清单字段</h4><p>StorageClass资源的期望状态直接与apiVersion、kind和metadata定义于同一级别而无须嵌套于spec字段中，它支持使用的字段包括如下几个：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">allowVolumeExpansion &lt;boolean&gt;：是否支持存储卷空间扩展功能；</span><br><span class="line">allowedTopologies &lt;[]Object&gt;：定义可以动态配置存储卷的节点拓扑，仅启用了卷调度功能的服务器才会用到该字段；每个卷插件都有自己支持的拓扑规范，空的拓扑选择器表示无拓扑限制；</span><br><span class="line">provisioner  &lt;string&gt;：必选字段，用于指定存储服务方（provisioner，或称为预备器），存储类要依赖该字段值来判定要使用的存储插件以便适配到目标存储系统；Kubernetes内建支持许多的Provisioner，它们的名字都以kubernetes.io/为前缀，例如kubernetes.io/glusterfs等；</span><br><span class="line">parameters  &lt;map[string]string&gt;：定义连接至指定的Provisioner类别下的某特定存储时需要使用的各相关参数；不同Provisioner的可用的参数各不相同；</span><br><span class="line">reclaimPolicy &lt;string&gt;：由当前存储类动态创建的PV资源的默认回收策略，可用值为Delete（默认）和Retain两个；但那些静态PV的回收策略则取决于它们自身的定义；</span><br><span class="line">volumeBindingMode &lt;string&gt;：定义如何为PVC完成预配和绑定，默认值为VolumeBindingImmediate；该字段仅在启用了存储卷调度功能时才能生效；</span><br><span class="line">mountOptions &lt;[]string&gt;：由当前类动态创建的PV资源的默认挂载选项列表。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>存储卷</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊存储卷ConfigMap</title>
    <url>/2021/07/06/Kubernetes/03Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/04%E7%89%B9%E6%AE%8A%E5%AD%98%E5%82%A8%E5%8D%B7ConfigMap/%E7%89%B9%E6%AE%8A%E5%AD%98%E5%82%A8%E5%8D%B7ConfigMap/</url>
    <content><![CDATA[<p>在k8s上还存在3个特殊的存储卷，<code>ConfigMap</code>、<code>Secret</code>和<code>DownwardAPI</code>。</p>
<ul>
<li><code>ConfigMap</code>用来向容器注入配置信息。</li>
<li><code>Secret</code>同<code>ConfigMap</code>一样也是用来向容器注入配置信息，但是其注入信息时进行了<code>base64</code>的编码，用来向容器注入一些敏感信息</li>
<li><code>DownwardAPI</code>用来将<code>Pod</code>所运行的外部的一些元数据信息注入到<code>Pod</code>内部，如当前容器运行的pod的名称，<code>Pod</code>的资源限制等等。</li>
</ul>
<h3 id="容器的配置信息"><a href="#容器的配置信息" class="headerlink" title="容器的配置信息"></a>容器的配置信息</h3><p><code>docker</code>为容器化应用提供配置信息的方法有4种：</p>
<ol>
<li>启动容器时，直接向应用容器传递参数，args: []</li>
<li>将定义好的配置文件焙进镜像中</li>
<li>通过环境变量向容器传递配置数据，这种方法有个前提，应用得支持从环境变量加载配置信息。</li>
<li>制作镜像时使用entrypoint脚本来预处理变量，常见的做法是使用非交互式编辑工具，将环境变量的值替换到应用配置文件中。</li>
<li>基于存储卷向容器传递配置文件。</li>
<li>运行中的改变，需要由应用程序重载。</li>
</ol>
<h4 id="k8s为容器提供配置信息的方法"><a href="#k8s为容器提供配置信息的方法" class="headerlink" title="k8s为容器提供配置信息的方法"></a>k8s为容器提供配置信息的方法</h4><ol>
<li>使用ConfigMap，以k/v格式保存配置项的名称和配置数据；而后由pod中的容器以环境变量的方式从ConfigMap中加载特定的键值。</li>
<li>可以让pod直接将CongifMap以存储卷的方式进行附加而后由容器挂载至指定目录下从而获取到完整的配置文件。</li>
</ol>
<h4 id="k8s向pod中的环境变量赋值方法"><a href="#k8s向pod中的环境变量赋值方法" class="headerlink" title="k8s向pod中的环境变量赋值方法"></a>k8s向pod中的环境变量赋值方法</h4><p>通过环境变量的配置容器化应用时，需要在容器配置段中嵌套使用env字段，它的值是一个由环境变量构建的列表。每个环境变量通常由name和value（或valueFrom）字段构成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name &lt;string&gt;：环境变量的名称，必选字段；</span><br><span class="line">value &lt;string&gt;：环境变量的值，通过$(VAR_NAME)引用，逃逸格式为“$$(VAR_NAME)”默认值为空；</span><br><span class="line">valueFrom &lt;Object&gt;：环境变量值的引用源，例如当前Pod资源的名称、名称空间、标签等，不能与非空值的value字段同时使用，即环境变量的值要么源于value字段，要么源于valueFrom字段，二者不可同时提供数据。</span><br><span class="line">    valueFrom字段可引用的值有多种来源，包括当前Pod资源的属性值，容器相关的系统资源配置、ConfigMap对象中的Key以及Secret对象中的Key，它们分别要使用不同的嵌套字段进行定义。</span><br><span class="line">fieldRef	&lt;Object&gt;：当前Pod资源的指定字段，目前支持使用的字段包括metadata.name、metadata.namespace、metadata.labels、metadata.annotations、spec.nodeName、spec.serviceAccountName、status.hostIP和status.podIP等；</span><br><span class="line">configMapKeyRef	&lt;Object&gt;：ConfigMap对象中的特定Key；</span><br><span class="line">secretKeyRef	&lt;Object&gt;：Secret对象中的特定Key；</span><br><span class="line">resourceFieldRef  &lt;Object&gt;：当前容器的特定系统资源的最小值（配额）或最大值（限额），目前支持的引用包括limits.cpu、limits.memory、limits.ephemeral-storage、requests.cpu、requests.memory 和requests.ephemeral-storage。</span><br></pre></td></tr></table></figure>

<h3 id="ConfigMap使用示例"><a href="#ConfigMap使用示例" class="headerlink" title="ConfigMap使用示例"></a>ConfigMap使用示例</h3><p>方法1：使用命令式命令创建CM</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用命令创建出ConfigMap</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl create cm demoapp-config --from-literal=host=0.0.0.0 --from-literal=port=8080</span></span><br><span class="line">configmap/demoapp-config created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ConfigMap的内容</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get cm demoapp-config -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  host: 0.0.0.0</span><br><span class="line">  port: <span class="string">&quot;8080&quot;</span></span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-15T13:40:34Z&quot;</span></span><br><span class="line">  name: demoapp-config</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;61981&quot;</span></span><br><span class="line">  uid: 33517e6d-9ea4-46ab-9d16-600a26f4104e</span><br></pre></td></tr></table></figure>

<p>方法2：使用配置文件创建CM</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前目录下存在3配置文件</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># cd nginx-conf.d/</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/nginx-conf.d<span class="comment"># cat myserver.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name www.mylinuxops.com;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/myserver-*.cfg;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/nginx-conf.d<span class="comment"># cat myserver-gzip.cfg</span></span><br><span class="line">gzip on;</span><br><span class="line">gzip_comp_level 5;</span><br><span class="line">gzip_proxied expired no-cache no-store private auth;</span><br><span class="line">gzip_types text/plain text/css application/xml text/javascript;</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/nginx-conf.d<span class="comment"># cat myserver-status.cfg</span></span><br><span class="line">location /nginx-status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将以上三个文件制作成一个configMap，文件名为键文件内容为值，若不使用默认文件名作为键，可以在fromfile中重新指定</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/nginx-conf.d<span class="comment"># kubectl create configmap nginx-confs --from-file=./myserver.conf --from-file=status.cfg=./myserver-status.cfg</span></span><br><span class="line">configmap/nginx-confs created</span><br><span class="line">root@k8s-master01:~/yaml/chapter06/nginx-conf.d<span class="comment"># kubectl get cm nginx-confs -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  myserver.conf: <span class="string">&quot;server &#123;\n    listen 8080;\n    server_name www.mylinuxops.com;\n</span></span><br><span class="line"><span class="string">    \   \n    include /etc/nginx/conf.d/myserver-*.cfg;\n\n    location / &#123;\n        root</span></span><br><span class="line"><span class="string">    /usr/share/nginx/html;\n    &#125;\n&#125;\n&quot;</span></span><br><span class="line">  status.cfg: |</span><br><span class="line">    location /nginx-status &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-15T13:56:08Z&quot;</span></span><br><span class="line">  name: nginx-confs</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;64123&quot;</span></span><br><span class="line">  uid: 40e8822e-258f-453c-a00d-a33dc0f1252f</span><br></pre></td></tr></table></figure>

<p>方法3：直接指定目录创建configmap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx-conf.d目录下有3个文件</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># ls nginx-conf.d/</span></span><br><span class="line">myserver.conf  myserver-gzip.cfg  myserver-status.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接指定目录创建configMap，此方法创建的cm无法改变键名</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># ls nginx-conf.d/</span></span><br><span class="line">myserver.conf  myserver-gzip.cfg  myserver-status.cfg</span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl create configmap nginx-config-files --from-file=./nginx-conf.d/</span></span><br><span class="line">configmap/nginx-config-files created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看configmap</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl describe cm nginx-config-files</span></span><br><span class="line">Name:         nginx-config-files</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">myserver-gzip.cfg:</span><br><span class="line">----</span><br><span class="line">gzip on;</span><br><span class="line">gzip_comp_level 5;</span><br><span class="line">gzip_proxied expired no-cache no-store private auth;</span><br><span class="line">gzip_types text/plain text/css application/xml text/javascript;</span><br><span class="line"></span><br><span class="line">myserver-status.cfg:</span><br><span class="line">----</span><br><span class="line">location /nginx-status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myserver.conf:</span><br><span class="line">----</span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name www.mylinuxops.com;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/myserver-*.cfg;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引用键值数据完成应用配置"><a href="#引用键值数据完成应用配置" class="headerlink" title="引用键值数据完成应用配置"></a>引用键值数据完成应用配置</h3><h4 id="示例1：从configmap中，以键值对方式为POD引入变量"><a href="#示例1：从configmap中，以键值对方式为POD引入变量" class="headerlink" title="示例1：从configmap中，以键值对方式为POD引入变量"></a>示例1：从configmap中，以键值对方式为POD引入变量</h4><p>1.编写资源清单文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># vim configmaps-env-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp-config</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  demoapp.port: <span class="string">&quot;8080&quot;</span></span><br><span class="line">  demoapp.host: 0.0.0.0</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: configmaps-env-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    env:</span><br><span class="line">    - name: PORT</span><br><span class="line">      valueFrom:</span><br><span class="line">        configMapKeyRef:</span><br><span class="line">          name: demoapp-config</span><br><span class="line">          key: demoapp.port</span><br><span class="line">          optional: <span class="literal">false</span>       <span class="comment"># 表示次数据项是否为可选，false表示必选</span></span><br><span class="line">    - name: HOST</span><br><span class="line">      valueFrom:</span><br><span class="line">        configMapKeyRef:</span><br><span class="line">          name: demoapp-config</span><br><span class="line">          key: demoapp.host</span><br><span class="line">          optional: <span class="literal">true</span>        <span class="comment"># 表示此键可有可无。</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl apply -f configmaps-env-demo.yaml</span></span><br><span class="line">configmap/demoapp-config created</span><br><span class="line">pod/configmaps-env-demo created</span><br><span class="line"></span><br><span class="line"><span class="comment"># pod已经运行起来</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get pods configmaps-env-demo</span></span><br><span class="line">NAME                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">configmaps-env-demo   1/1     Running   0          37s</span><br></pre></td></tr></table></figure>

<p>3.进入容器查看监听地址和端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl exec configmaps-env-demo -- netstat -tnl</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State</span><br><span class="line">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure>

<h4 id="示例2：基于存储卷的方式引用"><a href="#示例2：基于存储卷的方式引用" class="headerlink" title="示例2：基于存储卷的方式引用"></a>示例2：基于存储卷的方式引用</h4><p>1.之前已经使用配置文件创建了多nginx的configMap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get cm</span></span><br><span class="line">NAME                 DATA   AGE</span><br><span class="line">demoapp-config       2      12m</span><br><span class="line">kube-root-ca.crt     1      20h</span><br><span class="line">nginx-config-files   3      12h   <span class="comment"># 挂载此configmap</span></span><br><span class="line">nginx-confs          2      12h</span><br></pre></td></tr></table></figure>

<p>2.编写资源清单将nginx-config-files作为volume进行挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># vim configmaps-volume-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: configmaps-volume-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-server</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: ngxconfs</span><br><span class="line">      mountPath: /etc/nginx/conf.d/</span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: ngxconfs</span><br><span class="line">    configMap:</span><br><span class="line">      name: nginx-config-files</span><br><span class="line">      optional: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>3.应用资源清单创建出pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl apply -f configmaps-volume-demo.yaml</span></span><br><span class="line">pod/configmaps-volume-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get pods configmaps-volume-demo</span></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">configmaps-volume-demo   1/1     Running   0          3m17s</span><br></pre></td></tr></table></figure>

<p>4.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl exec configmaps-volume-demo -- netstat -tnl</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State</span><br><span class="line">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN     <span class="comment"># 监听端口为定义的8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证容器内的文件是否存在</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl exec configmaps-volume-demo -- ls /etc/nginx/conf.d/</span></span><br><span class="line">myserver-gzip.cfg</span><br><span class="line">myserver-status.cfg</span><br><span class="line">myserver.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问虚拟主机测试</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># curl -H &quot;Host:www.mylinuxops.com &quot; `kubectl get pods configmaps-volume-demo -o go-template=&#123;&#123;.status.podIP&#125;&#125;`:8080/nginx-status</span></span><br><span class="line">Active connections: 1</span><br><span class="line">server accepts handled requests</span><br><span class="line"> 4 4 4</span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0</span><br></pre></td></tr></table></figure>

<h4 id="示例3：综合使用"><a href="#示例3：综合使用" class="headerlink" title="示例3：综合使用"></a>示例3：综合使用</h4><p>1.创建出拥有4个key的configMap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前目录下存在2个配置文件</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># ls demoapp-conf.d/</span></span><br><span class="line">envoy.yaml  lds.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建configmap</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl create cm demoapp-confs --from-literal=demoapp.port=&quot;8080&quot; --from-literal=demoapp.host=127.0.0.1 --from-file=./demoapp-conf.d/</span></span><br><span class="line">configmap/demoapp-confs created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看configMap</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get cm demoapp-confs -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  demoapp.host: 127.0.0.1</span><br><span class="line">  demoapp.port: <span class="string">&quot;8080&quot;</span></span><br><span class="line">  envoy.yaml: |</span><br><span class="line">    node:</span><br><span class="line">      id: sidecar-proxy</span><br><span class="line">      cluster: demoapp-cluster</span><br><span class="line"></span><br><span class="line">    admin:</span><br><span class="line">      access_log_path: /tmp/admin_access.log</span><br><span class="line">      address:</span><br><span class="line">        socket_address: &#123; address: 0.0.0.0, port_value: 9901 &#125;</span><br><span class="line"></span><br><span class="line">    dynamic_resources:</span><br><span class="line">      lds_config:</span><br><span class="line">        path: <span class="string">&#x27;/etc/envoy/lds.conf&#x27;</span></span><br><span class="line"></span><br><span class="line">    static_resources:</span><br><span class="line">      clusters:</span><br><span class="line">      - name: local_service</span><br><span class="line">        connect_timeout: 0.25s</span><br><span class="line">        <span class="built_in">type</span>: STATIC</span><br><span class="line">        lb_policy: ROUND_ROBIN</span><br><span class="line">        load_assignment:</span><br><span class="line">          cluster_name: local_service</span><br><span class="line">          endpoints:</span><br><span class="line">          - lb_endpoints:</span><br><span class="line">            - endpoint:</span><br><span class="line">                address:</span><br><span class="line">                  socket_address:</span><br><span class="line">                    address: 127.0.0.1</span><br><span class="line">                    port_value: 8080</span><br><span class="line">  lds.conf: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;version_info&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;resources&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;type.googleapis.com/envoy.api.v2.Listener&quot;</span>,</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;listener_0&quot;</span>,</span><br><span class="line">          <span class="string">&quot;address&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;socket_address&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;address&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">              <span class="string">&quot;port_value&quot;</span>: 80</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;filter_chains&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;filters&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;envoy.http_connection_manager&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;stat_prefix&quot;</span>: <span class="string">&quot;ingress_http&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;codec_type&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;route_config&quot;</span>: &#123;</span><br><span class="line">                      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;local_route&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;virtual_hosts&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;local_service&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;domains&quot;</span>: [</span><br><span class="line">                            <span class="string">&quot;*&quot;</span></span><br><span class="line">                          ],</span><br><span class="line">                          <span class="string">&quot;routes&quot;</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                              <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line">                              &#125;,</span><br><span class="line">                              <span class="string">&quot;route&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;cluster&quot;</span>: <span class="string">&quot;local_service&quot;</span></span><br><span class="line">                              &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                          ]</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;http_filters&quot;</span>: [</span><br><span class="line">                      &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;envoy.router&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    ]</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-16T06:15:52Z&quot;</span></span><br><span class="line">  name: demoapp-confs</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;199051&quot;</span></span><br><span class="line">  uid: 4c59230d-ade6-4aee-9946-8deb89bde0d7</span><br></pre></td></tr></table></figure>

<p>2.在pod中引用configmap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># vim configmaps-volume-demo2.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: configmaps-volume-demo2</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: proxy</span><br><span class="line">    image: envoyproxy/envoy-alpine:v1.14.1</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;envoy -c /etc/envoy/..data/envoy.yaml&#x27;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: appconfs</span><br><span class="line">      mountPath: /etc/envoy     <span class="comment"># 此处卷被加载时只会加载到envoy.yaml和lds.conf这两个键</span></span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  - name: demo</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    env:</span><br><span class="line">    - name: PORT</span><br><span class="line">      valueFrom:</span><br><span class="line">        configMapKeyRef:</span><br><span class="line">          name: demoapp-confs</span><br><span class="line">          key: demoapp.port</span><br><span class="line">          optional: <span class="literal">false</span></span><br><span class="line">    - name: HOST</span><br><span class="line">      valueFrom:</span><br><span class="line">        configMapKeyRef:</span><br><span class="line">          name: demoapp-confs</span><br><span class="line">          key: demoapp.port</span><br><span class="line">          optional: <span class="literal">false</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: appconfs</span><br><span class="line">    configMap:</span><br><span class="line">      name: demoapp-confs       <span class="comment"># 挂载demoapp-confs这个configMap</span></span><br><span class="line">      items:</span><br><span class="line">      - key: envoy.yaml					<span class="comment"># 只将demoapp-confs中的envoy.yaml这个key进行挂载</span></span><br><span class="line">        path: envoy.yaml				<span class="comment"># 挂载后使用的名字为envoy.yaml.</span></span><br><span class="line">        mode: 0644</span><br><span class="line">      - key: lds.conf         	<span class="comment"># 只将demoapp-confs中的lds.conf这个key进行挂载</span></span><br><span class="line">        path: lds.conf          <span class="comment"># 挂载后使用的名字为lds.conf</span></span><br><span class="line">        mode: 0644</span><br><span class="line">      optional: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此configMap表示不关心demoapp-confs中有多少信息，只加载有限的2个配置。</span></span><br></pre></td></tr></table></figure>

<p>3.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl apply -f configmaps-volume-demo2.yaml</span></span><br><span class="line">pod/configmaps-volume-demo2 created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get  pod configmaps-volume-demo2 -o wide</span></span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">configmaps-volume-demo2   2/2     Running   0          71s   10.244.1.14   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>4.测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试访问</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># curl 10.244.1.14</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 127.0.0.1, ServerName: configmaps-volume-demo2, ServerIP: 10.244.1.14!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看2个文件的配置文件是否都生效</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl exec -it  configmaps-volume-demo2 -c demo -- netstat -tnl</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State</span><br><span class="line">tcp        0      0 0.0.0.0:9901            0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 127.0.0.1:8080          0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN</span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl exec -it  configmaps-volume-demo2 -c proxy -- netstat -tnl</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State</span><br><span class="line">tcp        0      0 0.0.0.0:9901            0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 127.0.0.1:8080          0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure>

<h4 id="示例4：挂载整个存储卷，在容器中挑需要的配置"><a href="#示例4：挂载整个存储卷，在容器中挑需要的配置" class="headerlink" title="示例4：挂载整个存储卷，在容器中挑需要的配置"></a>示例4：挂载整个存储卷，在容器中挑需要的配置</h4><p>1.此示例使用的为上面cm中已定义的nginx-config-files</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get cm nginx-config-files -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  myserver-gzip.cfg: |</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_comp_level 5;</span><br><span class="line">    gzip_proxied expired no-cache no-store private auth;</span><br><span class="line">    gzip_types text/plain text/css application/xml text/javascript;</span><br><span class="line">  myserver-status.cfg: |</span><br><span class="line">    location /nginx-status &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">  myserver.conf: <span class="string">&quot;server &#123;\n    listen 8080;\n    server_name www.mylinuxops.com;\n</span></span><br><span class="line"><span class="string">    \   \n    include /etc/nginx/conf.d/myserver-*.cfg;\n\n    location / &#123;\n        root</span></span><br><span class="line"><span class="string">    /usr/share/nginx/html;\n    &#125;\n&#125;\n&quot;</span></span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-15T14:01:48Z&quot;</span></span><br><span class="line">  name: nginx-config-files</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;64908&quot;</span></span><br><span class="line">  uid: fec6d779-8b54-4dc3-bddb-87d8872b61f3</span><br></pre></td></tr></table></figure>

<p>2.编写pod资源配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># vim configmaps-volume-demo3.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: configmaps-volume-demo3</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx:alpine</span><br><span class="line">    name: nginx-server</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: ngxconfs</span><br><span class="line">      mountPath: /etc/nginx/conf.d/myserver.conf    <span class="comment"># </span></span><br><span class="line">      subPath: myserver.conf                        <span class="comment"># 表示只加载并获取存储卷中的指定路径文件或目录，此处为挂载卷中的myserver.conf</span></span><br><span class="line">    - name: ngxconfs</span><br><span class="line">      mountPath: /etc/nginx/conf.d/myserver-gzip.cfg</span><br><span class="line">      subPath: myserver-gzip.cfg                   <span class="comment"># 表示挂载卷中的myserver-gzip.cfg</span></span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: ngxconfs</span><br><span class="line">    configMap:</span><br><span class="line">      name: nginx-config-files    <span class="comment"># volume中引用了nginx-config-files，其中有3个key</span></span><br><span class="line"><span class="comment"># 在Pod中只挂载了其中的两个key</span></span><br></pre></td></tr></table></figure>

<p>3.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl apply -f configmaps-volume-demo3.yaml</span></span><br><span class="line">pod/configmap-volume-demo3 created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get pods configmaps-volume-demo3 -o wide</span></span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">configmaps-volume-demo3   1/1     Running   0          46s   10.244.2.16   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>4.进入容器查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl exec -it configmaps-volume-demo3 -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># cd /etc/nginx/conf.d</span></span><br><span class="line">/etc/nginx/conf.d <span class="comment"># ls</span></span><br><span class="line">default.conf       myserver-gzip.cfg  myserver.conf</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>存储卷</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊存储卷Secret</title>
    <url>/2021/07/06/Kubernetes/03Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/05%E7%89%B9%E6%AE%8A%E5%AD%98%E5%82%A8%E5%8D%B7Secret/%E7%89%B9%E6%AE%8A%E5%AD%98%E5%82%A8%E5%8D%B7Secret/</url>
    <content><![CDATA[<h3 id="Secret详解"><a href="#Secret详解" class="headerlink" title="Secret详解"></a>Secret详解</h3><p>ConfigMap可以向Pod内部注入配置信息，但是使用<code>kubectl describe</code>可以很轻易的看到配置信息，所以这对于向pod中的应用传敏感数据时就不太适用了。因而k8s提供了一种Secret资源来将敏感信息实施转换后再保存，而后每次被注入到Pod容器时自动解码，完成信息的还原。<br>Secret资源是以非加密的形式存储于k8s的<code>api-server</code>后端的etcd中，即便做了转换其也不过是做了base64编码。</p>
<h3 id="Secret的类型"><a href="#Secret的类型" class="headerlink" title="Secret的类型"></a>Secret的类型</h3><p>ConfigMap的配置信息基本没有类别之分，但Secret有所不同，根据其用户存在类型的概念；</p>
<ul>
<li>docker-registry：专用于让kubelet启动Pod时从私有镜像仓库pull镜像时，首先认证到Registry时使用；</li>
<li>tls：专门用于保存tls/ssl用到证书和配对儿的私钥；</li>
<li>generic：余下的通用类型</li>
</ul>
<h4 id="generic类型的Secret"><a href="#generic类型的Secret" class="headerlink" title="generic类型的Secret"></a>generic类型的Secret</h4><p>gemeric通用类型； 可以存在子类型：</p>
<ul>
<li><code>--type=&quot;kubernetes.io/basic-auth&quot;</code>：适用于web端的basic认证</li>
<li><code>--type=&quot;kubernetes.io/rbd&quot;</code>：适用于ceph认证</li>
<li><code>--type=&quot;kubernetes.io/ssh-auth&quot;</code>：适用于认证到ssh服务器</li>
</ul>
<h5 id="generic示例1："><a href="#generic示例1：" class="headerlink" title="generic示例1："></a>generic示例1：</h5><p>为msyql账号密码创建secret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给mysql创建账号密码</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl create secret generic mysql-root-authn --from-literal=username=root --from-literal=password=mylinuxops.com</span></span><br><span class="line">secret/mysql-root-authn created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取mysql-root-authn</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get secret mysql-root-authn -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  password: bXlsaW51eG9wcy5jb20=          <span class="comment"># 此为base64编码后的</span></span><br><span class="line">  username: cm9vdA==</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-16T08:21:21Z&quot;</span></span><br><span class="line">  name: mysql-root-authn</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;216488&quot;</span></span><br><span class="line">  uid: 681cdb7d-73f8-428a-8443-a87ec30c5c05</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用base64解码</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># echo &quot;bXlsaW51eG9wcy5jb20=&quot; | base64 -d</span></span><br><span class="line">mylinuxops.com</span><br></pre></td></tr></table></figure>

<h5 id="generic示例2："><a href="#generic示例2：" class="headerlink" title="generic示例2："></a>generic示例2：</h5><p>在为web服务创建basic认证时需要额外使用<code>--type</code>选项，来指定<code>--type=&quot;kubernetes.io/basic-auth&quot;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建secret资源</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl create secret generic web-basic-authn --from-literal=username=devopser --from-literal=password=mylinuxops.com --type=&quot;ikubernetes.io/basic-auth&quot;</span></span><br><span class="line">secret/web-basic-authn created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看详细信息，观察type字段</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get secrets web-basic-authn -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  password: bXlsaW51eG9wcy5jb20=</span><br><span class="line">  username: ZGV2b3BzZXI=</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-16T08:33:34Z&quot;</span></span><br><span class="line">  name: web-basic-authn</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;218171&quot;</span></span><br><span class="line">  uid: f04cf0f7-10c2-4b62-b41d-5c675be3daba</span><br><span class="line"><span class="built_in">type</span>: ikubernetes.io/basic-auth             <span class="comment"># 此为kubernetes专用于basic认证所使用的。</span></span><br></pre></td></tr></table></figure>

<h5 id="其他事项："><a href="#其他事项：" class="headerlink" title="其他事项："></a>其他事项：</h5><p>另外，保存有专用于ServiceAccount的相关的token信息的Secret资源会使用资源注解来保存其使用场景。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">   	kubernetes.io/service-account.name: node-controller</span><br><span class="line">   	kubernetes.io/service-account.uid: b9f7e593-3e49-411c-87e2-dbd7ed9749c0</span><br></pre></td></tr></table></figure>

<p>资源的元数据：除了name, namespace之外，常用的还有labels, annotations；</p>
<ol>
<li>annotation的名称遵循类似于labels的名称命名格式，但其数据长度不受限制；</li>
<li>它不能用于被标签选择器作为筛选条件；但常用于为那些仍处于Beta阶段的应用程序提供临时的配置接口；</li>
<li>管理命令：kubectl annotate TYPE/NAME KEY=VALUE, kubectl annotate TYPE/NAME KEY-</li>
</ol>
<p>还有一种由kubeadm的bootstrap所使用的token专用的类型，它通常保存于kube-system名称空间，以bootstrap-token-为前缀。</p>
<ul>
<li><code>--type=&quot;bootstrap.kubernetes.io/token&quot;</code></li>
</ul>
<h4 id="tls类型secret"><a href="#tls类型secret" class="headerlink" title="tls类型secret"></a>tls类型secret</h4><p>TLS类型是一种独特的类型，在创建secret的命令行中，除了类型标识的不同之外，它还需要使用专用的选项<code>--cert</code>和<code>--key</code>。</p>
<p>无论证书和私钥文件名是什么，它们会统一为：</p>
<ul>
<li>tls.crt</li>
<li>tls.key</li>
</ul>
<h5 id="tls示例："><a href="#tls示例：" class="headerlink" title="tls示例："></a>tls示例：</h5><p>创建一个crt和key文件，将其做成tls类型的secret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># (umask 077;openssl genrsa -out nginx.key 2048)</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># openssl req -new -x509 -key nginx.key -out nginx.crt -subj /C=CN/ST=Shanghai/L=Shanghai/O=DevOps/CN=www.mylinuxops.com</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># ls</span></span><br><span class="line">nginx.crt  nginx.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建tls类型secret</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># kubectl create secret tls nginx-ssl --key=nginx.key --cert=nginx.crt</span></span><br><span class="line">secret/nginx-ssl created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看secret信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># kubectl get secret nginx-ssl -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURvekNDQW91Z0F3SUJBZ0lVQXd5WFovc3hKRGlVemxBdi9WSFR0ZVNXaXY0d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lURUxNQWtHQTFVRUJoTUNRMDR4RVRBUEJnTlZCQWdNQ0ZOb1lXNW5hR0ZwTVJFd0R3WURWUVFIREFoVAphR0Z1WjJoaGFURVBNQTBHQTFVRUNnd0dSR1YyVDNCek1Sc3dHUVlEVlFRRERCSjNkM2N1Ylhsc2FXNTFlRzl3CmN5NWpiMjB3SGhjTk1qRXdOekUyTURrek1UTTJXaGNOTWpFd09ERTFNRGt6TVRNMldqQmhNUXN3Q1FZRFZRUUcKRXdKRFRqRVJNQThHQTFVRUNBd0lVMmhoYm1kb1lXa3hFVEFQQmdOVkJBY01DRk5vWVc1bmFHRnBNUTh3RFFZRApWUVFLREFaRVpYWlBjSE14R3pBWkJnTlZCQU1NRW5kM2R5NXRlV3hwYm5WNGIzQnpMbU52YlRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5idVBJN055QjlGWWtOTk1OTTV3blhrdVR0RVFnaEYKUzZVZVgrVVNtZ2VMZGgzemNnTEczVWRwY3BaSS92SGZ6WFlqK05VYVpNVFNrVVlqYU5GaXhzbzNaV1g5N0tFSwpPWXJsMnBFYnY3dno3KzRocTIwbjkvQzNtWDdkaHFrSFdydmFqRzA5Si9uakxNR2E3Mm1PdmxDcE5zSGdsUGdNClA4cEZ6LzdPQnZIUUkwdjZsRVdaVXJSOE1NcW1SY2ZaTGtPWjJ3bGFmUGJ5RXc4N21wRFVOK2sxdnZKcHV0RjAKRGRKMEdWZERZWE9YcTMxenBmbXVkb3RGbEp1NFFVSHI2QTVXM1A1bEVsY0ZSUVFFaG40ZzB6alhMdjVaM0RzNQpuVWwyLzdHaVczcFgrbVNTVDlZbm12aGdiQ0w5K1pBNFRub08yVjBuZjlET2FwOHNuYVlWRS9zQ0F3RUFBYU5UCk1GRXdIUVlEVlIwT0JCWUVGTXZlMDlvbUVJUy9Qb21CQW94ZDFkWXJwdDJNTUI4R0ExVWRJd1FZTUJhQUZNdmUKMDlvbUVJUy9Qb21CQW94ZDFkWXJwdDJNTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFLUDYwOEJwbkdCcXBXMitYL1BmREEyMTVQYlpIMERBc2RlL2RKN1FIanpzbWs2YnpleUhnVmd4CjJPSkFXckNiS2xZUW9MbEJtbjl2RnlwcGE4WFdOc0RGaDhadEM0U2UxSkZ4TjdNdzJtbXpWQ1RINFhwbnl3NngKVVlORlVyNC94YW9yTFdMMGhWRnJjNXhXQXJhQXdlRXFYZ2hVZEFLS3h4NUZtNUJHcTdwbFd4QzJnaVZmcythRQpYQXFjVDVubzM4VmdLMHRaQUVGTUJ4SG9Bd3Vib2Y5ajVDdFpiV212akxUV01tUmdwdjlTdUh4WmZ3bmZUeW9jCnhHSGJHWmtZSFowbm9SSlBlRjc1ZlVvbmdOQnVxdENEaEgyRkR0azJ6NWlJT0hldjJ6UGZBZ1pKYy9lZzd2b0MKb2tzWVFvQ1pxMGM1RU02Q3pCekI5TjJFTmZ4bTNDZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=</span><br><span class="line">  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMXU0OGpzM0lIMFZpUTAwdzB6bkNkZVM1TzBSQ0NFVkxwUjVmNVJLYUI0dDJIZk55CkFzYmRSMmx5bGtqKzhkL05kaVA0MVJwa3hOS1JSaU5vMFdMR3lqZGxaZjNzb1FvNWl1WGFrUnUvdS9QdjdpR3IKYlNmMzhMZVpmdDJHcVFkYXU5cU1iVDBuK2VNc3dacnZhWTYrVUtrMndlQ1UrQXcveWtYUC9zNEc4ZEFqUy9xVQpSWmxTdEh3d3lxWkZ4OWt1UTVuYkNWcDg5dklURHp1YWtOUTM2VFcrOG1tNjBYUU4wblFaVjBOaGM1ZXJmWE9sCithNTJpMFdVbTdoQlFldm9EbGJjL21VU1Z3VkZCQVNHZmlEVE9OY3UvbG5jT3ptZFNYYi9zYUpiZWxmNlpKSlAKMWllYStHQnNJdjM1a0RoT2VnN1pYU2QvME01cW55eWRwaFVUK3dJREFRQUJBb0lCQUZObUFnMlBmL1hTWUh5bworU2NkSkgzR2tMR1VuT0xFc01PVGM3WlpiM2M2QUUxQzU1eDRPZWk1M0FMQXRGeDZjU2xFY0F1UXdFVTNSN09sCmpjaWh3VzA1N1ppVDNUdm4wY2c1eElQRjlySWh4NW5wYXJGaWJ1enk4UmF2TXM5bjBTZFBlR255N3c0aHZuNHAKZG5qSk1NUHZ4UldaNVhRU25MWUtQTmtzYkxsclNhYm1QZi9qT1N6ZkdoQTlDUlhwcnlpOVBuQWxxY0lJSjV4UQpOOTdMVFk1TTRaUnp2aHNiUnlUb1JGa2JJeFBDai8wOWdrWTdWdDlHRnAyaHpCdmNkSmNJaVplRkFVdDVoUnJICllPM01zWVJXK09tZmROYm1jLy92T3hNQnhpbnF0U0ljcVBFYklDdmNRejV2NXNuU20zdXg5S1U2TVZoWldnOFQKVkhXR3VDRUNnWUVBKzl5SmRoZzhCN3A0WFBQdXR6RWZJZ2xNMFZIMGszcHV0ZktTdUl4dHllcXFkWURRcGY0VgpXR0hDK2grM2Vtd0VqWkNFdUZ2eWxKVDNIREpid29IOXJCcUc5RmJkVU1jN2tCRm50U2kyTmw4bmxlQnVWTHlNClJHQXdKaUdjOUFsWGxoZkcxU0M0WlpuTFNzM1Q1aHd6V3BRSEorNnZ5N0oydTk4cVBGcE9GTmtDZ1lFQTJuWloKU21qZUNZVmdyTG5BOGpObVFybXo4eGVkdEJoSjJHZncrdFQwQysxVFM5aXJVUjRYb2w4cFRyZjhDNXArY1M0cgo2d1dCeEFSajlFRzc2VXo3UytJZmwzbUo5bTJOYTdMRGhJTUF3YTlDWVZ4VXJ0VWVSS2NnQ3NSWERmaHBlcWtICmh3MlVQZHNnRDg4dTVVODl2SnUrQ21QekNYQ1B3RGpIQXEzYld2TUNnWUVBcWIxUHh3OCtKZGMrRnljdTByZUEKUytnSXBXbWVjMllvQnVlY2lsUGFDaUxsRHB2cUFuVGkzZFhGR2QwV1FxTlp6aTUvdzkvejlMOFFheWhsUHdscwpkUGpMeXhCZngzaitZM0hYZXZnZEZUZTc3ZjU3WFJCVldCK2JVNWVEdDlReit5dTdEUmdvTGhFZ09TSE9sVjZjCkhZZDE2eXVwdnBaZi91M0FBVHk3TXNFQ2dZQnNTaG44dm5yQnNYRzRiT050cTNqWFBvSXF6OXdHZDd1ekgrTGUKRTAxZDFDaGtBbVQ1Y3JjNGIzOWtXK0wrUlhqRDFhVkRmSmxVZHZDdEZTQjJod2hTRnlhZHlVdFA4Z0lXRHFqSQpPTC9aUW16ZklndUFGbmhJZzZkb2J1YlFNQURwSW54dXY1WnFDd0tiazVHbGJXQW02L1NKNWYyRkFsemZaY1dRCldHblJiUUtCZ1FEYWRuekZ0WUlvQ285aGhPdkl4RFhKeG1aMnU3NlJwUUJ5cXlYb3NzN2JUY1NqVHdPTGFMS2QKUjNWSm5kNWNiUTRhVEQxYzNPU0RFbXU0U1pjZUgxcUJFdjQ3MTZGL0RaZ2gxNnBYWnV1K0x0YUVBbWRJVkJjZApuOUxDcnM1Y3JQTVZyUm5zam5ydUpWc1NyWGJXNWdBK3F3MURoRjArWEhrK09EMXJQUXZhbGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-16T09:33:30Z&quot;</span></span><br><span class="line">  name: nginx-ssl</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;226423&quot;</span></span><br><span class="line">  uid: 7f79533a-db1a-49cd-9108-a3d4bf933672</span><br><span class="line"><span class="built_in">type</span>: kubernetes.io/tls</span><br></pre></td></tr></table></figure>

<h4 id="docker-registry类型secret"><a href="#docker-registry类型secret" class="headerlink" title="docker-registry类型secret"></a>docker-registry类型secret</h4><p>Docker Registry类型，也是独特类型：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create secret docker-registry my-secret \</span><br><span class="line">    --docker-server=DOCKER_REGISTRY_SERVER \</span><br><span class="line">    --docker-username=DOCKER_USER \</span><br><span class="line">    --docker-password=DOCKER_PASSWORD \</span><br><span class="line">    --docker-email=DOCKER_EMAIL</span><br></pre></td></tr></table></figure>

<p>如果曾经访问过docker-registry，那么也能够从docker的认证文件中加载信息，这时使用<code>--from-file</code>选项:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通常认证信息保存在用户家目录下的.docker/config.json或着.dockercfg文件中</span></span><br><span class="line">kubectl create secret docker-registry my-secret --from-file=~/.docker/config.json</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">kubectl create secret docker-registry my-secret --from-file=<span class="variable">$HOME</span>/.dockercfg</span><br></pre></td></tr></table></figure>

<h5 id="docker-registry的使用方法"><a href="#docker-registry的使用方法" class="headerlink" title="docker-registry的使用方法"></a>docker-registry的使用方法</h5><p>docker-registry通常是配置在容器拉取镜像时使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl explain pod.spec.imagePullSecrets</span></span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1</span><br><span class="line"></span><br><span class="line">RESOURCE: imagePullSecrets &lt;[]Object&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     ImagePullSecrets is an optional list of references to secrets <span class="keyword">in</span> the same</span><br><span class="line">     namespace to use <span class="keyword">for</span> pulling any of the images used by this PodSpec. If</span><br><span class="line">     specified, these secrets will be passed to individual puller</span><br><span class="line">     implementations <span class="keyword">for</span> them to use. For example, <span class="keyword">in</span> the <span class="keyword">case</span> of docker, only</span><br><span class="line">     DockerConfig <span class="built_in">type</span> secrets are honored. More info:</span><br><span class="line">     https://kubernetes.io/docs/concepts/containers/images<span class="comment">#specifying-imagepullsecrets-on-a-pod</span></span><br><span class="line"></span><br><span class="line">     LocalObjectReference contains enough information to <span class="built_in">let</span> you locate the</span><br><span class="line">     referenced object inside the same namespace.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   name &lt;string&gt;</span><br><span class="line">     Name of the referent. More info:</span><br><span class="line">     https://kubernetes.io/docs/concepts/overview/working-with-objects/names/<span class="comment">#names</span></span><br></pre></td></tr></table></figure>

<h3 id="Secret资源，使用环境变量"><a href="#Secret资源，使用环境变量" class="headerlink" title="Secret资源，使用环境变量"></a>Secret资源，使用环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">containers:</span><br><span class="line">- name: …</span><br><span class="line">  image: …</span><br><span class="line">  env:</span><br><span class="line">  - name: &lt;string&gt;      		 <span class="comment"># 变量名，其值来自于某Secret对象上的指定键的值；</span></span><br><span class="line">    valueFrom:          		  <span class="comment"># 键值引用； </span></span><br><span class="line">      secretKeyRef:</span><br><span class="line">        name: &lt;string&gt;  			  <span class="comment"># 引用的Secret对象的名称，需要与该Pod位于同一名称空间；</span></span><br><span class="line">        key: &lt;string&gt;  			   <span class="comment"># 引用的Secret对象上的键，其值将传递给环境变量；</span></span><br><span class="line">        optional: &lt;boolean&gt;		 <span class="comment"># 是否为可选引用；</span></span><br><span class="line">  envFrom:             			    <span class="comment"># 整体引用指定的Secret对象的全部键名和键值；</span></span><br><span class="line">  - prefix: &lt;string&gt; 				    <span class="comment"># 将所有键名引用为环境变量时统一添加的前缀；</span></span><br><span class="line">secretRef:</span><br><span class="line">  name: &lt;string&gt; 				    <span class="comment"># 引用的Secret对象名称；</span></span><br><span class="line">  optional: &lt;boolean&gt;				 <span class="comment"># 是否为可选引用；</span></span><br></pre></td></tr></table></figure>

<h3 id="Secret资源使用示例"><a href="#Secret资源使用示例" class="headerlink" title="Secret资源使用示例"></a>Secret资源使用示例</h3><h4 id="mysql加载root口令"><a href="#mysql加载root口令" class="headerlink" title="mysql加载root口令"></a>mysql加载root口令</h4><p>1.创建MySQL资源清单，使用已创建的mysql-root-authn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># vim secrets-env-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: secret-env-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: mariadb</span><br><span class="line">    image: mariadb</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    env:</span><br><span class="line">    - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">      valueFrom:</span><br><span class="line">        secretKeyRef:</span><br><span class="line">          name: mysql-root-authn</span><br><span class="line">          key: password</span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl apply -f secrets-env-demo.yaml</span></span><br><span class="line">pod/secret-env-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get pods secret-env-demo</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">secret-env-demo             1/1     Running   0          1m</span><br></pre></td></tr></table></figure>

<p>3.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl exec secret-env-demo -- mysql -uroot -pmylinuxops.com -e &quot;show databases;&quot;</span></span><br><span class="line">Database</span><br><span class="line">information_schema</span><br><span class="line">mysql</span><br><span class="line">performance_schema</span><br><span class="line">sys</span><br></pre></td></tr></table></figure>

<h4 id="https虚拟主机示例"><a href="#https虚拟主机示例" class="headerlink" title="https虚拟主机示例"></a>https虚拟主机示例</h4><p>1.编写pod资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># vim secrets-volume-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: secrets-volume-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: ngxserver</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginxcerts</span><br><span class="line">      mountPath: /etc/nginx/certs/</span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">    - name: nginxconfs</span><br><span class="line">      mountPath: /etc/nginx/conf.d/</span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginxcerts</span><br><span class="line">    secret:</span><br><span class="line">      secretName: nginx-ssl</span><br><span class="line">  - name: nginxconfs</span><br><span class="line">    configMap:</span><br><span class="line">      name: nginx-sslvhosts-confs</span><br><span class="line">      optional: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>2.创建secret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># (umask 077;openssl genrsa -out nginx.key 2048)</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># openssl req -new -x509 -key nginx.key -out nginx.crt -subj /C=CN/ST=Shanghai/L=Shanghai/O=DevOps/CN=www.mylinuxops.com</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># ls</span></span><br><span class="line">nginx.crt  nginx.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建tls类型secret</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># kubectl create secret tls nginx-ssl --key=nginx.key --cert=nginx.crt</span></span><br><span class="line">secret/nginx-ssl created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看secret信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># kubectl get secret nginx-ssl -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURvekNDQW91Z0F3SUJBZ0lVQXd5WFovc3hKRGlVemxBdi9WSFR0ZVNXaXY0d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lURUxNQWtHQTFVRUJoTUNRMDR4RVRBUEJnTlZCQWdNQ0ZOb1lXNW5hR0ZwTVJFd0R3WURWUVFIREFoVAphR0Z1WjJoaGFURVBNQTBHQTFVRUNnd0dSR1YyVDNCek1Sc3dHUVlEVlFRRERCSjNkM2N1Ylhsc2FXNTFlRzl3CmN5NWpiMjB3SGhjTk1qRXdOekUyTURrek1UTTJXaGNOTWpFd09ERTFNRGt6TVRNMldqQmhNUXN3Q1FZRFZRUUcKRXdKRFRqRVJNQThHQTFVRUNBd0lVMmhoYm1kb1lXa3hFVEFQQmdOVkJBY01DRk5vWVc1bmFHRnBNUTh3RFFZRApWUVFLREFaRVpYWlBjSE14R3pBWkJnTlZCQU1NRW5kM2R5NXRlV3hwYm5WNGIzQnpMbU52YlRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5idVBJN055QjlGWWtOTk1OTTV3blhrdVR0RVFnaEYKUzZVZVgrVVNtZ2VMZGgzemNnTEczVWRwY3BaSS92SGZ6WFlqK05VYVpNVFNrVVlqYU5GaXhzbzNaV1g5N0tFSwpPWXJsMnBFYnY3dno3KzRocTIwbjkvQzNtWDdkaHFrSFdydmFqRzA5Si9uakxNR2E3Mm1PdmxDcE5zSGdsUGdNClA4cEZ6LzdPQnZIUUkwdjZsRVdaVXJSOE1NcW1SY2ZaTGtPWjJ3bGFmUGJ5RXc4N21wRFVOK2sxdnZKcHV0RjAKRGRKMEdWZERZWE9YcTMxenBmbXVkb3RGbEp1NFFVSHI2QTVXM1A1bEVsY0ZSUVFFaG40ZzB6alhMdjVaM0RzNQpuVWwyLzdHaVczcFgrbVNTVDlZbm12aGdiQ0w5K1pBNFRub08yVjBuZjlET2FwOHNuYVlWRS9zQ0F3RUFBYU5UCk1GRXdIUVlEVlIwT0JCWUVGTXZlMDlvbUVJUy9Qb21CQW94ZDFkWXJwdDJNTUI4R0ExVWRJd1FZTUJhQUZNdmUKMDlvbUVJUy9Qb21CQW94ZDFkWXJwdDJNTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFLUDYwOEJwbkdCcXBXMitYL1BmREEyMTVQYlpIMERBc2RlL2RKN1FIanpzbWs2YnpleUhnVmd4CjJPSkFXckNiS2xZUW9MbEJtbjl2RnlwcGE4WFdOc0RGaDhadEM0U2UxSkZ4TjdNdzJtbXpWQ1RINFhwbnl3NngKVVlORlVyNC94YW9yTFdMMGhWRnJjNXhXQXJhQXdlRXFYZ2hVZEFLS3h4NUZtNUJHcTdwbFd4QzJnaVZmcythRQpYQXFjVDVubzM4VmdLMHRaQUVGTUJ4SG9Bd3Vib2Y5ajVDdFpiV212akxUV01tUmdwdjlTdUh4WmZ3bmZUeW9jCnhHSGJHWmtZSFowbm9SSlBlRjc1ZlVvbmdOQnVxdENEaEgyRkR0azJ6NWlJT0hldjJ6UGZBZ1pKYy9lZzd2b0MKb2tzWVFvQ1pxMGM1RU02Q3pCekI5TjJFTmZ4bTNDZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=</span><br><span class="line">  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMXU0OGpzM0lIMFZpUTAwdzB6bkNkZVM1TzBSQ0NFVkxwUjVmNVJLYUI0dDJIZk55CkFzYmRSMmx5bGtqKzhkL05kaVA0MVJwa3hOS1JSaU5vMFdMR3lqZGxaZjNzb1FvNWl1WGFrUnUvdS9QdjdpR3IKYlNmMzhMZVpmdDJHcVFkYXU5cU1iVDBuK2VNc3dacnZhWTYrVUtrMndlQ1UrQXcveWtYUC9zNEc4ZEFqUy9xVQpSWmxTdEh3d3lxWkZ4OWt1UTVuYkNWcDg5dklURHp1YWtOUTM2VFcrOG1tNjBYUU4wblFaVjBOaGM1ZXJmWE9sCithNTJpMFdVbTdoQlFldm9EbGJjL21VU1Z3VkZCQVNHZmlEVE9OY3UvbG5jT3ptZFNYYi9zYUpiZWxmNlpKSlAKMWllYStHQnNJdjM1a0RoT2VnN1pYU2QvME01cW55eWRwaFVUK3dJREFRQUJBb0lCQUZObUFnMlBmL1hTWUh5bworU2NkSkgzR2tMR1VuT0xFc01PVGM3WlpiM2M2QUUxQzU1eDRPZWk1M0FMQXRGeDZjU2xFY0F1UXdFVTNSN09sCmpjaWh3VzA1N1ppVDNUdm4wY2c1eElQRjlySWh4NW5wYXJGaWJ1enk4UmF2TXM5bjBTZFBlR255N3c0aHZuNHAKZG5qSk1NUHZ4UldaNVhRU25MWUtQTmtzYkxsclNhYm1QZi9qT1N6ZkdoQTlDUlhwcnlpOVBuQWxxY0lJSjV4UQpOOTdMVFk1TTRaUnp2aHNiUnlUb1JGa2JJeFBDai8wOWdrWTdWdDlHRnAyaHpCdmNkSmNJaVplRkFVdDVoUnJICllPM01zWVJXK09tZmROYm1jLy92T3hNQnhpbnF0U0ljcVBFYklDdmNRejV2NXNuU20zdXg5S1U2TVZoWldnOFQKVkhXR3VDRUNnWUVBKzl5SmRoZzhCN3A0WFBQdXR6RWZJZ2xNMFZIMGszcHV0ZktTdUl4dHllcXFkWURRcGY0VgpXR0hDK2grM2Vtd0VqWkNFdUZ2eWxKVDNIREpid29IOXJCcUc5RmJkVU1jN2tCRm50U2kyTmw4bmxlQnVWTHlNClJHQXdKaUdjOUFsWGxoZkcxU0M0WlpuTFNzM1Q1aHd6V3BRSEorNnZ5N0oydTk4cVBGcE9GTmtDZ1lFQTJuWloKU21qZUNZVmdyTG5BOGpObVFybXo4eGVkdEJoSjJHZncrdFQwQysxVFM5aXJVUjRYb2w4cFRyZjhDNXArY1M0cgo2d1dCeEFSajlFRzc2VXo3UytJZmwzbUo5bTJOYTdMRGhJTUF3YTlDWVZ4VXJ0VWVSS2NnQ3NSWERmaHBlcWtICmh3MlVQZHNnRDg4dTVVODl2SnUrQ21QekNYQ1B3RGpIQXEzYld2TUNnWUVBcWIxUHh3OCtKZGMrRnljdTByZUEKUytnSXBXbWVjMllvQnVlY2lsUGFDaUxsRHB2cUFuVGkzZFhGR2QwV1FxTlp6aTUvdzkvejlMOFFheWhsUHdscwpkUGpMeXhCZngzaitZM0hYZXZnZEZUZTc3ZjU3WFJCVldCK2JVNWVEdDlReit5dTdEUmdvTGhFZ09TSE9sVjZjCkhZZDE2eXVwdnBaZi91M0FBVHk3TXNFQ2dZQnNTaG44dm5yQnNYRzRiT050cTNqWFBvSXF6OXdHZDd1ekgrTGUKRTAxZDFDaGtBbVQ1Y3JjNGIzOWtXK0wrUlhqRDFhVkRmSmxVZHZDdEZTQjJod2hTRnlhZHlVdFA4Z0lXRHFqSQpPTC9aUW16ZklndUFGbmhJZzZkb2J1YlFNQURwSW54dXY1WnFDd0tiazVHbGJXQW02L1NKNWYyRkFsemZaY1dRCldHblJiUUtCZ1FEYWRuekZ0WUlvQ285aGhPdkl4RFhKeG1aMnU3NlJwUUJ5cXlYb3NzN2JUY1NqVHdPTGFMS2QKUjNWSm5kNWNiUTRhVEQxYzNPU0RFbXU0U1pjZUgxcUJFdjQ3MTZGL0RaZ2gxNnBYWnV1K0x0YUVBbWRJVkJjZApuOUxDcnM1Y3JQTVZyUm5zam5ydUpWc1NyWGJXNWdBK3F3MURoRjArWEhrK09EMXJQUXZhbGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-16T09:33:30Z&quot;</span></span><br><span class="line">  name: nginx-ssl</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;226423&quot;</span></span><br><span class="line">  uid: 7f79533a-db1a-49cd-9108-a3d4bf933672</span><br><span class="line"><span class="built_in">type</span>: kubernetes.io/tls</span><br></pre></td></tr></table></figure>

<p>3.创建configMap资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx配置文件已经准备好，此处创建configMap资源</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/nginx-ssl-conf.d<span class="comment"># ls</span></span><br><span class="line">myserver.conf  myserver-gzip.cfg  myserver-status.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定当前路径下的所有文件创建出configmap</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/nginx-ssl-conf.d<span class="comment"># kubectl create configmap nginx-sslvhosts-confs --from-file=./</span></span><br><span class="line">configmap/nginx-sslvhosts-confs created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看configmap相关信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/nginx-ssl-conf.d<span class="comment"># kubectl describe configmap nginx-sslvhosts-confs</span></span><br><span class="line">Name:         nginx-sslvhosts-confs</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">myserver-gzip.cfg:</span><br><span class="line">----</span><br><span class="line">gzip on;</span><br><span class="line">gzip_comp_level 5;</span><br><span class="line">gzip_proxied     expired no-cache no-store private auth;</span><br><span class="line">gzip_types text/plain text/css application/xml text/javascript;</span><br><span class="line"></span><br><span class="line">myserver-status.cfg:</span><br><span class="line">----</span><br><span class="line">location /nginx-status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myserver.conf:</span><br><span class="line">----</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.mylinuxops.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/certs/tls.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/certs/tls.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"></span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/myserver-*.cfg;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.mylinuxops.com;</span><br><span class="line">    <span class="built_in">return</span> 301 https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>4.使用配置清单创建出pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl apply -f secrets-volume-demo.yaml</span></span><br><span class="line">pod/secrets-volume-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get pods secrets-volume-demo -o wide</span></span><br><span class="line">NAME                  READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">secrets-volume-demo   1/1     Running   0          7m18s   10.244.3.18   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>5.验证ssl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证443端口已经监听</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl exec secrets-volume-demo -- netstat -tnl</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN</span><br><span class="line">tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用curl访问，正常打开</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter06/certs2.d<span class="comment"># curl -k -H &quot;Host:www.mylinuxops.com&quot;  https://10.244.3.18:443       </span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>存储卷</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊存储卷DownwardAPI</title>
    <url>/2021/07/06/Kubernetes/03Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/06%E7%89%B9%E6%AE%8A%E5%AD%98%E5%82%A8%E5%8D%B7DownwardAPI/%E7%89%B9%E6%AE%8A%E5%AD%98%E5%82%A8%E5%8D%B7DownwardAPI/</url>
    <content><![CDATA[<p>在k8s中除了使用secret和configMap向容器注入配置和敏感信息外，应用程序有时还需要基于其所运行的外在环境（如运行在哪个宿主机之上，宿主机的IP地址等）来了解自己的运行特性。</p>
<p>downwardAPI存储卷类型，从严格意义上来说，downwardAPI不是存储卷，它自身就存在。原因在于，它引用的是Pod自身的运行环境信息，这些信息在Pod启动后就存在。</p>
<p>类似于ConfigMap或Secret资源，容器能够在环境变量中在valueFrom字段中嵌套fieldRef或resourceFieldRef字段来引用其所属Pod对象的元数据信息。不过，通常只有常量类型的属性才能够通过环境变量注入到容器中，毕竟，在进程启动完成后无法再向其告知变量值的变动，于是，环境变量也就不支持中途的更新操作。</p>
<h3 id="DownwardAPI引用"><a href="#DownwardAPI引用" class="headerlink" title="DownwardAPI引用"></a>DownwardAPI引用</h3><p>DownwardAPI的引用分为两类</p>
<h4 id="第一类"><a href="#第一类" class="headerlink" title="第一类"></a>第一类</h4><p>容器规范中可在环境变量配置中的valueFrom通过内嵌字段fieldRef引用的信息包括如下这些：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">metadata.name：Pod对象的名称；</span><br><span class="line">metadata.namespace：Pod对象隶属的名称空间；</span><br><span class="line">metadata.uid：Pod对象的UID；</span><br><span class="line">metadata.labels[<span class="string">&#x27;&lt;KEY&gt;&#x27;</span>]：Pod对象标签中的指定键的值，例如metadata.labels[<span class="string">&#x27;mylabel&#x27;</span>]，仅Kubernetes 1.9及之后的版本才支持；</span><br><span class="line">metadata.annotations[<span class="string">&#x27;&lt;KEY&gt;&#x27;</span>]：Pod对象注解信息中的指定键的值，仅Kubernetes 1.9及之后的版本才支持。</span><br></pre></td></tr></table></figure>

<h4 id="第二类"><a href="#第二类" class="headerlink" title="第二类"></a>第二类</h4><p>容器上的计算资源需求和资源限制相关的信息，以及临时存储资源需求和资源限制相关的信息可通过容器规范中的resourceFieldRef字段引用，相关字段包括requests.cpu、limits.cpu、requests.memory和limits.memory等。另外，可通过环境变量引用的信息有如下几个：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">status.podIP：Pod对象的IP地址</span><br><span class="line">spec.serviceAccountName：Pod对象使用的ServiceAccount资源名称</span><br><span class="line">spec.nodeName：节点名称</span><br><span class="line">status.hostIP：节点IP地址</span><br></pre></td></tr></table></figure>

<p>另外，还可以通过resourceFieldRef字段引用当前容器的资源请求及资源限额的定义，因此它们包括requests.cpu、requests.memory、requests.ephemeral-storage、limits.cpu、limits.memory和limits.ephemeral-storage这6项.</p>
<h3 id="使用downwardAPI变量示例"><a href="#使用downwardAPI变量示例" class="headerlink" title="使用downwardAPI变量示例"></a>使用downwardAPI变量示例</h3><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># vim downwardapi-env-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: downwardapi-env-demo</span><br><span class="line">  labels:</span><br><span class="line">    app: demoapp</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;env&quot;</span>]</span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        memory: <span class="string">&quot;32Mi&quot;</span></span><br><span class="line">        cpu: <span class="string">&quot;250m&quot;</span></span><br><span class="line">      limits:</span><br><span class="line">        memory: <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">        cpu: <span class="string">&quot;500m&quot;</span></span><br><span class="line">    env:</span><br><span class="line">    - name: THIS_POD_NAME</span><br><span class="line">      valueFrom:</span><br><span class="line">        fieldRef:</span><br><span class="line">          fieldPath: metadata.name</span><br><span class="line">    - name: THIS_POD_NAMESPACE</span><br><span class="line">      valueFrom:</span><br><span class="line">        fieldRef:</span><br><span class="line">          fieldPath: metadata.namespace</span><br><span class="line">    - name: THIS_APP_LABEL</span><br><span class="line">      valueFrom:</span><br><span class="line">        fieldRef:</span><br><span class="line">          fieldPath: metadata.labels[<span class="string">&#x27;app&#x27;</span>]</span><br><span class="line">    - name: THIS_CPU_LIMIT</span><br><span class="line">      valueFrom:</span><br><span class="line">        resourceFieldRef:</span><br><span class="line">          resource: limits.cpu             <span class="comment"># 此为container中定义的limits下的cpu</span></span><br><span class="line">    - name: THIS_MEM_REQUEST</span><br><span class="line">      valueFrom:</span><br><span class="line">        resourceFieldRef:</span><br><span class="line">          resource: requests.memory        <span class="comment"># 此为containers中定义的requests下的memory</span></span><br><span class="line">          divisor: 1Mi										<span class="comment"># 默认为字节数，此处除以1000</span></span><br><span class="line">  restartPolicy: Never</span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl apply -f downwardapi-env-demo.yaml</span></span><br><span class="line">pod/downwardapi-env-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl  get pods downwardapi-env-demo -o wide </span></span><br><span class="line">NAME                        READY   STATUS      RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">downwardapi-env-demo        0/1     Completed   0          40m     10.244.1.15   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="comment"># 此容器为答应完env就退出。</span></span><br></pre></td></tr></table></figure>

<p>3.查看容器日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl logs downwardapi-env-demo</span></span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">KUBERNETES_PORT=tcp://10.96.0.1:443</span><br><span class="line">HOSTNAME=downwardapi-env-demo</span><br><span class="line">THIS_CPU_LIMIT=1               <span class="comment"># 此为downwardapi导入的变量</span></span><br><span class="line">THIS_APP_LABEL=demoapp				 <span class="comment"># 此为downwardapi导入的变量</span></span><br><span class="line">SHLVL=1</span><br><span class="line">HOME=/root</span><br><span class="line">THIS_MEM_REQUEST=32          <span class="comment"># 此为downwardapi导入的变量</span></span><br><span class="line">PS1=[\u@\h \w]\$</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">THIS_POD_NAME=downwardapi-env-demo      <span class="comment"># 此为downwardapi导入的变量</span></span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=443</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=tcp</span><br><span class="line">DEPLOYENV=Production</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span><br><span class="line">RELEASE=Stable</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br><span class="line">PWD=/</span><br><span class="line">THIS_POD_NAMESPACE=default				 <span class="comment"># 此为downwardapi导入的变量</span></span><br></pre></td></tr></table></figure>

<h3 id="downwardAPI存储卷示例"><a href="#downwardAPI存储卷示例" class="headerlink" title="downwardAPI存储卷示例"></a>downwardAPI存储卷示例</h3><p>1.编写配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># vim downwardapi-volume-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: downwardapi-volume-demo</span><br><span class="line">  labels:</span><br><span class="line">    zone: zone1</span><br><span class="line">    rack: rack100</span><br><span class="line">    app: demoapp</span><br><span class="line">  annotations:</span><br><span class="line">    region: ease-cn</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        memory: <span class="string">&quot;32Mi&quot;</span></span><br><span class="line">        cpu: <span class="string">&quot;250m&quot;</span></span><br><span class="line">      limits:</span><br><span class="line">        memory: <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">        cpu: <span class="string">&quot;500m&quot;</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: podinfo</span><br><span class="line">      mountPath: /etc/podinfo</span><br><span class="line">      readOnly: <span class="literal">false</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: podinfo</span><br><span class="line">    downwardAPI:               <span class="comment"># 没有引用downwardAPI，事实上是引用了当前pod的信息，从apiServer中查询的</span></span><br><span class="line">      defaultMode: 420</span><br><span class="line">      items:</span><br><span class="line">      - fieldRef:</span><br><span class="line">          fieldPath: metadata.namespace</span><br><span class="line">        path: pod_namespace</span><br><span class="line">      - fieldRef:</span><br><span class="line">          fieldPath: metadata.labels</span><br><span class="line">        path: pod_labels</span><br><span class="line">      - fieldRef:</span><br><span class="line">          fieldPath: metadata.annotations</span><br><span class="line">        path: pod_annotations</span><br><span class="line">      - resourceFieldRef:</span><br><span class="line">          containerName: demoapp</span><br><span class="line">          resource: limits.cpu</span><br><span class="line">        path: <span class="string">&quot;cpu_limit&quot;</span></span><br><span class="line">      - resourceFieldRef:</span><br><span class="line">          containerName: demoapp</span><br><span class="line">          resource: requests.memory</span><br><span class="line">          divisor: <span class="string">&quot;1Mi&quot;</span></span><br><span class="line">        path: <span class="string">&quot;mem_request&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl apply -f downwardapi-volume-demo.yaml</span></span><br><span class="line">pod/downwardapi-volume-demo created</span><br><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get pods downwardapi-volume-demo</span></span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">downwardapi-volume-demo   1/1     Running   0          19s</span><br></pre></td></tr></table></figure>

<p>3.查看downwardAPI在/etc/podinfo所挂载的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl exec -it downwardapi-volume-demo -- /bin/sh</span></span><br><span class="line">[root@downwardapi-volume-demo /]<span class="comment"># cd /etc/podinfo/</span></span><br><span class="line">[root@downwardapi-volume-demo /etc/podinfo]<span class="comment"># ls -l</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx    1 root     root            16 Jul 19 09:17 cpu_limit -&gt; ..data/cpu_limit</span><br><span class="line">lrwxrwxrwx    1 root     root            18 Jul 19 09:17 mem_request -&gt; ..data/mem_request</span><br><span class="line">lrwxrwxrwx    1 root     root            22 Jul 19 09:17 pod_annotations -&gt; ..data/pod_annotations</span><br><span class="line">lrwxrwxrwx    1 root     root            17 Jul 19 09:17 pod_labels -&gt; ..data/pod_labels</span><br><span class="line">lrwxrwxrwx    1 root     root            20 Jul 19 09:17 pod_namespace -&gt; ..data/pod_namespace</span><br><span class="line"></span><br><span class="line">[root@downwardapi-volume-demo /etc/podinfo]<span class="comment"># cat ./*</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">32</span><br><span class="line"></span><br><span class="line">kubectl.kubernetes.io/last-applied-configuration=<span class="string">&quot;&#123;\&quot;apiVersion\&quot;:\&quot;v1\&quot;,\&quot;kind\&quot;:\&quot;Pod\&quot;,\&quot;metadata\&quot;:&#123;\&quot;annotations\&quot;:&#123;\&quot;region\&quot;:\&quot;ease-cn\&quot;&#125;,\&quot;labels\&quot;:&#123;\&quot;app\&quot;:\&quot;demoapp\&quot;,\&quot;rack\&quot;:\&quot;rack100\&quot;,\&quot;zone\&quot;:\&quot;zone1\&quot;&#125;,\&quot;name\&quot;:\&quot;downwardapi-volume-demo\&quot;,\&quot;namespace\&quot;:\&quot;default\&quot;&#125;,\&quot;spec\&quot;:&#123;\&quot;containers\&quot;:[&#123;\&quot;image\&quot;:\&quot;ikubernetes/demoapp:v1.0\&quot;,\&quot;name\&quot;:\&quot;demoapp\&quot;,\&quot;resources\&quot;:&#123;\&quot;limits\&quot;:&#123;\&quot;cpu\&quot;:\&quot;500m\&quot;,\&quot;memory\&quot;:\&quot;64Mi\&quot;&#125;,\&quot;requests\&quot;:&#123;\&quot;cpu\&quot;:\&quot;250m\&quot;,\&quot;memory\&quot;:\&quot;32Mi\&quot;&#125;&#125;,\&quot;volumeMounts\&quot;:[&#123;\&quot;mountPath\&quot;:\&quot;/etc/podinfo\&quot;,\&quot;name\&quot;:\&quot;podinfo\&quot;,\&quot;readOnly\&quot;:false&#125;]&#125;],\&quot;volumes\&quot;:[&#123;\&quot;downwardAPI\&quot;:&#123;\&quot;defaultMode\&quot;:420,\&quot;items\&quot;:[&#123;\&quot;fieldRef\&quot;:&#123;\&quot;fieldPath\&quot;:\&quot;metadata.namespace\&quot;&#125;,\&quot;path\&quot;:\&quot;pod_namespace\&quot;&#125;,&#123;\&quot;fieldRef\&quot;:&#123;\&quot;fieldPath\&quot;:\&quot;metadata.labels\&quot;&#125;,\&quot;path\&quot;:\&quot;pod_labels\&quot;&#125;,&#123;\&quot;fieldRef\&quot;:&#123;\&quot;fieldPath\&quot;:\&quot;metadata.annotations\&quot;&#125;,\&quot;path\&quot;:\&quot;pod_annotations\&quot;&#125;,&#123;\&quot;path\&quot;:\&quot;cpu_limit\&quot;,\&quot;resourceFieldRef\&quot;:&#123;\&quot;containerName\&quot;:\&quot;demoapp\&quot;,\&quot;resource\&quot;:\&quot;limits.cpu\&quot;&#125;&#125;,&#123;\&quot;path\&quot;:\&quot;mem_request\&quot;,\&quot;resourceFieldRef\&quot;:&#123;\&quot;containerName\&quot;:\&quot;demoapp\&quot;,\&quot;divisor\&quot;:\&quot;1Mi\&quot;,\&quot;resource\&quot;:\&quot;requests.memory\&quot;&#125;&#125;]&#125;,\&quot;name\&quot;:\&quot;podinfo\&quot;&#125;]&#125;&#125;\n&quot;</span></span><br><span class="line">kubernetes.io/config.seen=<span class="string">&quot;2021-07-19T09:17:04.392801370Z&quot;</span></span><br><span class="line">kubernetes.io/config.source=<span class="string">&quot;api&quot;</span></span><br><span class="line"></span><br><span class="line">region=<span class="string">&quot;ease-cn&quot;</span>app=<span class="string">&quot;demoapp&quot;</span></span><br><span class="line">rack=<span class="string">&quot;rack100&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>存储卷</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>PV、PVC</title>
    <url>/2021/07/06/Kubernetes/03Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/%E5%AD%98%E5%82%A8%E5%8D%B7%E7%A4%BA%E4%BE%8B/PV%E3%80%81PVC/</url>
    <content><![CDATA[<p>本示例中会创建多个pv、pvc示例以验证pvc在挑选pvc时的策略，pv所使用的后端存储为nfs。</p>
<h3 id="创建nfs共享目录"><a href="#创建nfs共享目录" class="headerlink" title="创建nfs共享目录"></a>创建nfs共享目录</h3><p>在nfs-server上创建出共享的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建出目录</span></span><br><span class="line">[root@nfs ~]<span class="comment"># mkdir /data/redis00&#123;1,2,3,4,5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改nfs配置文件</span></span><br><span class="line">[root@nfs data]<span class="comment"># vim /etc/exports</span></span><br><span class="line">/data/redis     172.16.11.0/24(rw)</span><br><span class="line">/data/redis001  172.16.11.0/24(rw)</span><br><span class="line">/data/redis002  172.16.11.0/24(rw)</span><br><span class="line">/data/redis003  172.16.11.0/24(rw)</span><br><span class="line">/data/redis004  172.16.11.0/24(rw)</span><br><span class="line">/data/redis005  172.16.11.0/24(rw)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新导出目录</span></span><br><span class="line">[root@nfs data]<span class="comment"># exportfs -ar</span></span><br><span class="line">[root@nfs data]<span class="comment"># exportfs </span></span><br><span class="line">/data/redis     172.16.11.0/24</span><br><span class="line">/data/redis001  172.16.11.0/24</span><br><span class="line">/data/redis002  172.16.11.0/24</span><br><span class="line">/data/redis003  172.16.11.0/24</span><br><span class="line">/data/redis004  172.16.11.0/24</span><br><span class="line">/data/redis005  172.16.11.0/24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将该目录下目录的属主改为999</span></span><br><span class="line">[root@nfs data]<span class="comment"># chown 999 ./*</span></span><br><span class="line">[root@nfs data]<span class="comment"># ll</span></span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 2 systemd-coredump root 4096 Jul 13 14:47 redis</span><br><span class="line">drwxr-xr-x 2 systemd-coredump root 4096 Jul 13 17:49 redis001</span><br><span class="line">drwxr-xr-x 2 systemd-coredump root 4096 Jul 13 17:47 redis002</span><br><span class="line">drwxr-xr-x 2 systemd-coredump root 4096 Jul 13 17:49 redis003</span><br><span class="line">drwxr-xr-x 2 systemd-coredump root 4096 Jul 13 17:49 redis004</span><br><span class="line">drwxr-xr-x 2 systemd-coredump root 4096 Jul 13 17:49 redis005</span><br></pre></td></tr></table></figure>

<h3 id="PV定义示例"><a href="#PV定义示例" class="headerlink" title="PV定义示例"></a>PV定义示例</h3><p>1.创建资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pv-nfs-demo资源清单，大小5Gi，多路读写</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim pv-nfs-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv-nfs-demo</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 5Gi</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany                             <span class="comment"># 多路读写</span></span><br><span class="line">  persistentVolumeReclaimPolicy: Retain				<span class="comment"># PV回收策略为保留</span></span><br><span class="line">  mountOptions:</span><br><span class="line">  - hard  </span><br><span class="line">  - nfsvers=4.1</span><br><span class="line">  nfs:</span><br><span class="line">    path: <span class="string">&quot;/data/redis001&quot;</span></span><br><span class="line">    server: 172.16.11.79</span><br><span class="line">    </span><br><span class="line"><span class="comment"># pv-nfs-001资源清单，访问模式RWM，大小10Gi</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim pv-nfs-002.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata: </span><br><span class="line">  name: pv-nfs-002</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 10Gi</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany</span><br><span class="line">  persistentVolumeReclaimPolicy: Retain</span><br><span class="line">  mountOptions:</span><br><span class="line">  - hard  </span><br><span class="line">  - nfsvers=4.1</span><br><span class="line">  nfs:</span><br><span class="line">    path: <span class="string">&quot;/data/redis002&quot;</span></span><br><span class="line">    server: 172.16.11.79</span><br><span class="line"></span><br><span class="line"><span class="comment"># pv-nfs-003资源清单，访问模式RWO，大小1Gi</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim pv-nfs-003.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv-nfs-003</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 1Gi</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  persistentVolumeReclaimPolicy: Retain</span><br><span class="line">  mountOptions:</span><br><span class="line">  - hard  </span><br><span class="line">  - nfsvers=4.1</span><br><span class="line">  nfs:</span><br><span class="line">    path: <span class="string">&quot;/data/redis003&quot;</span></span><br><span class="line">    server: 172.16.11.79</span><br></pre></td></tr></table></figure>

<p>2.创建出pv</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl apply -f pv-nfs-demo.yaml -f pv-nfs-002.yaml -f pv-nfs-003.yaml </span></span><br><span class="line">persistentvolume/pv-nfs-demo created</span><br><span class="line">persistentvolume/pv-nfs-002 created</span><br><span class="line">persistentvolume/pv-nfs-003 created</span><br><span class="line"></span><br><span class="line"><span class="comment"># get pv资源</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl get pv</span></span><br><span class="line">NAME          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">pv-nfs-002    10Gi       RWX            Retain           Available                                   98m</span><br><span class="line">pv-nfs-003    1Gi        RWO            Retain           Available                                   98m</span><br><span class="line">pv-nfs-demo   5Gi        RWX            Retain           Available                                   98m</span><br></pre></td></tr></table></figure>

<h3 id="pvc定义示例"><a href="#pvc定义示例" class="headerlink" title="pvc定义示例"></a>pvc定义示例</h3><p>1.创建资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建pvc资源清单，要求访问模式RWM，指定pv大小，最大10Gi最小3Gi</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim pvc-demo-001.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc-demo-001</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  accessModes: [<span class="string">&quot;ReadWriteMany&quot;</span>]</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 3Gi     <span class="comment"># 最小3Gi</span></span><br><span class="line">    limits:</span><br><span class="line">      storage: 10Gi    <span class="comment"># 最大10Gi</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># 创建pvc资源清单，要求pv的访问模型为RWO，PV大小最大2Gi，最小5Gi</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim pvc-demo-002.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc-demo-002</span><br><span class="line">spec:</span><br><span class="line">  accessMode: [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  resource:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br><span class="line">    limits:</span><br><span class="line">      storage: 5Gi</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      usedof: <span class="string">&quot;redisdata&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.应用pvc配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl apply -f pvc-demo-001.yaml </span></span><br><span class="line">persistentvolumeclaim/pvc-demo-001 created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到pvc资源已经被创建</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl get pvc</span></span><br><span class="line">NAME           STATUS   VOLUME        CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">pvc-demo-001   Bound    pv-nfs-demo   5Gi        RWX                           6s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看哪个pv被关联</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl get pv</span></span><br><span class="line">NAME          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                  STORAGECLASS   REASON   AGE</span><br><span class="line">pv-nfs-002    10Gi       RWX            Retain           Available                                                  117m</span><br><span class="line">pv-nfs-003    1Gi        RWO            Retain           Available                                                  117m</span><br><span class="line">pv-nfs-demo   5Gi        RWX            Retain           Bound       default/pvc-demo-001                           117m</span><br><span class="line"><span class="comment"># 5G的pv被关联，因为pvc-demo-001请求的大小为2Gi，RWM，Filesystem，而5Gi大小的PV符合其要求。</span></span><br></pre></td></tr></table></figure>

<h3 id="Pod中使用PVC来挂载卷"><a href="#Pod中使用PVC来挂载卷" class="headerlink" title="Pod中使用PVC来挂载卷"></a>Pod中使用PVC来挂载卷</h3><p>1.创建资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim volumes-pvc-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: volumes-pvc-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: redis</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 6379</span><br><span class="line">      name: redisport</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /data</span><br><span class="line">      name: redis-rbd-vol</span><br><span class="line">    securityContext:</span><br><span class="line">      runAsUser: 999</span><br><span class="line">      runAsGroup: 999</span><br><span class="line">  volumes:</span><br><span class="line">  - name: redis-rbd-vol								<span class="comment"># 定义卷名称</span></span><br><span class="line">    persistentVolumeClaim:						<span class="comment"># 使用PVC</span></span><br><span class="line">      claimName: pvc-demo-001         <span class="comment"># 绑定创建的pvc-demo-001的pvc</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl apply -f volumes-pvc-demo.yaml </span></span><br><span class="line">pod/volumes-pvc-demo created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建成功</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl get pods volumes-pvc-demo </span></span><br><span class="line">NAME               READY   STATUS    RESTARTS   AGE</span><br><span class="line">volumes-pvc-demo   1/1     Running   0          10s</span><br></pre></td></tr></table></figure>

<p>3.进入容器验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以看到已经被挂载</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl exec volumes-pvc-demo -- mount | grep &quot;data&quot;</span></span><br><span class="line">172.16.11.79:/data/redis001 on /data <span class="built_in">type</span> nfs4 (rw,relatime,vers=4.1,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=172.16.11.83,local_lock=none,addr=172.16.11.79)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上可以看出用户只需要定义pvc，以及pod，而存储相关的细节只需要交给管理员即可。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>存储卷</category>
        <category>存储卷示例</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>StorageClass</title>
    <url>/2021/07/06/Kubernetes/03Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/%E5%AD%98%E5%82%A8%E5%8D%B7%E7%A4%BA%E4%BE%8B/StorageClass/</url>
    <content><![CDATA[<p>ceph存储类资源清单示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: fast-rbd</span><br><span class="line">provisioner: kubernetes.io/rbd</span><br><span class="line">parameters:</span><br><span class="line">  monitors: ceph01.ilinux.io:6789,ceph02.ilinux.io:6789,ceph03.ilinux.io:6789</span><br><span class="line">  adminId: admin</span><br><span class="line">  adminSecretName: ceph-admin-secret</span><br><span class="line">  adminSecretNamespace: kube-system</span><br><span class="line">  pool: kube</span><br><span class="line">  userId: kube</span><br><span class="line">  userSecretName: ceph-kube-secret</span><br><span class="line">  userSecretNamespace: kube-system</span><br><span class="line">  fsType: ext4</span><br><span class="line">  imageFormat: <span class="string">&quot;2&quot;</span></span><br><span class="line">  imageFeatures: <span class="string">&quot;layering&quot;</span></span><br><span class="line">reclaimPolicy: Retain</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>存储卷</category>
        <category>存储卷示例</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Longhorn使用示例</title>
    <url>/2021/07/06/Kubernetes/03Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/%E5%AD%98%E5%82%A8%E5%8D%B7%E7%A4%BA%E4%BE%8B/longhorn%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>Longhorn部署完毕后会自动创建出StorageClass，我们只需要创建pvc即可，需要注意longhorn的pvc默认删除策略为delete，如果需要保留则需要手动将其StorageClass内的策略改为Retain。</p>
<h3 id="创建pvc"><a href="#创建pvc" class="headerlink" title="创建pvc"></a>创建pvc</h3><p>1.编写pvc资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim pvc-dyn-longhon-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc-dyn-longhorn-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  accessModes: [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br><span class="line">    limits:</span><br><span class="line">      storage: 10Gi</span><br><span class="line">  storageClassName: longhorn</span><br></pre></td></tr></table></figure>

<p>2.应用清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl  apply -f pvc-dyn-longhon-demo.yaml</span></span><br><span class="line">persistentvolumeclaim/pvc-dyn-longhorn-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl  get pvc</span></span><br><span class="line">NAME                    STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">pvc-dyn-longhorn-demo   Bound    pvc-5db5bc10-5277-4452-bf3b-d821fa31cde1   2Gi        RWO            longhorn       2m10s</span><br></pre></td></tr></table></figure>

<h3 id="Pod中使用PVC"><a href="#Pod中使用PVC" class="headerlink" title="Pod中使用PVC"></a>Pod中使用PVC</h3><p>1.创建资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim volume-pvc-longhorn-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: volumes-pvc-longhorn-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: redis</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 6379</span><br><span class="line">      name: redisport</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: redis-data-vol</span><br><span class="line">      mountPath: /data</span><br><span class="line">  volumes:</span><br><span class="line">  - name: redis-data-vol</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: pvc-dyn-longhorn-demo</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl apply -f volumes-pvc-longhorn-demo.yaml</span></span><br><span class="line">pod/volumes-pvc-longhorn-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">volumes-pvc-longhorn-demo   1/1     Running   0          3m34s</span><br></pre></td></tr></table></figure>

<p>3.查看挂载的卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl exec volumes-pvc-longhorn-demo -- mount | grep data</span></span><br><span class="line">/dev/longhorn/pvc-5db5bc10-5277-4452-bf3b-d821fa31cde1 on /data <span class="built_in">type</span> ext4 (rw,relatime)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>存储卷</category>
        <category>存储卷示例</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>在Pod上配置存储卷</title>
    <url>/2021/07/06/Kubernetes/03Kubernetes%E5%AD%98%E5%82%A8%E5%8D%B7/%E5%AD%98%E5%82%A8%E5%8D%B7%E7%A4%BA%E4%BE%8B/%E5%9C%A8Pod%E4%B8%8A%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8%E5%8D%B7/</url>
    <content><![CDATA[<p>在pod上直接使用Pod存储卷分为两步</p>
<ol>
<li>在pod的Volumes字段上定义存储卷名称及存储卷</li>
<li>在容器内部挂载Volumes字段中所定义的存储卷。</li>
</ol>
<h3 id="emptyDir类型"><a href="#emptyDir类型" class="headerlink" title="emptyDir类型"></a>emptyDir类型</h3><p>emptyDir类型的存储卷不可持久存储，其生命周期和容器生命周期相同。</p>
<h4 id="emptyDir示例"><a href="#emptyDir示例" class="headerlink" title="emptyDir示例"></a>emptyDir示例</h4><p>1.创建配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim volumes-empyterdir-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: volumes-emptydir-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  initContainers:</span><br><span class="line">  - name: config-file-downloader</span><br><span class="line">    image: ikubernetes/admin-box</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;wget -O /data/envoy.yaml http://ilinux.io/envoy.yaml&quot;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: config-file-store</span><br><span class="line">      mountPath: /data</span><br><span class="line">  containers:</span><br><span class="line">  - name: envoy</span><br><span class="line">    image: envoyproxy/envoy-alpine:v1.13.1</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">    args: [<span class="string">&#x27;envoy -c /etc/envoy/envoy.yaml&#x27;</span>]</span><br><span class="line">    volumeMounts:												<span class="comment"># 挂载存储卷</span></span><br><span class="line">    - name: config-file-store</span><br><span class="line">      mountPath: /etc/envoy</span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:															<span class="comment"># 定义存储卷</span></span><br><span class="line">  - name: config-file-store							<span class="comment"># 存储卷名称</span></span><br><span class="line">    emptyDir:														<span class="comment"># 存储卷类型</span></span><br><span class="line">      medium: Memory                    <span class="comment"># 存储介质，默认磁盘</span></span><br><span class="line">      sizeLimit: 16Mi</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl apply -f volumes-empyterdir-demo.yaml </span></span><br><span class="line">pod/volumes-emptydir-demo created</span><br></pre></td></tr></table></figure>

<p>3.查看容器内的挂载点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看容器内的配置文件是否被成功挂载</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl exec volumes-emptydir-demo -- cat /etc/envoy/envoy.yaml</span></span><br><span class="line">Defaulted container <span class="string">&quot;envoy&quot;</span> out of: envoy, config-file-downloader (init)</span><br><span class="line">admin:</span><br><span class="line">  access_log_path: /tmp/admin_access.log</span><br><span class="line">  address:</span><br><span class="line">    socket_address: &#123; address: 0.0.0.0, port_value: 9901 &#125;</span><br><span class="line"></span><br><span class="line">static_resources:</span><br><span class="line">  listeners:</span><br><span class="line">  - name: listener_0</span><br><span class="line">    address:</span><br><span class="line">      socket_address: &#123; address: 0.0.0.0, port_value: 80 &#125;</span><br><span class="line">    filter_chains:</span><br><span class="line">    - filters:</span><br><span class="line">      - name: envoy.http_connection_manager</span><br><span class="line">        config:</span><br><span class="line">          stat_prefix: ingress_http</span><br><span class="line">          codec_type: AUTO</span><br><span class="line">          route_config:</span><br><span class="line">            name: local_route</span><br><span class="line">            virtual_hosts:</span><br><span class="line">            - name: local_service</span><br><span class="line">              domains: [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">              routes:</span><br><span class="line">              - match: &#123; prefix: <span class="string">&quot;/&quot;</span> &#125;</span><br><span class="line">                route: &#123; cluster: local_service &#125;</span><br><span class="line">          http_filters:</span><br><span class="line">          - name: envoy.router</span><br><span class="line"></span><br><span class="line">  clusters:</span><br><span class="line">  - name: local_service</span><br><span class="line">    connect_timeout: 0.25s</span><br><span class="line">    <span class="built_in">type</span>: STATIC</span><br><span class="line">    lb_policy: ROUND_ROBIN</span><br><span class="line">    load_assignment:</span><br><span class="line">      cluster_name: local_service</span><br><span class="line">      endpoints:</span><br><span class="line">      - lb_endpoints:</span><br><span class="line">        - endpoint:</span><br><span class="line">            address:</span><br><span class="line">              socket_address:</span><br><span class="line">                address: 127.0.0.1</span><br><span class="line">                port_value: 8080</span><br><span class="line">                </span><br><span class="line"><span class="comment"># 查看容器内的监听端口</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl exec volumes-emptydir-demo -- netstat -tnl</span></span><br><span class="line">Defaulted container <span class="string">&quot;envoy&quot;</span> out of: envoy, config-file-downloader (init)</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      </span><br><span class="line">tcp        0      0 0.0.0.0:9901            0.0.0.0:*               LISTEN      </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看卷挂载</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl exec volumes-emptydir-demo -- mount | grep envoy</span></span><br><span class="line">Defaulted container <span class="string">&quot;envoy&quot;</span> out of: envoy, config-file-downloader (init)</span><br><span class="line">tmpfs on /etc/envoy <span class="built_in">type</span> tmpfs (ro,relatime)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卷挂载成功。</span></span><br></pre></td></tr></table></figure>

<h3 id="hostPath类型"><a href="#hostPath类型" class="headerlink" title="hostPath类型"></a>hostPath类型</h3><p>hostPath类型的挂在卷，是将本地的某个存在的路径挂载到容器内部指定的挂载目录下。</p>
<p>hostPath的挂在卷可以指定其类型，其具体的挂载类型有以下几种：</p>
<ul>
<li>File：事先必须存在的文件路径；</li>
<li>Directory：事先必须存在的目录路径；</li>
<li>DirectoryOrCreate：指定的路径不存时自动将其创建为0755权限的空目录，属主属组均为kubelet；</li>
<li>FileOrCreate：指定的路径不存时自动将其创建为0644权限的空文件，属主和属组同为kubelet；</li>
<li>Socket：事先必须存在的Socket文件路径；</li>
<li>CharDevice：事先必须存在的字符设备文件路径；</li>
<li>BlockDevice：事先必须存在的块设备文件路径；</li>
<li>“”：空字符串，默认配置，在关联hostPath存储卷之前不进行任何检查。</li>
</ul>
<h4 id="hostPath示例"><a href="#hostPath示例" class="headerlink" title="hostPath示例"></a>hostPath示例</h4><p>1.编写配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim volumes-hostpath-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: volumes-hostpath-demo</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: filebeat</span><br><span class="line">    image: ikubernetes/filebeat:5.6.7-alpine</span><br><span class="line">    env:</span><br><span class="line">    - name: REDIS_HOST</span><br><span class="line">      value: redis.ilinux.io:6379</span><br><span class="line">    - name: LOG_LEVEL</span><br><span class="line">      value: info</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: varlog</span><br><span class="line">      mountPath: /var/<span class="built_in">log</span></span><br><span class="line">    - name: socket</span><br><span class="line">      mountPath: /var/run/docker.sock</span><br><span class="line">    - name: varlibdockercontainers</span><br><span class="line">      mountPath: /var/lib/docker/contianers</span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: varlog</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /var/<span class="built_in">log</span></span><br><span class="line">  - name: varlibdockercontainers</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /var/lib/docker/containers</span><br><span class="line">  - name: socket</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /var/run/docker.sock</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl apply -f volumes-hostpath-demo.yaml </span></span><br><span class="line">pod/volumes-hostpath-demo created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod详细信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl describe pods volumes-hostpath-demo </span></span><br><span class="line">Name:         volumes-hostpath-demo</span><br><span class="line">Namespace:    default</span><br><span class="line">Priority:     0</span><br><span class="line">Node:         k8s-node03/172.16.11.83</span><br><span class="line">Start Time:   Tue, 13 Jul 2021 06:28:13 +0000</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Running</span><br><span class="line">IP:           10.244.3.79</span><br><span class="line">IPs:</span><br><span class="line">  IP:  10.244.3.79</span><br><span class="line">Containers:</span><br><span class="line">  filebeat:</span><br><span class="line">    Container ID:   docker://46a9666f684bb0ac85c71d36c276546ab48b8195efb34ac061bdb26f09468a1a</span><br><span class="line">    Image:          ikubernetes/filebeat:5.6.7-alpine</span><br><span class="line">    Image ID:       docker-pullable://ikubernetes/filebeat@sha256:3957f67b612aa8628f643f8ede02b71bfbabf34892ef136f1e5ee18bbc0775aa</span><br><span class="line">    Port:           &lt;none&gt;</span><br><span class="line">    Host Port:      &lt;none&gt;</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Tue, 13 Jul 2021 06:28:24 +0000</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:</span><br><span class="line">      REDIS_HOST:  redis.ilinux.io:6379</span><br><span class="line">      LOG_LEVEL:   info</span><br><span class="line">    Mounts:																																			<span class="comment"># 容器的挂载卷信息</span></span><br><span class="line">      /var/lib/docker/contianers from varlibdockercontainers (ro)</span><br><span class="line">      /var/<span class="built_in">log</span> from varlog (rw)</span><br><span class="line">      /var/run/docker.sock from socket (rw)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-wqhfx (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True </span><br><span class="line">  Ready             True </span><br><span class="line">  ContainersReady   True </span><br><span class="line">  PodScheduled      True </span><br><span class="line">Volumes:</span><br><span class="line">  varlog:</span><br><span class="line">    Type:          HostPath (bare host directory volume)</span><br><span class="line">    Path:          /var/<span class="built_in">log</span></span><br><span class="line">    HostPathType:  </span><br><span class="line">  varlibdockercontainers:</span><br><span class="line">    Type:          HostPath (bare host directory volume)</span><br><span class="line">    Path:          /var/lib/docker/containers</span><br><span class="line">    HostPathType:  </span><br><span class="line">  socket:</span><br><span class="line">    Type:          HostPath (bare host directory volume)</span><br><span class="line">    Path:          /var/run/docker.sock</span><br><span class="line">    HostPathType:  </span><br><span class="line">  kube-api-access-wqhfx:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             <span class="literal">true</span></span><br><span class="line">QoS Class:                   BestEffort</span><br><span class="line">Node-Selectors:              &lt;none&gt;</span><br><span class="line">Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  55s   default-scheduler  Successfully assigned default/volumes-hostpath-demo to k8s-node03</span><br><span class="line">  Normal  Pulling    53s   kubelet            Pulling image <span class="string">&quot;ikubernetes/filebeat:5.6.7-alpine&quot;</span></span><br><span class="line">  Normal  Pulled     45s   kubelet            Successfully pulled image <span class="string">&quot;ikubernetes/filebeat:5.6.7-alpine&quot;</span> <span class="keyword">in</span> 8.108131139s</span><br><span class="line">  Normal  Created    44s   kubelet            Created container filebeat</span><br><span class="line">  Normal  Started    44s   kubelet            Started container filebeat          <span class="comment"># 容器已经启动</span></span><br></pre></td></tr></table></figure>

<h3 id="NFS类型存储卷"><a href="#NFS类型存储卷" class="headerlink" title="NFS类型存储卷"></a>NFS类型存储卷</h3><p>NFS为网络类型的存储卷，其要确保每个k8s的节点上必须能够挂载nfs文件系统。</p>
<h4 id="NFS示例"><a href="#NFS示例" class="headerlink" title="NFS示例"></a>NFS示例</h4><p>1.配置一台nfs-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nfs服务器地址</span></span><br><span class="line">[root@nfs ~]<span class="comment"># ip a show eth0</span></span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:f5:86:46 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.11.79/24 brd 172.16.11.255 scope global noprefixroute eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::128c:e1f8:720f:875f/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="comment"># 创建共享目录</span></span><br><span class="line">[root@nfs ~]<span class="comment"># mkdir -pv /data/redis</span></span><br><span class="line">mkdir: created directory <span class="string">&#x27;/data&#x27;</span></span><br><span class="line">mkdir: created directory <span class="string">&#x27;/data/redis&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让999用户对/data/redis目录有读写权限</span></span><br><span class="line">[root@nfs ~]<span class="comment"># chown 999 /data/redis</span></span><br><span class="line">[root@nfs ~]<span class="comment"># ls -ld /data/redis</span></span><br><span class="line">drwxr-xr-x 2 systemd-coredump root 4096 Jul 13 14:47 /data/redis</span><br><span class="line">[root@nfs ~]<span class="comment"># id systemd-coredump</span></span><br><span class="line">uid=999(systemd-coredump) gid=997(systemd-coredump) groups=997(systemd-coredump)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置nfs</span></span><br><span class="line">[root@nfs ~]<span class="comment"># vim /etc/exports </span></span><br><span class="line">/data/redis   172.16.11.0/24(rw)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nfs-utils</span></span><br><span class="line">[root@nfs ~]<span class="comment"># dnf install nfs-utils -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nfs</span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl start nfs-server.service </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看2049端口是否被监听</span></span><br><span class="line">[root@nfs ~]<span class="comment"># ss -tnl | grep 2049</span></span><br><span class="line">LISTEN 0      64           0.0.0.0:2049       0.0.0.0:*          </span><br><span class="line">LISTEN 0      64              [::]:2049          [::]:*   </span><br></pre></td></tr></table></figure>

<p>2.在所有k8s节点上安装nfs驱动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-node01:~<span class="comment"># apt install nfs-common</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试手动挂载</span></span><br><span class="line">root@k8s-node02:~<span class="comment"># mount -t nfs 172.16.11.79:/data/redis /mnt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否被挂载</span></span><br><span class="line">root@k8s-node02:~<span class="comment"># mount | grep mnt</span></span><br><span class="line">172.16.11.79:/data/redis on /mnt <span class="built_in">type</span> nfs4 (rw,relatime,vers=4.2,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=172.16.11.82,local_lock=none,addr=172.16.11.79)</span><br></pre></td></tr></table></figure>

<p>3.编辑配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># vim volumes-nfs-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: volumes-nfs-demo</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: redis</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 6379</span><br><span class="line">      name: redisport</span><br><span class="line">    securityContext:</span><br><span class="line">      runAsUser: 999            <span class="comment"># 此处使用的用户为id是999的用户，要确保nfs服务器上id 999的用户对挂载的目录有写权限。</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /data</span><br><span class="line">      name: redisdata</span><br><span class="line">  volumes:</span><br><span class="line">  - name: redisdata</span><br><span class="line">    nfs:</span><br><span class="line">      server: 172.16.11.79</span><br><span class="line">      path: /data/redis</span><br><span class="line">      readOnly: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>4.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl apply -f volumes-nfs-demo.yaml </span></span><br><span class="line">pod/volumes-nfs-demo created</span><br></pre></td></tr></table></figure>

<p>5.查看pod详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubectl describe pod volumes-nfs-demo </span></span><br><span class="line">Name:         volumes-nfs-demo</span><br><span class="line">Namespace:    default</span><br><span class="line">Priority:     0</span><br><span class="line">Node:         k8s-node01/172.16.11.81</span><br><span class="line">Start Time:   Tue, 13 Jul 2021 07:22:24 +0000</span><br><span class="line">Labels:       app=redis</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Running</span><br><span class="line">IP:           10.244.1.50</span><br><span class="line">IPs:</span><br><span class="line">  IP:  10.244.1.50</span><br><span class="line">Containers:</span><br><span class="line">  redis:</span><br><span class="line">    Container ID:   docker://d06c8e430cb3b38c9e266ee50b1caeaf834f4b51b6270540735eff780bc2f968</span><br><span class="line">    Image:          redis:alpine</span><br><span class="line">    Image ID:       docker-pullable://redis@sha256:442fbfdeccf203c277827cfd8e7e727ce411611e1a6caeda9cca8115ed17b9cc</span><br><span class="line">    Port:           6379/TCP</span><br><span class="line">    Host Port:      0/TCP</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Tue, 13 Jul 2021 07:22:40 +0000</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /data from redisdata (rw)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-wppkn (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True </span><br><span class="line">  Ready             True </span><br><span class="line">  ContainersReady   True </span><br><span class="line">  PodScheduled      True </span><br><span class="line">Volumes:</span><br><span class="line">  redisdata:</span><br><span class="line">    Type:      NFS (an NFS mount that lasts the lifetime of a pod)</span><br><span class="line">    Server:    172.16.11.79</span><br><span class="line">    Path:      /data/redis</span><br><span class="line">    ReadOnly:  <span class="literal">false</span></span><br><span class="line">  kube-api-access-wppkn:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             <span class="literal">true</span></span><br><span class="line">QoS Class:                   BestEffort</span><br><span class="line">Node-Selectors:              &lt;none&gt;</span><br><span class="line">Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  87s   default-scheduler  Successfully assigned default/volumes-nfs-demo to k8s-node01</span><br><span class="line">  Normal  Pulling    86s   kubelet            Pulling image <span class="string">&quot;redis:alpine&quot;</span></span><br><span class="line">  Normal  Pulled     74s   kubelet            Successfully pulled image <span class="string">&quot;redis:alpine&quot;</span> <span class="keyword">in</span> 11.045849701s</span><br><span class="line">  Normal  Created    73s   kubelet            Created container redis</span><br><span class="line">  Normal  Started    72s   kubelet            Started container redis</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>存储卷</category>
        <category>存储卷示例</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>应用编排</title>
    <url>/2021/07/08/Kubernetes/04Kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8/01%E5%BA%94%E7%94%A8%E7%BC%96%E6%8E%92/%E5%BA%94%E7%94%A8%E7%BC%96%E6%8E%92/</url>
    <content><![CDATA[<p>当在k8s管理大量的应用时，这些应用之间存在大量的关系，紧密关系可以将其组织在同一个Pod中进行，而非紧密关系的应用之间则需要借助服务注册和服务发现将其关联起来，在K8s中实现服务注册和服务发现功能是由CoreDNS来实现的。</p>
<p>有时候各种应用之间存在各种复杂的关系，这时候就需要借助Service来实现应用的管理。</p>
<h3 id="应用编排的核心"><a href="#应用编排的核心" class="headerlink" title="应用编排的核心"></a>应用编排的核心</h3><p>所谓应用编排的核心就是应用的部署，扩展，更新，回滚</p>
<ul>
<li>部署：在k8s中应用部署是由应用清单来定义的。</li>
<li>扩展：应用部署的核心还有扩展，扩展就是扩容，扩容又两种方法垂直扩容和横向扩容。在k8s中垂直扩容是指调大pod的资源限制。而横向扩容则是指多扩展几个pod副本。</li>
<li>更新：在如今敏捷开发的环境下，更新的速度将是非常快，我们要随时迭代旧的版本。</li>
<li>回滚：当更新后应用出现Bug时，则需要将版本进行回滚。<br>之前部署的Pod都是裸Pod其不具备应用的扩展，更新，回滚的能力。而k8s上还有一种资源称之为控制器</li>
</ul>
<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>K8S上有各种控制器，有的用来控制节点，有的用来控制名称空间，还有一种用来管理Pod的成为Pod控制器。</p>
<p>整个K8S是由控制平面和数据平面组成：</p>
<ul>
<li>控制平面：指的是K8S-Master节点上的控制组件</li>
<li>APIServer</li>
<li>Controller Manager</li>
<li>Scheduler</li>
<li>数据平面：主要指运行应用的Pod的节点。</li>
</ul>
<h4 id="Pod控制器"><a href="#Pod控制器" class="headerlink" title="Pod控制器"></a>Pod控制器</h4><p>专用于编排以Pod形式运行的应用的控制器，统称为Pod控制器。</p>
<h3 id="控制器的工作逻辑"><a href="#控制器的工作逻辑" class="headerlink" title="控制器的工作逻辑"></a>控制器的工作逻辑</h3><p><code>API Server</code>是一种有着特殊功能的<code>DB</code>，支持资源的<code>Watch</code>和<code>Notify</code>。同时又将底层<code>ETCD</code>存储做了定义和限制，定义了存储的方案。</p>
<p><code>Controller</code>是真正让用户存进<code>API-Server</code>所对应的实体。<code>Controller</code>是用来将<code>API-Server</code>中的数据项，在对应的集群中创建出实体来。</p>
<p>用户向<code>API-Server</code>中插入一个资源，而于此同时k8s上有多种资源控制器，每一种资源控制器专门监视着<code>API-Server</code>上与自己类型相关的资源的变动，一旦<code>API-Server</code>发生变，动控制器中的一段代码会更具用户所插入的资源将其创建为实体，实体创建完毕后其会立即将实际状态存回<code>API-Server</code>上的<code>Status</code>字段中，随后<code>Controller</code>会不断的去监控比对，实例上的status字段和资源清单中的spec字段是否一致。如果不一致则会再次执行代码，改变状态将结果存回<code>API server</code>，然后再次比对，此过程将不断循环，直到用户的期望状态和实际状态相同。</p>
<p>在此过程中kubelet不断的监控自身节点上的pod，一旦pod状态发生改变，其会将pod的status存回<code>API-Server</code>中。而后<code>Controller</code>会发现pod发生变化，再次执行其内部的代码使其不断逼近用户的期望状态。</p>
<h4 id="controller的监控时长"><a href="#controller的监控时长" class="headerlink" title="controller的监控时长"></a>controller的监控时长</h4><p>在一个较大Service环境的k8s中，为了防止APIServer被controller的监控请求所淹没，所以默认的Controller loop监控时长为5分钟。</p>
<p>但是5分钟的时间太长，所以APIServer要对Controller做通知。</p>
<h4 id="负责应用编排的控制器"><a href="#负责应用编排的控制器" class="headerlink" title="负责应用编排的控制器"></a>负责应用编排的控制器</h4><p>负责应用编排的控制器有以下几个：</p>
<ul>
<li>ReplicationController：早期的Pod控制器，已经被废除。</li>
<li>ReplicaSet：副本集，用来管理一组Pod的相同副本。</li>
<li>Deployment：部署，其不直接管理Pod而是借助于ReplicaSet来管理Pod；最常用的无状态应用控制器；</li>
<li>DaemonSet：守护进程集，用于确保在每个节点上仅运行某个应用的一个Pod副本</li>
<li>StatefulSet：功能类似于Deployment，但StatefulSet专用于编排有状态应用；</li>
<li>Job：有终止期限的作业式任务，而非一直处于运行状态的服务进程；</li>
<li>CronJob：周期性作业任务。</li>
</ul>
<h4 id="控制器定义格式"><a href="#控制器定义格式" class="headerlink" title="控制器定义格式"></a>控制器定义格式</h4><p>定义要素：</p>
<ul>
<li>标签选择器：用标签选择器来定义被关联到的pod</li>
<li>期望的副本数：</li>
<li>pod模板</li>
</ul>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes控制器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Deployment</title>
    <url>/2021/07/08/Kubernetes/04Kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8/03Deployment/Deployment/</url>
    <content><![CDATA[<p>ReplicaSet如果要实现滚动更新和蓝绿部署需要手工进行实现，所以这种类型的控制器并非是我们生产中所需要的，而更加高级的控制器称之为Deployment。</p>
<p>Deployment的工作过程和使用ReplicaSet手动实现蓝绿部署和滚动部署相似，Deployment会间接的使用1到多个ReplicaSet来管理Pod。</p>
<h3 id="Deployment工作流程"><a href="#Deployment工作流程" class="headerlink" title="Deployment工作流程"></a>Deployment工作流程</h3><p>Deployment在更新Pod时会创建一个新的RS，由新的RS以新的pod模板创建出pod，然后逐渐将Pod切换到新版本上去。Deployment每一次更新都会创建出一个新的RS，其更新历史中默认允许保存10个RS。如果Deployment需要回滚时可以向前回滚9个版本。</p>
<p>需要注意的是虽然Deployment会保留历史RS，但是在历史中RS的pod为0，只有最新的RS其下的pod数为用户所定义的值。当回滚时才会将其pod副本的数量定义为用户所指定的值。</p>
<h3 id="Deployment资源定义规范"><a href="#Deployment资源定义规范" class="headerlink" title="Deployment资源定义规范"></a>Deployment资源定义规范</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1  <span class="comment"># API群组及版本</span></span><br><span class="line">kind: Deployment  <span class="comment"># 资源类型特有标识</span></span><br><span class="line">metadata:</span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 资源名称，在作用域中要唯一</span></span><br><span class="line">  namespace &lt;string&gt;  <span class="comment"># 名称空间；Deployment隶属名称空间级别</span></span><br><span class="line">spec:</span><br><span class="line">  minReadySeconds &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># Pod就绪后多少秒内任一容器无crash方可视为“就绪”</span></span><br><span class="line">  replicas &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 期望的Pod副本数，默认为1</span></span><br><span class="line">  selector &lt;object&gt; <span class="comment"># 标签选择器，必须匹配template字段中Pod模板中的标签</span></span><br><span class="line">  template &lt;object&gt;  <span class="comment"># Pod模板对象</span></span><br><span class="line">  revisionHistoryLimit &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 滚动更新历史记录数量，默认为10</span></span><br><span class="line">  strategy &lt;Object&gt; <span class="comment"># 滚动更新策略</span></span><br><span class="line">    <span class="built_in">type</span> &lt;string&gt;  <span class="comment"># 滚动更新类型，可用值有Recreate和RollingUpdate；</span></span><br><span class="line">    rollingUpdate &lt;Object&gt;  <span class="comment"># 滚动更新参数，专用于RollingUpdate类型</span></span><br><span class="line">      maxSurge &lt;string&gt;  <span class="comment"># 更新期间可比期望的Pod数量多出的数量或比例；</span></span><br><span class="line">      maxUnavailable &lt;string&gt;  <span class="comment"># 更新期间可比期望的Pod数量缺少的数量或比例，10， </span></span><br><span class="line">  progressDeadlineSeconds &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 滚动更新故障超时时长，默认为600秒</span></span><br><span class="line">  paused &lt;boolean&gt;  <span class="comment"># 是否暂停部署过程</span></span><br></pre></td></tr></table></figure>

<h3 id="Deployment示例"><a href="#Deployment示例" class="headerlink" title="Deployment示例"></a>Deployment示例</h3><p>1.编写资源配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim deployment-demo.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deployment-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 4</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      release: stable</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        release: stable</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:<span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: http</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># VERSION=v1.0 envsubst &lt; deployment-demo.yaml | kubectl apply -f -</span></span><br><span class="line">deployment.apps/deployment created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看deployment信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get deployments.apps</span></span><br><span class="line">NAME              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment-demo   4/4     4            4           12s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get pods -l &#x27;app=demoapp,release=stable&#x27;</span></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">deployment-demo-fb544c5d8-2687q   1/1     Running   0          2m16s</span><br><span class="line">deployment-demo-fb544c5d8-2t6q4   1/1     Running   0          2m16s</span><br><span class="line">deployment-demo-fb544c5d8-pkgzn   1/1     Running   0          2m16s</span><br><span class="line">deployment-demo-fb544c5d8-w52qp   1/1     Running   0          2m16s</span><br><span class="line"><span class="comment"># 可以看到第一段为deployment名字，最后一段为随机值，中间的fb544c5d8为replicaset中Pod模板的哈希值，也就是template字段的哈希值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看replicaset信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get replicasets.apps</span></span><br><span class="line">NAME                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">deployment-demo-fb544c5d8   4         4         4       4m5s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一旦pod模板发生变更，会导致ReplicaSet的哈希值发生变化，然后出发deployment更新的</span></span><br></pre></td></tr></table></figure>

<p>3.查看deployment的描述信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl describe deployments.apps deployment-demo</span></span><br><span class="line">Name:                   deployment-demo</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Wed, 21 Jul 2021 13:23:13 +0000</span><br><span class="line">Labels:                 &lt;none&gt;</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 1</span><br><span class="line">Selector:               app=demoapp,release=stable</span><br><span class="line">Replicas:               4 desired | 4 updated | 4 total | 4 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate						<span class="comment"># 一旦模板发生变化将触发滚动跟新</span></span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge     <span class="comment"># 滚动更新逻辑</span></span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app=demoapp</span><br><span class="line">           release=stable</span><br><span class="line">  Containers:</span><br><span class="line">   demoapp:</span><br><span class="line">    Image:        ikubernetes/demoapp:v1.0</span><br><span class="line">    Port:         80/TCP</span><br><span class="line">    Host Port:    0/TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   deployment-demo-fb544c5d8 (4/4 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age   From                   Message</span><br><span class="line">  ----    ------             ----  ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  19m   deployment-controller  Scaled up replica <span class="built_in">set</span> deployment-demo-fb544c5d8 to 4</span><br></pre></td></tr></table></figure>

<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>1.对deployment实行滚动更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># VERSION=v1.1 envsubst &lt; deployment-demo.yaml | kubectl apply -f -</span></span><br><span class="line">deployment.apps/deployment-demo configured</span><br></pre></td></tr></table></figure>

<p>2.使用rollout查看滚动更新的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl rollout status deployment deployment-demo</span></span><br><span class="line">deployment <span class="string">&quot;deployment-demo&quot;</span> successfully rolled out</span><br></pre></td></tr></table></figure>

<p>3.查看pod是否更新为v1.1版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                               READY   STATUS      RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">deployment-demo-867c7d9d55-4r5hw   1/1     Running     0          11m     10.244.2.30   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-867c7d9d55-b4trp   1/1     Running     0          11m     10.244.3.33   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-867c7d9d55-qrh8c   1/1     Running     0          11m     10.244.2.31   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-867c7d9d55-qxjnq   1/1     Running     0          11m     10.244.3.34   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对pod进行访问</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.244.3.33</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 10.244.0.0, ServerName: deployment-demo-867c7d9d55-b4trp, ServerIP: 10.244.3.33!</span><br></pre></td></tr></table></figure>

<h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><p>1.查看deployment的更新历史信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl rollout history deployment deployment-demo</span></span><br><span class="line">deployment.apps/deployment-demo</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         &lt;none&gt;   <span class="comment"># 此为当前版本信息</span></span><br></pre></td></tr></table></figure>

<p>2.将其回滚到上一个版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl rollout undo deployment deployment-demo</span></span><br><span class="line">deployment.apps/deployment-demo rolled back</span><br></pre></td></tr></table></figure>

<p>3.查看replicaset信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get rs</span></span><br><span class="line">NAME                         DESIRED   CURRENT   READY   AGE</span><br><span class="line">deployment-demo-867c7d9d55   0         0         0       24m</span><br><span class="line">deployment-demo-fb544c5d8    4         4         4       48m</span><br><span class="line"><span class="comment"># 原本的deployment-demo-867c7d9d55已经变为0</span></span><br></pre></td></tr></table></figure>

<p>4.再次查看更新历史</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl rollout history deployment deployment-demo</span></span><br><span class="line">deployment.apps/deployment-demo</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt;</span><br><span class="line"><span class="comment"># 可以看到原本的1没有了新增了3，3表示当前的</span></span><br></pre></td></tr></table></figure>

<h4 id="金丝雀发布"><a href="#金丝雀发布" class="headerlink" title="金丝雀发布"></a>金丝雀发布</h4><p>1.再次对版本进行更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新完毕后立即暂停</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># VERSION=v1.2 envsubst &lt; deployment-demo.yaml | kubectl apply -f - &amp;&amp; kubectl rollout pause deployment deployment-demo</span></span><br><span class="line">deployment.apps/deployment-demo configured</span><br><span class="line">deployment.apps/deployment-demo paused</span><br></pre></td></tr></table></figure>

<p>2.查看更新状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl rollout status deployment deployment-demo</span></span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo&quot;</span> rollout to finish: 2 out of 4 new replicas have been updated...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在可以看到总数有5个pod，有2个pod已经被更新。</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get rs</span></span><br><span class="line">NAME                         DESIRED   CURRENT   READY   AGE</span><br><span class="line">deployment-demo-77d46c4794   2         2         2       118s</span><br><span class="line">deployment-demo-867c7d9d55   0         0         0       12h</span><br><span class="line">deployment-demo-fb544c5d8    3         3         3       12h</span><br></pre></td></tr></table></figure>

<p>3.当经过一段时间没有问题时，再将其更新继续</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl rollout resume deployment deployment-demo</span></span><br></pre></td></tr></table></figure>

<h3 id="Deployment自定义更新策略示例"><a href="#Deployment自定义更新策略示例" class="headerlink" title="Deployment自定义更新策略示例"></a>Deployment自定义更新策略示例</h3><p>Deployment默认跟新策略为一批更新25%，在pod量较大的情况下不适用，所以需要自定义。</p>
<p>1.编写资源配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim deployment-demo-with-strategy.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deployment-demo-with-strategy</span><br><span class="line">spec:</span><br><span class="line">  replicas: 4</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      release: stable</span><br><span class="line">      strategy: <span class="string">&quot;true&quot;</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        release: stable</span><br><span class="line">        strategy: <span class="string">&quot;true&quot;</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:<span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: http</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Rollingupdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 0             <span class="comment"># 做多能多出0个pod</span></span><br><span class="line">      maxUnavailable: 1				<span class="comment"># 做多能有1个pod不可调度</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 用来实现先减，再创建pod</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># VERSION=v1.0 envsubst &lt; deployment-demo-with-strategy.yaml | kubectl apply -f -</span></span><br><span class="line">deployment.apps/deployment-demo-with-strategy created</span><br></pre></td></tr></table></figure>

<p>3.对版本进行更新，并查看跟新过程。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># VERSION=v1.1 envsubst &lt; deployment-demo-with-strategy.yaml | kubectl apply -f - &amp;&amp; kubectl rollout status deployment deployment-demo-with-strategy</span></span><br><span class="line">deployment.apps/deployment-demo-with-strategy configured</span><br><span class="line">Waiting <span class="keyword">for</span> deployment spec update to be observed...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 0 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 0 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 1 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 1 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 1 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 2 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 2 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 2 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 3 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 3 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 3 out of 4 new replicas have been updated...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> rollout to finish: 3 of 4 updated replicas are available...</span><br><span class="line">deployment <span class="string">&quot;deployment-demo-with-strategy&quot;</span> successfully rolled out</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes控制器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>DaemonSet</title>
    <url>/2021/07/08/Kubernetes/04Kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8/04DaemonSet/DaemonSet/</url>
    <content><![CDATA[<p>DaemonSet控制器是用于保证在集群上精确运行的负载有多少个实例，如有10个节点那么其就会在每个节点上只运行一个。</p>
<p>DaemonSet可以实现在集群内所有节点上只运行一个，也可以在集群内拥有某个标签的节点上运行一个。</p>
<p>DaemonSet可以简称为DS.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 获取当前系统上kube-system名称空间下的ds资源</span><br><span class="line">root@k8s-master01:~/yaml/chapter08# kubectl get ds -n kube-system</span><br><span class="line">NAME              DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE</span><br><span class="line">kube-flannel-ds   4         4         4       4            4           &lt;none&gt;                   6d23h</span><br><span class="line">kube-proxy        4         4         4       4            4           kubernetes.io/os=linux   6d23h</span><br></pre></td></tr></table></figure>

<h3 id="DaemonSet资源定义规范"><a href="#DaemonSet资源定义规范" class="headerlink" title="DaemonSet资源定义规范"></a>DaemonSet资源定义规范</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1  <span class="comment"># API群组及版本</span></span><br><span class="line">kind: DaemonSet  <span class="comment"># 资源类型特有标识</span></span><br><span class="line">metadata:</span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 资源名称，在作用域中要唯一</span></span><br><span class="line">  namespace &lt;string&gt;  <span class="comment"># 名称空间；DaemonSet资源隶属名称空间级别</span></span><br><span class="line">spec:</span><br><span class="line">  minReadySeconds &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># Pod就绪后多少秒内任一容器无crash方可视为“就绪”</span></span><br><span class="line">  selector &lt;object&gt; <span class="comment"># 标签选择器，必须匹配template字段中Pod模板中的标签</span></span><br><span class="line">  template &lt;object&gt;  <span class="comment"># Pod模板对象；</span></span><br><span class="line">  revisionHistoryLimit &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 滚动更新历史记录数量，默认为10；</span></span><br><span class="line">  updateStrategy &lt;Object&gt; <span class="comment"># 滚动更新策略</span></span><br><span class="line">    <span class="built_in">type</span> &lt;string&gt;  <span class="comment"># 滚动更新类型，可用值有OnDelete和RollingUpdate；</span></span><br><span class="line">    rollingUpdate &lt;Object&gt;  <span class="comment"># 滚动更新参数，专用于RollingUpdate类型</span></span><br><span class="line">      maxUnavailable &lt;string&gt;  <span class="comment"># 更新期间可比期望的Pod数量缺少的数量或比例</span></span><br></pre></td></tr></table></figure>

<h3 id="DaemonSet示例"><a href="#DaemonSet示例" class="headerlink" title="DaemonSet示例"></a>DaemonSet示例</h3><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim daemonset-demo.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: daemonset-demo</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">    component: node-exporter</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus</span><br><span class="line">      component: node-exporter</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: prometheus-node-exporter</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus</span><br><span class="line">        component: node-exporter</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: promethous-node-exporter</span><br><span class="line">        image: prom/node-exporter:v0.18.0</span><br><span class="line">        ports:</span><br><span class="line">        - name: prom-node-exp</span><br><span class="line">          containerPort: 9100</span><br><span class="line">          hostPort: 9100</span><br><span class="line">        livenessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: prom-node-exp</span><br><span class="line">          initialDelaySeconds: 3</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: <span class="string">&#x27;/metrics&#x27;</span></span><br><span class="line">            port: prom-node-exp</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      hostPID: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl apply -f daemonset-demo.yaml</span></span><br><span class="line">daemonset.apps/daemonset-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get pods -l &#x27;app=prometheus&#x27; -o wide</span></span><br><span class="line">NAME                   READY   STATUS    RESTARTS   AGE    IP             NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">daemonset-demo-6qqmt   1/1     Running   0          4m5s   172.16.11.81   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">daemonset-demo-fvkhj   1/1     Running   0          4m5s   172.16.11.83   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">daemonset-demo-pxmrd   1/1     Running   0          4m5s   172.16.11.82   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="comment"># 已经在每个node节点部署上了</span></span><br></pre></td></tr></table></figure>

<p>3.测试访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># curl 172.16.11.81:9100/metrics</span></span><br><span class="line"><span class="comment"># HELP go_gc_duration_seconds A summary of the GC invocation durations.</span></span><br><span class="line"><span class="comment"># TYPE go_gc_duration_seconds summary</span></span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0&quot;</span>&#125; 3.5862e-05</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0.25&quot;</span>&#125; 9.0353e-05</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0.5&quot;</span>&#125; 0.000111509</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0.75&quot;</span>&#125; 0.000156903</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;1&quot;</span>&#125; 0.003124382</span><br><span class="line">go_gc_duration_seconds_sum 0.006404565</span><br><span class="line">go_gc_duration_seconds_count 25</span><br><span class="line"><span class="comment"># HELP go_goroutines Number of goroutines that currently exist.</span></span><br><span class="line"><span class="comment"># TYPE go_goroutines gauge</span></span><br><span class="line">go_goroutines 6</span><br><span class="line"><span class="comment"># HELP go_info Information about the Go environment.</span></span><br><span class="line"><span class="comment"># TYPE go_info gauge</span></span><br><span class="line">go_info&#123;version=<span class="string">&quot;go1.12.5&quot;</span>&#125; 1</span><br><span class="line"><span class="comment"># HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.</span></span><br><span class="line"><span class="comment"># TYPE go_memstats_alloc_bytes gauge</span></span><br><span class="line">go_memstats_alloc_bytes 2.99224e+06</span><br><span class="line"><span class="comment"># HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.</span></span><br><span class="line"><span class="comment"># TYPE go_memstats_alloc_bytes_total counter</span></span><br><span class="line">go_memstats_alloc_bytes_total 6.2666904e+07</span><br><span class="line"><span class="comment"># HELP go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table.</span></span><br><span class="line"><span class="comment"># TYPE go_memstats_buck_hash_sys_bytes gauge</span></span><br><span class="line">go_memstats_buck_hash_sys_bytes 1.465696e+06</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes控制器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>ReplicaSet</title>
    <url>/2021/07/08/Kubernetes/04Kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8/02ReplicaSet/ReplicaSet/</url>
    <content><![CDATA[<p>ReplicaSet属于apps群组v1版本，早期大多数控制器都位于extensions/v1beta1，v1beta2,…</p>
<h3 id="ReplicaSet工作流程"><a href="#ReplicaSet工作流程" class="headerlink" title="ReplicaSet工作流程"></a>ReplicaSet工作流程</h3><p>在Controller Manager中有一段代码称为ReplicaSet的控制器代码(Controller loop)。而控制器代码需要真正工作起来需要创建出对应的ReplicaSet Object，ReplicaSet Object是用于向API Server请求管理Pod对象（标签选择器选定的对象），如果存在此标签选择器选定的对象，且足量则无需创建，若没有ReplicaSet会借助于控制循环中的代码向APIserver创建出新的Pod，Pod来自于模板定义。然后由Scheduler调度并绑定至某节点，而后pod由kubelet来负责运行。</p>
<h3 id="ReplicaSet资源定义规范"><a href="#ReplicaSet资源定义规范" class="headerlink" title="ReplicaSet资源定义规范"></a>ReplicaSet资源定义规范</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">  name: …</span><br><span class="line">  namespace: …</span><br><span class="line">spec:</span><br><span class="line">  minReadySeconds &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># Pod就绪后多少秒内，Pod任一容器无crash方可视为“就绪”</span></span><br><span class="line">  replicas &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 期望的Pod副本数，默认为1</span></span><br><span class="line">  selector: <span class="comment"># 标签选择器，必须匹配template字段中Pod模板中的标签；</span></span><br><span class="line">    matchExpressions &lt;[]Object&gt; <span class="comment"># 标签选择器表达式列表，多个列表项之间为“与”关系</span></span><br><span class="line">    matchLabels &lt;map[string]string&gt; <span class="comment"># map格式的标签选择器</span></span><br><span class="line">  template:  <span class="comment"># Pod模板对象</span></span><br><span class="line">    metadata:  <span class="comment"># Pod对象元数据</span></span><br><span class="line">      labels:  <span class="comment"># 由模板创建出的Pod对象所拥有的标签，必须要能够匹配前面定义的标签选择器</span></span><br><span class="line">    spec:  <span class="comment"># Pod规范，格式同自主式Pod</span></span><br><span class="line">      ……</span><br></pre></td></tr></table></figure>

<h3 id="ReplicaSet示例"><a href="#ReplicaSet示例" class="headerlink" title="ReplicaSet示例"></a>ReplicaSet示例</h3><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim replicaset-demo.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">  name: replicaset-demo</span><br><span class="line">spec:</span><br><span class="line">  minReadySeconds: 3</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      release: stable</span><br><span class="line">      version: v1.0</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        release: stable</span><br><span class="line">        version: v1.0</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:v1.0</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: <span class="string">&#x27;/livez&#x27;</span></span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: <span class="string">&#x27;/readyz&#x27;</span></span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 15</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl apply -f replicaset-demo.yaml</span></span><br><span class="line">replicaset.apps/replicaset-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get rs</span></span><br><span class="line">NAME              DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset-demo   2         2         2       15m</span><br></pre></td></tr></table></figure>

<p>3.查看rs的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl describe rs replicaset-demo</span></span><br><span class="line">Name:         replicaset-demo</span><br><span class="line">Namespace:    default</span><br><span class="line">Selector:     app=demoapp,release=stable,version=v1.0</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Replicas:     2 current / 2 desired</span><br><span class="line">Pods Status:  2 Running / 0 Waiting / 0 Succeeded / 0 Failed</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app=demoapp</span><br><span class="line">           release=stable</span><br><span class="line">           version=v1.0</span><br><span class="line">  Containers:</span><br><span class="line">   demoapp:</span><br><span class="line">    Image:        ikubernetes/demoapp:v1.0</span><br><span class="line">    Port:         80/TCP</span><br><span class="line">    Host Port:    0/TCP</span><br><span class="line">    Liveness:     http-get http://:80/livez delay=5s timeout=1s period=10s <span class="comment">#success=1 #failure=3</span></span><br><span class="line">    Readiness:    http-get http://:80/readyz delay=15s timeout=1s period=10s <span class="comment">#success=1 #failure=3</span></span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason            Age   From                   Message</span><br><span class="line">  ----    ------            ----  ----                   -------</span><br><span class="line">  Normal  SuccessfulCreate  89s   replicaset-controller  Created pod: replicaset-demo-62bxh</span><br><span class="line">  Normal  SuccessfulCreate  89s   replicaset-controller  Created pod: replicaset-demo-kwl4r</span><br><span class="line"></span><br><span class="line"><span class="comment"># rs创建了2个pod</span></span><br></pre></td></tr></table></figure>

<p>4.查看pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                        READY   STATUS      RESTARTS   AGE</span><br><span class="line">replicaset-demo-62bxh       1/1     Running     0          2m34s</span><br><span class="line">replicaset-demo-kwl4r       1/1     Running     0          2m34s</span><br></pre></td></tr></table></figure>

<p>5.删除pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl delete pods replicaset-demo-62bxh</span></span><br><span class="line">pod <span class="string">&quot;replicaset-demo-62bxh&quot;</span> deleted</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一旦pod被删除，控制器会重新生成一个pod</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                        READY   STATUS      RESTARTS   AGE</span><br><span class="line">replicaset-demo-k2jnl       0/1     Running     0          51s</span><br><span class="line">replicaset-demo-kwl4r       1/1     Running     0          18m</span><br></pre></td></tr></table></figure>

<p>6.导出pod的yaml信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods replicaset-demo-k2jnl -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-21T06:46:44Z&quot;</span></span><br><span class="line">  generateName: replicaset-demo-</span><br><span class="line">  labels:</span><br><span class="line">    app: demoapp</span><br><span class="line">    release: stable</span><br><span class="line">    version: v1.0</span><br><span class="line">  name: replicaset-demo-k2jnl</span><br><span class="line">  namespace: default</span><br><span class="line">  ownerReferences:                        <span class="comment"># 此处可以看到Pod归谁所有。</span></span><br><span class="line">  - apiVersion: apps/v1</span><br><span class="line">    blockOwnerDeletion: <span class="literal">true</span></span><br><span class="line">    controller: <span class="literal">true</span></span><br><span class="line">    kind: ReplicaSet</span><br><span class="line">    name: replicaset-demo</span><br><span class="line">    uid: d16ab83c-c9a6-486f-b202-72e93f982750</span><br><span class="line">  resourceVersion: <span class="string">&quot;1196532&quot;</span></span><br><span class="line">  uid: b7478159-6cbd-4139-8954-7758e46679c3</span><br></pre></td></tr></table></figure>

<h3 id="ReplicaSet应用的更新和回滚"><a href="#ReplicaSet应用的更新和回滚" class="headerlink" title="ReplicaSet应用的更新和回滚"></a>ReplicaSet应用的更新和回滚</h3><h4 id="ReplicaSet更新机制"><a href="#ReplicaSet更新机制" class="headerlink" title="ReplicaSet更新机制"></a>ReplicaSet更新机制</h4><p>ReplicaSet支持两种更新</p>
<ul>
<li>删除式更新：在修改时只修改了APIServer中的pod模板信息，而ReplicaSet标签选择器所选定的pod数量足够时，其不会立即更新，需要删除当前的Pod后才会使用新的模板创建出pod.</li>
<li>单批次删除所有Pod，一次完成所有更新；服务会中断一段时间；</li>
<li>分批次删除，待一批次就绪之后，才删除下一批；滚动更新；</li>
</ul>
<h5 id="删除式更新示例"><a href="#删除式更新示例" class="headerlink" title="删除式更新示例"></a>删除式更新示例</h5><p>1.查看ReplicaSet信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get rs -o wide</span></span><br><span class="line">NAME              DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES                     SELECTOR</span><br><span class="line">replicaset-demo   2         2         2       41m   demoapp      ikubernetes/demoapp:v1.0   app=demoapp,release=stable,version=v1.0</span><br></pre></td></tr></table></figure>

<p>2.现在将demoapp:v1.0升级到demoapp:v1.1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令式更新使用kubectl Set来进行设定</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl set image replicasets/replicaset-demo demoapp=ikubernetes/demoapp:v1.1  </span></span><br><span class="line">replicaset.apps/replicaset-demo image updated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -l &#x27;app=demoapp&#x27; -o wide</span></span><br><span class="line">NAME                      READY   STATUS      RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">replicaset-demo-k2jnl     1/1     Running     3          29m   10.244.2.24   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">replicaset-demo-kwl4r     1/1     Running     0          46m   10.244.3.27   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod是否被跟新</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.244.3.27</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: replicaset-demo-kwl4r, ServerIP: 10.244.3.27!</span><br><span class="line"><span class="comment"># 目前依旧未被跟新，主要是因为使用命令方式更新为删除式更新，需要将pod删除后才会进行更新</span></span><br></pre></td></tr></table></figure>

<p>3.删除pod，并再次查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl delete pods replicaset-demo-kwl4r</span></span><br><span class="line">pod <span class="string">&quot;replicaset-demo-kwl4r&quot;</span> deleted</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -l &#x27;app=demoapp&#x27; -o wide</span></span><br><span class="line">NAME                      READY   STATUS      RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">replicaset-demo-5fmvs     0/1     Running     0          44s   10.244.3.28   k8s-node03   &lt;none&gt;           &lt;none&gt;    <span class="comment"># 此为新创建的pod</span></span><br><span class="line">replicaset-demo-k2jnl     1/1     Running     3          40m   10.244.2.24   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>4.访问新创建出的Pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># curl 10.244.3.28</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 10.244.0.0, ServerName: replicaset-demo-5fmvs, ServerIP: 10.244.3.28!</span><br><span class="line"><span class="comment"># pod已经被更新</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes控制器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>CronJob</title>
    <url>/2021/07/08/Kubernetes/04Kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8/05CronJob/CronJob/</url>
    <content><![CDATA[<p>Job是执行一次性任务，而CronJob执行周期性作业。</p>
<p>CronJob和Job之间的关系类似于，Deployment和replicaSet之间的关系，CronJob需要借助于Job控制器来完成其功能的。</p>
<p>所以CronJob是通过Job来控制Pod，而非直接控制Pod</p>
<h3 id="CronJob资源定义规范"><a href="#CronJob资源定义规范" class="headerlink" title="CronJob资源定义规范"></a>CronJob资源定义规范</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: batch/v1beta1  <span class="comment"># API群组及版本</span></span><br><span class="line">kind: CronJob  <span class="comment"># 资源类型特有标识</span></span><br><span class="line">metadata:</span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 资源名称，在作用域中要唯一</span></span><br><span class="line">  namespace &lt;string&gt;  <span class="comment"># 名称空间；CronJob资源隶属名称空间级别</span></span><br><span class="line">spec:</span><br><span class="line">  jobTemplate  &lt;Object&gt;  <span class="comment"># job作业模板，必选字段</span></span><br><span class="line">    metadata &lt;object&gt;  <span class="comment"># 模板元数据</span></span><br><span class="line">    spec &lt;object&gt;  <span class="comment"># 作业的期望状态</span></span><br><span class="line">  schedule &lt;string&gt;  <span class="comment"># 调度时间设定，必选字段</span></span><br><span class="line">  concurrencyPolicy  &lt;string&gt; <span class="comment"># 并发策略，可用值有Allow、Forbid和Replace</span></span><br><span class="line">  failedJobsHistoryLimit &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 失败作业的历史记录数，默认为1</span></span><br><span class="line">  successfulJobsHistoryLimit  &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 成功作业的历史记录数，默认为3</span></span><br><span class="line">  startingDeadlineSeconds  &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 因错过时间点而未执行的作业的可超期时长</span></span><br><span class="line">  <span class="built_in">suspend</span>  &lt;boolean&gt; <span class="comment"># 是否挂起后续的作业，不影响当前作业，默认为false</span></span><br></pre></td></tr></table></figure>

<h3 id="CronJob示例"><a href="#CronJob示例" class="headerlink" title="CronJob示例"></a>CronJob示例</h3><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim cronjob-demo.yaml</span></span><br><span class="line">apiVersion: batch/v1beta1</span><br><span class="line">kind: CronJob</span><br><span class="line">metadata:</span><br><span class="line">  name: cronjob-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  schedule: <span class="string">&quot;*/2 * * * *&quot;</span></span><br><span class="line">  jobTemplate:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        controller: cronjob-demo</span><br><span class="line">    spec:</span><br><span class="line">      parallelism: 1</span><br><span class="line">      completions: 1</span><br><span class="line">      ttlSecondsAfterFinished: 600</span><br><span class="line">      backoffLimit: 3</span><br><span class="line">      activeDeadlineSeconds: 60</span><br><span class="line">      template:</span><br><span class="line">        spec:</span><br><span class="line">          containers:</span><br><span class="line">          - name: myjob</span><br><span class="line">            image: alpine</span><br><span class="line">            <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;data; echo hello from CronJob, sleep a while...; sleep 10&quot;</span>]</span><br><span class="line">          restartPolicy: OnFailure</span><br><span class="line">  startingDeadlineSeconds: 300</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl apply -f cronjob-demo.yaml</span></span><br><span class="line">Warning: batch/v1beta1 CronJob is deprecated <span class="keyword">in</span> v1.21+, unavailable <span class="keyword">in</span> v1.25+; use batch/v1 CronJob</span><br><span class="line">cronjob.batch/cronjob-demo created</span><br><span class="line"></span><br><span class="line"><span class="comment"># get下cronjob</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get cronjobs.batch</span></span><br><span class="line">NAME           SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">cronjob-demo   */2 * * * *   False     0        97s             117s</span><br><span class="line"></span><br><span class="line"><span class="comment"># get下job</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get job</span></span><br><span class="line">NAME                    COMPLETIONS   DURATION   AGE</span><br><span class="line">cronjob-demo-27116788   1/1           25s        2m27s</span><br><span class="line">cronjob-demo-27116790   0/1           27s        27s</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes控制器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>StatefulSet</title>
    <url>/2021/07/08/Kubernetes/04Kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8/07StatefulSet/StatefulSet/</url>
    <content><![CDATA[<p>statefulset为通用的有状态应用控制器。</p>
<p>每个pod都有自己的唯一标识，故障时，它只能被拥有同一个标识的新实例所取代。</p>
<p>如果有必要，可以为每个pod配置专用的存储卷，且只能是PVC格式。通过pvc模板来为每个pod创建专用PV</p>
<h3 id="statefulset配置规范"><a href="#statefulset配置规范" class="headerlink" title="statefulset配置规范"></a>statefulset配置规范</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1  <span class="comment"># API群组及版本；</span></span><br><span class="line">kind: StatefulSet  <span class="comment"># 资源类型的特有标识</span></span><br><span class="line">metadata:</span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 资源名称，在作用域中要唯一</span></span><br><span class="line">  namespace &lt;string&gt;  <span class="comment"># 名称空间；StatefulSet隶属名称空间级别</span></span><br><span class="line">spec:</span><br><span class="line">  replicas &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 期望的Pod副本数，默认为1</span></span><br><span class="line">  selector &lt;object&gt; <span class="comment"># 标签选择器，须匹配Pod模板中的标签，必选字段</span></span><br><span class="line">  template &lt;object&gt;  <span class="comment"># Pod模板对象，必选字段</span></span><br><span class="line">  revisionHistoryLimit &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 滚动更新历史记录数量，默认为10</span></span><br><span class="line">  updateStrategy &lt;Object&gt; <span class="comment"># 滚动更新策略</span></span><br><span class="line">    <span class="built_in">type</span> &lt;string&gt;  <span class="comment"># 滚动更新类型，可用值有OnDelete和Rollingupdate</span></span><br><span class="line">    rollingUpdate &lt;Object&gt;  <span class="comment"># 滚动更新参数，专用于RollingUpdate类型</span></span><br><span class="line">      partition &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 分区指示索引值，默认为0</span></span><br><span class="line">  serviceName  &lt;string&gt;  <span class="comment"># 相关的Headless Service的名称，必选字段</span></span><br><span class="line">  volumeClaimTemplates &lt;[]Object&gt;  <span class="comment"># 存储卷申请模板</span></span><br><span class="line">    apiVersion &lt;string&gt;  <span class="comment"># PVC资源所属的API群组及版本，可省略</span></span><br><span class="line">    kind &lt;string&gt;  <span class="comment"># PVC资源类型标识，可省略</span></span><br><span class="line">    metadata &lt;Object&gt;  <span class="comment"># 卷申请模板元数据</span></span><br><span class="line">    spec &lt;Object&gt;  <span class="comment"># 期望的状态，可用字段同PVC</span></span><br><span class="line">  podManagementPolicy  &lt;string&gt; <span class="comment"># Pod管理策略，默认的“OrderedReady”表示顺序创</span></span><br><span class="line">                                     <span class="comment">#建并逆序删除，另一可用值“Parallel”表示并行模式</span></span><br></pre></td></tr></table></figure>

<h3 id="statefulset资源清单示例"><a href="#statefulset资源清单示例" class="headerlink" title="statefulset资源清单示例"></a>statefulset资源清单示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp-sts</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    name: http</span><br><span class="line">  selector:</span><br><span class="line">    app: demoapp</span><br><span class="line">    controller: sts-demo</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: sts-demo</span><br><span class="line">spec:</span><br><span class="line">  serviceName: demoapp-sts</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      controller: sts-demo</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        controller: sts-demo</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        images: ikubernetes/demoapp:v1.0</span><br><span class="line">        ports:</span><br><span class="line">        - name: web</span><br><span class="line">          containerPort: 80</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: appdata</span><br><span class="line">          mountPath: /app/data</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: appdata</span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">      storageClassName: longhorn</span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 2Gi</span><br><span class="line">        limits:</span><br><span class="line">          storage: 5Gi</span><br></pre></td></tr></table></figure>

<h3 id="StatefulSet示例"><a href="#StatefulSet示例" class="headerlink" title="StatefulSet示例"></a>StatefulSet示例</h3><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim demodb.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: demodb</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: demodb</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9907</span><br><span class="line">  selector:</span><br><span class="line">    app: demodb</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: demodb</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  serviceName: demodb</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demodb</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demodb</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demodb-shard</span><br><span class="line">        image: ikubernetes/demodb:v0.1</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9907</span><br><span class="line">          name: db</span><br><span class="line">        env:</span><br><span class="line">        - name: DEMODB_DATADIR</span><br><span class="line">          value: <span class="string">&quot;/demodb/data&quot;</span></span><br><span class="line">        livenessProbe:</span><br><span class="line">          initialDelaySeconds: 2</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /status</span><br><span class="line">            port: db</span><br><span class="line">        readinessProbe:</span><br><span class="line">          initialDelaySeconds: 15</span><br><span class="line">          periodSeconds: 30</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /status?level=full</span><br><span class="line">            port: db</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: data</span><br><span class="line">          mountPath: /demodb/data</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: data</span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">      storageClassName: longhorn</span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 2Gi</span><br><span class="line">        limits:</span><br><span class="line">          storage: 5Gi</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl apply -f demodb.yaml</span></span><br><span class="line">service/demodb created</span><br><span class="line">statefulset.apps/demodb created</span><br></pre></td></tr></table></figure>

<p>3.查看pod信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                                             READY   STATUS              RESTARTS   AGE</span><br><span class="line">demodb-0                                         1/1     Running             0          3m</span><br><span class="line">demodb-1                                         1/1     Running             0          2m</span><br><span class="line">demodb-2                                         1/1     Running             0          1m</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get sts</span></span><br><span class="line">NAME     READY   AGE</span><br><span class="line">demodb   3/3     4m</span><br></pre></td></tr></table></figure>

<h3 id="StatefulSet扩容"><a href="#StatefulSet扩容" class="headerlink" title="StatefulSet扩容"></a>StatefulSet扩容</h3><p>对镜像更新有3种方法：</p>
<ol>
<li>修改资源配置清单后apply</li>
<li>使用kubectl set 命令</li>
<li>使用kubectl patch命令打补丁</li>
</ol>
<p>此处示范打补丁</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对sts扩容</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl patch statefulsets.apps demodb -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;replicas&quot;:5&#125;&#125;&#x27;</span></span><br><span class="line">statefulset.apps/demodb patched</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看扩容后的pod</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -l &#x27;app=demodb&#x27;</span></span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">demodb-0   1/1     Running   0          118m</span><br><span class="line">demodb-1   1/1     Running   0          117m</span><br><span class="line">demodb-2   1/1     Running   0          116m</span><br><span class="line">demodb-3   1/1     Running   0          106s</span><br><span class="line">demodb-4   0/1     Running   0          43s</span><br></pre></td></tr></table></figure>

<h3 id="StatefulSet缩容"><a href="#StatefulSet缩容" class="headerlink" title="StatefulSet缩容"></a>StatefulSet缩容</h3><p>1.使用patch进行缩容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl patch statefulsets.apps demodb -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;replicas&quot;:2&#125;&#125;&#x27;</span></span><br><span class="line">statefulset.apps/demodb patched</span><br><span class="line"><span class="comment"># 此时多余的pod已经被删减</span></span><br></pre></td></tr></table></figure>

<p>2.查看其所关联的pvc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pvc</span></span><br><span class="line">NAME                    STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">data-demodb-0           Bound    pvc-04997889-b711-4168-bb4c-54189c8f481f   2Gi        RWO            longhorn       3h30m</span><br><span class="line">data-demodb-1           Bound    pvc-2d3e2083-659f-42ae-a289-99b2aa4199ea   2Gi        RWO            longhorn       3h29m</span><br><span class="line">data-demodb-2           Bound    pvc-7017741e-4eef-42a2-8aba-409e6c680c3f   2Gi        RWO            longhorn       3h28m</span><br><span class="line">data-demodb-3           Bound    pvc-2c82047a-8959-4f79-9cca-bcc0517d77da   2Gi        RWO            longhorn       93m</span><br><span class="line">data-demodb-4           Bound    pvc-f5dc549c-1198-43aa-a39e-7dd36edea642   2Gi        RWO            longhorn       92m</span><br><span class="line"></span><br><span class="line"><span class="comment"># PVC依旧存在</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes控制器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>认证、授权和准入控制</title>
    <url>/2021/07/10/Kubernetes/05%E8%AE%A4%E8%AF%81%E3%80%81%E6%8E%88%E6%9D%83%E3%80%81%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/01%E8%AE%A4%E8%AF%81%E3%80%81%E6%8E%88%E6%9D%83%E5%92%8C%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/%E8%AE%A4%E8%AF%81%E3%80%81%E6%8E%88%E6%9D%83%E5%92%8C%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>认证、授权和准入控制对应的三个单词分别为：Authn、Authz、Admission。</p>
<p>他们分别的作用：</p>
<ul>
<li>Authn：由于系统不是开放给所有用户的，因而必须确保来访问系统的是当前系统注册过且允许其使用该系统资源的用户</li>
<li>Authz：即便能进入同一个场所，不同用户所能够或得的不同资源的操作权限应该不同的。Authz是一个权限管理和分派的功能。</li>
<li>Admission：Admission本意为审计，但在k8s中其实现的功能比审计更为复杂。他们只发挥在用户的写请求上。它能够实现一些更为独特的功能，主要体现在2方面:</li>
<li>校验：用户创建数据时，若用户给定的资源清单中的字段违反了对应资源规范所使用的格式，或赋值违反了其值所应该具有的取值格式，我们应该识别到这种错误，以避免将其存入到<code>API-server</code>中。</li>
<li>变异：允许用户自定义一些允许其去修改一些对应字段值的。</li>
</ul>
<h3 id="k8s认证授权准入的基本工作逻辑"><a href="#k8s认证授权准入的基本工作逻辑" class="headerlink" title="k8s认证授权准入的基本工作逻辑"></a>k8s认证授权准入的基本工作逻辑</h3><p><img src="img1.png"></p>
<p>当K8S用户试图通过<code>API-Server</code>来完成资源操作时，他通常要完成3个步骤：</p>
<ol>
<li>对用户的身份做验证，看用户的身份是否有合法的访问系统的权限。</li>
<li>对用户请求的动作是否得到确切的授权。如果用户执行的是读操作，那么到此结束，如果为写操作则需要进入第3步。</li>
<li>检查用户所提交的资源是否合乎规范，用户的修改是否合乎规范，如果合乎规范不符合标准格式，还需要将其转换，最后存入到ETCD中。</li>
</ol>
<h3 id="认证授权准入的运行模式"><a href="#认证授权准入的运行模式" class="headerlink" title="认证授权准入的运行模式"></a>认证授权准入的运行模式</h3><p>Authn、Authz和Admission都是以插件的形式内置在API Server中。</p>
<p>当用户需要认证时，k8s是基于插件的配置顺序自上而下依次进行检查的，并且认证是以短路模式进行的。如果所有的认证插件都么有匹配到，那么就取决于当前系统是否允许匿名用户登录（anonymous），如果没有那么此用户将被拒绝。</p>
<p>授权也先相同，如果用户的操作得到了对应的某个插件的授权，那么其后面的插件将不再进行检查，其同样也运行于短路模式。</p>
<p>准入控制不工作于短路模式，其自上而下所有插件都需要进行检查，每个插件都有一票否决权，但是其不会立马生效，只有在所有的插件检查完毕后才会生效，其主要是为了记录都有哪些地方发生了错误。</p>
<h4 id="k8s的用户"><a href="#k8s的用户" class="headerlink" title="k8s的用户"></a>k8s的用户</h4><p>在上图中可以看出k8s的用户分为两类：</p>
<ol>
<li>人类用户：以交互式模式访问系统的用户</li>
<li>pod：他只代表了一类应用程序的用户。</li>
</ol>
<h5 id="用户的区分"><a href="#用户的区分" class="headerlink" title="用户的区分"></a>用户的区分</h5><p> K8S会区分这两类用户：</p>
<ul>
<li>在k8s上第一类人类用户是没有任何存储的，k8s没有提供任何一种资源类型让用户像创建service或pod一样创建一个用户账号，那么用户认证时，用户说是谁k8s就认为其是谁。但是k8s需要我们去验证这个用户是否存在，k8s自身不存储但是其需要借助插件额外去定义这些信息。</li>
<li>第二类被pod使用的账号称之为<code>ServiceAccount</code>，SA本身就是K8S上的标准资源格式之一。隶属于名称空间级别。其和pod之类的资源一样，需要定义kind、apiVersion、metadata、spec等字段提交到k8s，k8s自己需要借助于ETCD来进行管理和认证，这个和HumanUser不同。</li>
</ul>
<p>这样做法的好处是为了便于让k8s集成到现有的认证系统中去。</p>
<h5 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h5><ul>
<li>system:unauthenticated：未能通过任何一个授权插件检验的账号的所有未通过认证测试的用户统一隶属的用户组；</li>
<li>system:authenticated：认证成功后的用户自动加入的一个专用组，用于快捷引用所有正常通过认证的用户账号；</li>
<li>system:serviceaccounts：所有名称空间中的所有ServiceAccount对象；</li>
<li>system:serviceaccounts:<namespace>：特定名称空间内所有的ServiceAccount对象。</li>
</ul>
<h3 id="常见的认证、授权和准入的实现"><a href="#常见的认证、授权和准入的实现" class="headerlink" title="常见的认证、授权和准入的实现"></a>常见的认证、授权和准入的实现</h3><h4 id="认证方式"><a href="#认证方式" class="headerlink" title="认证方式"></a>认证方式</h4><ul>
<li>X509数字证书认证；</li>
<li>证书中的Subject中的 CommonName , CN：被k8s当作用户名使用；  </li>
<li>证书中的Subject中的Orgnization，O：被k8s当做组名；</li>
<li>引导令牌(Token)：节点加入集群时的临时认证。</li>
<li>静态令牌：存储于API Server进程可直接加载到的文件中保存的令牌，该文件内容会由API Server缓存于内存中；</li>
<li>静态密码：存储于API Server进程可直接加载到的文件中保存的账户和密码令牌，该文件内容会由API Server缓存于内存中；</li>
<li>ServiceAccount令牌：专用于认证ServiceAccount账号。</li>
<li>OpenID Connect令牌：OIDC令牌，OAuth 2</li>
<li>Webhook令牌</li>
<li>代理认证</li>
</ul>
<h4 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h4><ul>
<li>Node：节点授权，专用于控制kubelet</li>
<li>ABAC：Attribution，属性</li>
<li>RBAC: Role-Based AC, 基于角色的访问控制</li>
<li>Webhook</li>
</ul>
<h4 id="准入控制器"><a href="#准入控制器" class="headerlink" title="准入控制器"></a>准入控制器</h4><ul>
<li>LimitRanger：定义pod的默认资源限制</li>
<li>ResourceQuota：定义每一个名称空间的资源限额</li>
<li>PSP: PodSecurityPolicy。在集群级别限制用户拥有哪些特权的。</li>
</ul>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>认证、授权、准入控制</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>认证、授权和准入控制</title>
    <url>/2021/07/10/Kubernetes/05%E8%AE%A4%E8%AF%81%E3%80%81%E6%8E%88%E6%9D%83%E3%80%81%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/02%E8%AE%A4%E8%AF%81%E5%AE%9E%E7%8E%B0/%E8%AE%A4%E8%AF%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="ServiceAccount资源清单格式"><a href="#ServiceAccount资源清单格式" class="headerlink" title="ServiceAccount资源清单格式"></a>ServiceAccount资源清单格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1  <span class="comment"># ServiceAccount所属的API群组及版本</span></span><br><span class="line">kind: ServiceAccount  <span class="comment"># 资源类型标识</span></span><br><span class="line">metadata:</span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 资源名称</span></span><br><span class="line">  namespace &lt;string&gt;  <span class="comment"># ServiceAccount是名称空间级别的资源</span></span><br><span class="line">automountServiceAccountToken &lt;boolean&gt;  <span class="comment"># 是否让Pod自动挂载API令牌</span></span><br><span class="line">secrets &lt;[]Object&gt;   <span class="comment"># 以该SA运行的Pod所要使用的Secret对象组成的列表</span></span><br><span class="line">  apiVersion &lt;string&gt;  <span class="comment"># 引用的Secret对象所属的API群组及版本，可省略</span></span><br><span class="line">  kind &lt;string&gt;  <span class="comment"># 引用的资源的类型，这里是指Secret，可省略</span></span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 引用的Secret对象的名称，通常仅给出该字段即可</span></span><br><span class="line">  namespace &lt;string&gt;  <span class="comment"># 引用的Secret对象所属的名称空间</span></span><br><span class="line">  uid  &lt;string&gt;  <span class="comment"># 引用的Secret对象的标识符；</span></span><br><span class="line">imagePullSecrets &lt;[]Object&gt; <span class="comment"># 引用的用于下载Pod中容器镜像的Secret对象列表</span></span><br><span class="line">  name &lt;string&gt;  <span class="comment"># docker-registry类型的Secret资源的名称</span></span><br></pre></td></tr></table></figure>

<h3 id="ServiceAccount令牌认证"><a href="#ServiceAccount令牌认证" class="headerlink" title="ServiceAccount令牌认证"></a>ServiceAccount令牌认证</h3><p>正常情况下k8s所创建的每一个Pod注入一个ServiceAccount令牌</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe pod demodb-0</span></span><br><span class="line">......</span><br><span class="line">Containers:</span><br><span class="line">  demodb-shard:</span><br><span class="line">    Container ID:   docker://b7506f7a44abb86d008c8ddb38ccda4b8a11c25b5e7720877ec1694a9abc0f54</span><br><span class="line">    Image:          ikubernetes/demodb:v0.1</span><br><span class="line">    Image ID:       docker-pullable://ikubernetes/demodb@sha256:78edffb2083001b056f85202ca8049bb1e5ecb47b601725aadb5723a96e21b7b</span><br><span class="line">    Port:           9907/TCP</span><br><span class="line">    Host Port:      0/TCP</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Tue, 27 Jul 2021 01:31:48 +0000</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Liveness:       http-get http://:db/status delay=2s timeout=1s period=10s <span class="comment">#success=1 #failure=3</span></span><br><span class="line">    Readiness:      http-get http://:db/status%3Flevel=full delay=15s timeout=1s period=30s <span class="comment">#success=1 #failure=3</span></span><br><span class="line">    Environment:</span><br><span class="line">      DEMODB_DATADIR:  /demodb/data</span><br><span class="line">    Mounts:</span><br><span class="line">      /demodb/data from data (rw)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-zxl6g (ro)  <span class="comment"># 此为pod挂载的SA信息</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

<p>在每个名称空间中，会自动存在（由ServiceAccount准入控制器负责）一个ServiceAccount，将被该空间下的每个Pod共享使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看默认名称空间下的SA</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get sa</span></span><br><span class="line">NAME      SECRETS   AGE</span><br><span class="line">default   1         13d     <span class="comment"># 名称为default</span></span><br><span class="line"></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe sa default</span></span><br><span class="line">Name:                default</span><br><span class="line">Namespace:           default</span><br><span class="line">Labels:              &lt;none&gt;</span><br><span class="line">Annotations:         &lt;none&gt;</span><br><span class="line">Image pull secrets:  &lt;none&gt;</span><br><span class="line">Mountable secrets:   default-token-n6t9r</span><br><span class="line">Tokens:              default-token-n6t9r</span><br><span class="line">Events:              &lt;none&gt;</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get sa default -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-15T06:14:15Z&quot;</span></span><br><span class="line">  name: default</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;410&quot;</span></span><br><span class="line">  uid: c7ab687e-a63f-45b9-856d-e5038a5c1183</span><br><span class="line">secrets:</span><br><span class="line">- name: default-token-n6t9r</span><br></pre></td></tr></table></figure>

<p>认证令牌保存于该空间下的一个Secret对象中，该对象中共有三个信息：</p>
<ul>
<li>namespace</li>
<li>ca.crt</li>
<li>token</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get secrets default-token-n6t9r -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:  <span class="comment"># ca.crt namespace token信息</span></span><br><span class="line">  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1EY3hOVEEyTVRNek5Gb1hEVE14TURjeE16QTJNVE16TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTnZjCkc0NytMTUUydkxsNzJXNUpWYSt1S2VLY1htWVNFVjVXSmtCSkl4VjBZK0JkRExtb044WWxSWUdVaDVxTmxRRUQKOFhRSzgzOUNOUUl4ZGRSQWc3c1M4Z2I2SWdabGxCRXNobGRGb0JEcjNDUUlzMWxGMEFsVEFyV2RpK0NUbHdZYwpyYTRTREN6ZHVQUDZhdzFHWVBTNE9zOUtsUEpVZHpPMXRkUjdGNVBHVkY3SWpsWE1EMWc3NW1yL2d6NkgrcTVOCkN0S1UraFJ2WGd5QXN1TDY1TFlROUVEMyt1K0lJSE5xQWR4S1lXRkFmZ2tNT3Bqa0V3Z2xRWUUzenhWREdZR0EKdFI5clg5STNQUHF0UkkwWVdqb2EveGtxY1lhUTNRckhzU3ZBTjU5b2FyV3plS2xuMS8wWVdVeEd0cEZtdy92ZQpRMTYzYkVlc21YaDdSMERhMGhzQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIWmV1cEFHdnZ4c0pkSHl5N3hTVUNoZFNGY1hNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBTVUySkVrdU1QZ0ltSDlaSzk2OHRsY05HNVRsVFVseFVYRm9Uc1VTSWhyU1pycGhmRApKelBOTE5rcTJxMCtUV3ZTbHZxbzFyM2dLckhNWWZDY1AwTnFIU2VYVWNhaW1WeUhwUm12M3AzODBoTlJONnNyCkJZSmZ4RUE0aWJsWEpvYnNVR0tDcmdZeHk5SFJYbE9ud0QvMHdrTVVBZHFuSG90MlRPbGJZSVU3aUNTNklCajMKaWZLeHlGdkdDTWJ6NFhIY0xjajY4L3AzaC9VRDgxRjNGc2ZqdmV6L1A3Nk42L2hCL090TkhKK3pTWGVmdjJjcQpMUXBxYXA5aW9IUGZTVFpnTm5BUndSWUNaMW9DdmI0WitnbzdkQTROM3M2K3NOTUpYZFFERWkxb1dWeDVKUXgyClgzejNtY1hhZHROTVgwOEN0UHorTlQwZGZGOUNhaDVWMTkzWgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class="line">  namespace: ZGVmYXVsdA==</span><br><span class="line">  token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqZDRPRTVoTVRWMVZVMHRVRFF6Ums0NVVVd3pOV056VURWc2JUZHBjMnR6TUVaWVJVdHdhMWxmZG1NaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUprWldaaGRXeDBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbVJsWm1GMWJIUXRkRzlyWlc0dGJqWjBPWElpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxjblpwWTJVdFlXTmpiM1Z1ZEM1dVlXMWxJam9pWkdWbVlYVnNkQ0lzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJbU0zWVdJMk9EZGxMV0UyTTJZdE5EVmlPUzA0TlRaa0xXVTFNRE00WVRWak1URTRNeUlzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwa1pXWmhkV3gwT21SbFptRjFiSFFpZlEuR2ZiSzlfRmpHU3EwME03c2tTYjdMWTd4bHlZUEFVS0dmZWl4U0Zqc2tFRnJvck95QkdJY3MxQXo2YmtaZm1ta1BocmVoSW5qVlhsQnU3dmprc0J2c0tlOHVsYWFtbTlXSGdSU2g3MjRTTUYyT0ZLUVFpMzJsTWVxd1piRDF1dGRJaHVHX21RSk82cWg2UVFoMzkzQ0FCRFJzWUR2MXZMUzVuSlpxY211YWFCUlVVVFA5VjY0RUwzcEVwUUlYVy1iY2o5RDQyOXBvakFyMDFkQUFNbUVRN3pqWWt6eEZnM0s1empQSGF2cVpmWlI1dlFjdmxER1d0ZWZmVTBRYXZFaGJsYXM3dTJLb2g5aWhORl80YjRBdjlRZ0Y3UUdORTBkNFh6aTZOUE9ROUtkbGpXTm50dVRYYXNUcU9iQmVSaC1TRm9iVGdnVUo0ejRKekVIUl9aM2hR</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/service-account.name: default</span><br><span class="line">    kubernetes.io/service-account.uid: c7ab687e-a63f-45b9-856d-e5038a5c1183</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-15T06:14:15Z&quot;</span></span><br><span class="line">  name: default-token-n6t9r</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;409&quot;</span></span><br><span class="line">  uid: 011e52ae-a4d2-46eb-9b3a-9a25000be0d9</span><br><span class="line"><span class="built_in">type</span>: kubernetes.io/service-account-token</span><br></pre></td></tr></table></figure>

<p>如果运行pod时没有指定其SA，那么K8S会使用其名称空间下默认的SA。</p>
<p>如果在运行pod时不想使用默认的SA，也可以自己创建SA让pod获得更大的授权，但是在Pod资源清单中使用时，要指明使用的SA账号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">k8s-master01:~<span class="comment"># kubectl explain pod.spec.serviceAccountName</span></span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1</span><br><span class="line"></span><br><span class="line">FIELD:    serviceAccountName &lt;string&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     ServiceAccountName is the name of the ServiceAccount to use to run this</span><br><span class="line">     pod. More info:</span><br><span class="line">     https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/</span><br></pre></td></tr></table></figure>

<h3 id="创建SA"><a href="#创建SA" class="headerlink" title="创建SA"></a>创建SA</h3><h4 id="基于命令创建SA"><a href="#基于命令创建SA" class="headerlink" title="基于命令创建SA"></a>基于命令创建SA</h4><p>1.使用命令创建SA</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个dev名称空间</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl create ns dev</span></span><br><span class="line">namespace/dev created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在dev名称空间下创建一个拥有管理员权限的SA</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl create sa admin -n dev    # 如果不指定名称空间默认创建在default名称空间下</span></span><br><span class="line">serviceaccount/admin created</span><br><span class="line"></span><br><span class="line"><span class="comment"># admin的SA创建完毕</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get sa -n dev</span></span><br><span class="line">NAME      SECRETS   AGE</span><br><span class="line">admin     1         17s</span><br><span class="line">default   1         109s</span><br><span class="line"></span><br><span class="line"><span class="comment"># SA创建完毕默认会创建出认证信息token</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get secrets -n dev</span></span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">admin-token-6lrjw     kubernetes.io/service-account-token   3      2m23s</span><br><span class="line">default-token-j5lt6   kubernetes.io/service-account-token   3      3m55s</span><br></pre></td></tr></table></figure>

<h4 id="基于资源清单创建SA"><a href="#基于资源清单创建SA" class="headerlink" title="基于资源清单创建SA"></a>基于资源清单创建SA</h4><p>1.创建SA资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># vim sa-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: ns-admin</span><br><span class="line">  namespace: default                    <span class="comment"># ns如果非default，必须写</span></span><br><span class="line">automountServiceAccountToken: <span class="literal">true</span>      <span class="comment"># 可有可无</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两个字段可以不指定，SA会自己创建token，如果要自己指定，则需要另外创建secret-token.</span></span><br><span class="line"><span class="comment"># secrets:</span></span><br><span class="line"><span class="comment"># - name: k8sadmin-secret</span></span><br></pre></td></tr></table></figure>

<p>2.如果SA的资源清单中指定了Secrets，则需要自己创建Secret-token资源清单，（如果未指定此步骤可以省略）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># vim secret-token.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: k8sadmin-secret</span><br><span class="line">  namespace: default</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/service-account.name: k8sadmin</span><br><span class="line"><span class="built_in">type</span>: kubernetes.io/service-account-token</span><br></pre></td></tr></table></figure>

<h3 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h3><p>在Pod的资源清单中有一项名为<code>imagePullSecrets</code>的选项，用来从私有仓库中获取镜像时做认证时使用，我们可以将其在SA中进行配置，无需在pod上配置，这样的好处是，同一pod在挂载SA时默认会挂载其认证到私有仓库的Secret信息。这样就无需再单独对pod中<code>imagePullSecrets</code>进行管理。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>认证、授权、准入控制</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeconfig配置文件</title>
    <url>/2021/07/10/Kubernetes/05%E8%AE%A4%E8%AF%81%E3%80%81%E6%8E%88%E6%9D%83%E3%80%81%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/03kubeconfig%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/kubeconfig%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>k8s在部署完毕以后一定会复制一个配置文件<code>/etc/kubernetes/admin.conf</code>，此文件中保存了当前<code>API-Server</code>中一个管理员账号的用户名、密码等相关信息。此文件有特定组织格式的文件。</p>
<p><code>/etc/kubernetes</code>目录下的所有conf文件都有类似的格式，只不过他们都是被k8s上不同的组件所使用的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># ls /etc/kubernetes/</span></span><br><span class="line">admin.conf  controller-manager.conf  kubelet.conf  manifests  pki  scheduler.conf</span><br></pre></td></tr></table></figure>

<p>这些文件是为了让客户端便于访问<code>API-Server</code>所使用的。</p>
<p>在k8s上认证时，需要使用token或账号密码或证书之类，而每一次使用kubectl去联系<code>API-Server</code>时都需要带上这些信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用kubectl options可以看到添加哪些选项。</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl options</span></span><br><span class="line">The following options can be passed to any <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">      --add-dir-header=<span class="literal">false</span>: If <span class="literal">true</span>, adds the file directory to the header of the <span class="built_in">log</span> messages</span><br><span class="line">      --alsologtostderr=<span class="literal">false</span>: <span class="built_in">log</span> to standard error as well as files</span><br><span class="line">      --as=<span class="string">&#x27;&#x27;</span>: Username to impersonate <span class="keyword">for</span> the operation</span><br><span class="line">      --as-group=[]: Group to impersonate <span class="keyword">for</span> the operation, this flag can be repeated to specify</span><br><span class="line">multiple groups.</span><br><span class="line">      --cache-dir=<span class="string">&#x27;/root/.kube/cache&#x27;</span>: Default cache directory</span><br><span class="line">      --certificate-authority=<span class="string">&#x27;&#x27;</span>: Path to a cert file <span class="keyword">for</span> the certificate authority</span><br><span class="line">      --client-certificate=<span class="string">&#x27;&#x27;</span>: Path to a client certificate file <span class="keyword">for</span> TLS</span><br><span class="line">      --client-key=<span class="string">&#x27;&#x27;</span>: Path to a client key file <span class="keyword">for</span> TLS</span><br><span class="line">      --cluster=<span class="string">&#x27;&#x27;</span>: The name of the kubeconfig cluster to use</span><br><span class="line">      --context=<span class="string">&#x27;&#x27;</span>: The name of the kubeconfig context to use</span><br><span class="line">      --insecure-skip-tls-verify=<span class="literal">false</span>: If <span class="literal">true</span>, the server<span class="string">&#x27;s certificate will not be checked for</span></span><br><span class="line"><span class="string">validity. This will make your HTTPS connections insecure</span></span><br><span class="line"><span class="string">      --kubeconfig=&#x27;</span><span class="string">&#x27;: Path to the kubeconfig file to use for CLI requests.</span></span><br><span class="line"><span class="string">      --log-backtrace-at=:0: when logging hits line file:N, emit a stack trace</span></span><br><span class="line"><span class="string">      --log-dir=&#x27;</span><span class="string">&#x27;: If non-empty, write log files in this directory</span></span><br><span class="line"><span class="string">      --log-file=&#x27;</span><span class="string">&#x27;: If non-empty, use this log file</span></span><br><span class="line"><span class="string">      --log-file-max-size=1800: Defines the maximum size a log file can grow to. Unit is megabytes.</span></span><br><span class="line"><span class="string">If the value is 0, the maximum file size is unlimited.</span></span><br><span class="line"><span class="string">      --log-flush-frequency=5s: Maximum number of seconds between log flushes</span></span><br><span class="line"><span class="string">      --logtostderr=true: log to standard error instead of files</span></span><br><span class="line"><span class="string">      --match-server-version=false: Require server version to match client version</span></span><br><span class="line"><span class="string">  -n, --namespace=&#x27;</span><span class="string">&#x27;: If present, the namespace scope for this CLI request</span></span><br><span class="line"><span class="string">      --one-output=false: If true, only write logs to their native severity level (vs also writing</span></span><br><span class="line"><span class="string">to each lower severity level)</span></span><br><span class="line"><span class="string">      --password=&#x27;</span><span class="string">&#x27;: Password for basic authentication to the API server</span></span><br><span class="line"><span class="string">      --profile=&#x27;</span>none<span class="string">&#x27;: Name of profile to capture. One of</span></span><br><span class="line"><span class="string">(none|cpu|heap|goroutine|threadcreate|block|mutex)</span></span><br><span class="line"><span class="string">      --profile-output=&#x27;</span>profile.pprof<span class="string">&#x27;: Name of the file to write the profile to</span></span><br><span class="line"><span class="string">      --request-timeout=&#x27;</span>0<span class="string">&#x27;: The length of time to wait before giving up on a single server request.</span></span><br><span class="line"><span class="string">Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means</span></span><br><span class="line"><span class="string">don&#x27;</span>t timeout requests.</span><br><span class="line">  -s, --server=<span class="string">&#x27;&#x27;</span>: The address and port of the Kubernetes API server</span><br><span class="line">      --skip-headers=<span class="literal">false</span>: If <span class="literal">true</span>, avoid header prefixes <span class="keyword">in</span> the <span class="built_in">log</span> messages</span><br><span class="line">      --skip-log-headers=<span class="literal">false</span>: If <span class="literal">true</span>, avoid headers when opening <span class="built_in">log</span> files</span><br><span class="line">      --stderrthreshold=2: logs at or above this threshold go to stderr</span><br><span class="line">      --tls-server-name=<span class="string">&#x27;&#x27;</span>: Server name to use <span class="keyword">for</span> server certificate validation. If it is not</span><br><span class="line">provided, the hostname used to contact the server is used</span><br><span class="line">      --token=<span class="string">&#x27;&#x27;</span>: Bearer token <span class="keyword">for</span> authentication to the API server</span><br><span class="line">      --user=<span class="string">&#x27;&#x27;</span>: The name of the kubeconfig user to use</span><br><span class="line">      --username=<span class="string">&#x27;&#x27;</span>: Username <span class="keyword">for</span> basic authentication to the API server</span><br><span class="line">  -v, --v=0: number <span class="keyword">for</span> the <span class="built_in">log</span> level verbosity</span><br><span class="line">      --vmodule=: comma-separated list of pattern=N settings <span class="keyword">for</span> file-filtered logging</span><br><span class="line">      --warnings-as-errors=<span class="literal">false</span>: Treat warnings received from the server as errors and <span class="built_in">exit</span> with a</span><br><span class="line">non-zero <span class="built_in">exit</span> code</span><br></pre></td></tr></table></figure>

<h3 id="kubeconfig简介"><a href="#kubeconfig简介" class="headerlink" title="kubeconfig简介"></a>kubeconfig简介</h3><p>为了简化所有客户端认证的过程，API Server专门定义了一种能够更便捷的管理认证信息的配置文件，叫做kubeconfig配置文件。</p>
<p>将用户名、认证信息等组织一起，便于认证到API Server上的认证信息文件。</p>
<p>此文件还支持一个文件中保存m个集群的n个认证信息，用于让用户使用一个文件中的不同的认证信息去访问不同的集群。</p>
<h4 id="kubeconfig文件组织格式"><a href="#kubeconfig文件组织格式" class="headerlink" title="kubeconfig文件组织格式"></a>kubeconfig文件组织格式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">users:</span><br><span class="line">- user1         <span class="comment"># 定义了账号，账号中保存了用户名和认证信息</span></span><br><span class="line">- user2</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line">clusers:</span><br><span class="line">- cluster1      <span class="comment"># 定义了集群</span></span><br><span class="line">- cluster2</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line">contexts:                 <span class="comment"># 用来指定用户和集群的对应关系</span></span><br><span class="line">- context1</span><br><span class="line">    user1</span><br><span class="line">    cluster1</span><br><span class="line">  name: user1@cluster1</span><br><span class="line">- context2</span><br><span class="line">    user2</span><br><span class="line">    cluster2</span><br><span class="line">  name: user2@cluster2</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line">current-context:      <span class="comment"># 当前生效的。</span></span><br><span class="line">  context1</span><br></pre></td></tr></table></figure>

<h4 id="kubeconfig的加载方式"><a href="#kubeconfig的加载方式" class="headerlink" title="kubeconfig的加载方式"></a>kubeconfig的加载方式</h4><p>kubectl执行时默认会去<code>~/.kube/</code>目录下加载kubeconfig文件，所以集群配置完毕后需要将其复制到此目录下。</p>
<p>如果不复制此文件，有两种加载方式：</p>
<p>1.需要在运行kubectl命令时指定kubeconfig文件的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get nodes --kubeconfig=/etc/kubernetes/admin.conf</span></span><br><span class="line">NAME           STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k8s-master01   Ready    control-plane,master   13d   v1.21.2</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;                 13d   v1.21.2</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;                 13d   v1.21.2</span><br><span class="line">k8s-node03     Ready    &lt;none&gt;                 13d   v1.21.2</span><br></pre></td></tr></table></figure>

<p>2.使用环境变量申明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># export KUBECONFIG=/etc/kubernetes/admin.conf</span></span><br></pre></td></tr></table></figure>

<h4 id="kubeconfig文件管理"><a href="#kubeconfig文件管理" class="headerlink" title="kubeconfig文件管理"></a>kubeconfig文件管理</h4><p>对于kubeconfig文件的管理可以使用<code>kubectl config</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl config --help</span></span><br><span class="line">Modify kubeconfig files using subcommands like <span class="string">&quot;kubectl config set current-context my-context&quot;</span></span><br><span class="line"></span><br><span class="line"> The loading order follows these rules:</span><br><span class="line"></span><br><span class="line">  1.  If the --kubeconfig flag is <span class="built_in">set</span>, <span class="keyword">then</span> only that file is loaded. The flag may only be <span class="built_in">set</span> once</span><br><span class="line">and no merging takes place.</span><br><span class="line">  2.  If <span class="variable">$KUBECONFIG</span> environment variable is <span class="built_in">set</span>, <span class="keyword">then</span> it is used as a list of paths (normal path</span><br><span class="line">delimiting rules <span class="keyword">for</span> your system). These paths are merged. When a value is modified, it is modified</span><br><span class="line"><span class="keyword">in</span> the file that defines the stanza. When a value is created, it is created <span class="keyword">in</span> the first file that</span><br><span class="line">exists. If no files <span class="keyword">in</span> the chain exist, <span class="keyword">then</span> it creates the last file <span class="keyword">in</span> the list.</span><br><span class="line">  3.  Otherwise, <span class="variable">$&#123;HOME&#125;</span>/.kube/config is used and no merging takes place.</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  current-context Displays the current-context</span><br><span class="line">  delete-cluster  Delete the specified cluster from the kubeconfig</span><br><span class="line">  delete-context  Delete the specified context from the kubeconfig</span><br><span class="line">  delete-user     Delete the specified user from the kubeconfig</span><br><span class="line">  get-clusters    Display clusters defined <span class="keyword">in</span> the kubeconfig</span><br><span class="line">  get-contexts    Describe one or many contexts</span><br><span class="line">  get-users       Display users defined <span class="keyword">in</span> the kubeconfig</span><br><span class="line">  rename-context  Renames a context from the kubeconfig file.</span><br><span class="line">  <span class="built_in">set</span>             Sets an individual value <span class="keyword">in</span> a kubeconfig file</span><br><span class="line">  set-cluster     Sets a cluster entry <span class="keyword">in</span> kubeconfig</span><br><span class="line">  set-context     Sets a context entry <span class="keyword">in</span> kubeconfig</span><br><span class="line">  set-credentials Sets a user entry <span class="keyword">in</span> kubeconfig</span><br><span class="line">  <span class="built_in">unset</span>           Unsets an individual value <span class="keyword">in</span> a kubeconfig file</span><br><span class="line">  use-context     Sets the current-context <span class="keyword">in</span> a kubeconfig file</span><br><span class="line">  view            Display merged kubeconfig settings or a specified kubeconfig file</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  kubectl config SUBCOMMAND [options]</span><br><span class="line"></span><br><span class="line">Use <span class="string">&quot;kubectl &lt;command&gt; --help&quot;</span> <span class="keyword">for</span> more information about a given <span class="built_in">command</span>.</span><br><span class="line">Use <span class="string">&quot;kubectl options&quot;</span> <span class="keyword">for</span> a list of global command-line options (applies to all commands).</span><br></pre></td></tr></table></figure>

<p>查看当前集群上的kubeconfig信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl config view</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://kube-api:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kubernetes-admin</span><br><span class="line">  name: kubernetes-admin@kubernetes</span><br><span class="line">current-context: kubernetes-admin@kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kubernetes-admin</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br></pre></td></tr></table></figure>

<p>获取当前kubeconfig上的生效信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl config get-contexts</span></span><br><span class="line">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class="line">*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要查看其他的配置文件信息，则需要指定其kubeconfig文件</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl config get-contexts --kubeconfig=/etc/kubernetes/scheduler.conf</span></span><br><span class="line">CURRENT   NAME                               CLUSTER      AUTHINFO                NAMESPACE</span><br><span class="line">*         system:kube-scheduler@kubernetes   kubernetes   system:kube-scheduler</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>认证、授权、准入控制</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>自建账号及认证</title>
    <url>/2021/07/11/Kubernetes/05%E8%AE%A4%E8%AF%81%E3%80%81%E6%8E%88%E6%9D%83%E3%80%81%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/04%E8%87%AA%E5%BB%BA%E8%B4%A6%E5%8F%B7%E5%8F%8A%E8%AE%A4%E8%AF%81/%E8%87%AA%E5%BB%BA%E8%B4%A6%E5%8F%B7%E5%8F%8A%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<h3 id="X509认证"><a href="#X509认证" class="headerlink" title="X509认证"></a>X509认证</h3><p>1.创建出用户的私钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个存放用户证书的目录</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes<span class="comment"># mkdir usercerts</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes<span class="comment"># cd usercerts/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个私钥</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># (umask 077; openssl genrsa -out masuri.key 2048)</span></span><br><span class="line">Generating RSA private key, 2048 bit long modulus (2 primes)</span><br><span class="line">...........................................................+++++</span><br><span class="line">.....................+++++</span><br><span class="line">e is 65537 (0x010001)</span><br></pre></td></tr></table></figure>

<p>2.基于私钥创建一个证书签署请求，此签署请求需要被k8s的CA所签署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成证书签署请求，需要注意此处CN将会被做为用户名，O将会被作为组名使用</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># openssl req -new -key masuri.key -out masuri.csr -subj &quot;/CN=masuri/O=kubeusers&quot;</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># ls</span></span><br><span class="line">masuri.csr  masuri.key</span><br></pre></td></tr></table></figure>

<p>3.将用户的证书签署请求，使用k8s的CA签署成证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 签署时需要指定k8s CA的证书，CA的私钥，以及CA自己维护的序列号。</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># openssl x509 -req -days 3655 -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -in masuri.csr -out masuri.crt</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=CN = masuri, O = kubeusers</span><br><span class="line">Getting CA Private Key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用以下命令查看证书的详细信息</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># openssl x509 -in masuri.crt -text -noout</span></span><br></pre></td></tr></table></figure>

<h3 id="自制kubeconfig文件尝试认证到k8s"><a href="#自制kubeconfig文件尝试认证到k8s" class="headerlink" title="自制kubeconfig文件尝试认证到k8s"></a>自制kubeconfig文件尝试认证到k8s</h3><p>1.设定集群信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设定集群信息，需要指定集群名字，指定集群服务器地址，指定k8s的ca证书，最后指定生成的kubeconfig文件。</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config set-cluster kubernetes --server=https://kube-api:6443 --embed-certs --certificate-authority=/etc/kubernetes/pki/ca.crt --kubeconfig=/tmp/mykubeconfig</span></span><br><span class="line">Cluster <span class="string">&quot;kubernetes&quot;</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看kubeconfig内信息</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># cat /tmp/mykubeconfig</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1EY3hOVEEyTVRNek5Gb1hEVE14TURjeE16QTJNVE16TkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTnZjCkc0NytMTUUydkxsNzJXNUpWYSt1S2VLY1htWVNFVjVXSmtCSkl4VjBZK0JkRExtb044WWxSWUdVaDVxTmxRRUQKOFhRSzgzOUNOUUl4ZGRSQWc3c1M4Z2I2SWdabGxCRXNobGRGb0JEcjNDUUlzMWxGMEFsVEFyV2RpK0NUbHdZYwpyYTRTREN6ZHVQUDZhdzFHWVBTNE9zOUtsUEpVZHpPMXRkUjdGNVBHVkY3SWpsWE1EMWc3NW1yL2d6NkgrcTVOCkN0S1UraFJ2WGd5QXN1TDY1TFlROUVEMyt1K0lJSE5xQWR4S1lXRkFmZ2tNT3Bqa0V3Z2xRWUUzenhWREdZR0EKdFI5clg5STNQUHF0UkkwWVdqb2EveGtxY1lhUTNRckhzU3ZBTjU5b2FyV3plS2xuMS8wWVdVeEd0cEZtdy92ZQpRMTYzYkVlc21YaDdSMERhMGhzQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIWmV1cEFHdnZ4c0pkSHl5N3hTVUNoZFNGY1hNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBTVUySkVrdU1QZ0ltSDlaSzk2OHRsY05HNVRsVFVseFVYRm9Uc1VTSWhyU1pycGhmRApKelBOTE5rcTJxMCtUV3ZTbHZxbzFyM2dLckhNWWZDY1AwTnFIU2VYVWNhaW1WeUhwUm12M3AzODBoTlJONnNyCkJZSmZ4RUE0aWJsWEpvYnNVR0tDcmdZeHk5SFJYbE9ud0QvMHdrTVVBZHFuSG90MlRPbGJZSVU3aUNTNklCajMKaWZLeHlGdkdDTWJ6NFhIY0xjajY4L3AzaC9VRDgxRjNGc2ZqdmV6L1A3Nk42L2hCL090TkhKK3pTWGVmdjJjcQpMUXBxYXA5aW9IUGZTVFpnTm5BUndSWUNaMW9DdmI0WitnbzdkQTROM3M2K3NOTUpYZFFERWkxb1dWeDVKUXgyClgzejNtY1hhZHROTVgwOEN0UHorTlQwZGZGOUNhaDVWMTkzWgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class="line">    server: https://kube-api:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts: null</span><br><span class="line">current-context: <span class="string">&quot;&quot;</span></span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users: null</span><br></pre></td></tr></table></figure>

<p>2.设定用户信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设定用户信息时需要指定用户名，此处使用的x509认证，所以还需要指定用户的证书，用户的私钥，embed-certs表示是否将用户的证书信息嵌入kubeconfig文件，最后指定kubeconfig文件目录</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config set-credentials masuri --client-certificate=masuri.crt --client-key=masuri.key --embed-certs=true --kubeconfig=/tmp/mykubeconfig</span></span><br><span class="line">User <span class="string">&quot;masuri&quot;</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看kubeconfig文件</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config view --kubeconfig=/tmp/mykubeconfig</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://kube-api:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts: null</span><br><span class="line">current-context: <span class="string">&quot;&quot;</span></span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: masuri</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br></pre></td></tr></table></figure>

<p>3.设定用户和集群的关联关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设定关联关系的名称，指定用户，指定集群，指定kubeconfig文件</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config set-context &#x27;masuri@kubernetes&#x27; --user=masuri --cluster=kubernetes --kubeconfig=/tmp/mykubeconfig</span></span><br><span class="line">Context <span class="string">&quot;masuri@kubernetes&quot;</span> created.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看kubeconfig信息</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config view --kubeconfig=/tmp/mykubeconfig</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://kube-api:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:														<span class="comment"># context信息被建立</span></span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: masuri</span><br><span class="line">  name: masuri@kubernetes</span><br><span class="line">current-context: <span class="string">&quot;&quot;</span></span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: masuri</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br></pre></td></tr></table></figure>

<p>4.设定当前使用的context</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config use-context masuri@kubernetes --kubeconfig=/tmp/mykubeconfig</span></span><br><span class="line">Switched to context <span class="string">&quot;masuri@kubernetes&quot;</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看kubeconfig信息</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config view --kubeconfig=/tmp/mykubeconfig</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://kube-api:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: masuri</span><br><span class="line">  name: masuri@kubernetes</span><br><span class="line">current-context: masuri@kubernetes         <span class="comment"># 当前使用的为masuri@kubernetes</span></span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: masuri</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br></pre></td></tr></table></figure>

<p>5.kubeconfig文件已经创建完毕，尝试使用此文件进行认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl get nodes --kubeconfig=/tmp/mykubeconfig</span></span><br><span class="line">Error from server (Forbidden): nodes is forbidden: User <span class="string">&quot;masuri&quot;</span> cannot list resource <span class="string">&quot;nodes&quot;</span> <span class="keyword">in</span> API group <span class="string">&quot;&quot;</span> at the cluster scope</span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证已经没有问题，报错是因为用户没有权限导致的。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>认证、授权、准入控制</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>多kubeconfig文件合并</title>
    <url>/2021/07/11/Kubernetes/05%E8%AE%A4%E8%AF%81%E3%80%81%E6%8E%88%E6%9D%83%E3%80%81%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/05%E5%A4%9Akubeconfig%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/%E5%A4%9Akubeconfig%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<p>当存在多个kubeconfig文件时，我们可以将其进行合并使用。</p>
<p>当前系统上存在2个kubeconfig文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeconfig文件1</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl config view</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://kube-api:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kubernetes-admin</span><br><span class="line">  name: kubernetes-admin@kubernetes</span><br><span class="line">current-context: kubernetes-admin@kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kubernetes-admin</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubeconfig文件2</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl config view --kubeconfig=/tmp/mykubeconfig</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://kube-api:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: masuri</span><br><span class="line">  name: masuri@kubernetes</span><br><span class="line">current-context: masuri@kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: masuri</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br></pre></td></tr></table></figure>

<h3 id="使用变量合并kubeconfig"><a href="#使用变量合并kubeconfig" class="headerlink" title="使用变量合并kubeconfig"></a>使用变量合并kubeconfig</h3><p>1.使用KUBECONFIG变量将其进行合并</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># export KUBECONFIG=&quot;$HOME/.kube/config:/tmp/mykubeconfig&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.再次使用config view查看config文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl config view</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://kube-api:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kubernetes-admin</span><br><span class="line">  name: kubernetes-admin@kubernetes</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: masuri</span><br><span class="line">  name: masuri@kubernetes</span><br><span class="line">current-context: kubernetes-admin@kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kubernetes-admin</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br><span class="line">- name: masuri</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 两个文件已经合并</span></span><br></pre></td></tr></table></figure>

<p>但是此方法存在问题，如果多个kubeconfig文件中存在多个相同的集群，会导致config中相同的集群出现多次。我们可以在此基础上将其重合部分进行斩平，然后重新生成新文件。</p>
<h3 id="合并kubeconfig方法2"><a href="#合并kubeconfig方法2" class="headerlink" title="合并kubeconfig方法2"></a>合并kubeconfig方法2</h3><p>使用merge文件合并，flatten斩平</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl config view --merge --flatten  &gt; /tmp/newkubeconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看文件</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl config view --kubeconfig=/tmp/newkubeconfig</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://kube-api:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kubernetes-admin</span><br><span class="line">  name: kubernetes-admin@kubernetes</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: masuri</span><br><span class="line">  name: masuri@kubernetes</span><br><span class="line">current-context: kubernetes-admin@kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kubernetes-admin</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br><span class="line">- name: masuri</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br></pre></td></tr></table></figure>

<p>测试使用不同账号来获取资源信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用默认的kubenetes-admin@kubernetes账号</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get nodes --kubeconfig=/tmp/newkubeconfig</span></span><br><span class="line">NAME           STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k8s-master01   Ready    control-plane,master   15d   v1.21.2</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;                 15d   v1.21.2</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;                 15d   v1.21.2</span><br><span class="line">k8s-node03     Ready    &lt;none&gt;                 15d   v1.21.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用masuri@kubernetes账号</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get nodes --kubeconfig=/tmp/newkubeconfig --context=masuri@kubernetes</span></span><br><span class="line">Error from server (Forbidden): nodes is forbidden: User <span class="string">&quot;masuri&quot;</span> cannot list resource <span class="string">&quot;nodes&quot;</span> <span class="keyword">in</span> API group <span class="string">&quot;&quot;</span> at the cluster scope</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>认证、授权、准入控制</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>授权</title>
    <url>/2021/07/15/Kubernetes/05%E8%AE%A4%E8%AF%81%E3%80%81%E6%8E%88%E6%9D%83%E3%80%81%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/06%E6%8E%88%E6%9D%83/%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p>在k8s的1.21.2版本上默认使用的是Node和RBAC。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm部署的k8s可以在/etc/kubernetes/manifests下查看到静态pod的yaml文件</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/manifests<span class="comment"># grep authorization kube-apiserver.yaml</span></span><br><span class="line">    - --authorization-mode=Node,RBAC</span><br><span class="line"></span><br><span class="line"><span class="comment"># Node是专用于向kubelet授权使用。</span></span><br><span class="line"><span class="comment"># RBAC是基于角色的范文控制</span></span><br></pre></td></tr></table></figure>

<h3 id="常用授权逻辑"><a href="#常用授权逻辑" class="headerlink" title="常用授权逻辑"></a>常用授权逻辑</h3><p>DAC(自主访问控制)、MAC(强制访问控制)、RBAC(基于角色的访问控制)、ABAC(基于属性的访问控制)</p>
<h4 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h4><p>RBAC：Role-Based Access Control</p>
<p><img src="img1.png"></p>
<p>在一个组织内把一个组织内应该具有的权限的集合定义成多个角色，然后设定某个用户可以扮演其中1到多个角色。从而让某个用户对应的拥有在组织内的授权。</p>
<p>k8s的RBAC是一种许可授权，只允许用户做什么事情，默认拒绝所有。未显式指定授予的权限，默认都会被拒绝。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Role --&gt; Verbs  --&gt; Objects</span><br><span class="line">ClusterRole --&gt; Verbs  --&gt; Objects</span><br><span class="line">Subject --&gt; RoleBinding --&gt; Roles</span><br><span class="line">Subject --&gt; ClusterRoleBinding --&gt; ClusterRoles</span><br><span class="line">Subject --&gt; RoleBinding --&gt; ClusterRoles</span><br></pre></td></tr></table></figure>

<p>k8s的<code>API-Server</code>是RESTful风格的http/https服务，其权限无非就是基于http协议所能支持的GET, POST, PUT, DELETE, PATCH, …等操作，在<code>API-Server</code>上Object指的是资源对象。</p>
<p>所谓的权限也就是，什么Action能施加到哪些对象上；  </p>
<h4 id="RBAC四个资源类型"><a href="#RBAC四个资源类型" class="headerlink" title="RBAC四个资源类型"></a>RBAC四个资源类型</h4><ul>
<li>Role: 角色，名称空间级别；</li>
<li>ClusterRole：集群角色，全局级别；  </li>
<li>RoleBinding:”角色绑定”，指是将用户与角色关联起来，意味着，用户仅得到了特定名称空间下的Role的权限，作用范围也限于该名称空间；  </li>
<li>ClusterRoleBinding：集群角色绑定，让用户扮演指定的集群角色；意味着，用户得到了是集群级别的权限，作用范围也是集群级别；</li>
</ul>
<p>User –&gt; Rolebindig –&gt; ClusterRole：权限降级，ClusterRole，用户得到的权限仅是ClusterRole的权限在Rolebinding所属的名称空间上的一个子集；  </p>
<h5 id="系统上默认的ROLE"><a href="#系统上默认的ROLE" class="headerlink" title="系统上默认的ROLE"></a>系统上默认的ROLE</h5><p>1.查看系统上默认的role</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extension-apiserver-authentication-reader        2021-07-15T06:14:01Z</span><br><span class="line">kube-proxy                                       2021-07-15T06:14:03Z</span><br><span class="line">kubeadm:kubelet-config-1.21                      2021-07-15T06:14:01Z</span><br><span class="line">kubeadm:nodes-kubeadm-config                     2021-07-15T06:14:01Z</span><br><span class="line">system::leader-locking-kube-controller-manager   2021-07-15T06:14:01Z</span><br><span class="line">system::leader-locking-kube-scheduler            2021-07-15T06:14:01Z</span><br><span class="line">system:controller:bootstrap-signer               2021-07-15T06:14:01Z</span><br><span class="line">system:controller:cloud-provider                 2021-07-15T06:14:01Z</span><br><span class="line">system:controller:token-cleaner                  2021-07-15T06:14:01Z</span><br></pre></td></tr></table></figure>

<p>2.查看kube-proxy的role中的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get role kube-proxy -n kube-system -o yaml</span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-07-15T06:14:03Z&quot;</span></span><br><span class="line">  name: kube-proxy</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">&quot;299&quot;</span></span><br><span class="line">  uid: b92871dd-4224-4f31-8fe2-0c4b89ca40ff</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">&quot;&quot;</span></span><br><span class="line">  resourceNames:</span><br><span class="line">  - kube-proxy</span><br><span class="line">  resources:</span><br><span class="line">  - configmaps</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br></pre></td></tr></table></figure>

<p>能接受施加Verb的目标有三类：</p>
<ul>
<li>resources：资源类型，该类型下的所有对象都是目标， pods；  </li>
<li>resourceNames：特定的对象个体，pods/mypod；</li>
<li>nonResourceURLs：非资源型的URL，/status.</li>
</ul>
<p>能施加的Verb有以下：</p>
<ul>
<li>create、get、list、delete、patch、update</li>
</ul>
<h3 id="RBAC示例"><a href="#RBAC示例" class="headerlink" title="RBAC示例"></a>RBAC示例</h3><h4 id="rbac资源清单创建示例"><a href="#rbac资源清单创建示例" class="headerlink" title="rbac资源清单创建示例"></a>rbac资源清单创建示例</h4><p>1.使用资源清单来创建role</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># vim pods-reader-rbac.yaml</span></span><br><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: pods-reader</span><br><span class="line">  namespace: default</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  resources: [<span class="string">&quot;pods&quot;</span>,<span class="string">&quot;services&quot;</span>,<span class="string">&quot;pods/log&quot;</span>]</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>,<span class="string">&quot;list&quot;</span>,<span class="string">&quot;watch&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>2.将其应用到集群上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl apply -f pods-reader-rbac.yaml</span></span><br><span class="line">role.rbac.authorization.k8s.io/pods-reader created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 角色已经在default名称空间下生成</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl get role</span></span><br><span class="line">NAME          CREATED AT</span><br><span class="line">pods-reader   2021-08-02T06:44:03Z</span><br></pre></td></tr></table></figure>

<p>3.角色需要将其绑定到用户上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># vim masuri-pods-reader.yaml</span></span><br><span class="line">kind: RoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: masuri-pods-reader</span><br><span class="line">  namespace: default</span><br><span class="line">subjects:</span><br><span class="line">- kind: User</span><br><span class="line">  name: masuri</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">roleRef:</span><br><span class="line">  kind: Role</span><br><span class="line">  name: pods-reader</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>

<p>4.应用绑定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl apply -f masuri-pods-reader.yaml</span></span><br><span class="line">rolebinding.rbac.authorization.k8s.io/masuri-pods-reader created</span><br></pre></td></tr></table></figure>

<p>5.使用masuri账号进行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl get pods --kubeconfig=/tmp/newkubeconfig --context=masuri@kubernetes</span></span><br><span class="line">NAME                                             READY   STATUS      RESTARTS   AGE</span><br><span class="line">configmaps-env-demo                              1/1     Running     0          17d</span><br><span class="line">configmaps-volume-demo                           1/1     Running     0          17d</span><br><span class="line">configmaps-volume-demo2                          2/2     Running     0          17d</span><br><span class="line">configmaps-volume-demo3                          1/1     Running     0          16d</span><br><span class="line">cronjob-demo-27131450-85h7z                      0/1     Completed   0          5m1s</span><br><span class="line">cronjob-demo-27131452-xqqrk                      0/1     Completed   0          3m1s</span><br><span class="line">cronjob-demo-27131454-fn7fp                      0/1     Completed   0          61s</span><br><span class="line">daemonset-demo-6qqmt                             1/1     Running     0          11d</span><br><span class="line">daemonset-demo-fvkhj                             1/1     Running     0          11d</span><br><span class="line">daemonset-demo-pxmrd                             1/1     Running     0          11d</span><br><span class="line">demodb-0                                         1/1     Running     0          6d5h</span><br><span class="line">demodb-1                                         1/1     Running     0          6d5h</span><br><span class="line">deployment-demo-77d46c4794-5whvx                 1/1     Running     0          11d</span><br></pre></td></tr></table></figure>

<p>已经能正常获取pods资源。</p>
<h3 id="集群管理角色"><a href="#集群管理角色" class="headerlink" title="集群管理角色"></a>集群管理角色</h3><h4 id="admin集群管理角色"><a href="#admin集群管理角色" class="headerlink" title="admin集群管理角色"></a>admin集群管理角色</h4><p>在k8s系统上存在一个admin的ClusterRole，其作用的范围为集群范围，其内部定义了核心资源类型当中的非集群级别资源的管理权限。此admin拥有除集群级别之外的所有管理权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl get clusterrole admin</span></span><br><span class="line">NAME    CREATED AT</span><br><span class="line">admin   2021-07-15T06:13:59Z</span><br></pre></td></tr></table></figure>

<p>如果我们使用ClusterRolebinding将某个用户绑定在admin这个ClusterRole上那么其将拥有除了群级别管理权限之外的所有管理权限。</p>
<h4 id="cluster-admin集群管理角色"><a href="#cluster-admin集群管理角色" class="headerlink" title="cluster-admin集群管理角色"></a>cluster-admin集群管理角色</h4><p>cluster-admin是集群管理员，其拥有k8s的一切管理权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl get clusterrole cluster-admin</span></span><br><span class="line">NAME            CREATED AT</span><br><span class="line">cluster-admin   2021-07-15T06:13:59Z</span><br></pre></td></tr></table></figure>

<p>如果将某个用户以clusterRoleBinding绑定在cluster-admin那其将拥有集群级别的一切操作管理权限。</p>
<h4 id="rbac命令行创建示例"><a href="#rbac命令行创建示例" class="headerlink" title="rbac命令行创建示例"></a>rbac命令行创建示例</h4><h5 id="admin集群管理角色绑定示例："><a href="#admin集群管理角色绑定示例：" class="headerlink" title="admin集群管理角色绑定示例："></a>admin集群管理角色绑定示例：</h5><p>此处为了不予刚才示例混淆，先将masuri的role和rolebinding删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl delete rolebindings.rbac.authorization.k8s.io masuri-pods-reader</span></span><br><span class="line">rolebinding.rbac.authorization.k8s.io <span class="string">&quot;masuri-pods-reader&quot;</span> deleted</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl delete role pods-reader</span></span><br><span class="line">role.rbac.authorization.k8s.io <span class="string">&quot;pods-reader&quot;</span> deleted</span><br></pre></td></tr></table></figure>

<p>1.将用户于admin的clusterRole进行绑定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl create clusterrolebinding masuri-admin --user=masuri --clusterrole=admin</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/masuri-admin created</span><br></pre></td></tr></table></figure>

<p>2.使用masuri账号进行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl get pods -n kube-system --kubeconfig=/tmp/newkubeconfig --context=masuri@kubernetes</span></span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6f6b8cc4f6-8wm8v               1/1     Running   0          18d</span><br><span class="line">coredns-6f6b8cc4f6-tzmnm               1/1     Running   0          18d</span><br><span class="line">etcd-k8s-master01                      1/1     Running   1          18d</span><br><span class="line">kube-apiserver-k8s-master01            1/1     Running   1          18d</span><br><span class="line">kube-controller-manager-k8s-master01   1/1     Running   1          18d</span><br><span class="line">kube-flannel-ds-dl2rq                  1/1     Running   0          18d</span><br><span class="line">kube-flannel-ds-fmml6                  1/1     Running   0          18d</span><br><span class="line">kube-flannel-ds-rwh5f                  1/1     Running   0          18d</span><br><span class="line">kube-flannel-ds-tqbbv                  1/1     Running   0          18d</span><br><span class="line">kube-proxy-6qdpb                       1/1     Running   0          18d</span><br><span class="line">kube-proxy-kp5ch                       1/1     Running   0          18d</span><br><span class="line">kube-proxy-ntmzb                       1/1     Running   0          18d</span><br><span class="line">kube-proxy-vwdm8                       1/1     Running   0          18d</span><br><span class="line">kube-scheduler-k8s-master01            1/1     Running   1          18d</span><br></pre></td></tr></table></figure>

<p>此时其能访问到kube-system的资源了。但是集群级别的操作依旧不能使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nodes相关资源</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl get nodes --kubeconfig=/tmp/newkubeconfig --context=masuri@kubernetes</span></span><br><span class="line">Error from server (Forbidden): nodes is forbidden: User <span class="string">&quot;masuri&quot;</span> cannot list resource <span class="string">&quot;nodes&quot;</span> <span class="keyword">in</span> API group <span class="string">&quot;&quot;</span> at the cluster scope</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限被拒绝，因为admin的ClusterRole没有此授权。</span></span><br></pre></td></tr></table></figure>
<h5 id="cluster-admin集群管理角色绑定示例："><a href="#cluster-admin集群管理角色绑定示例：" class="headerlink" title="cluster-admin集群管理角色绑定示例："></a>cluster-admin集群管理角色绑定示例：</h5><p>将此前创建的admin相关的clusterrolebinding进行删除，以免干扰</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl delete clusterrolebindings masuri-admin</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io <span class="string">&quot;masuri-admin&quot;</span> deleted</span><br></pre></td></tr></table></figure>

<p>1.将masuri用户使用clusterRolebinding绑定到cluster-admin这个roles上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl create clusterrolebinding masuri-cluster-admin --user=masuri --clusterrole=cluster-admin</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/masuri-cluster-admin created</span><br></pre></td></tr></table></figure>

<p>2.再次测试其能否进行集群级别的操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl get nodes --kubeconfig=/tmp/newkubeconfig --context=masuri@kubernetes</span></span><br><span class="line">NAME           STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k8s-master01   Ready    control-plane,master   18d   v1.21.2</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;                 18d   v1.21.2</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;                 18d   v1.21.2</span><br><span class="line">k8s-node03     Ready    &lt;none&gt;                 18d   v1.21.2</span><br></pre></td></tr></table></figure>

<h3 id="授权其他话题"><a href="#授权其他话题" class="headerlink" title="授权其他话题"></a>授权其他话题</h3><h4 id="组在k8s中的作用"><a href="#组在k8s中的作用" class="headerlink" title="组在k8s中的作用"></a>组在k8s中的作用</h4><p>在k8s中cluster-admin是将 system:masters组绑定在cluster-admin之上的。那么组内的所有用户都将拥有此权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl describe clusterrolebindings.rbac.authorization.k8s.io cluster-admin</span></span><br><span class="line">Name:         cluster-admin</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">Role:</span><br><span class="line">  Kind:  ClusterRole</span><br><span class="line">  Name:  cluster-admin</span><br><span class="line">Subjects:</span><br><span class="line">  Kind   Name            Namespace</span><br><span class="line">  ----   ----            ---------</span><br><span class="line">  Group  system:masters</span><br></pre></td></tr></table></figure>

<p>对于证书认证来说组信息在Subj中的O内存放，如果其O内存放的为system:master那么所创建的用户自动拥有管理员权限，无需再授权。</p>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成私钥文件</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># (umask 077;openssl genrsa -out testadm.key 2048)                     </span></span><br><span class="line">Generating RSA private key, 2048 bit long modulus (2 primes)</span><br><span class="line">.....................................................................................................+++++</span><br><span class="line">............+++++</span><br><span class="line">e is 65537 (0x010001)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成证书签署请求，此处subj中的O使用system:masters</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># openssl req -new -key testadm.key -out testadm.csr -subj &quot;/CN=testadm/O=system:masters&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用k8s集群的证书和私钥对证书签署请求进行签发</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># openssl x509 -req -days 3655 -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -in testadm.csr -out testadm.crt</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=CN = testadm, O = system:masters</span><br><span class="line">Getting CA Private Key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下为制作kubeconfig文件</span></span><br><span class="line"><span class="comment"># 在kubeconfig文件中设定集群</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config set-cluster kubernetes --server=https://kube-api:6443 --embed-certs --certificate-authority=/etc/kubernetes/pki/ca.crt --kubeconfig=/tmp/testadmcfg</span></span><br><span class="line">Cluster <span class="string">&quot;kubernetes&quot;</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在kubeconfig文件中设定用户</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config set-credentials testadm --client-certificate=testadm.crt --client-key=testadm.key --embed-certs=true --kubeconfig=/tmp/testadmcfg</span></span><br><span class="line">User <span class="string">&quot;testadm&quot;</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在kubeconfig文件中设定用户和集群的关联关系</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config set-context &#x27;testadm@kubernetes&#x27; --user=testadm --cluster=kubernetes --kubeconfig=/tmp/testadmcfg</span></span><br><span class="line">Context <span class="string">&quot;testadm@kubernetes&quot;</span> created.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在kubeconfig文件中设定当前使用的账号</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl config use-context testadm@kubernetes --kubeconfig=/tmp/testadmcfg</span></span><br><span class="line">Switched to context <span class="string">&quot;testadm@kubernetes&quot;</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前账号没有进行授权，使用该账号获取集群信息。</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl get nodes --kubeconfig=/tmp/testadmcfg</span></span><br><span class="line">NAME           STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k8s-master01   Ready    control-plane,master   18d   v1.21.2</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;                 18d   v1.21.2</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;                 18d   v1.21.2</span><br><span class="line">k8s-node03     Ready    &lt;none&gt;                 18d   v1.21.2</span><br></pre></td></tr></table></figure>

<p>以上结果可以看出证书认证中O这一项如果为system:masters则无需再进行授权就能对集群进行操作。组这一项对k8s来说至关重要。</p>
<h4 id="rolebinding来绑定ClusterRole"><a href="#rolebinding来绑定ClusterRole" class="headerlink" title="rolebinding来绑定ClusterRole"></a>rolebinding来绑定ClusterRole</h4><p>rolebinding来绑定ClusterRole则以为着降级，其会将集群级别的操作限定在名称空间内。</p>
<h5 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h5><p>避免干扰先将此前创建的clusterrolebinding进行删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl delete clusterrolebindings masuri-cluster-admin</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io <span class="string">&quot;masuri-cluster-admin&quot;</span> deleted</span><br></pre></td></tr></table></figure>

<p>1.将masuri用户使用rolebinding绑定到cluster-admin这个ClusterRole上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl create rolebinding masuri-admin --user=masuri --clusterrole=cluster-admin</span></span><br><span class="line">rolebinding.rbac.authorization.k8s.io/masuri-admin created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意此处rolebing时没有指定名称空间表示默认名称空间，masuri用户的权限会限定在default名称空间下</span></span><br><span class="line"><span class="comment"># 如果指定了名称空间如&quot;-n dev&quot;，masuri用户则会被限定在dev名称空间下。</span></span><br></pre></td></tr></table></figure>

<p>2.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试访问默认名称空间内的资源</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl get svc --kubeconfig=/tmp/newkubeconfig --context=masuri@kubernetes</span></span><br><span class="line">NAME          TYPE        CLUSTER-IP       EXTERNAL-IP    PORT(S)          AGE</span><br><span class="line">demoapp-svc   ClusterIP   10.102.254.190   &lt;none&gt;         80/TCP           11d</span><br><span class="line">demodb        ClusterIP   None             &lt;none&gt;         9907/TCP         7d3h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问其他名称空间内的资源</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl get svc -n kube-system --kubeconfig=/tmp/newkubeconfig --context=masuri@kubernetes</span></span><br><span class="line">Error from server (Forbidden): services is forbidden: User <span class="string">&quot;masuri&quot;</span> cannot list resource <span class="string">&quot;services&quot;</span> <span class="keyword">in</span> API group <span class="string">&quot;&quot;</span> <span class="keyword">in</span> the namespace <span class="string">&quot;kube-system&quot;</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl get svc -n dev --kubeconfig=/tmp/newkubeconfig --context=masuri@kubernetes</span></span><br><span class="line">Error from server (Forbidden): services is forbidden: User <span class="string">&quot;masuri&quot;</span> cannot list resource <span class="string">&quot;services&quot;</span> <span class="keyword">in</span> API group <span class="string">&quot;&quot;</span> <span class="keyword">in</span> the namespace <span class="string">&quot;dev&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="rolebinding来绑定ServiceAccount"><a href="#rolebinding来绑定ServiceAccount" class="headerlink" title="rolebinding来绑定ServiceAccount"></a>rolebinding来绑定ServiceAccount</h5><p>创建一个ServiceAccount，并将其使用rolebinding绑定到admin的ClusterRole上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建ServiceAccount</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes/usercerts<span class="comment"># kubectl create serviceaccount dev-admin</span></span><br><span class="line">serviceaccount/dev-admin created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建rolebinding将dev-admin的sa绑定到admin这个ClusterRole上</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl create rolebinding dev-admin --clusterrole=admin --serviceaccount=dev:dev-admin -n dev</span></span><br><span class="line">rolebinding.rbac.authorization.k8s.io/dev-admin created</span><br><span class="line"></span><br><span class="line"><span class="comment"># dev:dev-admin表示dev名称空间下的dev-admin的ServiceAccount</span></span><br></pre></td></tr></table></figure>

<p>以上操作后，如果有pod的ServiceAcountName为dev-admin那么此pod将拥有该名称空间下的所有操作权限。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>认证、授权、准入控制</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>dashboard部署</title>
    <url>/2021/07/15/Kubernetes/05%E8%AE%A4%E8%AF%81%E3%80%81%E6%8E%88%E6%9D%83%E3%80%81%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/07Dashboard/dashboard%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/">https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/</a></p>
<p><code>Dashboard</code>是基于网页的<code>Kubernetes</code>用户界面。 你可以使用<code>Dashboard</code>将容器应用部署到<code>Kubernetes</code>集群中，也可以对容器应用排错，还能管理集群资源。 你可以使用<code>Dashboard</code>获取运行在集群中的应用的概览信息，也可以创建或者修改<code>Kubernetes</code>资源 （如<code>Deployment</code>，<code>Job</code>，<code>DaemonSet</code>等等）。 例如，你可以对<code>Deployment</code>实现弹性伸缩、发起滚动升级、重启 Pod 或者使用向导创建新的应用。</p>
<p><code>Dashboard</code>同时展示了<code>Kubernetes</code>集群中的资源状态信息和所有报错信息。</p>
<h4 id="部署-Dashboard-UI"><a href="#部署-Dashboard-UI" class="headerlink" title="部署 Dashboard UI"></a>部署 Dashboard UI</h4><p>默认情况下不会部署<code>Dashboard</code>。可以通过以下命令部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>

<p>以上命令执行后会在k8s集群上创建出相应的pod和svc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get svc -n kubernetes-dashboard</span></span><br><span class="line">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.100.12.165   &lt;none&gt;        8000/TCP   65s</span><br><span class="line">kubernetes-dashboard        ClusterIP   10.108.81.228   &lt;none&gt;        443/TCP    65s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处的port为443需要验证证书。并且ip为ClusterIP无法直接访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其svc改为NodePort类型</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># vim dashbord-svc.yaml</span></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30090</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次应用此配置文件</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl apply -f dashbord-svc.yaml</span></span><br><span class="line">service/kubernetes-dashboard configured</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get svc -n kubernetes-dashboard</span></span><br><span class="line">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.100.12.165   &lt;none&gt;        8000/TCP        11m</span><br><span class="line">kubernetes-dashboard        NodePort    10.108.81.228   &lt;none&gt;        443:30090/TCP   11m</span><br></pre></td></tr></table></figure>

<p>在浏览器中访问</p>
<p><img src="img1.png"></p>
<h3 id="Dashboard-UI登录账号"><a href="#Dashboard-UI登录账号" class="headerlink" title="Dashboard UI登录账号"></a>Dashboard UI登录账号</h3><p>在K8S上有两类用户，人类用户和pod。人类用户的账号是在直接访问k8s的API Server时使用。而pod则时在应用于API Service交互时使用。</p>
<p>Dashboard的登录账号实际上是pod和API Server的交互，所以此处需要使用的登录账号为ServiceAccount的账号。</p>
<p>而dashboard的登录又分为token和kubeconfig</p>
<h4 id="获取token登录dashboard"><a href="#获取token登录dashboard" class="headerlink" title="获取token登录dashboard"></a>获取token登录dashboard</h4><p>上一节授权中创建了一个<code>dev-admin</code>这个SA，并对其进行了授权，所以其拥有了管理dev名称空间下的所有资源的能力</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取其secrets</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get secrets -n dev</span></span><br><span class="line">NAME                    TYPE                                  DATA   AGE</span><br><span class="line">admin-token-6lrjw       kubernetes.io/service-account-token   3      5d2h</span><br><span class="line">default-token-j5lt6     kubernetes.io/service-account-token   3      5d2h</span><br><span class="line">dev-admin-token-kx8ng   kubernetes.io/service-account-token   3      38m     <span class="comment"># 此为创建的dev-admin的secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取其token信息。</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get secrets -n dev dev-admin-token-kx8ng -o yaml | grep token: | awk &#x27;&#123;print $2&#125;&#x27; | base64 -d</span></span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6Ijd4OE5hMTV1VU0tUDQzRk45UUwzNWNzUDVsbTdpc2tzMEZYRUtwa1lfdmMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZXYiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiZGV2LWFkbWluLXRva2VuLWt4OG5nIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRldi1hZG1pbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjZkMTgxYjIxLTNiNmQtNDcyNC1iNTk0LTExZDkzYzI4ZTkzMiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZXY6ZGV2LWFkbWluIn0.LCObvAqa21bjAkvewywR0m8v8V7w5GdqLxYcp9TvdEu7Woogo9mVnuWrpPtQ8Qhj_ZNrIMkgFJOn-J3jIlB_QfuAy-4T-t4nTw9ypsFSPgvLae0R_ATFIlk4xs4jJL-RLEvIVyrnoEfeqmPef39H7q2vbbFPO663QkVAfZv39cCfYn6EYOx69tTqo0Y1qf_k0lzErRNOPqSPE9KCs8Z7ozsB77s_o1owHnOol7qIoGAJzIdZPZiLW5bp20waCJMsRNR6Gx3ZiVbdS6JYWV-guSpix2GvcN7tXjlClQOKJbxxBzpJMKjFNQTth338jgI_zJdeOQRi9_sha24YSCxmbw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用此token进行登录</span></span><br></pre></td></tr></table></figure>

<p><img src="img2.png"></p>
<h4 id="制作kubeconfig登录"><a href="#制作kubeconfig登录" class="headerlink" title="制作kubeconfig登录"></a>制作kubeconfig登录</h4><p>1.获取到ServiceAccount的token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取到dev-admin的token信息</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get secrets -n dev dev-admin-token-kx8ng -o yaml | grep token: | awk &#x27;&#123;print $2&#125;&#x27; | base64 -d</span></span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6Ijd4OE5hMTV1VU0tUDQzRk45UUwzNWNzUDVsbTdpc2tzMEZYRUtwa1lfdmMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZXYiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiZGV2LWFkbWluLXRva2VuLWt4OG5nIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRldi1hZG1pbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjZkMTgxYjIxLTNiNmQtNDcyNC1iNTk0LTExZDkzYzI4ZTkzMiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZXY6ZGV2LWFkbWluIn0.LCObvAqa21bjAkvewywR0m8v8V7w5GdqLxYcp9TvdEu7Woogo9mVnuWrpPtQ8Qhj_ZNrIMkgFJOn-J3jIlB_QfuAy-4T-t4nTw9ypsFSPgvLae0R_ATFIlk4xs4jJL-RLEvIVyrnoEfeqmPef39H7q2vbbFPO663QkVAfZv39cCfYn6EYOx69tTqo0Y1qf_k0lzErRNOPqSPE9KCs8Z7ozsB77s_o1owHnOol7qIoGAJzIdZPZiLW5bp20waCJMsRNR6Gx3ZiVbdS6JYWV-guSpix2GvcN7tXjlClQOKJbxxBzpJMKjFNQTth338jgI_zJdeOQRi9_sha24YSCxmbw</span><br></pre></td></tr></table></figure>

<p>2.制作kubeconfig文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用token添加用户信息</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl config set-credentials dev-admin --token=eyJhbGciOiJSUzI1NiIsImtpZCI6Ijd4OE5hMTV1VU0tUDQzRk45UUwzNWNzUDVsbTdpc2tzMEZYRUtwa1lfdmMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZXYiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiZGV2LWFkbWluLXRva2VuLWt4OG5nIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRldi1hZG1pbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjZkMTgxYjIxLTNiNmQtNDcyNC1iNTk0LTExZDkzYzI4ZTkzMiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZXY6ZGV2LWFkbWluIn0.LCObvAqa21bjAkvewywR0m8v8V7w5GdqLxYcp9TvdEu7Woogo9mVnuWrpPtQ8Qhj_ZNrIMkgFJOn-J3jIlB_QfuAy-4T-t4nTw9ypsFSPgvLae0R_ATFIlk4xs4jJL-RLEvIVyrnoEfeqmPef39H7q2vbbFPO663QkVAfZv39cCfYn6EYOx69tTqo0Y1qf_k0lzErRNOPqSPE9KCs8Z7ozsB77s_o1owHnOol7qIoGAJzIdZPZiLW5bp20waCJMsRNR6Gx3ZiVbdS6JYWV-guSpix2GvcN7tXjlClQOKJbxxBzpJMKjFNQTth338jgI_zJdeOQRi9_sha24YSCxmbw --kubeconfig=/tmp/dev-admin.conf</span></span><br><span class="line">User <span class="string">&quot;dev-admin&quot;</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加集群信息</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl config set-cluster kubernetes --server=https://kube-api:6443 --embed-certs --certificate-authority=/etc/kubernetes/pki/ca.crt --kubeconfig=/tmp/dev-admin.conf</span></span><br><span class="line">Cluster <span class="string">&quot;kubernetes&quot;</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加用户和集群关联关系</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl config set-context dev-admin@kubernetes --user=dev-admin --cluster=kubernetes --kubeconfig=/tmp/dev-admin.conf</span></span><br><span class="line">Context <span class="string">&quot;dev-admin@kubernetes&quot;</span> created.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前使用的账号信息</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl config use-context dev-admin@kubernetes --kubeconfig=/tmp/dev-admin.conf</span></span><br><span class="line">Switched to context <span class="string">&quot;dev-admin@kubernetes&quot;</span>.</span><br></pre></td></tr></table></figure>

<p>3.提取出dev-admin.conf文件使用kubeconfig登录dashboard UI</p>
<p><img src="img3.png"></p>
<p><img src="img4.png"></p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>认证、授权、准入控制</category>
        <category>dashboard</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>准入控制器</title>
    <url>/2021/07/16/Kubernetes/05%E8%AE%A4%E8%AF%81%E3%80%81%E6%8E%88%E6%9D%83%E3%80%81%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/08%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6%E5%99%A8/%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<p>k8s的整体认证过程分为3步，本别是认证、授权、准入控制。认证和授权都是工作在短路模式，而准入控制是非短路模式，但拥有一票否决权力，如果其中任何一个准入插件拒绝那其操作就无法执行，但是它会继续向下执行直到检查完每一个准入插件以确保能分析出有哪些步骤发生错误。</p>
<p>k8s支持的准入控制器有数十种之多，但是有3个非常关键：</p>
<ul>
<li><code>limitranger</code>: 为Pod添加默认的计算资源需求和计算资源限制；以及存储资源需求和存储资源限制；支持分别在容器和Pod级别进行限制；</li>
<li><code>resourcequota</code>：限制资源数量，限制计算资源总量，存储资源总量；资源类型名称<code>ResourceQuota</code>。</li>
<li><code>podsecuritpolicy</code>：在集群级别限制用户能够在Pod上可配置使用的<code>securityContext</code>。</li>
</ul>
<h3 id="limitranger"><a href="#limitranger" class="headerlink" title="limitranger"></a>limitranger</h3><p><code>limitrange</code>与此前在pod上做资源限制的配置方式相同，所不同的是它是在名称空间上做的所有设定.</p>
<p>如果pod没有定义资源限制，则会继承该名称空间上的limitrange中的定义。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>1.创建一个limitrange资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># vim limitrange-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: LimitRange</span><br><span class="line">metadata:</span><br><span class="line">  name: core-resource-limits</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  limits:</span><br><span class="line">  - <span class="built_in">type</span>: Pod</span><br><span class="line">    max:</span><br><span class="line">      cpu: <span class="string">&quot;4&quot;</span></span><br><span class="line">      memory: <span class="string">&quot;4Gi&quot;</span></span><br><span class="line">    min:</span><br><span class="line">      cpu: <span class="string">&quot;500m&quot;</span></span><br><span class="line">      memory: <span class="string">&quot;16Mi&quot;</span></span><br><span class="line">  - <span class="built_in">type</span>: Container</span><br><span class="line">    max:</span><br><span class="line">      cpu: <span class="string">&quot;4&quot;</span></span><br><span class="line">      memory: <span class="string">&quot;1Gi&quot;</span></span><br><span class="line">    min:</span><br><span class="line">      cpu: <span class="string">&quot;100m&quot;</span></span><br><span class="line">      memory: <span class="string">&quot;4Mi&quot;</span></span><br><span class="line">    default:</span><br><span class="line">      cpu: <span class="string">&quot;2&quot;</span></span><br><span class="line">      memory: <span class="string">&quot;512Mi&quot;</span></span><br><span class="line">    defaultRequest:</span><br><span class="line">      cpu: <span class="string">&quot;500m&quot;</span></span><br><span class="line">      memory: <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">    maxLimitRequestRatio:    </span><br><span class="line">      cpu: <span class="string">&quot;4&quot;</span>       <span class="comment"># 此参数表示下阈值与上阈值之间的倍数。使用了此参数，default和defaultRequest只需定义一个即可。系统会自动计算出另一个值。</span></span><br><span class="line">  - <span class="built_in">type</span>: PersistentVolumeClaim</span><br><span class="line">    max:</span><br><span class="line">      storage: <span class="string">&quot;10Gi&quot;</span></span><br><span class="line">    min:</span><br><span class="line">      storage: <span class="string">&quot;1Gi&quot;</span></span><br><span class="line">    default:</span><br><span class="line">      storage: <span class="string">&quot;5Gi&quot;</span></span><br><span class="line">    defaultRequest:</span><br><span class="line">      storage: <span class="string">&quot;1Gi&quot;</span></span><br><span class="line">    maxLimitRequestRatio:</span><br><span class="line">      storage: <span class="string">&quot;5&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.应用此资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl apply -f limitrange-demo.yaml</span></span><br><span class="line">limitrange/core-resource-limits created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示limitrange的详细信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl describe limitranges core-resource-limits  -n dev</span></span><br><span class="line">Name:                  core-resource-limits</span><br><span class="line">Namespace:             dev</span><br><span class="line">Type                   Resource  Min   Max   Default Request  Default Limit  Max Limit/Request Ratio</span><br><span class="line">----                   --------  ---   ---   ---------------  -------------  -----------------------</span><br><span class="line">Pod                    cpu       500m  4     -                -              -</span><br><span class="line">Pod                    memory    16Mi  4Gi   -                -              -</span><br><span class="line">Container              cpu       100m  4     500m             2              4</span><br><span class="line">Container              memory    4Mi   1Gi   64Mi             512Mi          -</span><br><span class="line">PersistentVolumeClaim  storage   1Gi   10Gi  1Gi              5Gi            5</span><br></pre></td></tr></table></figure>

<p>3.手动创建pod测试1.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl run test-pod-$RANDOM --image=&quot;ikuberentes/demoapp:v1.0&quot; -n dev</span></span><br><span class="line">pod/test-pod-12395 created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看其yaml信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl get pod test-pod-12395 -n dev -o yaml | kubectl-neat</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/limit-ranger: <span class="string">&#x27;LimitRanger plugin set: cpu, memory request for container</span></span><br><span class="line"><span class="string">      test-pod-12395; cpu, memory limit for container test-pod-12395&#x27;</span></span><br><span class="line">  labels:</span><br><span class="line">    run: test-pod-12395</span><br><span class="line">  name: test-pod-12395</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: ikuberentes/demoapp:v1.0</span><br><span class="line">    name: test-pod-12395</span><br><span class="line">    resources:                            <span class="comment"># 使用手动创建的pod其resources被自动定义了</span></span><br><span class="line">      limits:</span><br><span class="line">        cpu: <span class="string">&quot;2&quot;</span></span><br><span class="line">        memory: 512Mi</span><br><span class="line">      requests:</span><br><span class="line">        cpu: 500m</span><br><span class="line">        memory: 64Mi</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure>

<p>4.手动创建pod测试2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl run testpod-$RANDOM --image=&quot;ikubernetes/demoapp:v1.0&quot; -n dev --limits=&#x27;cpu=2,memory=1Gi&#x27; --requests=&#x27;cpu=1,memory=8Mi&#x27;</span></span><br><span class="line">Flag --limits has been deprecated, has no effect and will be removed <span class="keyword">in</span> the future.</span><br><span class="line">Flag --requests has been deprecated, has no effect and will be removed <span class="keyword">in</span> the future.</span><br><span class="line">Error from server (Forbidden): pods <span class="string">&quot;testpod-20703&quot;</span> is forbidden: minimum memory usage per Pod is 16Mi, but request is 8388608</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有创建成功。内存小了</span></span><br></pre></td></tr></table></figure>

<h3 id="ResourceQuota"><a href="#ResourceQuota" class="headerlink" title="ResourceQuota"></a>ResourceQuota</h3><p>ResourceQuota资源可限制名称空间中处于非终止状态的所有Pod对象的计算资源需求及计算资源限制总量。</p>
<ul>
<li>cpu或requests.cpu：CPU资源相关请求的总量限额；</li>
<li>memory或requests.memory：内存资源相关请求的总量限额；</li>
<li>limits.cpu：CPU资源相关限制的总量限额；</li>
<li>limits.memory：内存资源相关限制的总量限额；</li>
</ul>
<p>ResourceQuota资源还支持为本地名称空间中的PVC存储资源的需求总量和限制总量提供限额，它能够分别从名称空间中的全部PVC、隶属于特定存储类的PVC以及基于本地临时存储的PVC三个类别分别进行定义。</p>
<ul>
<li><code>requests.storage</code>：所有PVC存储需求的总量限额；空间限制；  </li>
<li><code>persistentvolumeclaims</code>：可以创建的PVC总数限额；数量限制；</li>
<li><code>&lt;storage-class-name&gt;.storageclass.storage.k8s.io/requests.storage</code>：特定的存储类上可使用的所有PVC存储需求的总量限额；</li>
<li><code>&lt;storage-class-name&gt;.storageclass.storage.k8s.io/persistentvolumeclaims</code>：特定的存储类上可使用的PVC总数限额；</li>
<li><code>requests.ephemeral-storage</code>：所有Pod可以使用的本地临时存储资源的requets总量；</li>
<li><code>limits.ephemeral-storage</code>：所有Pod可用的本地临时存储资源的limits总量。</li>
</ul>
<p>在v1.9版本之前的Kubernetes系统上，ResourceQuota仅支持在有限的几种资源集上设定对象计数配额，例如pods、services和configmaps等，而自v1.9版本起开始支持以<code>count/&lt;resource&gt;.&lt;group&gt;</code>的格式支持对所有资源类型对象的计数配额，例如<code>count/deployments.apps</code>、<code>count/deployments.extensions</code>和<code>count/services</code>等。</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>1.RescoureQuota资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># vim resourcequota-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ResourceQuota</span><br><span class="line">metadata:</span><br><span class="line">  name: resourcequota-demo</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  hard:</span><br><span class="line">    pods: <span class="string">&quot;5&quot;</span></span><br><span class="line">    count/services: <span class="string">&quot;5&quot;</span></span><br><span class="line">    count/configmaps: <span class="string">&quot;5&quot;</span></span><br><span class="line">    count/secrets: <span class="string">&quot;5&quot;</span></span><br><span class="line">    requests.cpu: <span class="string">&quot;2&quot;</span></span><br><span class="line">    requests.memory: <span class="string">&quot;4Gi&quot;</span></span><br><span class="line">    limits.cpu: <span class="string">&quot;4&quot;</span></span><br><span class="line">    limits.memory: <span class="string">&quot;8Gi&quot;</span></span><br><span class="line">    count/deployments.apps: <span class="string">&quot;2&quot;</span></span><br><span class="line">    count/statefulsets.apps: <span class="string">&quot;2&quot;</span></span><br><span class="line">    persistentvolumeclaims: <span class="string">&quot;6&quot;</span></span><br><span class="line">    requests.storage: <span class="string">&quot;20Gi&quot;</span></span><br><span class="line">    longhorn.storageclass.storage.k8s.io/requests.storage: <span class="string">&quot;20Gi&quot;</span></span><br><span class="line">    longhorn.storageclass.storage.k8s.io/persistentvolumeclaims: <span class="string">&quot;6&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl apply -f resourcequota-demo.yaml</span></span><br><span class="line">resourcequota/resourcequota-demo created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看dev名称空间下resourcequotas的详细信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter09<span class="comment"># kubectl describe resourcequotas -n dev resourcequota-demo</span></span><br><span class="line">Name:                                                        resourcequota-demo</span><br><span class="line">Namespace:                                                   dev</span><br><span class="line">Resource                                                     Used   Hard</span><br><span class="line">--------                                                     ----   ----</span><br><span class="line">count/configmaps                                             1      5</span><br><span class="line">count/deployments.apps                                       0      2</span><br><span class="line">count/secrets                                                3      5</span><br><span class="line">count/services                                               1      5</span><br><span class="line">count/statefulsets.apps                                      0      2</span><br><span class="line">limits.cpu                                                   2      4</span><br><span class="line">limits.memory                                                512Mi  8Gi</span><br><span class="line">longhorn.storageclass.storage.k8s.io/persistentvolumeclaims  0      6</span><br><span class="line">longhorn.storageclass.storage.k8s.io/requests.storage        0      20Gi</span><br><span class="line">persistentvolumeclaims                                       0      6</span><br><span class="line">pods                                                         1      5</span><br><span class="line">requests.cpu                                                 500m   2</span><br><span class="line">requests.memory                                              64Mi   4Gi</span><br><span class="line">requests.storage                                             0      20Gi</span><br></pre></td></tr></table></figure>

<h3 id="PodSecurityPolicy"><a href="#PodSecurityPolicy" class="headerlink" title="PodSecurityPolicy"></a>PodSecurityPolicy</h3><p>PodSecurityPolicy是用来在集群级别限制用户能够在Pod上可配置使用的securityContext。</p>
<p>资源清单定义格式如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: policy/v1beta1  <span class="comment"># PSP资源所属的API群组及版本</span></span><br><span class="line">kind: PodSecurityPolicy  <span class="comment"># 资源类型标识</span></span><br><span class="line">metadata:</span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 资源名称</span></span><br><span class="line">spec:  </span><br><span class="line">  allowPrivilegeEscalation  &lt;boolean&gt;  <span class="comment"># 是否允许权限升级</span></span><br><span class="line">  allowedCSIDrivers &lt;[]Object&gt;  <span class="comment">#内联CSI驱动程序列表，必须在Pod规范中显式定义</span></span><br><span class="line">  allowedCapabilities &lt;[]string&gt;  <span class="comment"># 允许使用的内核能力列表，“*”表示all</span></span><br><span class="line">  allowedFlexVolumes &lt;[]Object&gt;  <span class="comment"># 允许使用的Flexvolume列表，空值表示“all</span></span><br><span class="line">  allowedHostPaths &lt;[]Object&gt;  <span class="comment"># 允许使用的主机路径列表，空值表示all</span></span><br><span class="line">  allowedProcMountTypes &lt;[]string&gt; <span class="comment"># 允许使用的ProcMountType列表，空值表示默认</span></span><br><span class="line">  allowedUnsafeSysctls &lt;[]string&gt; <span class="comment"># 允许使用的非安全sysctl参数，空值表示不允许</span></span><br><span class="line">  defaultAddCapabilities  &lt;[]string&gt;  <span class="comment"># 默认即添加到Pod对象的内核能力，可被drop</span></span><br><span class="line">  defaultAllowPrivilegeEscalation &lt;boolean&gt; <span class="comment"># 是否默认允许内核权限升级</span></span><br><span class="line">  forbiddenSysctls  &lt;[]string&gt; <span class="comment"># 禁止使用的sysctl参数，空表示不禁用</span></span><br><span class="line">  fsGroup &lt;Object&gt;  <span class="comment"># 允许在SecurityContext中使用的fsgroup，必选字段</span></span><br><span class="line">    rule &lt;string&gt;  <span class="comment"># 允许使用的FSGroup的规则，支持RunAsAny和MustRunAs</span></span><br><span class="line">    ranges &lt;[]Object&gt; <span class="comment"># 允许使用的组ID范围，需要与MustRunAs规则一同使用</span></span><br><span class="line">      max  &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 最大组ID号</span></span><br><span class="line">      min  &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 最小组ID号</span></span><br><span class="line">  hostIPC &lt;boolean&gt; <span class="comment"># 是否允许Pod使用hostIPC</span></span><br><span class="line">  hostNetwork &lt;boolean&gt; <span class="comment"># 是否允许Pod使用hostNetwork</span></span><br><span class="line">  hostPID &lt;boolean&gt; <span class="comment"># 是否允许Pod使用hostPID</span></span><br><span class="line">  hostPorts &lt;[]Object&gt;  <span class="comment"># 允许Pod使用的主机端口暴露其服务的范围</span></span><br><span class="line">    max  &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 最大端口号，必选字段</span></span><br><span class="line">    min  &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 最小端口号，必选字段</span></span><br><span class="line">  privileged  &lt;boolean&gt;  <span class="comment"># 是否允许运行特权Pod</span></span><br><span class="line">  readOnlyRootFilesystem  &lt;boolean&gt;  <span class="comment"># 是否设定容器的根文件系统为“只读”</span></span><br><span class="line">  requiredDropCapabilities &lt;[]string&gt; <span class="comment"># 必须要禁用的内核能力列表  </span></span><br><span class="line">  runAsGroup  &lt;Object&gt;  <span class="comment"># 允许Pod在runAsGroup中使用的值列表，未定义表示不限制</span></span><br><span class="line">  runAsUser &lt;Object&gt; <span class="comment"># 允许Pod在runAsUser中使用的值列表，必选字段</span></span><br><span class="line">    rule &lt;string&gt;  <span class="comment"># 支持RunAsAny、MustRunAs和MustRunAsNonRoot</span></span><br><span class="line">    ranges &lt;[]Object&gt; <span class="comment"># 允许使用的组ID范围，需要跟“MustRunAs”规则一同使用</span></span><br><span class="line">      max  &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 最大组ID号</span></span><br><span class="line">      min  &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 最小组ID号</span></span><br><span class="line">  runtimeClass &lt;Object&gt; <span class="comment"># 允许Pod使用的运行类，未定义表示不限制</span></span><br><span class="line">    allowedRuntimeClassNames &lt;[]string&gt; <span class="comment"># 可使用的runtimeClass列表，“*”表示all</span></span><br><span class="line">    defaultRuntimeClassName &lt;string&gt; <span class="comment"># 默认使用的runtimeClass</span></span><br><span class="line">  seLinux &lt;Object&gt; <span class="comment"># 允许Pod使用的selinux标签，必选字段</span></span><br><span class="line">    rule &lt;string&gt;  <span class="comment"># MustRunAs表示使用seLinuxOptions定义的值；RunAsAny表示可使用任意值</span></span><br><span class="line">    seLinuxOptions  &lt;Object&gt;  <span class="comment"># 自定义seLinux选项对象，与MustRunAs协作生效</span></span><br><span class="line">  supplementalGroups  &lt;Object&gt; <span class="comment"># 允许Pod在SecurityContext中使用附加组，必选字段</span></span><br><span class="line">  volumes &lt;[]string&gt;  <span class="comment"># 允许Pod使用的存储卷插件列表，空表示禁用，“*”表示全部</span></span><br></pre></td></tr></table></figure>

<p>由于psp的规则过于严格，一旦启用将会导致k8s上的pod寸步难行，默认k8s没有启用psp准入控制器。</p>
<h3 id="启用PSP"><a href="#启用PSP" class="headerlink" title="启用PSP"></a>启用PSP</h3><p>kubeadm部署的k8s需要修改其静态pod的配置文件<code>/etc/kubernetes/manifests/kube-apiserver.yaml</code> ，在<code>kube-apiserver</code>命令中添加<code>--enable-admission-plugins PodSecurityPolicy</code></p>
<p>但是需要注意一旦加入此参数就意味着psp已经启动，其将会导致所有的pod都无法运行。因为启用了psp控制器但未定义任何psp资源，那就意味着任何pod运行都会被拒绝，包括API Server自身都有可能被拒绝，因此启用psp之前需要先创建资源。</p>
<p>psp创建完毕后还需要对其进行用户的绑定和授权。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>认证、授权、准入控制</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s网络</title>
    <url>/2021/07/18/Kubernetes/06Kubernetes%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/01k8s%E7%BD%91%E7%BB%9C/k8s%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>k8s主要存在四种类型的网络通信：</p>
<ul>
<li><code>C-to-C</code>：发生在Pod内部，借助于lo实现；</li>
<li><code>Pod-to-Pod</code>：Pod间的通信，k8s自身并未解决该该类通信，而是借助于CNI接口，交给第三方解决方案；CNI之前的接口叫<code>kubenet</code>；</li>
<li><code>Service-to-Pod</code>：借助于<code>kube-proxy</code>生成的iptables或ipvs规则完成；  </li>
<li><code>ExternalClients-to-Service</code>：引入集群外部流量，hostPort、hostNetwork、nodeport/service、loadbalancer/service、externalIP/service、Ingress；</li>
</ul>
<p>k8s通过<code>CNI</code>接口将<code>Pod-to-Pod</code>间的通信交由第三方网络的原因在于，跨节点的容器间通信不能存粹的物理桥接，这样会造成一个网段内挤入太多的物理节点。这样会产生网络风暴，所以必须将其进行隔离。</p>
<p>隔离的方法就是把每一个节点及其背后的Pod作为一个小的网络来使用。而此时跨节点的Pod通信就变为了如何去突破Pod所在的节点的边界。也就是如何去实现跨节点的Pod间的路由。</p>
<h3 id="Pod跨界点通信解决方法"><a href="#Pod跨界点通信解决方法" class="headerlink" title="Pod跨界点通信解决方法"></a>Pod跨界点通信解决方法</h3><p>要构建出一个跨节点通信的POD网络需要解决以下两个问题：</p>
<h4 id="构建出虚拟网络，方法有两种："><a href="#构建出虚拟网络，方法有两种：" class="headerlink" title="构建出虚拟网络，方法有两种："></a>构建出虚拟网络，方法有两种：</h4><ul>
<li>Overlay Network：叠加网络，覆盖网络</li>
<li>Underlay Network：承载网络</li>
</ul>
<h4 id="将容器接入构建出的虚拟网络，而容器或pod接入网络方法有以下三种："><a href="#将容器接入构建出的虚拟网络，而容器或pod接入网络方法有以下三种：" class="headerlink" title="将容器接入构建出的虚拟网络，而容器或pod接入网络方法有以下三种："></a>将容器接入构建出的虚拟网络，而容器或pod接入网络方法有以下三种：</h4><ul>
<li>使用虚拟网桥：在宿主机上使用虚拟网桥如Docker0、CNI0。每一个pod都创建一个虚拟网卡，一半在桥上，一般在Pod自身内部来完成，而后借助宿主机网卡到达网络外部。</li>
<li>多路复用：所谓多路复用是指将一块物理网卡在内核中模拟出MACVLAN或IPVLAN将其作为交换机来使用。这里的VLAN是指单个主机或多个主机上的多个pod组织在一个VLAN中。此时就不需要网桥，只需要一个内核级的VLAN功能即能实现。</li>
<li>硬件交换：这种称之为单根网络，一块物理网卡能被多个内核或多个容器共同使用，硬件自身支持虚拟功能。这要求硬件的支持。</li>
</ul>
<p><img src="img1.png"></p>
<h3 id="Overlay-Network"><a href="#Overlay-Network" class="headerlink" title="Overlay Network"></a>Overlay Network</h3><p><img src="img2.png"></p>
<p>上图为叠加网路功能的示意，将pod接入网络的方式就是虚拟网桥cni0，而每一个虚拟网桥上的pod都虚拟出一对网卡，一半在pod内部一半在cni0上。</p>
<p>而网络构建方式是在每一个节点上再创建一个专用隧道接口（<code>tunnel device</code>），节点内部的pod通信无需通过隧道直接可以通信，而跨界点的pod通信需要将报文通过cni0后发送给隧道入口设备，由隧道入口设备在其报文上加上隧道报文封装后通过物理网卡发送给对端的隧道设备，对端的隧道设备卸载隧道封装后交给cni0，cni0再交后端Pod。</p>
<p>可以理解为在每一个节点上分别加了一个专用的隧道设备后，从而能够构建出一个跨界点<br>的隧道网路，这就是所谓的叠加网路。</p>
<h4 id="Tunnel协议"><a href="#Tunnel协议" class="headerlink" title="Tunnel协议"></a>Tunnel协议</h4><p>目前最常用的Tunnel协议有以下两种：</p>
<ul>
<li>VxLAN：把每一个宿主机背后的网络当成局域网。其可以借助于VxLAN网络标识和交换功能，将一个LAN的功能交换到另外一个LAN中，但是VLAN所支持的虚拟网络是有限的（4095个），在一个超过4095节点的网络中VLAN就无法使用了，所以就出现了VxLAN协议，其支持65535个网络。</li>
<li>IPIP：在IP报文中封装了IP报文。其开销比VxLAN小，但是其安全性弱于VxLAN。</li>
<li>GRE：通用路由封装。</li>
</ul>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes网络插件</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>flannel插件</title>
    <url>/2021/07/18/Kubernetes/06Kubernetes%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/02flannel%E6%8F%92%E4%BB%B6/flannel%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>flannel使用etcd来存储定义节点的物理IP以及它所持有的子网，它给每一个节点分配一个子网。而每一个子网的划分是由<code>controller-manager</code>来分配的。</p>
<h3 id="Flannel的网络模型"><a href="#Flannel的网络模型" class="headerlink" title="Flannel的网络模型"></a>Flannel的网络模型</h3><p>flannel支持三种Pod网路模型，每个模型在flannel中称为一种”backend”:</p>
<ul>
<li><code>vxlan</code>：Pod与Pod经由隧道封装后通信，各节点彼此间能通信就行，不要求位于同一个二层网络</li>
<li><code>vxlan directrouting</code>：位于同一个二层网络上的不同节点上的Pod间通信，无需隧道封装。但非同一个二层网络上的节点上的Pod间通信，仍须隧道封装。</li>
<li><code>host-gw</code>：Pod与Pod不经隧道封装而直接通信要求相关节点位于同一个二层网络</li>
</ul>
<p>通常，在一个节点上，基于该节点的子网向该节点上的Pod分配IP地址，通常需要专门的插件完成；</p>
<p>插件统称：IPAM(IP分配模块)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flanel相关配置</span></span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-flannel-cfg</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    tier: node</span><br><span class="line">    app: flannel</span><br><span class="line">data:</span><br><span class="line">  cni-conf.json: |              <span class="comment"># 此为定义CNI的定义，也就是定义插件如何组合起来工作的。</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;cbr0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cniVersion&quot;</span>: <span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;flannel&quot;</span>,</span><br><span class="line">          <span class="string">&quot;delegate&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;hairpinMode&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;isDefaultGateway&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;portmap&quot;</span>,</span><br><span class="line">          <span class="string">&quot;capabilities&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;portMappings&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  net-conf.json: |              <span class="comment"># 此为flannel的相关配置</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.244.0.0/16&quot;</span>,   <span class="comment"># flannel的默认子网</span></span><br><span class="line">      <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span>            <span class="comment"># flannel的后端模式，默认vxlan</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="vxlan模式验证"><a href="#vxlan模式验证" class="headerlink" title="vxlan模式验证"></a>vxlan模式验证</h3><p>1.在Master节点上查看路由表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         172.16.11.1     0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0</span><br><span class="line">10.244.1.0      10.244.1.0      255.255.255.0   UG    0      0        0 flannel.1</span><br><span class="line">10.244.2.0      10.244.2.0      255.255.255.0   UG    0      0        0 flannel.1</span><br><span class="line">10.244.3.0      10.244.3.0      255.255.255.0   UG    0      0        0 flannel.1</span><br><span class="line">172.16.11.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到10.244.0.0为本机的网络地址，要到达10.244.0.0网络直接通过cni0可以到达</span></span><br></pre></td></tr></table></figure>

<p>2.在Node01节点上上看路由表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-node01:~<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         172.16.11.1     0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">10.244.0.0      10.244.0.0      255.255.255.0   UG    0      0        0 flannel.1</span><br><span class="line">10.244.1.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0</span><br><span class="line">10.244.2.0      10.244.2.0      255.255.255.0   UG    0      0        0 flannel.1</span><br><span class="line">10.244.3.0      10.244.3.0      255.255.255.0   UG    0      0        0 flannel.1</span><br><span class="line">172.16.11.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到10.244.1.0是本机的网络地址，</span></span><br><span class="line"><span class="comment"># 要到达10.244.0.0网络需要通过flannel.1，做隧道协议封装</span></span><br></pre></td></tr></table></figure>

<p>从上面路由表的结果可以看出，跨主机的Pod通信是通过路由来实现。但是也可以看出跨主机的Pod间通信虽然知道了如何把报文送出去，却无法知道报文是送给哪个主机的。这个功能时候Flanneld来实现的，其会实时查询ETCD来了解Pod和主机的对应结果的。</p>
<p>由于实时查询Etcd信息会对Etcd造成压力，flanneld会将其查询的结果保存到neigh中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-node01:~<span class="comment"># ip neigh | grep flannel.1</span></span><br><span class="line">10.244.3.0 dev flannel.1 lladdr d2:f7:0a:5c:0c:a4 PERMANENT</span><br><span class="line">10.244.0.0 dev flannel.1 lladdr 3a:08:06:36:54:6d PERMANENT</span><br><span class="line">10.244.2.0 dev flannel.1 lladdr 0a:9f:ec:95:bb:cf PERMANENT</span><br><span class="line"></span><br><span class="line"><span class="comment"># PERMANENT 标识此处生成的Mac地址表是不会失效的，要失效只存在一种可能，节点删了。</span></span><br></pre></td></tr></table></figure>

<p>flannel转发逻辑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-node01:~<span class="comment"># bridge fdb show flannel.1 | grep flannel.1</span></span><br><span class="line">d2:f7:0a:5c:0c:a4 dev flannel.1 dst 172.16.11.83 self permanent</span><br><span class="line">3a:08:06:36:54:6d dev flannel.1 dst 172.16.11.71 self permanent</span><br><span class="line">0a:9f:ec:95:bb:cf dev flannel.1 dst 172.16.11.82 self permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用bridge查看当前节点上的转发数据库。</span></span><br><span class="line"><span class="comment"># 可以看到要到达d2:f7:0a:5c:0c:a4需要通过flannel.1转发给172.16.11.83</span></span><br><span class="line"><span class="comment"># 而flannel.1就是本机上的flannel.1的接口</span></span><br><span class="line"><span class="comment"># self 表示其自身就能进行转发。</span></span><br></pre></td></tr></table></figure>

<h3 id="vxlan-DirectRouting模式"><a href="#vxlan-DirectRouting模式" class="headerlink" title="vxlan DirectRouting模式"></a>vxlan DirectRouting模式</h3><p>开启DirectRouting需要对flannel的configMap进行修改，并重新应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># vim /etc/kubernetes/kube-flannel.yml</span></span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-flannel-cfg</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    tier: node</span><br><span class="line">    app: flannel</span><br><span class="line">data:</span><br><span class="line">  cni-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">...此处不变...</span><br><span class="line">    &#125;</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.244.0.0/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span>,        <span class="comment"># 在type后面新增一行</span></span><br><span class="line">        <span class="string">&quot;DirectRouting&quot;</span>: <span class="literal">true</span>   <span class="comment"># 开启DirectRouting模式</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此项配置表示当先使用的为vxlan只要节点在同一子网内，将直接进行通信。</span></span><br></pre></td></tr></table></figure>

<p>重新应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl apply -f /etc/kubernetes/kube-flannel.yml</span></span><br><span class="line">Warning: policy/v1beta1 PodSecurityPolicy is deprecated <span class="keyword">in</span> v1.21+, unavailable <span class="keyword">in</span> v1.25+</span><br><span class="line">podsecuritypolicy.policy/psp.flannel.unprivileged configured</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel unchanged</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel unchanged</span><br><span class="line">serviceaccount/flannel unchanged</span><br><span class="line">configmap/kube-flannel-cfg configured</span><br><span class="line">daemonset.apps/kube-flannel-ds unchanged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前flannel的配置未生效，将其删除让其立即生效</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -n kube-system -l &#x27;app=flannel&#x27;</span></span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-dl2rq   1/1     Running   0          20d</span><br><span class="line">kube-flannel-ds-fmml6   1/1     Running   0          20d</span><br><span class="line">kube-flannel-ds-rwh5f   1/1     Running   0          20d</span><br><span class="line">kube-flannel-ds-tqbbv   1/1     Running   0          20d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新生成flannel的pod</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl delete pods -n kube-system -l &#x27;app=flannel&#x27;</span></span><br></pre></td></tr></table></figure>

<p>再次查看节点上的路由表信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         172.16.11.1     0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0</span><br><span class="line">10.244.1.0      172.16.11.81    255.255.255.0   UG    0      0        0 eth0</span><br><span class="line">10.244.2.0      172.16.11.82    255.255.255.0   UG    0      0        0 eth0</span><br><span class="line">10.244.3.0      172.16.11.83    255.255.255.0   UG    0      0        0 eth0</span><br><span class="line">172.16.11.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在可以10.244.0.0为当前节点上的地址段，要到达10.244.1.0网段直接通过eth0出去了，</span></span><br><span class="line"><span class="comment"># 而不再是通过flannel.1这个设备了。</span></span><br></pre></td></tr></table></figure>

<h3 id="host-gw模式"><a href="#host-gw模式" class="headerlink" title="host-gw模式"></a>host-gw模式</h3><p>开启host-gw模式需要对flannel的configMap进行修改，并重新应用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># vim /etc/kubernetes/kube-flannel.yml</span></span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-flannel-cfg</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    tier: node</span><br><span class="line">    app: flannel</span><br><span class="line">data:</span><br><span class="line">  cni-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">...此处不变...</span><br><span class="line">    &#125;</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.244.0.0/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;host-gw&quot;</span>   </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重新应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl apply -f /etc/kubernetes/kube-flannel.yml</span></span><br><span class="line">Warning: policy/v1beta1 PodSecurityPolicy is deprecated <span class="keyword">in</span> v1.21+, unavailable <span class="keyword">in</span> v1.25+</span><br><span class="line">podsecuritypolicy.policy/psp.flannel.unprivileged configured</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel unchanged</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel unchanged</span><br><span class="line">serviceaccount/flannel unchanged</span><br><span class="line">configmap/kube-flannel-cfg configured</span><br><span class="line">daemonset.apps/kube-flannel-ds unchanged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除flannel强制跟新pod</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl delete pods -n kube-system -l &#x27;app=flannel&#x27;</span></span><br></pre></td></tr></table></figure>

<p>flannel的pod重新生成后节点上的flannel.1已经无效了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># ip a show  flannel.1</span></span><br><span class="line">4: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN group default</span><br><span class="line">    link/ether 3a:08:06:36:54:6d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::3808:6ff:fe36:546d/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启节点后flannel.1将会被删除。</span></span><br><span class="line"><span class="comment"># 如果节点部署时就是用host-gw模式，将不会存在flannel.1接口。</span></span><br></pre></td></tr></table></figure>

<p>查看路由表信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         172.16.11.1     0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">10.244.0.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0</span><br><span class="line">10.244.1.0      172.16.11.81    255.255.255.0   UG    0      0        0 eth0</span><br><span class="line">10.244.2.0      172.16.11.82    255.255.255.0   UG    0      0        0 eth0</span><br><span class="line">10.244.3.0      172.16.11.83    255.255.255.0   UG    0      0        0 eth0</span><br><span class="line">172.16.11.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跨节点的Pod直接由eth0来通信，不再存在flannel.1</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>flannel的vxlan和vxlan DirectRouting其工作逻辑非常复杂，其需要由Flanneld去查询etcd在节点上生成固定的转发表。</li>
<li>在节点处在同一子网下，host-gw或vxlan DirectRouting模式就无需借助flannel.1去封装报文。</li>
<li>以上解决的都是pod间的通信，而在k8s上网络插件除了要解决pod间的通信外还需要解决网络策略，namespace仅能隔离名称，但pod间的通信是不受任何限制的，所以要想真正限制pod间的通信还需要施加网络策略。flannel这种借助etcd存储并生成路由表的方式，在小规模网络中还能使用，在大规模网络且变动平凡的网络中不适用，应该让个节点的路由表通过路由协议学习生成，这个是calico网络插件所具有的功能。</li>
</ol>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes网络插件</category>
        <category>flannel</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Calico网络插件</title>
    <url>/2021/07/18/Kubernetes/06Kubernetes%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/03calico%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/Calico%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>Calico的全称为<code>ProjectCalico</code>。</p>
<p>Calico是三层虚拟网络解决方案(BGP)。每一个节点都是一个<code>vRouter</code>。每个节点上的pod都被当作该路由器后端的一个终端设备为其分配一个IP地址。而各节点上的<code>vRouter</code>都需要通过BGP协议学习生成路由规则，从而实现各节点上的pod之间互联互通。</p>
<h3 id="BGP通信模型"><a href="#BGP通信模型" class="headerlink" title="BGP通信模型"></a>BGP通信模型</h3><p>BGP通信模型有两种：</p>
<ul>
<li><code>BGP peer</code>（小规模网络使用）：点对点BGP，如果一个网络中有10个BGP，那是1:9的通信模型，这样将形成n*(n-1)个通信网络。所以在次模型下如果网络规模较大BGP路由学习报文将会占据很大的网络带宽，因而在大规模网络下需要使用另外一种通信模型</li>
<li><code>BGP Reflector</code>（大规模网络使用）：反射器模型，所有节点都将自己所有拥有的路由信息汇总给Reflector，由Reflector用1:n-1的方式向外进行反射，所以称之为BGP反射器。</li>
</ul>
<p>小规模网络中<code>BGP peer</code>不存在单点问题，<code>BGP peer</code>宕机会有其他的进行替代。</p>
<p>大规模网络中<code>BGP Reflector</code>需要做冗余。</p>
<p>BGP模型要求所有节点在同一个二层网络中。不一定所有的底层网络都支持BGP，如在阿里云上购买了虚拟机自己部署k8s网络时，阿里云底层的网络不支持BGP协议。</p>
<p>为了确保公有云上也能使用calico，calico还提供了另外两种解决方案：</p>
<ul>
<li>Overlay Network：<ul>
<li>IPIP：用IP报文来封装IP报文，因此其开销更小。</li>
<li>VXLAN：类似于Flannel的VXLAN启用DirectRouting的网络模型，Calico也支持混合使用路由和叠加网络模型。如果节点在同一子网内使用BGP，如果跨子网则使用VxLan。</li>
</ul>
</li>
</ul>
<h3 id="Calico的架构"><a href="#Calico的架构" class="headerlink" title="Calico的架构"></a>Calico的架构</h3><p><img src="img1.png"></p>
<p>在整个k8s集群上有多个节点，每个节点存在多个pod，这些Pod与Flannel插件中host-gw模型的Pod有一个不同之处在于flannel的pod在连如网络时使用的是将网卡一半在pod一半接入网桥实现的，而calico在接入网络时并非使用一对虚拟网卡来接入，而是直接接入了宿主机的内核。其需要借助内核中的Iptables和Routes表来完成其中的部分功能。</p>
<p>整个Calico有以下几个组件组成：</p>
<ol>
<li>每个节点都需要运行以下组件：<ul>
<li><code>Felix</code>：需要运行于各节点之上的守护进程，主要负责完成接口管理、路由规划、acl规划（也就是网络策略，其需要借助iptables来实现）、状态报告。</li>
<li><code>BIRD</code>：是vRouter的关键实现，整个BGP的路由表是由BIRD生成的，而路由规划是Felix完成的。而BIRD自身可以扮演两种角色，默认之启用了一种：<ul>
<li><code>BGP客户端</code>（默认启用）：需要运行于每个节点，负责将Felix生成的路由信息载入内核并通告到整个网络中；   </li>
<li><code>BGP Reflector</code>：专用反射各BGP客户端发来路由信息；将  N –&gt; N-1  转为  N –&gt; 1 的模型</li>
</ul>
</li>
</ul>
</li>
<li>在节点之外需要运行以下组件：<ul>
<li><code>etcd</code>：Calico也和Flannel一样需要依靠etcd来存一些自身的状态数据，其也可以像Flannel一样将API Server当为自身的存储后端。大规模集群中建议额外部署etcd专用于Calico集群，以免和k8s性能上冲突。</li>
<li><code>Route Reflector</code>：路由反射器</li>
<li><code>Calico编排系统插件</code>：Calico自己不仅仅支持给k8s提供虚拟网络，它也支持openshift、openstack。所以Calico是一个通用的虚拟网络，不仅仅能适用到k8s上。要让calico能适用于k8s，需要一个calico的编排系统插件让etcd和calico插件之间能都双向转换通信。</li>
</ul>
</li>
</ol>
<h4 id="Calico部署组件"><a href="#Calico部署组件" class="headerlink" title="Calico部署组件"></a>Calico部署组件</h4><p>Calico部署到K8S集群上时，需要用到两个组件：</p>
<ul>
<li>calico-node：类似于Flanneld需要运行于每个节点之上。calico-node中封装了Felix和BIRD。</li>
<li>calico-kube-controller：运行于k8s集群上的中央控制系统。由它来负责Calico和整个kubernetes的协同，也包括其他核心功能的实现。</li>
</ul>
<p><img src="img2.png"></p>
<h3 id="Calico部署"><a href="#Calico部署" class="headerlink" title="Calico部署"></a>Calico部署</h3><p>Calico有两种部署方式，一是让<code>calico/node</code>独立运行于Kubernetes集群之外，但<code>calico/kube-controllers</code>依然需要以Pod资源运行中集群之上；另一种是以CNI插件方式配置Calico完全托管运行于Kubernetes集群之上，类似于我们前面曾经部署托管Flannel网络插件的方式。对于后一种方式，Calico提供了在线的部署清单，它分别为50节点及以下规模和50节点以上规模的Kubernetes集群使用<code>Kubernetes API</code>作为Datastore提供了不同的配置清单，也为使用独立的etcd集群提供了专用配置清单。但这3种类型的配置清单中，Calico默认启用的是基于IPIP隧道的叠加网络，因而它会在所有流量上使用IPIP隧道而不是BGP路由。以下配置定义在部署清单中<code>DaemonSet/calico-node</code>资源的Pod模板中的<code>calico-node</code>容器之上。</p>
<h4 id="官方部署文档："><a href="#官方部署文档：" class="headerlink" title="官方部署文档："></a>官方部署文档：</h4><p><a href="https://docs.projectcalico.org/getting-started/kubernetes/self-managed-onprem/onpremises">https://docs.projectcalico.org/getting-started/kubernetes/self-managed-onprem/onpremises</a></p>
<p>需要注意：</p>
<p>calico的部署以50个节点为界限，分为3种部署方式</p>
<ul>
<li><a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises#install-calico-with-kubernetes-api-datastore-50-nodes-or-less">Install Calico with Kubernetes API datastore, 50 nodes or less</a></li>
<li><a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises#install-calico-with-kubernetes-api-datastore-more-than-50-nodes">Install Calico with Kubernetes API datastore, more than 50 nodes</a></li>
<li><a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises#install-calico-with-etcd-datastore">Install Calico with etcd datastore</a></li>
</ul>
<p>此处以50个节点以下方式来部署calico</p>
<p>1.下载calico的资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://docs.projectcalico.org/manifests/calico.yaml -O</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<p>在应用配置清单前需要注意如果Pod的CIDR为<code>192.168.0.0/16</code>，那么此配置清单可以直接<code>kubectl apply</code>进行部署，如果非此网段则需要对calico.yaml进行修改。</p>
<p>此前部署k8s集群时，部署了flannel并且使用的Pod的<code>CIDR</code>为<code>10.244.0.0/16</code>，现在则需要将其配置清单内的<code>CALICO_IPV4POOL_CIDR</code>进行修改，以确保其和Pod网段相同。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># vim calico.yaml</span></span><br><span class="line"><span class="comment"># 在IPv4类型的地址池上启用的IPIP及其类型，支持3种可用值Always（全局流量）、Cross-SubNet（跨子网流量）和Never3种可用值</span></span><br><span class="line">        - name: CALICO_IPV4POOL_IPIP</span><br><span class="line">          value: <span class="string">&quot;Always&quot;</span></span><br><span class="line"><span class="comment"># 是否在IPV4地址池上启用VXLAN隧道协议，取值及意义与Flannel的VXLAN后端相同；但在全局流量启用VXLAN时将完全不再需要BGP网络，建议将相关的组件禁用</span></span><br><span class="line">        - name: CALICO_IPV4POOL_VXLAN</span><br><span class="line">          value: <span class="string">&quot;Never&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要注意的是，Calico分配的地址池需要同Kubernetes集群的Pod网络的定义保持一致。Pod网络通常由kubeadm init初始化集群时使用--pod-network-cidr选项指定的网络，而Calico在其默认的配置清单中默认使用192.168.0.0/16作为Pod网络，因而部署Kubernetes集群时应该规划好要使用的网络地址，并设定此二者相匹配。对于曾经使用了flannel的默认的10.244.0.0/16网络的环境而言，我们也可以选择修改资源清单中的定义，从而将其修改为其他网络地址。以下配置片断取自Calico的部署清单，它定义在DaemonSet/calico-node资源的Pod模板中的calico-node容器之上。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IPV4地址池的定义，其值需要与kube-controller-manager的“--cluster-network”选项的值保持一致，以下环境变量默认处于注释状态</span></span><br><span class="line">				- name: CALICO_IPV4POOL_CIDR</span><br><span class="line">  				value: <span class="string">&quot;10.244.0.0/16&quot;</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># Calico默认以26位子网掩码切分地址池并将各子网配置给集群中的节点，若需要使用其他的掩码长度，则需要定义如下环境变量</span></span><br><span class="line">				- name: CALICO_IPV4POOL_BLOCK_SIZE</span><br><span class="line">  				value: <span class="string">&quot;24&quot;</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># Calico默认并不会从Node.Spec.PodCIDR中分配地址，但可通过将如下变量设置为“true”并结合host-local这一IPAM插件以强制从PodCIDR中分配地址</span></span><br><span class="line">				- name: USE_POD_CIDR</span><br><span class="line">  				value: <span class="string">&quot;true&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 在地址分配方面，Calico在JSON格式的CNI插件配置文件中使用专有的calico-ipam插件，该插件并不会使用Node.Spec.PodCIDR中定义的子网作为节点本地用于为Pod分配地址的地址池，而是根据Calico插件为各节点的配置的地址池进行地址分配。若期望为节点真正使用地址池吻合PodCIDR的定义，则需要在部署清单中DaemonSet/calico-node资源的Pod模板中的calico-node容器之上将USE_POD_CIDR环境变量的值设置为true，并修改ConfigMap/calico-config资源中cni_network_config键中的plugins.ipam.type的值为host-local，且使用podCIDR为子网，具体配置如下所示。</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;ipam&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;host-local&quot;</span>,</span><br><span class="line">      <span class="string">&quot;subnet&quot;</span>: <span class="string">&quot;usePodCidr&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>3.资源清单修改完毕后可以进行部署，但若之前使用了flannel插件则需要将其删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl apply -f calico.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要注意若原先安装了flannel插件，部署完calico后需要重启节点，否则会有flannel的规则残留。</span></span><br></pre></td></tr></table></figure>

<h3 id="IPIP模型"><a href="#IPIP模型" class="headerlink" title="IPIP模型"></a>IPIP模型</h3><p>calico默认使用的是IPIP模型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看路由信息</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># ip route list</span></span><br><span class="line">default via 172.16.11.1 dev eth0 proto static</span><br><span class="line">blackhole 10.244.0.0/24 proto bird         <span class="comment"># blackhole表示当前节点。</span></span><br><span class="line">10.244.0.2 dev calib670545fd4e scope link</span><br><span class="line">10.244.0.3 dev calibd15e6c1979 scope link</span><br><span class="line">10.244.0.4 dev cali5411bb555f9 scope link  <span class="comment"># 此处可以看到pod的数据流出是直接到达内核的</span></span><br><span class="line">10.244.0.5 dev caliddaf626788e scope link</span><br><span class="line">10.244.0.6 dev cali0db5c029d8e scope link</span><br><span class="line">10.244.1.0/24 via 172.16.11.81 dev tunl0 proto bird onlink</span><br><span class="line">10.244.2.0/24 via 172.16.11.82 dev tunl0 proto bird onlink</span><br><span class="line">10.244.3.0/24 via 172.16.11.83 dev tunl0 proto bird onlink</span><br><span class="line">172.16.11.0/24 dev eth0 proto kernel scope link src 172.16.11.71</span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到出现tunl0接口，现在报文发送时会发送给tunl0接口</span></span><br></pre></td></tr></table></figure>

<p>查看calico的地址池</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get ippools -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">items:</span><br><span class="line">- apiVersion: crd.projectcalico.org/v1</span><br><span class="line">  kind: IPPool</span><br><span class="line">  metadata:</span><br><span class="line">    annotations:</span><br><span class="line">      projectcalico.org/metadata: <span class="string">&#x27;&#123;&quot;uid&quot;:&quot;fecd039d-88d1-4d69-ba56-3d24173d4652&quot;,&quot;creationTimestamp&quot;:&quot;2021-08-05T08:02:43Z&quot;&#125;&#x27;</span></span><br><span class="line">    creationTimestamp: <span class="string">&quot;2021-08-05T08:02:44Z&quot;</span></span><br><span class="line">    generation: 1</span><br><span class="line">    name: default-ipv4-ippool</span><br><span class="line">    resourceVersion: <span class="string">&quot;4394285&quot;</span></span><br><span class="line">    uid: 76b6e014-3b0b-4625-9fd7-9f6fb2d3a284</span><br><span class="line">  spec:</span><br><span class="line">    blockSize: 24							<span class="comment"># 地址块大小为24位</span></span><br><span class="line">    cidr: 10.244.0.0/16				<span class="comment"># pod网段为10.244.0.0/16</span></span><br><span class="line">    ipipMode: Always					<span class="comment"># ipipMode为Always</span></span><br><span class="line">    natOutgoing: <span class="literal">true</span></span><br><span class="line">    nodeSelector: all()</span><br><span class="line">    vxlanMode: Never          <span class="comment"># vxlanMode为Never</span></span><br><span class="line">kind: List</span><br><span class="line">metadata:</span><br><span class="line">  resourceVersion: <span class="string">&quot;&quot;</span></span><br><span class="line">  selfLink: <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合ipipMode和vxlanMode可以看出当前模型为ipip</span></span><br></pre></td></tr></table></figure>

<h3 id="验证ipip工作逻辑"><a href="#验证ipip工作逻辑" class="headerlink" title="验证ipip工作逻辑"></a>验证ipip工作逻辑</h3><p>1.在k8s-node01上进行抓包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-node01:~<span class="comment"># tcpdump -i eth0 -nn ip host k8s-node01 and host k8s-node03</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">02:33:55.805615 IP 172.16.11.81 &gt; 172.16.11.83: IP 10.244.1.16.49490 &gt; 10.244.3.16.10016: Flags [P.], seq 1133911456:1133911482, ack 3769557439, win 85, options [nop,nop,TS val 3535292140 ecr 2812652948], length 26 (ipip-proto-4)</span><br><span class="line">02:33:55.806152 IP 172.16.11.83 &gt; 172.16.11.81: IP 10.244.3.16.10016 &gt; 10.244.1.16.49490: Flags [P.], seq 1:27, ack 26, win 84, options [nop,nop,TS val 2812654948 ecr 3535292140], length 26 (ipip-proto-4)</span><br><span class="line">02:33:55.806235 IP 172.16.11.81 &gt; 172.16.11.83: IP 10.244.1.16.49490 &gt; 10.244.3.16.10016: Flags [.], ack 27, win 85, options [nop,nop,TS val 3535292140 ecr 2812654948], length 0 (ipip-proto-4)</span><br><span class="line">02:33:55.825457 IP 172.16.11.81 &gt; 172.16.11.83: IP 10.244.1.16.33862 &gt; 10.244.3.16.10001: Flags [P.], seq 1753095916:1753095942, ack 3391595475, win 3524, options [nop,nop,TS val 3535292159 ecr 2812652968], length 26 (ipip-proto-4)</span><br><span class="line">02:33:55.825894 IP 172.16.11.83 &gt; 172.16.11.81: IP 10.244.3.16.10001 &gt; 10.244.1.16.33862: Flags [P.], seq 1:27, ack 26, win 4091, options [nop,nop,TS val 2812654968 ecr 3535292159], length 26 (ipip-proto-4)</span><br><span class="line">02:33:55.825975 IP 172.16.11.81 &gt; 172.16.11.83: IP 10.244.1.16.33862 &gt; 10.244.3.16.10001: Flags [.], ack 27, win 3524, options [nop,nop,TS val 3535292160 ecr 2812654968], length 0 (ipip-proto-4)</span><br><span class="line">02:33:57.513265 IP 172.16.11.81 &gt; 172.16.11.83: IP 10.244.1.10.45486 &gt; 10.244.3.16.10015: Flags [S], seq 494496574, win 43200, options [mss 1440,sackOK,TS val 2265387489 ecr 0,nop,wscale 9], length 0 (ipip-proto-4)</span><br><span class="line">02:33:57.513602 IP 172.16.11.83 &gt; 172.16.11.81: IP 10.244.3.16.10015 &gt; 10.244.1.10.45486: Flags [S.], seq 2229381908, ack 494496575, win 42840, options [mss 1440,sackOK,TS val 185191869 ecr 2265387489,nop,wscale 9], length 0 (ipip-proto-4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从以上抓包结果中可以看出ipip在通信时，分为外部ip和内部ip 2层。</span></span><br><span class="line"><span class="comment"># ipip-proto-4 表示此报文为ipip报文。</span></span><br></pre></td></tr></table></figure>

<h4 id="IPIP模型总结"><a href="#IPIP模型总结" class="headerlink" title="IPIP模型总结"></a>IPIP模型总结</h4><p>Pod接入网络的方式与Flannel不同，它不使用网桥接入，而是直接放入宿主机内核并直接关联到宿主机上。因此它需要路由条目来支撑，每一个Pod都有个单独的路由条目，指明自己的报文要通过对端的接口（calixxxx）出来后到达宿主机上，而接口都是内核管理的，所有接口已经在宿主机内核中（tunl0），接下来由内核决定如何路由。IPIP模式下其要经过tunl0接口出去。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes网络插件</category>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Calico网络插件</title>
    <url>/2021/07/18/Kubernetes/06Kubernetes%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/04calicoctl%E5%B7%A5%E5%85%B7/calicoctl%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>calicoctl和kubectl一样它是在k8s集群之外运行的。为了避免以后在所有的节点上都安装，我们也可以将其以pod的方式运行在所有节点之上。</p>
<p>安装链接：<a href="https://docs.projectcalico.org/getting-started/clis/calicoctl/install">https://docs.projectcalico.org/getting-started/clis/calicoctl/install</a></p>
<p>calicoctl工具的安装方法有以下几种：</p>
<ul>
<li>Install calicoctl as a binary on a single host </li>
<li>Install calicoctl as a kubectl plugin on a single host</li>
<li>Install calicoctl as a container on a single host </li>
<li>Install calicoctl as a Kubernetes pod</li>
</ul>
<h3 id="插件方式安装calicoctl工具"><a href="#插件方式安装calicoctl工具" class="headerlink" title="插件方式安装calicoctl工具"></a>插件方式安装calicoctl工具</h3><p>1.下载calicoctl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># curl -o kubectl-calico -O -L  &quot;https://github.com/projectcalico/calicoctl/releases/download/v3.20.0/calicoctl&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.将文件移动到/usr/bin目录下并添加执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># cp kubectl-calico /usr/bin/kubectl-calico</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># chmod +x /usr/bin/kubectl-calico</span></span><br></pre></td></tr></table></figure>

<p>3.calicoctl工具已经可以使用了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl calico -h</span></span><br><span class="line">Usage:</span><br><span class="line">  kubectl-calico [options] &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;...]</span><br><span class="line"></span><br><span class="line">    create       Create a resource by file, directory or stdin.</span><br><span class="line">    replace      Replace a resource by file, directory or stdin.</span><br><span class="line">    apply        Apply a resource by file, directory or stdin.  This creates a resource</span><br><span class="line">                 <span class="keyword">if</span> it does not exist, and replaces a resource <span class="keyword">if</span> it does exists.</span><br><span class="line">    patch        Patch a pre-exisiting resource <span class="keyword">in</span> place.</span><br><span class="line">    delete       Delete a resource identified by file, directory, stdin or resource <span class="built_in">type</span> and</span><br><span class="line">                 name.</span><br><span class="line">    get          Get a resource identified by file, directory, stdin or resource <span class="built_in">type</span> and</span><br><span class="line">                 name.</span><br><span class="line">    label        Add or update labels of resources.</span><br><span class="line">    convert      Convert config files between different API versions.</span><br><span class="line">    ipam         IP address management.</span><br><span class="line">    node         Calico node management.</span><br><span class="line">    version      Display the version of this binary.</span><br><span class="line">    <span class="built_in">export</span>       Export the Calico datastore objects <span class="keyword">for</span> migration</span><br><span class="line">    import       Import the Calico datastore objects <span class="keyword">for</span> migration</span><br><span class="line">    datastore    Calico datastore management.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h --<span class="built_in">help</span>                 Show this screen.</span><br><span class="line">  -l --log-level=&lt;level&gt;    Set the <span class="built_in">log</span> level (one of panic, fatal, error,</span><br><span class="line">                            warn, info, debug) [default: panic]</span><br><span class="line">  --context=&lt;context&gt;       The name of the kubeconfig context to use.</span><br><span class="line">  --allow-version-mismatch  Allow client and cluster versions mismatch.</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">  The calico kubectl plugin is used to manage Calico network and security</span><br><span class="line">  policy, to view and manage endpoint configuration, and to manage a Calico</span><br><span class="line">  node instance.</span><br><span class="line"></span><br><span class="line">  See <span class="string">&#x27;kubectl-calico &lt;command&gt; --help&#x27;</span> to <span class="built_in">read</span> about a specific subcommand.</span><br></pre></td></tr></table></figure>

<p>calicoctl是用来管理calico自己引入的API资源的。calicoctl使用来专门操作API Server或etcd中与自己状态相关的数据的命令行工具。</p>
<h3 id="calicoctl配置文件"><a href="#calicoctl配置文件" class="headerlink" title="calicoctl配置文件"></a>calicoctl配置文件</h3><p>calicoctl与<code>API Server</code>通信时是需要kubeconfig文件的，所以需要为其提供kubeconfig配置文件，当其作为kubectl的插件运行时，系统会默认读取kubectl的配置文件。</p>
<p>官方文档：<a href="https://docs.projectcalico.org/getting-started/clis/calicoctl/configure/">https://docs.projectcalico.org/getting-started/clis/calicoctl/configure/</a></p>
<p>calico的配置文件默认在/etc/calico目录下，需要手动创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># mkdir /etc/calico</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># cd /etc/calico</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在此目录下创建一个calicoctl.cfg的配置文件，再其内部申明后端存储类型，和kubeconfig的文件路径。</span></span><br><span class="line">root@k8s-master01:/etc/calico<span class="comment"># vim calicoctl.cfg</span></span><br><span class="line">apiVersion: projectcalico.org/v3</span><br><span class="line">kind: CalicoAPIConfig</span><br><span class="line">metadata:</span><br><span class="line">spec:</span><br><span class="line">  datastoreType: <span class="string">&quot;kubernetes&quot;</span>    <span class="comment"># 此处申明后端存储为kubernetes</span></span><br><span class="line">  kubeconfig: <span class="string">&quot;/root/.kube/config&quot;</span>   <span class="comment"># 因为后端存储为k8s，所以需要kubeconfig文件来指明k8s集群地址已经认证信息。</span></span><br></pre></td></tr></table></figure>

<h3 id="calicoctl使用"><a href="#calicoctl使用" class="headerlink" title="calicoctl使用"></a>calicoctl使用</h3><h4 id="get子命令"><a href="#get子命令" class="headerlink" title="get子命令"></a>get子命令</h4><p>1.get nodes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:/etc/calico<span class="comment"># kubectl calico get nodes</span></span><br><span class="line">NAME</span><br><span class="line">k8s-master01</span><br><span class="line">k8s-node01</span><br><span class="line">k8s-node02</span><br><span class="line">k8s-node03</span><br><span class="line"></span><br><span class="line"><span class="comment"># calico 也能使用get nodes此处的nodes并非k8s节点，而是calico的资源</span></span><br></pre></td></tr></table></figure>

<p>2.获取地址池</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此前使用kubectl get ippools -o yaml来获取，现在直接使用以下命令即可</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl calico get ippool</span></span><br><span class="line">NAME                  CIDR             SELECTOR</span><br><span class="line">default-ipv4-ippool   192.168.0.0/16   all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># calico支持多个地址池，当一个地址池用完时，可以增加一个地址池</span></span><br><span class="line"><span class="comment"># 只不过跨网段通信略微麻烦</span></span><br></pre></td></tr></table></figure>

<p>3.查看指定地址池的资源抽象信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl calico get ippool -o yaml</span></span><br><span class="line">apiVersion: projectcalico.org/v3</span><br><span class="line">items:</span><br><span class="line">- apiVersion: projectcalico.org/v3</span><br><span class="line">  kind: IPPool</span><br><span class="line">  metadata:</span><br><span class="line">    creationTimestamp: <span class="string">&quot;2021-08-06T06:00:24Z&quot;</span></span><br><span class="line">    name: default-ipv4-ippool</span><br><span class="line">    resourceVersion: <span class="string">&quot;6789&quot;</span></span><br><span class="line">    uid: 943b85b2-9759-49ce-8f73-78f1f3f8a111</span><br><span class="line">  spec:</span><br><span class="line">    blockSize: 24</span><br><span class="line">    cidr: 192.168.0.0/16</span><br><span class="line">    ipipMode: Always</span><br><span class="line">    natOutgoing: <span class="literal">true</span></span><br><span class="line">    nodeSelector: all()</span><br><span class="line">    vxlanMode: Never</span><br><span class="line">kind: IPPoolList</span><br><span class="line">metadata:</span><br><span class="line">  resourceVersion: <span class="string">&quot;7984&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="ipam子命令"><a href="#ipam子命令" class="headerlink" title="ipam子命令"></a>ipam子命令</h4><p>1.查看地址分配信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl calico ipam show</span></span><br><span class="line">+----------+----------------+-----------+------------+--------------+</span><br><span class="line">| GROUPING |      CIDR      | IPS TOTAL | IPS IN USE |   IPS FREE   |</span><br><span class="line">+----------+----------------+-----------+------------+--------------+</span><br><span class="line">| IP Pool  | 192.168.0.0/16 |     65536 | 7 (0%)     | 65529 (100%) |</span><br><span class="line">+----------+----------------+-----------+------------+--------------+</span><br></pre></td></tr></table></figure>

<p>2.查看每个节点上的地址分配信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl calico ipam show --show-blocks</span></span><br><span class="line">+----------+------------------+-----------+------------+--------------+</span><br><span class="line">| GROUPING |       CIDR       | IPS TOTAL | IPS IN USE |   IPS FREE   |</span><br><span class="line">+----------+------------------+-----------+------------+--------------+</span><br><span class="line">| IP Pool  | 192.168.0.0/16   |     65536 | 7 (0%)     | 65529 (100%) |</span><br><span class="line">| Block    | 192.168.130.0/24 |       256 | 3 (1%)     | 253 (99%)    |</span><br><span class="line">| Block    | 192.168.131.0/24 |       256 | 2 (1%)     | 254 (99%)    |</span><br><span class="line">| Block    | 192.168.30.0/24  |       256 | 1 (0%)     | 255 (100%)   |</span><br><span class="line">| Block    | 192.168.96.0/24  |       256 | 1 (0%)     | 255 (100%)   |</span><br><span class="line">+----------+------------------+-----------+------------+--------------+</span><br></pre></td></tr></table></figure>

<p>3.查看ipam配置信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl calico ipam show --show-configuration</span></span><br><span class="line">+--------------------+-------+</span><br><span class="line">|      PROPERTY      | VALUE |</span><br><span class="line">+--------------------+-------+</span><br><span class="line">| StrictAffinity     | <span class="literal">false</span> |			<span class="comment"># pod被重建后是否使用原有地址</span></span><br><span class="line">| AutoAllocateBlocks | <span class="literal">true</span>  |			<span class="comment"># 是否支持自动分配地址</span></span><br><span class="line">| MaxBlocksPerHost   |     0 |</span><br><span class="line">+--------------------+-------+</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes网络插件</category>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Calico BGP网格模式</title>
    <url>/2021/07/18/Kubernetes/06Kubernetes%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/05Calico%20BGP%E7%BD%91%E6%A0%BC%E6%A8%A1%E5%BC%8F/Calico%20BGP%E7%BD%91%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>calico默认使用IPIP网络模型，要修改将其改为BGP网格模型需要修改其地址池的详细配置，BGP网格模式一般适用于小规模的网络。</p>
<h3 id="BGP网格模式启用方法"><a href="#BGP网格模式启用方法" class="headerlink" title="BGP网格模式启用方法"></a>BGP网格模式启用方法</h3><p>1.获取地址池详细配置导出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl calico get ippools -o yaml</span></span><br><span class="line">apiVersion: projectcalico.org/v3</span><br><span class="line">items:</span><br><span class="line">- apiVersion: projectcalico.org/v3</span><br><span class="line">  kind: IPPool</span><br><span class="line">  metadata:</span><br><span class="line">    creationTimestamp: <span class="string">&quot;2021-08-06T06:00:24Z&quot;</span></span><br><span class="line">    name: default-ipv4-ippool</span><br><span class="line">    resourceVersion: <span class="string">&quot;6789&quot;</span></span><br><span class="line">    uid: 943b85b2-9759-49ce-8f73-78f1f3f8a111</span><br><span class="line">  spec:</span><br><span class="line">    blockSize: 24</span><br><span class="line">    cidr: 192.168.0.0/16</span><br><span class="line">    ipipMode: Always</span><br><span class="line">    natOutgoing: <span class="literal">true</span></span><br><span class="line">    nodeSelector: all()</span><br><span class="line">    vxlanMode: Never</span><br><span class="line">kind: IPPoolList</span><br><span class="line">metadata:</span><br><span class="line">  resourceVersion: <span class="string">&quot;9306&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出为资源清单</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl calico get ippools -o yaml &gt; default-ipv4-ippool.yaml</span></span><br></pre></td></tr></table></figure>

<p>2.对导出的配置清单进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># vim default-ipv4-ippool.yaml</span></span><br><span class="line">apiVersion: projectcalico.org/v3</span><br><span class="line">items:</span><br><span class="line">- apiVersion: projectcalico.org/v3</span><br><span class="line">  kind: IPPool</span><br><span class="line">  metadata:</span><br><span class="line">    creationTimestamp: <span class="string">&quot;2021-08-06T06:00:24Z&quot;</span></span><br><span class="line">    name: default-ipv4-ippool</span><br><span class="line">    resourceVersion: <span class="string">&quot;6789&quot;</span></span><br><span class="line">    uid: 943b85b2-9759-49ce-8f73-78f1f3f8a111</span><br><span class="line">  spec:</span><br><span class="line">    blockSize: 24</span><br><span class="line">    cidr: 192.168.0.0/16</span><br><span class="line">    ipipMode: CrossSubnet      <span class="comment"># 将ipipMode改为CrossSubnet或Never</span></span><br><span class="line">    natOutgoing: <span class="literal">true</span></span><br><span class="line">    nodeSelector: all()</span><br><span class="line">    vxlanMode: Never</span><br><span class="line">kind: IPPoolList</span><br><span class="line">metadata:</span><br><span class="line">  resourceVersion: <span class="string">&quot;9418&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改BGP模式需要修改ipipMode，其有2各选项可以改为BGP</span></span><br><span class="line"><span class="comment"># CrossSubnet表示混杂模式也就是混合模式，表示跨节点子网时才使用IPIP</span></span><br><span class="line"><span class="comment"># Never表示纯BGP模式</span></span><br><span class="line"><span class="comment"># vxlanMode: CrossSubnet ipipMode: Never 表示VxLan的混合模型</span></span><br></pre></td></tr></table></figure>

<p>3.将其重新应用到网络中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl calico apply -f default-ipv4-ippool.yaml</span></span><br><span class="line">Successfully applied 1 <span class="string">&#x27;IPPool&#x27;</span> resource(s)</span><br></pre></td></tr></table></figure>

<p>4.BGP生效后再次查看路由信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># ip route list</span></span><br><span class="line">default via 172.16.11.1 dev eth0 proto static</span><br><span class="line">172.16.11.0/24 dev eth0 proto kernel scope link src 172.16.11.71</span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown</span><br><span class="line">192.168.30.0/24 via 172.16.11.83 dev eth0 proto bird</span><br><span class="line">192.168.96.0/24 via 172.16.11.82 dev eth0 proto bird</span><br><span class="line">blackhole 192.168.130.0/24 proto bird</span><br><span class="line">192.168.130.1 dev cali1dceed2d547 scope link</span><br><span class="line">192.168.130.2 dev calif39be49e967 scope link</span><br><span class="line">192.168.131.0/24 via 172.16.11.81 dev eth0 proto bird</span><br></pre></td></tr></table></figure>

<p>可以看出当前的路由信息类似于flannel的<code>host-gw</code>，不再经由tunl0，而是直接由物理网卡eth0接口到bird向外发送。</p>
<h4 id="抓包验证"><a href="#抓包验证" class="headerlink" title="抓包验证"></a>抓包验证</h4><p>1.部署deployment资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># VERSION=v1.0 envsubst &lt; deployment-demo.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deployment-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 4</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      release: stable</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        release: stable</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:v1.0</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: http</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># VERSION=v1.0 envsubst &lt; deployment-demo.yaml | kubectl apply -f -</span></span><br><span class="line">deployment.apps/deployment-demo created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建出4个Pod</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE   IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">deployment-demo-fb544c5d8-8jd62   1/1     Running   0          19s   192.168.96.1    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-fb544c5d8-wcdms   1/1     Running   0          19s   192.168.131.3   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-fb544c5d8-xvsm7   1/1     Running   0          19s   192.168.30.2    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-fb544c5d8-zwbhd   1/1     Running   0          19s   192.168.30.1    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>2.在节点1上进行抓包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用node01上的pod访问node03上pod</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl exec deployment-demo-fb544c5d8-xvsm7 -- curl 192.168.131.3</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.30.2, ServerName: deployment-demo-fb544c5d8-wcdms, ServerIP: 192.168.131.3!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时在node01上进行抓包</span></span><br><span class="line">root@k8s-node01:~<span class="comment"># tcpdump -i eth0 -nn ip host 192.168.30.2</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">07:41:00.255112 IP 192.168.30.2.53310 &gt; 192.168.131.3.80: Flags [S], seq 609498676, win 43200, options [mss 1440,sackOK,TS val 3721746601 ecr 0,nop,wscale 9], length 0</span><br><span class="line">07:41:00.255246 IP 192.168.131.3.80 &gt; 192.168.30.2.53310: Flags [S.], seq 2360321282, ack 609498677, win 42840, options [mss 1440,sackOK,TS val 389171798 ecr 3721746601,nop,wscale 9], length 0</span><br><span class="line">07:41:00.255512 IP 192.168.30.2.53310 &gt; 192.168.131.3.80: Flags [.], ack 1, win 85, options [nop,nop,TS val 3721746602 ecr 389171798], length 0</span><br><span class="line">07:41:00.255578 IP 192.168.30.2.53310 &gt; 192.168.131.3.80: Flags [P.], seq 1:78, ack 1, win 85, options [nop,nop,TS val 3721746602 ecr 389171798], length 77: HTTP: GET / HTTP/1.1</span><br><span class="line">07:41:00.255613 IP 192.168.131.3.80 &gt; 192.168.30.2.53310: Flags [.], ack 78, win 84, options [nop,nop,TS val 389171798 ecr 3721746602], length 0</span><br><span class="line">07:41:00.257483 IP 192.168.131.3.80 &gt; 192.168.30.2.53310: Flags [P.], seq 1:18, ack 78, win 84, options [nop,nop,TS val 389171800 ecr 3721746602], length 17: HTTP: HTTP/1.0 200 OK</span><br><span class="line">07:41:00.257863 IP 192.168.131.3.80 &gt; 192.168.30.2.53310: Flags [FP.], seq 18:277, ack 78, win 84, options [nop,nop,TS val 389171801 ecr 3721746602], length 259: HTTP</span><br><span class="line">07:41:00.258108 IP 192.168.30.2.53310 &gt; 192.168.131.3.80: Flags [.], ack 18, win 85, options [nop,nop,TS val 3721746604 ecr 389171800], length 0</span><br><span class="line">07:41:00.259058 IP 192.168.30.2.53310 &gt; 192.168.131.3.80: Flags [F.], seq 78, ack 278, win 85, options [nop,nop,TS val 3721746605 ecr 389171801], length 0</span><br><span class="line">07:41:00.259122 IP 192.168.131.3.80 &gt; 192.168.30.2.53310: Flags [.], ack 79, win 84, options [nop,nop,TS val 389171802 ecr 3721746605], length 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看出 192.168.20.2与192.168.131.3直接进行通信没有内层报文存在了</span></span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>1.查看node状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl-calico node status</span></span><br><span class="line">Calico process is running.</span><br><span class="line"></span><br><span class="line">IPv4 BGP status</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line">| PEER ADDRESS |     PEER TYPE     | STATE |  SINCE   |    INFO     |</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line">| 172.16.11.81 | node-to-node mesh | up    | 06:08:26 | Established |</span><br><span class="line">| 172.16.11.82 | node-to-node mesh | up    | 06:08:27 | Established |</span><br><span class="line">| 172.16.11.83 | node-to-node mesh | up    | 06:08:27 | Established |</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line"></span><br><span class="line">IPv6 BGP status</span><br><span class="line">No IPv6 peers found.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于当前是工作在BGP的peer模型下，此处是一个一对一的模型，n对n-1的mesh网络</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes网络插件</category>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Calico BGP网格模式</title>
    <url>/2021/07/18/Kubernetes/06Kubernetes%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/06Calico%20BGP%E5%8F%8D%E5%B0%84%E5%99%A8%E6%A8%A1%E5%BC%8F/Calico%20BGP%E5%8F%8D%E5%B0%84%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在大规模的节点网络中如果使用BGP网格，将会产生大量的广播风暴。所以在大规模网路中使用<code>BGP Reflect</code>。</p>
<h3 id="配置Calico工作为BGP-Reflect模式"><a href="#配置Calico工作为BGP-Reflect模式" class="headerlink" title="配置Calico工作为BGP Reflect模式"></a>配置Calico工作为<code>BGP Reflect</code>模式</h3><p>在每个节点上工作的BIRD既可以作为BGP客户端，还可以作为<code>BGP Reflect</code>，所以只需要从众多的节点中找出1个或2个将其配置为Reflect即可。</p>
<p>1.在Calico中要使用Reflect需要使用专用的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim reflector-node.yaml</span></span><br><span class="line">apiVersion: projectcalico.org/v3</span><br><span class="line">kind: Node						<span class="comment"># 节点为Node，表示为calico的node节点</span></span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    route-reflector: <span class="literal">true</span>  <span class="comment"># 加label表示要从整个集群中挑选个别节点为reflect，此标签会在后续中使用到</span></span><br><span class="line">  name: k8s-master01       <span class="comment"># 此处的名字为calicoctl get nodes中节点的名字</span></span><br><span class="line">spec:</span><br><span class="line">  bgp:                    <span class="comment"># 指定运行BGP的配置信息</span></span><br><span class="line">    ipv4Address: 172.16.11.71/24 		 <span class="comment"># 指定那个主机要配置为reflect</span></span><br><span class="line">    ipv4IPIPTunnelAddr: 192.168.130.0    <span class="comment"># 172.16.11.71节点的tunl0接口的地址</span></span><br><span class="line">    routeReflectorClusterID: 1.1.1.1     <span class="comment"># 此为bgp网络信息，不同的网络ID不同，同一网络ID号相同，值自定义。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用此清单</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl-calico apply -f reflector-node.yaml</span></span><br><span class="line">Successfully applied 1 <span class="string">&#x27;Node&#x27;</span> resource(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># reflect已经配置成功，但目前BIRD还工作在node to node的mesh模式</span></span><br><span class="line"><span class="comment"># 我们需要将其工作模式从BGP peer模式改为BGP reflect模式</span></span><br></pre></td></tr></table></figure>

<p>2.改变node节点的工作模型从BGP peer模式为BGP reflect，需要专用配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此配置用来让每一个节点确定每一个BGP客户端都与定义的reflect进行路由发送</span></span><br><span class="line"><span class="comment"># 而不再是互相发送</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim bgppeer-demo.yaml</span></span><br><span class="line">kind: BGPPeer</span><br><span class="line">apiVersion: projectcalico.org/v3</span><br><span class="line">metadata:</span><br><span class="line">  name: bgppeer-demo</span><br><span class="line">spec:</span><br><span class="line">  nodeSelector: all()                        <span class="comment"># 设定所有节点都是BGPPeer</span></span><br><span class="line">  peerSelector: route-reflector == <span class="string">&quot;true&quot;</span>      <span class="comment"># 但是他们都与此行标签选择出来的peer进行通信</span></span><br><span class="line">  																					 <span class="comment"># 而不再是1对n-1的模式进行通信</span></span><br><span class="line"><span class="comment"># 应用此清单</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl-calico apply -f bgppeer-demo.yaml</span></span><br><span class="line">Successfully applied 1 <span class="string">&#x27;BGPPeer&#x27;</span> resource(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看node状态</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl-calico node status</span></span><br><span class="line">Calico process is running.</span><br><span class="line"></span><br><span class="line">IPv4 BGP status</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line">| PEER ADDRESS |     PEER TYPE     | STATE |  SINCE   |    INFO     |</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line">| 172.16.11.81 | node-to-node mesh | up    | 06:08:26 | Established |</span><br><span class="line">| 172.16.11.82 | node-to-node mesh | up    | 06:08:27 | Established |</span><br><span class="line">| 172.16.11.83 | node-to-node mesh | up    | 06:08:27 | Established |</span><br><span class="line">| 172.16.11.81 | node specific     | start | 09:01:55 | Idle        |</span><br><span class="line">| 172.16.11.82 | node specific     | start | 09:01:55 | Idle        |</span><br><span class="line">| 172.16.11.83 | node specific     | start | 09:01:55 | Idle        |</span><br><span class="line">+--------------+-------------------+-------+----------+-------------+</span><br><span class="line"></span><br><span class="line">IPv6 BGP status</span><br><span class="line">No IPv6 peers found.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从node状态中可以看到master节点已经可以和其他节点建立起点到点的node specific</span></span><br><span class="line"><span class="comment"># 并且只有master节点与其他节点进行通信，其他节点相互间不在进行通信路由信息</span></span><br><span class="line"><span class="comment"># 但是之前的node-to-node的还存在，接下来一部需要把这些关闭</span></span><br></pre></td></tr></table></figure>

<p>3.关闭node-to-node mesh模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改node-to-node模式，需要修改BGP的Configuration</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim default-bgpconfiguration.yaml</span></span><br><span class="line">apiVersion: projectcalico.org/v3</span><br><span class="line">kind: BGPConfiguration</span><br><span class="line">metadata:</span><br><span class="line">  name: default       <span class="comment"># 此处名字必须为default，因为只有default是生效的</span></span><br><span class="line">spec:</span><br><span class="line">  logSeverityScreen: Info  </span><br><span class="line">  nodeToNodeMeshEnabled: <span class="literal">false</span>   <span class="comment"># 要不要设定节点和节点之间点对点通信，默认为true，需要改为false</span></span><br><span class="line">  asNumber: 63400      <span class="comment"># asNumber表示自治系统编号，表示大家都在同一个自治系统中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用配置文件</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl-calico apply -f default-bgpconfiguration.yaml</span></span><br><span class="line">Successfully applied 1 <span class="string">&#x27;BGPConfiguration&#x27;</span> resource(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看Node状态</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl-calico node status</span></span><br><span class="line">Calico process is running.</span><br><span class="line"></span><br><span class="line">IPv4 BGP status</span><br><span class="line">+--------------+---------------+-------+----------+-------------+</span><br><span class="line">| PEER ADDRESS |   PEER TYPE   | STATE |  SINCE   |    INFO     |</span><br><span class="line">+--------------+---------------+-------+----------+-------------+</span><br><span class="line">| 172.16.11.81 | node specific | up    | 09:16:20 | Established |</span><br><span class="line">| 172.16.11.82 | node specific | up    | 09:16:20 | Established |</span><br><span class="line">| 172.16.11.83 | node specific | up    | 09:16:20 | Established |</span><br><span class="line">+--------------+---------------+-------+----------+-------------+</span><br><span class="line"></span><br><span class="line">IPv6 BGP status</span><br><span class="line">No IPv6 peers found.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处node-to-node mesh没有了</span></span><br><span class="line"><span class="comment"># 现在这3个节点再生成的路由信息，不会相互发送了只会发送给master01</span></span><br><span class="line"><span class="comment"># master01收到后会反射给整个网络的各个节点。</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>要将BGP原有的Node-to-Node mesh的网络改成BGP reflect网络需要3步骤：</p>
<ol>
<li>在集群中找一个节点当reflector</li>
<li>设定其他节点都能与reflector一对一通信</li>
<li>把其他节点的彼此间通信关闭</li>
</ol>
<h4 id="多Reflector配置"><a href="#多Reflector配置" class="headerlink" title="多Reflector配置"></a>多Reflector配置</h4><p>配置多个reflector时只需要把把第一步进行重复，更改其中的节点名、IP地址，但是标签必须保持一致。然后其他的所有节点都能与这两个reflector进行通信了，但是他们各组件中的通信是借助于etcd进行通信的，所以无论把信息发送给哪个reflector他们都会存储到etcd中，由另外的Reflector向全网进行反射。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes网络插件</category>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Calico网络策略</title>
    <url>/2021/07/18/Kubernetes/06Kubernetes%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/07Calico%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5/Calico%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>Calico除了支持BGP网络之外还支持网络策略。</p>
<p>在默认情况下，k8s上的2个不同名称空间下的Pod是可以相互访问的。k8s的名称空间仅用于为资源名称提供隔离机制，而对于不同名称空间下的pod间相互访问并没有进行隔离。而Calico的网络策略则是用来管控Pod间的通信流量。 </p>
<p>所谓的网络测略就是专用于调用节点内核上，能够实施流量控制的API从而定义规则来管控Pod间通信的一种机制。</p>
<h3 id="k8s默认网络策略"><a href="#k8s默认网络策略" class="headerlink" title="k8s默认网络策略"></a>k8s默认网络策略</h3><p>网络策略是K8S上的一种标准资源。</p>
<h4 id="k8s默认网络策略定义规范"><a href="#k8s默认网络策略定义规范" class="headerlink" title="k8s默认网络策略定义规范"></a>k8s默认网络策略定义规范</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1  <span class="comment"># 资源隶属的API群组及版本号</span></span><br><span class="line">kind: NetworkPolicy  <span class="comment"># 资源类型的名称，名称空间级别的资源；</span></span><br><span class="line">metadata:  <span class="comment"># 资源元数据</span></span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 资源名称标识</span></span><br><span class="line"> 	namespace &lt;string&gt;  <span class="comment"># NetworkPolicy是名称空间级别的资源</span></span><br><span class="line">spec:  <span class="comment"># 期望的状态</span></span><br><span class="line"> 	podSelector &lt;Object&gt;  <span class="comment"># 当前规则生效的同一名称空间中的一组目标Pod对象，必选字段；</span></span><br><span class="line">                            <span class="comment"># 空值表示当前名称空间中的所有Pod资源</span></span><br><span class="line">  policyTypes &lt;[]string&gt;  <span class="comment"># Ingress表示生效ingress字段；Egress表示生效</span></span><br><span class="line">				              			<span class="comment"># egress字段，同时提供表示二者均有效</span></span><br><span class="line">  ingress &lt;[]Object&gt;  <span class="comment"># 入站流量源端点对象列表，白名单，空值表示“所有”</span></span><br><span class="line">  - from &lt;[]Object&gt;  <span class="comment"># 具体的端点对象列表，空值表示所有合法端点</span></span><br><span class="line">    - ipBlock  &lt;Object&gt; <span class="comment"># IP地址块范围内的端点，不能与另外两个字段同时使用</span></span><br><span class="line">	  - namespaceSelector &lt;Object&gt; <span class="comment"># 匹配的名称空间内的端点</span></span><br><span class="line">	    podSelector &lt;Object&gt;  <span class="comment"># 由Pod标签选择器匹配到的端点，空值表示&lt;none&gt;</span></span><br><span class="line">  	ports &lt;[]Object&gt;  <span class="comment"># 具体的端口对象列表，空值表示所有合法端口</span></span><br><span class="line">  egress &lt;[]Object&gt;  <span class="comment"># 出站流量目标端点对象列表，白名单，空值表示“所有”</span></span><br><span class="line">  - to &lt;[]Object&gt;  <span class="comment"># 具体的端点对象列表，空值表示所有合法端点，格式同ingres.from；</span></span><br><span class="line">	  ports &lt;[]Object&gt;  <span class="comment"># 具体的端口对象列表，空值表示所有合法端口</span></span><br></pre></td></tr></table></figure>

<h4 id="管控入站流量"><a href="#管控入站流量" class="headerlink" title="管控入站流量"></a>管控入站流量</h4><p>管控入站流量时有3种方式定义其来源</p>
<ol>
<li>ipblock</li>
<li>namespaceSelector</li>
<li>podSelector</li>
</ol>
<p>nameSpaceSelector和podSelector是同时使用的。</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>1.创建出pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># VERSION=v1.0 envsubst &lt; deployment-demo.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deployment-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 4</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      release: stable</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        release: stable</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:v1.0</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: http</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用资源清单</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># VERSION=v1.0 envsubst &lt; deployment-demo.yaml | kubectl apply -f - -n dev</span></span><br><span class="line">deployment.apps/deployment-demo created</span><br></pre></td></tr></table></figure>

<p>2.编写netpol资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此资源清单用来控制入站流量</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># vim netpol-dev-demoapp-ingress.yaml</span></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp-ingress</span><br><span class="line">  namespace: dev    <span class="comment"># 此为该网络策略作用的名称空间</span></span><br><span class="line">spec:</span><br><span class="line">  podSelector:    <span class="comment"># 表示对dev名称空间下的哪一组Pod生效</span></span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp  <span class="comment"># 表示只对dev名称空间下有用标签名为app: demoapp的pod生效。</span></span><br><span class="line">  policyTypes: [<span class="string">&quot;Ingress&quot;</span>]   <span class="comment"># 表示管理入站流量</span></span><br><span class="line">  ingress:                  <span class="comment"># 以下为入站流量的管理方法。定义的表示允许，未定义的受制于默认策略</span></span><br><span class="line">  - from:										<span class="comment"># 此清单有2个from表示有2个规则。</span></span><br><span class="line">    - namespaceSelector:    <span class="comment"># 名称空间选择器</span></span><br><span class="line">        matchExpressions:</span><br><span class="line">        - key: kubernetes.io/metadata.name</span><br><span class="line">          operator: In</span><br><span class="line">          values: [dev,kube-system,logs,monitoring,kubernetes-dashboard，longhorn-system]</span><br><span class="line"> <span class="comment">#   - ipBlock:		   		# 由于所有pod跑在同一地址段下，一旦大范围放行，将导致拒绝规则不生效</span></span><br><span class="line"> <span class="comment">#       cidr: 192.168.0.0/16</span></span><br><span class="line">  - from:</span><br><span class="line">    - namespaceSelector:</span><br><span class="line">        matchExpressions:</span><br><span class="line">        - &#123;key: kubernetes.io/metadata.name, operator: NotIn, values: [<span class="string">&quot;default&quot;</span>]&#125;</span><br><span class="line">    ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br></pre></td></tr></table></figure>

<p>3.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl apply -f netpol-dev-demoapp-ingress.yaml</span></span><br><span class="line">networkpolicy.networking.k8s.io/demoapp-ingress created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看netpol的描述信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl describe netpol -n dev demoapp-ingress</span></span><br><span class="line">Name:         demoapp-ingress</span><br><span class="line">Namespace:    dev</span><br><span class="line">Created on:   2021-08-09 08:15:42 +0000 UTC</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Spec:</span><br><span class="line">  PodSelector:     app=demoapp</span><br><span class="line">  Allowing ingress traffic:</span><br><span class="line">    To Port: &lt;any&gt; (traffic allowed to all ports) 		 <span class="comment"># 表示到app=demoapp这组pod的任意端口</span></span><br><span class="line">    From:</span><br><span class="line">      NamespaceSelector: kubernetes.io/metadata.name <span class="keyword">in</span> (dev,kube-system,kubernetes-dashboard,logs,monitoring)</span><br><span class="line">    ----------</span><br><span class="line">    To Port: 80/TCP</span><br><span class="line">    From:</span><br><span class="line">      NamespaceSelector: kubernetes.io/metadata.name notin (default)</span><br><span class="line">  Not affecting egress traffic</span><br><span class="line">  Policy Types: Ingress</span><br></pre></td></tr></table></figure>

<p>4.在default名称空间下使用pod进行访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前名称空间下存在的pod</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE   IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">deployment-demo-fb544c5d8-8jd62   1/1     Running   0          3d    192.168.96.1    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-fb544c5d8-wcdms   1/1     Running   0          3d    192.168.131.3   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-fb544c5d8-xvsm7   1/1     Running   0          3d    192.168.30.2    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-fb544c5d8-zwbhd   1/1     Running   0          3d    192.168.30.1    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl get pods -o wide -n dev</span></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE   IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">deployment-demo-fb544c5d8-frmr7   1/1     Running   0          13m   192.168.30.3    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-fb544c5d8-lxnvz   1/1     Running   0          13m   192.168.96.2    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-fb544c5d8-vqqbt   1/1     Running   0          13m   192.168.131.4   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-fb544c5d8-z9wfc   1/1     Running   0          13m   192.168.96.3    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用default名称空间下的pod对dev名称空间下的pod进行访问</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl exec deployment-demo-fb544c5d8-8jd62 -- curl 192.168.131.4</span></span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ol>
<li>在使用规则时，名称空间必须要存在相应的标签，否则规则将无法匹配导致不生效</li>
<li>定义规则时必须生效顺序，若允许的规则范围太大将会导致拒绝规则不生效。</li>
</ol>
<h4 id="管控出站流量"><a href="#管控出站流量" class="headerlink" title="管控出站流量"></a>管控出站流量</h4><p>由于默认的出战规则是放行所有，所以需要先将所有的入站和出栈规则做拒绝，才能进行管控。</p>
<p>1.创建资源清单，拒绝所有出入站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># vim netpol-dev-denyall.yaml</span></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: deny-all-ingress</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  podSelector: &#123;&#125;</span><br><span class="line">  policyTypes: [<span class="string">&quot;Ingress&quot;</span>,<span class="string">&quot;Egress&quot;</span>]</span><br><span class="line">  egress:</span><br><span class="line">  - to:</span><br><span class="line">    - podSelector: &#123;&#125;</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    - podSelector: &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl apply -f netpol-dev-denyall.yaml</span></span><br><span class="line">networkpolicy.networking.k8s.io/deny-all-ingress created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在dev名称空间下使用pod进行名称解析</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl exec deployment-demo-fb544c5d8-frmr7 -n dev -- nslookup www.baidu.com</span></span><br><span class="line">;; connection timed out; no servers could be reached</span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span> terminated with <span class="built_in">exit</span> code 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于拒绝所有，目前无法进行访问kube-dns的服务</span></span><br></pre></td></tr></table></figure>

<p>3.定义egress的放行规则，编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># vim netpol-dev-demoapp-egress.yaml</span></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp-egress</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">  policyTypes: [<span class="string">&quot;Egress&quot;</span>]</span><br><span class="line">  egress:</span><br><span class="line">  - to:</span><br><span class="line">    ports:</span><br><span class="line">    - protocol: UDP</span><br><span class="line">      port: 53</span><br><span class="line">  - to:</span><br><span class="line">    - podSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          app: redis</span><br><span class="line">    ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 6379</span><br><span class="line">  - to:</span><br><span class="line">    - podSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          app: demoapp</span><br><span class="line">    ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br></pre></td></tr></table></figure>

<p>4.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl apply -f netpol-dev-demoapp-egress.yaml</span></span><br><span class="line">networkpolicy.networking.k8s.io/demoapp-egress created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在dev名称空间下使用pod进行名称解析</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl exec deployment-demo-fb544c5d8-frmr7 -n dev -- nslookup www.baidu.com</span></span><br><span class="line">Server:         10.96.0.10</span><br><span class="line">Address:        10.96.0.10<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.baidu.com   canonical name = www.a.shifen.com.</span><br><span class="line">Name:   www.a.shifen.com</span><br><span class="line">Address: 180.101.49.12</span><br><span class="line">Name:   www.a.shifen.com</span><br><span class="line">Address: 180.101.49.11</span><br></pre></td></tr></table></figure>

<h4 id="隔离名称空间"><a href="#隔离名称空间" class="headerlink" title="隔离名称空间"></a>隔离名称空间</h4><p>之前的denyall资源清单，使用后虽然能够实现隔离名称空间的效果，但是其直接拒绝了所有。而后ingress和egress的资源清单实现了流量控制的机制，但是定义网络规则时，如果定义在多个资源内很有可能资源和资源间的规则会冲突和覆盖导致无法达成目标，所以建议所有的入站和出战规则写入同一个文件中。</p>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><p>名称空间级别出入站同一文件示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># vim netpool-stage-default.yaml</span></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: default</span><br><span class="line">  namespace: stage</span><br><span class="line">spec:</span><br><span class="line">  podSelector: &#123;&#125;</span><br><span class="line">  policyTypes: [<span class="string">&quot;Ingress&quot;</span>,<span class="string">&quot;Egress&quot;</span>]</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    - namespaceSelector:</span><br><span class="line">        matchExpressions:</span><br><span class="line">        - key: kubernetes.io/metadata.name</span><br><span class="line">          operator: In</span><br><span class="line">          values: [stage,kube-system,logs,monitoring,kubernetes-dashboard]</span><br><span class="line">  egress:</span><br><span class="line">  - to:</span><br><span class="line">    ports:</span><br><span class="line">    - protocol: UDP</span><br><span class="line">      port: 53</span><br><span class="line">  - to:</span><br><span class="line">    - namespaceSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          name: kube-apiserver</span><br><span class="line">      podSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          component: kube-apiserver</span><br><span class="line">    ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 443</span><br><span class="line">  - to:</span><br><span class="line">    - namespaceSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          kubernetes.io/metadata.name: stage</span><br></pre></td></tr></table></figure>

<p>k8s自身的networkPolicy每个名称空间都需要以当前名称空间为中心设置networkPolicy，系统上存在几个namespace就需要几个networkPolicy去应用，这管理起来十分复杂。因此Calico提供了另一种解决方案</p>
<h3 id="Calico的网络策略"><a href="#Calico的网络策略" class="headerlink" title="Calico的网络策略"></a>Calico的网络策略</h3><p>尽管k8s功能上日渐丰富，但k8s自己的<code>NetworkPolicy</code>资源仍然具有相当的局限性，例如它没有明确的拒绝规则、缺乏对选择器高级表达式的支持、不支持应用层规则，以及没有集群范围的网络策略等。为了解决这些限制，Calico等提供了自有的策略CRD，包括<code>NetworkPolicy</code>和<code>GlobalNetworkPolicy</code>等，其中的<code>NetworkPolicy CRD</code>比<code>Kubernetes NetworkPolicy API</code>提供了更大的功能集，包括支持拒绝规则、规则解析级别以及应用层规则等，但相关的规则需要由calicoctl创建。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl api-resources | grep calico | grep networkpolicies</span></span><br><span class="line">globalnetworkpolicies                          crd.projectcalico.org/v1               <span class="literal">false</span>        GlobalNetworkPolicy</span><br><span class="line">networkpolicies                                crd.projectcalico.org/v1               <span class="literal">true</span>         NetworkPolicy</span><br></pre></td></tr></table></figure>

<h4 id="Calico全局管理"><a href="#Calico全局管理" class="headerlink" title="Calico全局管理"></a>Calico全局管理</h4><p><code>GlobalNetworkPolicy</code>支持使用<code>selector</code>、<code>serviceAccountSelector</code>或<code>namespaceSelector</code>来选定网络策略的生效范围，默认为all()，即集群上的所有端点。下面的配置清单示例（globalnetworkpolicy-demo.yaml）为非系统类名称空间（本示例假设有kube-system、kubernetes-dashboard、logs和monitoring这4个）定义了一个通用的网络策略。</p>
<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><p>定义资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># vim globalnetworkpolicy-demo.yaml</span></span><br><span class="line">apiVersion: projectcalico.org/v3      </span><br><span class="line">kind: GlobalNetworkPolicy      <span class="comment"># 资源名称，使用此资源可以为所有名称空间施加默认策略</span></span><br><span class="line">metadata:</span><br><span class="line">  name: namespace-default</span><br><span class="line">spec:</span><br><span class="line">  order: 0.0             <span class="comment"># 定义次序，用来定义规则的优先级，0.0表示级别最高</span></span><br><span class="line">  namespaceSelector: name not <span class="keyword">in</span> &#123;<span class="string">&quot;kube-system&quot;</span>,<span class="string">&quot;kubernetes-dashboard&quot;</span>,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;monitoring&quot;</span>&#125;  <span class="comment"># 挑选名称空间</span></span><br><span class="line">  types: [<span class="string">&quot;Ingress&quot;</span>,<span class="string">&quot;Egress&quot;</span>]</span><br><span class="line">  ingress:</span><br><span class="line">  - action: Allow       <span class="comment"># 施加动作可以为Allow也可以Deny</span></span><br><span class="line">    <span class="built_in">source</span>:</span><br><span class="line">      namespaceSelector: name <span class="keyword">in</span> &#123;<span class="string">&quot;kube-system&quot;</span>,<span class="string">&quot;kubernetes-dashboard&quot;</span>,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;monitoring&quot;</span>&#125;</span><br><span class="line">  egress:</span><br><span class="line">  - action: Allow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上规则的意思是，</span></span><br><span class="line"><span class="comment"># 入站规则：非&quot;kube-system&quot;,&quot;kubernetes-dashboard&quot;,&quot;logs&quot;,&quot;monitoring&quot;名称空间的pod，</span></span><br><span class="line"><span class="comment"># 允许&quot;kube-system&quot;,&quot;kubernetes-dashboard&quot;,&quot;logs&quot;,&quot;monitoring&quot;这些名称空间的pod来访问。</span></span><br><span class="line"><span class="comment"># 出站规则：全都允许</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则的定义方法一般放行所有的出站流量，限制入站的流量。</span></span><br><span class="line"><span class="comment"># 只要限制住入站流量，出站流量即使不限制也无法访问到其他限制了入站流量的pod。</span></span><br></pre></td></tr></table></figure>

<p>应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用kubectl-calico命令进行生效</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl-calico apply -f globalnetworkpolicy-demo.yaml</span></span><br><span class="line">Successfully applied 1 <span class="string">&#x27;GlobalNetworkPolicy&#x27;</span> resource(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取globalnetworkpolicy资源</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter10<span class="comment"># kubectl-calico get globalnetworkpolicy namespace-default -o yaml</span></span><br><span class="line">apiVersion: projectcalico.org/v3</span><br><span class="line">kind: GlobalNetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-08-10T03:16:58Z&quot;</span></span><br><span class="line">  name: namespace-default</span><br><span class="line">  resourceVersion: <span class="string">&quot;510265&quot;</span></span><br><span class="line">  uid: b38164a9-5d6f-441d-970a-a493d03fb868</span><br><span class="line">spec:</span><br><span class="line">  egress:</span><br><span class="line">  - action: Allow</span><br><span class="line">    destination: &#123;&#125;</span><br><span class="line">    <span class="built_in">source</span>: &#123;&#125;</span><br><span class="line">  ingress:</span><br><span class="line">  - action: Allow</span><br><span class="line">    destination: &#123;&#125;</span><br><span class="line">    <span class="built_in">source</span>:</span><br><span class="line">      namespaceSelector: name <span class="keyword">in</span> &#123;<span class="string">&quot;kube-system&quot;</span>,<span class="string">&quot;kubernetes-dashboard&quot;</span>,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;monitoring&quot;</span>&#125;</span><br><span class="line">  namespaceSelector: name not <span class="keyword">in</span> &#123;<span class="string">&quot;kube-system&quot;</span>,<span class="string">&quot;kubernetes-dashboard&quot;</span>,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;monitoring&quot;</span>&#125;</span><br><span class="line">  order: 0</span><br><span class="line">  types:</span><br><span class="line">  - Ingress</span><br><span class="line">  - Egress</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes网络插件</category>
        <category>Calico</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Scheduler调度器</title>
    <url>/2021/07/19/Kubernetes/07Kubernetes%E8%B0%83%E5%BA%A6%E5%99%A8/01Scheduler%E8%B0%83%E5%BA%A6%E5%99%A8/Scheduler%E8%B0%83%E5%BA%A6%E5%99%A8/</url>
    <content><![CDATA[<p>当一个pod出现在<code>API-Server</code>中，且其尚未绑定到任何节点时，就需要进行调度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 未绑定是指nodeName没有指定，如果定义了那么调度器就无需工作，直接在指定节点上运行起来</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl explain pod.spec.nodeName</span></span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1</span><br><span class="line"></span><br><span class="line">FIELD:    nodeName &lt;string&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     NodeName is a request to schedule this pod onto a specific node. If it is</span><br><span class="line">     non-empty, the scheduler simply schedules this pod onto that node, assuming</span><br><span class="line">     that it fits resource requirements.</span><br></pre></td></tr></table></figure>

<h3 id="调度器基本工作逻辑"><a href="#调度器基本工作逻辑" class="headerlink" title="调度器基本工作逻辑"></a>调度器基本工作逻辑</h3><p>Scheduler会专门监控<code>API-Server</code>上Pod资源中NodeName字段是否为空，若为空就会启动调度功能。为该Pod从众多节点中挑选出一个最佳的节点。并将挑选出的节点填入<code>API-Server</code>上Pod资源的NodeName中。各节点上的kubelet会监控<code>API-Server</code>上的所有Pod，当有Pod的NodeName为自己时，kubelet会将其拉到自己的节点上运行。</p>
<p><img src="img1.jpeg"></p>
<h3 id="调度器的算法"><a href="#调度器的算法" class="headerlink" title="调度器的算法"></a>调度器的算法</h3><p>当集群中存在多个节点，究竟应该让Pod运行在哪个节点之上，这就得需要一些挑选的标准，这些挑选的标准就称为调度器的算法。</p>
<p>k8s自己提供的调度算法<code>default-schedule</code>（经典调度算法），从1.16后k8s引入了新的调度框架在1.19以后完全取代了经典调度算法。</p>
<p>取代的原调度算法是应为经典调度算法不一定适合某些场景。</p>
<h4 id="经典调度算法逻辑"><a href="#经典调度算法逻辑" class="headerlink" title="经典调度算法逻辑"></a>经典调度算法逻辑</h4><p>经典调度算法分为以下几步：</p>
<ol>
<li>kube-scheduler始终观察<code>API-Server</code>是否存在<code>pod.spec.nodeName</code>字段为空的pod。如果存在则进行调度。<ul>
<li>使用一种方式从当前所有节点中排除所有有无法运行该pod的节点，这步骤称之为预选。</li>
<li>把不符合条件的全部排除后，对符合条件的节点进行排序，使用优先级函数对各符合条件的节点进行打分，打分后进行排序，然后选择排序第一的节点，这一步骤叫做优选。</li>
<li>如果存在多个节点得分相同时，就会从各节点中随机选择一个节点，这个步骤叫选中。</li>
</ul>
</li>
<li>将选中的节点写入pod.spec.nodeName中后保存到API Server<br>经典的调度算法适合大部分的场景，但必定存在无法满足的特殊场景。这时候就需要对原有的调度器进行扩展。</li>
</ol>
<h5 id="经典调度器扩展方式"><a href="#经典调度器扩展方式" class="headerlink" title="经典调度器扩展方式"></a>经典调度器扩展方式</h5><p>经典调度器的扩展方式有两种</p>
<ol>
<li>在原有的调度器(default scheduler)之外，自己开发调度器(customed scheduler)，当调度某些特定pod时让API Server来加载自定义的调度器。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载特定Scheduler方法</span></span><br><span class="line">root@k8s-master01:/etc/kubernetes<span class="comment"># kubectl explain pod.spec.schedulerName</span></span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1</span><br><span class="line"></span><br><span class="line">FIELD:    schedulerName &lt;string&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     If specified, the pod will be dispatched by specified scheduler. If not</span><br><span class="line">     specified, the pod will be dispatched by default scheduler.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定pod调度时被哪个scheduler调度，不写表示使用默认调度算法。</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在<code>default-scheduler</code>上启用一个扩展接口，让扩展接口调度某个pod时在预选开始之前调用预选的扩展接口来调用外部预选函数一起工作。优选和选中也使用相同的逻辑进行加载，最终绑定到节点上。这种扩展的效率底下，且支持<code>predicate</code>、<code>priority</code>、<code>bind</code>三个扩展点。必须再对应扩展点种扩展。</li>
</ol>
<h4 id="新式调度框架"><a href="#新式调度框架" class="headerlink" title="新式调度框架"></a>新式调度框架</h4><p><img src="img2.jpeg"></p>
<p>k8s在v1.16上引入了一个新的调度框架，这个调度框架把整个调度流程分成了调度周期和绑定周期两个阶段。</p>
<p>其中在调度周期上分成了多个扩展点。调度周期种由调度线程专门负责，而绑定周期由绑定线程专门负责。在调度和绑定之间存在一个等待阶段。</p>
<h5 id="QueueSort"><a href="#QueueSort" class="headerlink" title="QueueSort"></a>QueueSort</h5><p>任何一个被调度的pod会存在一个pod调度队列的算法对pod等待队列进行排序。</p>
<p>pod排序可以通过以下几个字段进行排序：</p>
<ol>
<li>pod.spec.priority：定义pod优先级</li>
<li>pod.spec.priorityClassName：定义多个优先级的类别，让pod属于某个优先级类别</li>
<li>pod.spec.preemptionPolicy：优先级抢占，当调度某个pod，在当前节点上都没有资源时，可以从节点上找一个pod进行驱逐，然后让该pod运行。</li>
</ol>
<p>如果需要自定排序算法可以在QueueSort上写一个优先级排序算法。</p>
<h5 id="Scheduing-Cycle"><a href="#Scheduing-Cycle" class="headerlink" title="Scheduing Cycle"></a>Scheduing Cycle</h5><p>pod排序过后就进入的调度周期，调度周期分为预选、优选、选中。</p>
<p>预选又分为了3个步骤：</p>
<ol>
<li>PreFilter: 过滤前做一些预处理操作</li>
<li>Filter：扩展过滤算法</li>
<li>PostFilter：扩展过滤后的算法，做一些收尾或清理操作</li>
</ol>
<p>优选操作分为以下几步：</p>
<ol>
<li>PreScore：打分前操作，如可以为某个节点提高打分。</li>
<li>Normalize Score：打分操作。</li>
<li>Reserve：此步未启用</li>
<li>Permit：准入，通过PreScore、Normalize Score.</li>
</ol>
<h5 id="Binding-Cycle"><a href="#Binding-Cycle" class="headerlink" title="Binding Cycle"></a>Binding Cycle</h5><p>通过Scheduing Cycle之后进入绑定周期：</p>
<ol>
<li>preBind：在绑定之前需要做一些准备</li>
<li>Bind：进行绑定</li>
<li>PostBind：绑定后操作</li>
</ol>
<h4 id="经典调度函数和应用次序"><a href="#经典调度函数和应用次序" class="headerlink" title="经典调度函数和应用次序"></a>经典调度函数和应用次序</h4><p>这些用于节点过滤的预选函数负责根据指定判定标准及各Node对象和当前Pod对象能否适配，它们按照用于实现的主要目标大体可分为如下几类。</p>
<ol>
<li>节点存储卷数量限制检测：MaxEBSVolumeCount、MaxGCEPDVolumeCount、 MaxCSIVolumeCount、MaxAzureDiskVolumeCount和MaxCinderVolumeCount。</li>
<li>检测节点状态是否适合运行Pod：CheckNodeUnschedulable和CheckNodeLabelPresence。</li>
<li>Pod与节点的匹配度检测：Hostname、PodFitsHostPorts、MatchNodeSelector、NoDiskConflict、PodFitsResources、PodToleratesNodeTaints、PodToleratesNodeNoExecuteTaints、CheckVolumeBinding和NoVolumeZoneConflict</li>
<li>Pod间的亲和关系判定：MatchInterPodAffinity。</li>
<li>将一组Pod打散至集群或特定的拓扑结构中：CheckServiceAffinity和EvenPodsSpread。</li>
</ol>
<h5 id="预选函数"><a href="#预选函数" class="headerlink" title="预选函数"></a>预选函数</h5><p>在<code>Kubernetes Scheduler</code>上启用相应的预选函数才能实现相关调度机制的节点过滤需求，下面给出了这些于Kubernetes v1.17版本中支持的各预选函数的简要功能，其中仅ServiceAffinity和CheckNodeLabelPresence支持自定义配置，余下的均为静态函数。</p>
<ol>
<li><code>CheckNodeUnschedulable</code>：检查节点是否被标识为Unschedulable，以及是否可将Pod调度于该类节点之上。</li>
<li><code>HostName</code>：若Pod资源通过spec. nodeName明确指定了要绑定的目标节点，则节点名称与与该字段值相同的节点才会被保留。</li>
<li><code>PodFitsHostPorts</code>：若Pod容器定义了ports.hostPort属性，该预选函数负责检查其值指定的端口是否已被节点上的其他容器或服务所占用，该端口已被占用的节点将被过滤掉。</li>
<li><code>MatchNodeSelector</code>：若Pod资源规范上定义了spec.nodeSelector字段，则仅那些拥有匹配该标签选择器的标签的节点才会被保留。</li>
<li><code>NoDiskConflict</code>：检查Pod对象请求的存储卷在此节点是否可用，不存在冲突则通过检查。</li>
<li><code>PodFitsResources</code>：检查节点是否有足够资源（例如 CPU、内存和GPU等）满足Pod的运行需求；节点声明其资源可用容量，而Pod定义其资源需求（requests），于是调度器会判断节点是否有足够的可用资源运行Pod对象，无法满足则返回失败原因（例如，CPU或内存资源不足等）；调度器的评判资源消耗的标准是节点已分配资源量（各容器的requests值之和），而非其上的各Pod已用资源量，但那些在注解中标记为关键性（critical）的Pod资源则不受该预选函数控制。</li>
<li><code>PodToleratesNodeTaints</code>：检查Pod的容忍度（spec.tolerations字段）是否能够容忍该节点上的污点（taints），不过，它仅关注具有NoSchedule和NoExecute两个效用标识的污点。</li>
<li><code>PodToleratesNodeNoExecuteTaints</code>：检查Pod的容忍度是否能接纳节点上定义的NoExecute类型的污点。</li>
<li><code>CheckNodeLabelPresence</code>：检查节点上某些标签的存在性，要检查的标签以及其可否存在则取决于用户的定义；在集群中的部署节点以regions/zones/racks类标签的拓扑方式编制，且基于该类标签对相应节点进行了位置标识时，预选函数可以根据位置标识将Pod调度至此类节点之上。</li>
<li><code>CheckServiceAffinity</code>：根据调度的目标Pod对象所属的Service资源已关联的其他Pod对象的位置（所运行节点）来判断当前Pod可以运行的目标节点，其目的在于将同一Service对象的Pod放置在同一拓扑内（如同一个rack或zone）的节点上以提高效率。</li>
<li><code>MaxEBSVolumeCount</code>：检查节点上已挂载的EBS存储卷数量是否超过了设置的最大值。</li>
<li><code>MaxGCEPDVolumeCount</code>：检查节点上已挂载的GCE PD存储卷数量是否超过了设置的最大值，默认值为16。</li>
<li><code>MaxCSIVolumeCount</code>：检查节点上已挂载的CSI存储卷数量是否超过了设置的最大值。</li>
<li><code>MaxAzureDiskVolumeCount</code>：检查节点上已挂载的Azure Disk存储卷数量是否超过了设置的最大值，默认值为16。</li>
<li><code>MaxCinderVolumeCount</code>：检查节点上已挂载的Cinder存储卷数量是否超过了设置的最大值。</li>
<li><code>CheckVolumeBinding</code>：检查节点上已绑定和未绑定的PVC是否能满足Pod的存储卷需求，对于已绑定的PVC，此预选函数检查给定节点是否能兼容相应PV，而对于未绑定的PVC，预选函数搜索那些可满足PVC申请的可用PV，并确保它可与给定的节点兼容。</li>
<li><code>NoVolumeZoneConflict</code>：在给定了存储故障域的前提下，检测节点上的存储卷是否可满足Pod定义的需求。</li>
<li><code>EvenPodsSpread</code>：检查节点是否能满足Pod规范中topologySpreadConstraints字段中定义的约束以支持Pod的拓扑感知调度。</li>
<li><code>MatchInterPodAffinity</code>：检查给定节点是否能满足Pod对象的亲和性或反亲和性条件，用于实现Pod亲和性调度或反亲和性调度。</li>
</ol>
<h5 id="优选函数"><a href="#优选函数" class="headerlink" title="优选函数"></a>优选函数</h5><ol>
<li><code>LeastRequestedPriority</code>：优先将Pod打散至集群中的各节点之上，以试图让各节点有着近似的计算资源消耗比例，适用于集群规模较少变动的场景；其分值由节点空闲资源与节点总容量的比值计算而来，即由CPU或内存资源的总容量减去节点上已有Pod对象需求的容量总和，再减去当前要创建的Pod对象的需求容量得到的结果除以总容量；CPU和内存具有相同权重，资源空闲比例越高的节点得分也就越高，其计算公式如为：(cpu((capacity – sum(requested)) * 10 / capacity) + memory((capacity – sum(requested)) * 10 / capacity))/ 2。</li>
<li><code>MostRequestedPriority</code>：与优选函数LeastRequestedPriority的评估节点得分的方法相似，但二者不同的是，当前函数将给予计算资源占用比例更大的节点以更高的得分，计算公式如为：(cpu((sum(requested)) * 10 / capacity) + memory((sum(requested)) * 10 / capacity))/ 2。该函数的目标在于优先让节点以满载的方式承载Pod资源，从而能够使用更少的节点数，因而较适用于节点规模可弹性伸缩的集群中以最大化地节约节点数量。</li>
<li><code>BalancedResourceAllocation</code>：以CPU和内存资源占用率的相近程度作为评估标准，二者越接近的节点权重越高。该优选函数不能单独使用，它需要和LeastRequestedPriority组合使用来平衡优化节点资源的使用状态，选择那些在部署当前Pod资源后系统资源更为均衡的节点。</li>
<li><code>ResourceLimitsPriority</code>：以是否能够满足Pod资源限制为评估标准，那些能够满足Pod对于CPU或（和）内存资源限制的节点将计入1分，节点未声明可分配资源或Pod未定义资源限制时不影响节点计分。</li>
<li><code>RequestedToCapacityRatio</code>：该函数允许用户自定义节点各类资源（例如CPU和内存等）的权重，以便提高大型集群中稀缺资源的利用率；该函数的行为可以通过名为requestedToCapacityRatioArguments的配置选项进行控制，它由shape和resources两个参数组成。</li>
<li><code>NodeAffinityPriority</code>：节点亲和调度机制，它根据Pod资源规范中的spec.nodeSelector来对给定节点进行匹配度检查，成功匹配到的条目越多则节点得分越高。不过，其评估过程使用PreferredDuringSchedulingIgnoredDuringExecution这一表示首选亲和的标签选择器。</li>
<li><code>ImageLocalityPriority</code>：镜像亲和调度机制，它根据给定节点上是否拥有运行当前Pod对象中的容器所依赖到的镜像文件来计算该节点的得分值。那些不具有该Pod对象所依赖到的任何镜像文件的节点得分为0，而那些存在相关镜像文件的各节点中，拥有被Pod所依赖到的镜像文件的体积之和越大的节点得分就会越高。</li>
<li><code>TaintTolerationPriority</code>：基于对Pod资源对节点的污点容忍调度偏好进行其优先级评估，它将Pod对象的tolerations列表与节点的污点进行匹配度检查，成功匹配的条目越多，则节点得分越低。</li>
<li><code>SelectorSpreadPriority</code>：尽可能分散Pod至不同节点上的调度机制，它首先查找标签选择器能够匹配到当前Pod标签的ReplicationController、ReplicaSet和StatefulSet等控制器对象，而后查找可由这类对象的标签选择器匹配到的现存各Pod对象及其所在的节点，而那些运行此类Pod对象越少的节点得分越高。简单来说，如其名称所示，此优选函数尽量把同一标签选择器匹配到的Pod资源打散到不同的节点上运行。</li>
<li><code>ServiceSpreadingPriority</code>：类似于SelectorSpreadPriority，它首先查找标签选择器能够匹配到当前Pod标签的Service对象，而后查找可由这类Service对象的标签选择器匹配到的现存各Pod对象及其所在的节点，而那些运行此类Pod对象越少的节点得分越高。</li>
<li><code>EvenPodsSpreadPriority</code>：用于将一组特定的Pod对象在指定的拓扑结构上进行均衡打散，打散条件定义在Pod对象的spec.topologySpreadConstraints字段上，它内嵌labelSelector指定标签选择器以匹配符合条件的Pod对象，使用topologyKey指定目标拓扑结构，使用maxSkew描述最大允许的不均衡数量，而无法满足指定的调度条件时的评估策略则由whenUnsatisfiable字段定义，它有两个可用取值，默认值DoNotSchedule表示不予调度，而ScheduleAnyway则表示以满足最小不均衡值的标准进行调度。</li>
<li><code>EqualPriority</code>：设定所有节点具有相同的权重1。</li>
<li><code>InterPodAffinityPriority</code>：遍历Pod对象的亲和性条目，并将那些能够匹配到给定节点的条目的权重相加，结果值越大的节点得分越高。</li>
<li><code>NodePreferAvoidPodsPriority</code>：此优选级函数权限默认为10000，它根据节点是否设置了注解信息scheduler.alpha.kubernetes.io/preferAvoidPods来计算其优选级。计算方式是，给定的节点无此注解信息时，其得分为10乘以权重10000，存在此注解信息时，对于那些由ReplicationController或ReplicaSet控制器管控的Pod对象的得分为0，其他Pod对象会被忽略（得最高分）。</li>
</ol>
<h4 id="配置新式调度器"><a href="#配置新式调度器" class="headerlink" title="配置新式调度器"></a>配置新式调度器</h4><p>调度器资源定义规范</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置调度器</span></span><br><span class="line">apiVersion: kubescheduler.config.k8s.io/v1alpha2 <span class="comment"># v1alpha2版本</span></span><br><span class="line">kind: KubeSchedulerConfiguration</span><br><span class="line">AlgorithmSource:  <span class="comment"># 指定调度算法配置源，v1alpha2版本起该配置进入废弃阶段</span></span><br><span class="line">  Policy：  <span class="comment"># 基于调度策略的调度算法配置源</span></span><br><span class="line">    File: 文件格式的调度策略</span><br><span class="line">      Path &lt;string&gt;: 调度策略文件policy.cfg的位置</span><br><span class="line">    ConfigMap:   <span class="comment"># configmap格式的调度策略</span></span><br><span class="line">      Namespace &lt;string&gt;  <span class="comment"># 调度策略configmap资源隶属的名称空间</span></span><br><span class="line">      Name &lt;string&gt;  <span class="comment"># configmap资源的名称</span></span><br><span class="line">  Provider &lt;string&gt;  <span class="comment"># 配置使用的调度算法的名称，例如DefaultProvider</span></span><br><span class="line">LeaderElection: &#123;&#125;  <span class="comment"># 多kube-scheduler实例并在时使用的领导选举算法</span></span><br><span class="line">ClientConnection: &#123;&#125;  <span class="comment"># 与API Server通信时提供给代理服务器的配置信息</span></span><br><span class="line">HealthzBindAddress &lt;string&gt;  <span class="comment"># 响应健康状态检测的服务器监听的地址和端口</span></span><br><span class="line">MetricsBindAddress &lt;string&gt;  <span class="comment"># 响应指标抓取请求的服务器监听地址和端口</span></span><br><span class="line">DisablePreemption &lt;bool&gt;  <span class="comment"># 是否禁用抢占模式，false表示不禁用</span></span><br><span class="line">PercentageOfNodesToScore &lt;int32&gt;  <span class="comment"># 需要过滤出的可用节点百分比</span></span><br><span class="line">BindTimeoutSeconds  &lt;int64&gt;  <span class="comment"># 绑定操作的超时时长，必须使用非负数</span></span><br><span class="line">PodInitialBackoffSeconds  &lt;int64&gt;  <span class="comment"># 不可调度Pod的初始补偿时长，默认值为1</span></span><br><span class="line">PodMaxBackoffSeconds &lt;int64&gt;  <span class="comment"># 不可调度Pod的最大补偿时长，默认为10</span></span><br><span class="line">Profiles &lt;[]string&gt;  <span class="comment"># 加载的KubeSchedulerProfile配置列表，v1alpha2支持多个</span></span><br><span class="line">Extenders &lt;[]Extender&gt;  <span class="comment"># 加载的Extender列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调度配置（Profiles下的字段）：</span><br><span class="line">SchedulerName &lt;string&gt;    <span class="comment"># 当前Profile的名称</span></span><br><span class="line">Plugins &lt;Object&gt;           <span class="comment"># 插件配置对象</span></span><br><span class="line">  &lt;ExtendPoint&gt; &lt;Object&gt;  <span class="comment"># 配置指定的扩展点，例如QueueSort，每个扩展点按名指定</span></span><br><span class="line">    Enabled &lt;[]Plugin&gt;     <span class="comment"># 启用的插件列表</span></span><br><span class="line">    - Name &lt;string&gt;       <span class="comment"># 插件名称</span></span><br><span class="line">      Weight &lt;int32&gt;      <span class="comment"># 插件权重，仅Score扩展点支持</span></span><br><span class="line">    Disabled &lt;[]Plugin&gt;  <span class="comment"># 禁用的插件列表</span></span><br><span class="line">    - Name &lt;string&gt;  <span class="comment"># 插件名称</span></span><br><span class="line">      Weight &lt;int32&gt;  <span class="comment"># 插件权重</span></span><br><span class="line">PluginConfig &lt;[]Object&gt;  <span class="comment"># 插件特有的配置</span></span><br><span class="line">- Name &lt;string&gt;            <span class="comment"># 插件名称</span></span><br><span class="line">Args &lt;Object&gt;            <span class="comment"># 配置信息</span></span><br></pre></td></tr></table></figure>

<h4 id="新式调度器配置示例"><a href="#新式调度器配置示例" class="headerlink" title="新式调度器配置示例"></a>新式调度器配置示例</h4><h5 id="准备调度器配置"><a href="#准备调度器配置" class="headerlink" title="准备调度器配置"></a>准备调度器配置</h5><p>配置示例1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># vim kubeschedconf-v1alpha1-demo.yaml</span></span><br><span class="line">apiVersion: kubescheduler.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeSchedulerConfiguration</span><br><span class="line">bindTimeoutSeconds: 600</span><br><span class="line">algorithmSource:</span><br><span class="line">  policy:</span><br><span class="line">    file:</span><br><span class="line">      path: /etc/kubernetes/scheduler/policy.cfg</span><br><span class="line">  provider: DefaultProvider</span><br><span class="line">clientConnection:</span><br><span class="line">  kubeconfig: <span class="string">&quot;/etc/kubernetes/scheduler.conf&quot;</span></span><br><span class="line">disablePreemption: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此示例在新版本种已经被废弃</span></span><br></pre></td></tr></table></figure>

<p>配置实例2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># vim kubeschedconf-v1beta1-demo.yaml</span></span><br><span class="line">apiVersion: kubescheduler.config.k8s.io/v1beta1</span><br><span class="line">kind: KubeSchedulerConfiguration</span><br><span class="line">clientConnection:</span><br><span class="line">  kubeconfig: <span class="string">&quot;/etc/kubernetes/scheduler.conf&quot;</span>   <span class="comment"># 指明自身如何连接API Server的信息</span></span><br><span class="line">profiles:</span><br><span class="line">- schedulerName: default-scheduler			<span class="comment"># 指明存在的多个调度器，默认的default-scheduler，此为系统内建</span></span><br><span class="line">- schedulerName: demo-scheduler					<span class="comment"># 此为自己建的调度器。</span></span><br><span class="line">  plugins:															<span class="comment"># 指明要开启的插件</span></span><br><span class="line">    filter:															<span class="comment"># 在filter这个扩展点上启用或禁用插件</span></span><br><span class="line">      disabled:													<span class="comment"># 禁用NodeUnschedulable</span></span><br><span class="line">      - name: NodeUnschedulable         <span class="comment"># 让node节点标记了不可调度的，也进行调度</span></span><br><span class="line">    score:														  <span class="comment"># 在打分扩展点上启用或禁用</span></span><br><span class="line">      disabled:													</span><br><span class="line">      - name: NodeResourcesBalancedAllocation  </span><br><span class="line">        weight: 1</span><br><span class="line">      - name: NodeResourcesLeastAllocated</span><br><span class="line">        weight: 1</span><br><span class="line">      enabled:</span><br><span class="line">      - name: NodeResourcesMostAllocated</span><br><span class="line">        weight: 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># NodeResourcesBalancedAllocation和NodeResourcesLeastAllocated集合可以实现从众多节点中挑选出可用资源量最多的节点，并平均的分布在各节点上。</span></span><br><span class="line"><span class="comment"># MostAllocated是指堆叠调度，将所有的pod先堆叠在第一个Pod之上当第一个pod被填满后再启动第二各节点，这种做法一般出现在公有云上。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># weight表示权重：当节点在打分时会对该节点计算的分数*权重的值，节点得分计算公式如下：</span></span><br><span class="line"><span class="comment"># finalScoreNode = (weight1 * priorityFunc1) + (weight2 * priorityFunc2) + …</span></span><br></pre></td></tr></table></figure>

<h5 id="让调度器加载配置"><a href="#让调度器加载配置" class="headerlink" title="让调度器加载配置"></a>让调度器加载配置</h5><p>1.将配置文件放到指定目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># mkdir /etc/kubernetes/scheduler</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># cp kubeschedconf-v1beta1-demo.yaml /etc/kubernetes/scheduler</span></span><br></pre></td></tr></table></figure>

<p>2.对scheduler自身的yaml文件进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># vim /etc/kubernetes/manifests/kube-scheduler.yaml</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - <span class="built_in">command</span>:</span><br><span class="line">    - kube-scheduler</span><br><span class="line">    - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf</span><br><span class="line">    - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf</span><br><span class="line">    - --bind-address=127.0.0.1</span><br><span class="line">    - --kubeconfig=/etc/kubernetes/scheduler.conf</span><br><span class="line">    - --config=/etc/kubernetes/scheduler/kubescheduler-v1beta1-demo.yaml    <span class="comment"># 添加config选项指向配置文件粗放的目录</span></span><br><span class="line">    - --leader-elect=<span class="literal">true</span></span><br><span class="line">    - --port=0</span><br><span class="line">    - --v=5				<span class="comment"># 开启日志级别，可以查看pod的报错</span></span><br><span class="line">...中间省略...</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /etc/kubernetes/scheduler				<span class="comment"># 将配置文件存储卷挂载。</span></span><br><span class="line">      name: schedconf</span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  hostNetwork: <span class="literal">true</span></span><br><span class="line">  priorityClassName: system-node-critical</span><br><span class="line">  volumes:</span><br><span class="line">  - hostPath:</span><br><span class="line">      path: /etc/kubernetes/scheduler    <span class="comment"># 将指定目录设定为存储卷</span></span><br><span class="line">      <span class="built_in">type</span>: DirectoryOrCreate</span><br><span class="line">    name: schedconf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于是静态pod，此文件更改后会自动生效</span></span><br></pre></td></tr></table></figure>

<p>3.查看pod是否正常运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -n kube-system kube-scheduler-k8s-master01</span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-scheduler-k8s-master01   1/1     Running   3          6m55s</span><br></pre></td></tr></table></figure>

<h5 id="验证调度"><a href="#验证调度" class="headerlink" title="验证调度"></a>验证调度</h5><p>1.创建出deployment配置清单，在pod模板中指定使用的调度器名字为刚创建的demo-scheduler</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># vim deployment-demo.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deployment-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 4</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      release: stable</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        release: stable</span><br><span class="line">    spec:</span><br><span class="line">      schedulerName: demo-scheduler    <span class="comment"># 指定新创建的调度器名字</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:<span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: http</span><br></pre></td></tr></table></figure>

<p>2.创建deployment</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># VERSION=v1.0 envsubst &lt; deployment-demo.yaml | kubectl apply -f -</span></span><br><span class="line">deployment.apps/deployment-demo configured</span><br></pre></td></tr></table></figure>

<p>3.查看调度效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                                READY   STATUS              RESTARTS   AGE     IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">deployment-demo-74549bc7dd-7v4g9    1/1     Running             0          2m13s   192.168.131.8   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-74549bc7dd-99rcs    1/1     Running             0          2m17s   192.168.131.6   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-74549bc7dd-fb89p    1/1     Running             0          2m17s   192.168.131.7   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo-74549bc7dd-wkxnq    1/1     Running             0          2m12s   192.168.131.9   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo2-74549bc7dd-mbmzr   0/1     ContainerCreating   0          5s      &lt;none&gt;          k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo2-74549bc7dd-q7w8r   0/1     ContainerCreating   0          4s      &lt;none&gt;          k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo2-74549bc7dd-sq72q   0/1     ContainerCreating   0          4s      &lt;none&gt;          k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">deployment-demo2-74549bc7dd-ws492   0/1     ContainerCreating   0          4s      &lt;none&gt;          k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看出创建出的pod全被调度到一个节点之上。</span></span><br><span class="line"><span class="comment"># 调度生效了。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes调度器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s高级调度-节点亲和</title>
    <url>/2021/07/19/Kubernetes/07Kubernetes%E8%B0%83%E5%BA%A6%E5%99%A8/02k8s%E9%AB%98%E7%BA%A7%E8%B0%83%E5%BA%A6-%E8%8A%82%E7%82%B9%E4%BA%B2%E5%92%8C/k8s%E9%AB%98%E7%BA%A7%E8%B0%83%E5%BA%A6-%E8%8A%82%E7%82%B9%E4%BA%B2%E5%92%8C/</url>
    <content><![CDATA[<p>kubernetes的高级调度有以下几种：</p>
<ul>
<li>节点亲和调度</li>
<li>Pod亲和调度</li>
<li>节点污点和Pod容忍度</li>
<li>拓扑分布式调度</li>
</ul>
<h3 id="节点亲和调度"><a href="#节点亲和调度" class="headerlink" title="节点亲和调度"></a>节点亲和调度</h3><p>节点亲和的调度实现方法有以下几种：</p>
<ol>
<li><code>pod.spec.nodeName</code>：人为指定Pod运行在哪个节点之上</li>
<li><code>pod.spec.nodeSelector</code>：节点选择器</li>
<li><code>pod.spec.affinity.nodeAffinity</code>：节点亲和性。节点的亲和中还存在四种情况<ul>
<li>亲和：必须运行在该节点上</li>
<li>反亲和：老死不相往来</li>
<li>硬亲和：必须运行在该节点上。</li>
<li>软亲和：如果节点存在就运行在该节点上，如果节点不存在那就退而求其次，选择其他节点</li>
</ul>
</li>
</ol>
<p>所谓的亲和就是激活调度策略中的预选和优选函数。</p>
<h4 id="nodeName亲和"><a href="#nodeName亲和" class="headerlink" title="nodeName亲和"></a>nodeName亲和</h4><p>nodeName亲和只需要在pod模板里，pod.spec.nodeName字段内指定所要运行的节点即可。</p>
<h4 id="nodeSelector亲和"><a href="#nodeSelector亲和" class="headerlink" title="nodeSelector亲和"></a>nodeSelector亲和</h4><p>nodeSelector亲和是依靠Node节点上的标签来实现亲和，所以nodeSelector的亲和分为2步：</p>
<ol>
<li>在需要运行pod的Node上打上指定的标签，如该节点上存在ssd那就打标 disktype=ssd</li>
<li>在pod模板中pod.spec.nodeSelector字段中筛选出指定的标签，如disktype=ssd</li>
</ol>
<h4 id="nodeAffinity亲和"><a href="#nodeAffinity亲和" class="headerlink" title="nodeAffinity亲和"></a>nodeAffinity亲和</h4><p>节点亲和存在硬亲和和软亲和</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl explain pod.spec.affinity.nodeAffinity</span></span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1</span><br><span class="line"></span><br><span class="line">RESOURCE: nodeAffinity &lt;Object&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     Describes node affinity scheduling rules <span class="keyword">for</span> the pod.</span><br><span class="line"></span><br><span class="line">     Node affinity is a group of node affinity scheduling rules.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   preferredDuringSchedulingIgnoredDuringExecution      &lt;[]Object&gt;    <span class="comment"># 软亲和</span></span><br><span class="line">     The scheduler will prefer to schedule pods to nodes that satisfy the</span><br><span class="line">     affinity expressions specified by this field, but it may choose a node that</span><br><span class="line">     violates one or more of the expressions. The node that is most preferred is</span><br><span class="line">     the one with the greatest sum of weights, i.e. <span class="keyword">for</span> each node that meets all</span><br><span class="line">     of the scheduling requirements (resource request, requiredDuringScheduling</span><br><span class="line">     affinity expressions, etc.), compute a sum by iterating through the</span><br><span class="line">     elements of this field and adding <span class="string">&quot;weight&quot;</span> to the sum <span class="keyword">if</span> the node matches</span><br><span class="line">     the corresponding matchExpressions; the node(s) with the highest sum are</span><br><span class="line">     the most preferred.</span><br><span class="line"></span><br><span class="line">   requiredDuringSchedulingIgnoredDuringExecution       &lt;Object&gt;    <span class="comment"># 硬亲和</span></span><br><span class="line">     If the affinity requirements specified by this field are not met at</span><br><span class="line">     scheduling time, the pod will not be scheduled onto the node. If the</span><br><span class="line">     affinity requirements specified by this field cease to be met at some point</span><br><span class="line">     during pod execution (e.g. due to an update), the system may or may not try</span><br><span class="line">     to eventually evict the pod from its node.</span><br></pre></td></tr></table></figure>

<h3 id="节点亲和性示例"><a href="#节点亲和性示例" class="headerlink" title="节点亲和性示例"></a>节点亲和性示例</h3><h4 id="nodeSelector示例"><a href="#nodeSelector示例" class="headerlink" title="nodeSelector示例"></a>nodeSelector示例</h4><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># vim pod-with-nodeselector.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-with-nodeselector</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">  nodeSelector:</span><br><span class="line">    gpu: <span class="string">&#x27;&#x27;</span>     <span class="comment"># 要求node节点要存在gpu这个标签</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl apply -f pod-with-nodeselector.yaml</span></span><br><span class="line">pod/pod-with-nodeselector created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get pods pod-with-nodeselector -o wide</span></span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">pod-with-nodeselector   0/1     Pending   0          43s   &lt;none&gt;   &lt;none&gt;   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># pod处于pending状态，这是应为因为当前节点没有gpu=&#x27;&#x27;的节点</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get nodes --show-labels</span></span><br><span class="line">NAME           STATUS   ROLES                  AGE     VERSION   LABELS</span><br><span class="line">k8s-master01   Ready    control-plane,master   5d20h   v1.21.2   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-master01,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node-role.kubernetes.io/master=,node.kubernetes.io/exclude-from-external-load-balancers=</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;                 5d20h   v1.21.2   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node01,kubernetes.io/os=linux</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;                 5d20h   v1.21.2   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node02,kubernetes.io/os=linux</span><br><span class="line">k8s-node03     Ready    &lt;none&gt;                 5d20h   v1.21.2   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node03,kubernetes.io/os=linux</span><br></pre></td></tr></table></figure>

<p>3.为node03打上标签后再次查看pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl label node k8s-node03 gpu=&#x27;&#x27;</span></span><br><span class="line">node/k8s-node03 labeled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看可以看出pod被调度到了node03</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get pods pod-with-nodeselector -o wide</span></span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE     IP             NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">pod-with-nodeselector   1/1     Running   0          3m35s   192.168.30.4   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>可以看出nodeSelector为硬亲和。如果不符合将会被pending.</p>
<h4 id="nodeAffinity硬亲和示例"><a href="#nodeAffinity硬亲和示例" class="headerlink" title="nodeAffinity硬亲和示例"></a>nodeAffinity硬亲和示例</h4><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: node-affinity-required</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 5</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      ctlr: node-affinity-required</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        ctlr: node-affinity-required</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:v1.0</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: <span class="string">&#x27;/livez&#x27;</span></span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: <span class="string">&#x27;/readyz&#x27;</span></span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 15</span><br><span class="line">      affinity:</span><br><span class="line">        nodeAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:    <span class="comment"># 硬亲和</span></span><br><span class="line">            nodeSelectorTerms:			<span class="comment"># 节点选择器</span></span><br><span class="line">            - matchExpressions:			<span class="comment"># 匹配标签</span></span><br><span class="line">              - key: gpu						<span class="comment"># 标签键为gpu</span></span><br><span class="line">                operator: Exists    <span class="comment"># 操作符为存在</span></span><br><span class="line">              - key: node-role.kubernete.io/master   <span class="comment"># 标签键为 master</span></span><br><span class="line">                operator: DoesNotExist     <span class="comment"># 操作符为DoesNotExist</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl apply -f node-affinity-required-demo.yaml</span></span><br><span class="line">deployment.apps/node-affinity-required created</span><br></pre></td></tr></table></figure>

<p>3.查看pod运行状况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                                      READY   STATUS    RESTARTS   AGE    IP               NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">node-affinity-required-6ccb64cd6f-gc8lv   1/1     Running   1          104s   192.168.30.5     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-required-6ccb64cd6f-nxssz   1/1     Running   0          104s   192.168.30.7     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-required-6ccb64cd6f-pz9rx   1/1     Running   0          104s   192.168.30.9     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-required-6ccb64cd6f-rg2fk   1/1     Running   1          104s   192.168.30.6     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-required-6ccb64cd6f-wsfjt   1/1     Running   0          104s   192.168.30.8     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-with-nodeselector                     1/1     Running   0          59m    192.168.30.4     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>由于在nodeSelector的示例中已经对node03进行了打标，所以node03上存在gpu这个标签，所有的pod在调度时由于受到了硬亲和的影响，全被调度到了node03上。</p>
<h4 id="nodeAfinity软亲和示例"><a href="#nodeAfinity软亲和示例" class="headerlink" title="nodeAfinity软亲和示例"></a>nodeAfinity软亲和示例</h4><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># vim node-affinity-preferred-demo.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: node-affinity-preferred</span><br><span class="line">spec:</span><br><span class="line">  replicas: 5</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      ctlr: node-affinity-preferred</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: demoapp</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        ctlr: node-affinity-preferred</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:v1.0</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 1500m</span><br><span class="line">            memory: 1Gi</span><br><span class="line">      affinity:</span><br><span class="line">        nodeAffinity:</span><br><span class="line">          preferredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">          - weight: 60</span><br><span class="line">            preference:</span><br><span class="line">              matchExpressions:</span><br><span class="line">              - key: gpu</span><br><span class="line">                operator: Exists</span><br><span class="line">          - weight: 30</span><br><span class="line">            preference:</span><br><span class="line">              matchExpressions:</span><br><span class="line">              - key: region</span><br><span class="line">                operator: In</span><br><span class="line">                values: [<span class="string">&quot;foo&quot;</span>,<span class="string">&quot;bar&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl apply -f node-affinity-preferred-demo.yaml</span></span><br><span class="line">deployment.apps/node-affinity-preferred created</span><br></pre></td></tr></table></figure>

<p>3.查看pod调度结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE     IP               NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">node-affinity-preferred-7844dd55fb-7n8bq   1/1     Running   0          10s     192.168.30.12    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-preferred-7844dd55fb-khchg   1/1     Running   0          10s     192.168.30.11    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-preferred-7844dd55fb-qj5ll   1/1     Running   0          10s     192.168.96.4     k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-preferred-7844dd55fb-v8l6v   1/1     Running   0          10s     192.168.131.14   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-preferred-7844dd55fb-xn4j8   1/1     Running   0          10s     192.168.30.10    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-required-6ccb64cd6f-gc8lv    1/1     Running   1          140m    192.168.30.5     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-required-6ccb64cd6f-nxssz    1/1     Running   0          140m    192.168.30.7     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-required-6ccb64cd6f-pz9rx    1/1     Running   0          140m    192.168.30.9     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-required-6ccb64cd6f-rg2fk    1/1     Running   4          140m    192.168.30.6     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-affinity-required-6ccb64cd6f-wsfjt    1/1     Running   0          140m    192.168.30.8     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-with-nodeselector                      1/1     Running   0          3h17m   192.168.30.4     k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到大部分的node-affinity-preferred被调度到了node03上，有2个被调度到了其他节点，这是由于node03的cpu资源不足以创建出pod所致</span></span><br></pre></td></tr></table></figure>

<p>4.查看node03资源用量占用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl describe node k8s-node03 | grep -A 30 Namespace</span></span><br><span class="line">  Namespace                   Name                                        CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age</span><br><span class="line">  ---------                   ----                                        ------------  ----------  ---------------  -------------  ---</span><br><span class="line">  default                     node-affinity-preferred-7844dd55fb-7n8bq    1500m (25%)   0 (0%)      1Gi (13%)        0 (0%)         12m</span><br><span class="line">  default                     node-affinity-preferred-7844dd55fb-khchg    1500m (25%)   0 (0%)      1Gi (13%)        0 (0%)         12m</span><br><span class="line">  default                     node-affinity-preferred-7844dd55fb-xn4j8    1500m (25%)   0 (0%)      1Gi (13%)        0 (0%)         12m</span><br><span class="line">  default                     node-affinity-required-6ccb64cd6f-gc8lv     0 (0%)        0 (0%)      0 (0%)           0 (0%)         152m</span><br><span class="line">  default                     node-affinity-required-6ccb64cd6f-nxssz     0 (0%)        0 (0%)      0 (0%)           0 (0%)         152m</span><br><span class="line">  default                     node-affinity-required-6ccb64cd6f-pz9rx     0 (0%)        0 (0%)      0 (0%)           0 (0%)         152m</span><br><span class="line">  default                     node-affinity-required-6ccb64cd6f-rg2fk     0 (0%)        0 (0%)      0 (0%)           0 (0%)         152m</span><br><span class="line">  default                     node-affinity-required-6ccb64cd6f-wsfjt     0 (0%)        0 (0%)      0 (0%)           0 (0%)         152m</span><br><span class="line">  default                     pod-with-nodeselector                       0 (0%)        0 (0%)      0 (0%)           0 (0%)         3h30m</span><br><span class="line">  dev                         deployment-demo-fb544c5d8-frmr7             0 (0%)        0 (0%)      0 (0%)           0 (0%)         2d21h</span><br><span class="line">  kube-system                 calico-node-d9krp                           250m (4%)     0 (0%)      0 (0%)           0 (0%)         5d23h</span><br><span class="line">  kube-system                 kube-proxy-hvvm6                            0 (0%)        0 (0%)      0 (0%)           0 (0%)         5d23h</span><br><span class="line">Allocated resources:</span><br><span class="line">  (Total limits may be over 100 percent, i.e., overcommitted.)</span><br><span class="line">  Resource           Requests     Limits</span><br><span class="line">  --------           --------     ------</span><br><span class="line">  cpu                4750m (79%)  0 (0%)</span><br><span class="line">  memory             3Gi (39%)    0 (0%)</span><br><span class="line">  ephemeral-storage  0 (0%)       0 (0%)</span><br><span class="line">  hugepages-1Gi      0 (0%)       0 (0%)</span><br><span class="line">  hugepages-2Mi      0 (0%)       0 (0%)</span><br><span class="line">Events:              &lt;none&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes调度器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Job</title>
    <url>/2021/07/08/Kubernetes/04Kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8/06Job/Job/</url>
    <content><![CDATA[<p>ReplicaSet，Deployment和DaemonSet这些控制器都是负责始终运行在后台接受客户端请求并响应的服务进程，而有些进程如备份任务、一次性的计算批处理任务，通常需要使用Job控制器来负责管理。</p>
<h3 id="Job的执行流程"><a href="#Job的执行流程" class="headerlink" title="Job的执行流程"></a>Job的执行流程</h3><p>Job可以分为单队列多次执行和多队列并行执行。Job中的Pod运行完毕后会complated，其不会被重新启动起来。</p>
<h3 id="Job资源定义规范"><a href="#Job资源定义规范" class="headerlink" title="Job资源定义规范"></a>Job资源定义规范</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: batch/v1  <span class="comment"># API群组及版本</span></span><br><span class="line">kind: Job  <span class="comment"># 资源类型特有标识</span></span><br><span class="line">metadata:</span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 资源名称，在作用域中要唯一</span></span><br><span class="line">  namespace &lt;string&gt;  <span class="comment"># 名称空间；Job资源隶属名称空间级别</span></span><br><span class="line">spec:</span><br><span class="line">  selector &lt;object&gt; <span class="comment"># 标签选择器，必须匹配template字段中Pod模板中的标签</span></span><br><span class="line">  template &lt;object&gt;  <span class="comment"># Pod模板对象</span></span><br><span class="line">  completions &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 期望的成功完成的作业次数，成功运行结束的Pod数量</span></span><br><span class="line">  ttlSecondsAfterFinished  &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 终止状态作业的生存时长，超期将被删除</span></span><br><span class="line">  parallelism  &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 作业的最大并行度，默认为1</span></span><br><span class="line">  backoffLimit &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 将作业标记为Failed之前的重试次数，默认为6</span></span><br><span class="line">  activeDeadlineSeconds  &lt;<span class="built_in">integer</span>&gt; <span class="comment"># 作业启动后可处于活动状态的时长</span></span><br></pre></td></tr></table></figure>

<h3 id="Job单队列示例"><a href="#Job单队列示例" class="headerlink" title="Job单队列示例"></a>Job单队列示例</h3><p>1.编写资源清单文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim job-demo.yaml</span></span><br><span class="line">apiVersion: batch/v1</span><br><span class="line">kind: Job</span><br><span class="line">metadata:</span><br><span class="line">  name: job-demo</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: myjob</span><br><span class="line">        image: alpine:3.11</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;sleep 60&quot;</span>]</span><br><span class="line">      restartPolicy: Never</span><br><span class="line">  completions: 2                <span class="comment"># 任务运行两次</span></span><br><span class="line">  ttlSecondsAfterFinished: 3600    <span class="comment"># 任务完成后3600将pod删除</span></span><br><span class="line">  backoffLimit: 3</span><br><span class="line">  activeDeadlineSeconds: 300</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl apply -f job-demo.yaml</span></span><br><span class="line">job.batch/job-demo created</span><br></pre></td></tr></table></figure>

<p>3.对job进行watch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl get pods -w</span></span><br><span class="line">NAME                                             READY   STATUS      RESTARTS   AGE</span><br><span class="line">job-demo-fh6qr                                   1/1     Running     0          5s</span><br><span class="line">job-demo-fh6qr                                   0/1     Completed   0          63s</span><br><span class="line">job-demo-wm5b8                                   0/1     Pending     0          0s</span><br><span class="line">job-demo-wm5b8                                   0/1     Pending     0          0s</span><br><span class="line">job-demo-wm5b8                                   0/1     ContainerCreating   0          0s</span><br><span class="line">job-demo-wm5b8                                   1/1     Running             0          3s</span><br><span class="line">job-demo-wm5b8                                   0/1     Completed           0          64s</span><br></pre></td></tr></table></figure>

<p>可以看到job的pod被启动了2次。</p>
<h3 id="Job多对队列示例"><a href="#Job多对队列示例" class="headerlink" title="Job多对队列示例"></a>Job多对队列示例</h3><p>1.编写资源清单文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim job-para-demo.yaml</span></span><br><span class="line">apiVersion: batch/v1</span><br><span class="line">kind: Job</span><br><span class="line">metadata:</span><br><span class="line">  name: job-para-demo</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: myjob</span><br><span class="line">        image: alpine:3.11</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;sleep 60&quot;</span>]</span><br><span class="line">      restartPolicy: Never</span><br><span class="line">  completions: 12</span><br><span class="line">  parallelism: 2</span><br><span class="line">  ttlSecondsAfterFinished: 3600</span><br><span class="line">  backoffLimit: 3</span><br><span class="line">  activeDeadlineSeconds: 1200</span><br></pre></td></tr></table></figure>

<p>2.应用配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># kubectl apply -f job-para-demo.yaml &amp;&amp; kubectl get pods -w</span></span><br><span class="line">job.batch/job-para-demo created</span><br><span class="line">job-para-demo-8p7r8                              0/1     ContainerCreating   0          0s</span><br><span class="line">job-para-demo-mxvj5                              0/1     ContainerCreating   0          0s</span><br><span class="line">job-para-demo-8p7r8                              1/1     Running             0          5s</span><br><span class="line">job-para-demo-mxvj5                              1/1     Running             0          5s</span><br><span class="line">job-para-demo-8p7r8                              0/1     Completed           0          65s</span><br><span class="line">job-para-demo-4l9hc                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-mxvj5                              0/1     Completed           0          65s</span><br><span class="line">job-para-demo-4l9hc                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-4l9hc                              0/1     ContainerCreating   0          0s</span><br><span class="line">job-para-demo-mf9wv                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-mf9wv                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-mf9wv                              0/1     ContainerCreating   0          0s</span><br><span class="line">job-para-demo-mf9wv                              1/1     Running             0          4s</span><br><span class="line">job-para-demo-4l9hc                              1/1     Running             0          4s</span><br><span class="line">job-para-demo-mf9wv                              0/1     Completed           0          63s</span><br><span class="line">job-para-demo-mx7xq                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-mx7xq                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-mx7xq                              0/1     ContainerCreating   0          1s</span><br><span class="line">job-para-demo-4l9hc                              0/1     Completed           0          64s</span><br><span class="line">job-para-demo-6pbzm                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-6pbzm                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-6pbzm                              0/1     ContainerCreating   0          1s</span><br><span class="line">job-para-demo-mx7xq                              1/1     Running             0          4s</span><br><span class="line">job-para-demo-6pbzm                              1/1     Running             0          4s</span><br><span class="line">job-para-demo-mx7xq                              0/1     Completed           0          64s</span><br><span class="line">job-para-demo-nvxwq                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-nvxwq                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-nvxwq                              0/1     ContainerCreating   0          0s</span><br><span class="line">job-para-demo-6pbzm                              0/1     Completed           0          65s</span><br><span class="line">job-para-demo-ld4hk                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-ld4hk                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-ld4hk                              0/1     ContainerCreating   0          0s</span><br><span class="line">job-para-demo-nvxwq                              1/1     Running             0          4s</span><br><span class="line">job-para-demo-ld4hk                              1/1     Running             0          3s</span><br><span class="line">job-para-demo-nvxwq                              0/1     Completed           0          64s</span><br><span class="line">job-para-demo-zkmt7                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-zkmt7                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-zkmt7                              0/1     ContainerCreating   0          0s</span><br><span class="line">job-para-demo-ld4hk                              0/1     Completed           0          64s</span><br><span class="line">job-para-demo-hzlr8                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-hzlr8                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-hzlr8                              0/1     ContainerCreating   0          0s</span><br><span class="line">job-para-demo-zkmt7                              1/1     Running             0          5s</span><br><span class="line">job-para-demo-hzlr8                              1/1     Running             0          3s</span><br><span class="line">job-para-demo-zkmt7                              0/1     Completed           0          65s</span><br><span class="line">job-para-demo-nq9zj                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-nq9zj                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-nq9zj                              0/1     ContainerCreating   0          0s</span><br><span class="line">job-para-demo-hzlr8                              0/1     Completed           0          64s</span><br><span class="line">job-para-demo-dg9nx                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-dg9nx                              0/1     Pending             0          0s</span><br><span class="line">job-para-demo-dg9nx                              0/1     ContainerCreating   0          1s</span><br><span class="line">job-para-demo-nq9zj                              1/1     Running             0          4s</span><br><span class="line">job-para-demo-dg9nx                              1/1     Running             0          4s</span><br><span class="line">job-para-demo-nq9zj                              0/1     Completed           0          64s</span><br><span class="line">job-para-demo-dg9nx                              0/1     Completed           0          65s</span><br></pre></td></tr></table></figure>

<p>并行起了2个pod，每个线程上的pod运行了6次，一共12次</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes控制器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s高级调度-Pod亲和</title>
    <url>/2021/07/19/Kubernetes/07Kubernetes%E8%B0%83%E5%BA%A6%E5%99%A8/03k8s%E9%AB%98%E7%BA%A7%E8%B0%83%E5%BA%A6-Pod%E4%BA%B2%E5%92%8C/k8s%E9%AB%98%E7%BA%A7%E8%B0%83%E5%BA%A6-Pod%E4%BA%B2%E5%92%8C/</url>
    <content><![CDATA[<p>Pod亲和调度与节点亲和很相像，所谓节点亲和是用来怕判定pod对节点的倾向性的。</p>
<p>Pod亲和就是Pod彼此之间运行于同一位置的倾向性；如果两个pod之间是亲和的那就意味着两个pod运行在同一位置的倾向性。</p>
<p>所谓同一位置可以是同一节点、同一机架、同一排机架(row)，同一个机房间(room)，同一IDC。</p>
<p>反亲和能实现节点级、机架级、甚至机房级别的冗余。</p>
<p>亲和能实现的是同一机架内的pod间通信速度能更快。</p>
<h3 id="k8s中位置的定义"><a href="#k8s中位置的定义" class="headerlink" title="k8s中位置的定义"></a>k8s中位置的定义</h3><p>在k8s上定义位置就是在节点上选定一个节点标签或拓扑标签，作为位置判定逻辑时，具有同一标签值的就是同一位置，具有不同标签值的就是不同位置。</p>
<p><img src="img1.png"></p>
<p>上图中以hostname为位置标签，那就表示以节点来区分位置</p>
<p><img src="img2.png"></p>
<p>上图以domain，区域作为标签，那么就以区域来区分位置。如果pod-a和pod-b是亲和的那么他们将分布在同一区域内，如果反亲和，那么他们将会被分布在不同的区域内。</p>
<h3 id="Pod的亲和"><a href="#Pod的亲和" class="headerlink" title="Pod的亲和"></a>Pod的亲和</h3><p>pod间也存在硬亲和和软亲和的关系，硬亲和则表示两个pod必须运行在同一个位置，而软亲和则是尽量满足运行在同一位置。</p>
<h4 id="Pod亲和定义"><a href="#Pod亲和定义" class="headerlink" title="Pod亲和定义"></a>Pod亲和定义</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  affinity:</span><br><span class="line">    podAffinity:</span><br><span class="line">    preferredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">    - podAffinityTerm</span><br><span class="line">      weight</span><br><span class="line">    requiredDuringSchedulingIgnoredDuringExecution:  <span class="comment"># 硬亲和</span></span><br><span class="line">    - labelSelector:					<span class="comment"># 标签选择器，选择参照系此处为pod标签</span></span><br><span class="line">      namespaceSelector:      <span class="comment"># 名称空间选择器，和namespace二选一</span></span><br><span class="line">      namsepace:							<span class="comment"># 表示参照哪一个名称空间内的pod标签</span></span><br><span class="line">      topologyKey:            <span class="comment"># 拓扑标签，表示将哪个标签作为位置定义机制的。</span></span><br></pre></td></tr></table></figure>

<h5 id="pod硬亲和示例"><a href="#pod硬亲和示例" class="headerlink" title="pod硬亲和示例"></a>pod硬亲和示例</h5><p>1.编写资源清单示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># vim pod-affinity-required-demo.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: redis</span><br><span class="line">      ctlr: redis</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">        ctlr: redis</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: redis</span><br><span class="line">        image: redis:6.0-alpine</span><br><span class="line">---																<span class="comment"># 以上pod为基准。</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-affinity-required</span><br><span class="line">spec:</span><br><span class="line">  replicas: 5</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      ctlr: pod-affinity-required</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        ctlr: pod-affinity-required</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:v1.0</span><br><span class="line">      affinity:</span><br><span class="line">        podAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:      <span class="comment"># 定义pod的硬亲和关系</span></span><br><span class="line">          - labelSelector:</span><br><span class="line">              matchExpressions:                               <span class="comment"># 使用匹配表达式来匹配上面的基准pod</span></span><br><span class="line">              - &#123;key: app, operator: In, values: [<span class="string">&quot;redis&quot;</span>]&#125;</span><br><span class="line">              - &#123;key: ctlr, operator: In, values: [<span class="string">&quot;redis&quot;</span>]&#125;</span><br><span class="line">            topologyKey: rack                                 <span class="comment"># 设置节点标签</span></span><br></pre></td></tr></table></figure>

<p>2.对个节点打标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl label node k8s-node01 rack=foo</span></span><br><span class="line">node/k8s-node01 labeled</span><br><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl label node k8s-node02 rack=bar</span></span><br><span class="line">node/k8s-node02 labeled</span><br><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl label node k8s-node03 rack=baz</span></span><br><span class="line">node/k8s-node03 labeled</span><br></pre></td></tr></table></figure>

<p>3.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl apply -f pod-affinity-required-demo.yaml</span></span><br><span class="line">deployment.apps/redis created</span><br><span class="line">deployment.apps/pod-affinity-required created</span><br></pre></td></tr></table></figure>

<p>4.查看pod运行状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE   IP               NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">pod-affinity-required-776d6948f9-5r827     1/1     Running   0          9s    192.168.96.25    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-affinity-required-776d6948f9-mthcc     1/1     Running   0          14s   192.168.96.24    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-affinity-required-776d6948f9-q6fzq     1/1     Running   0          14s   192.168.96.22    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-affinity-required-776d6948f9-rhs6h     1/1     Running   0          8s    192.168.96.26    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-affinity-required-776d6948f9-s4pmd     1/1     Running   0          14s   192.168.96.23    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-55f46d9795-zsqp9                     1/1     Running   0          28m   192.168.96.11    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看出所有的pod都运行在和reids相同的节点上。</span></span><br></pre></td></tr></table></figure>

<h5 id="pod软亲和示例"><a href="#pod软亲和示例" class="headerlink" title="pod软亲和示例"></a>pod软亲和示例</h5><p>1.编辑资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-preferred</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: redis</span><br><span class="line">      ctlr: redis-preferred</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">        ctlr: redis-preferred</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: redis</span><br><span class="line">        image: redis:6.0-alpine</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 512Mi</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-affinity-preferred</span><br><span class="line">spec:</span><br><span class="line">  replicas: 4</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      ctlr: pod-affinity-preferred</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        ctlr: pod-affinity-preferred</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:v1.0</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 1500m</span><br><span class="line">            memory: 1Gi</span><br><span class="line">      affinity:</span><br><span class="line">        podAffinity:</span><br><span class="line">          preferredDuringSchedulingIgnoredDuringExecution:   <span class="comment"># 软亲和</span></span><br><span class="line">          - weight: 100																		<span class="comment"># 权重100</span></span><br><span class="line">            podAffinityTerm:          <span class="comment"># pod亲和条目</span></span><br><span class="line">              labelSelector:          <span class="comment"># 标签选择器</span></span><br><span class="line">                matchExpressions:</span><br><span class="line">                - &#123;key: app, operator: In, values: [<span class="string">&quot;redis&quot;</span>]&#125;</span><br><span class="line">                - &#123;key: ctlr, operator: In, values: [<span class="string">&quot;redis-preferred&quot;</span>]&#125;</span><br><span class="line">              topologyKey: kubernetes.io/hostname</span><br><span class="line">          - weight: 50                        <span class="comment"># 权重50</span></span><br><span class="line">            podAffinityTerm:</span><br><span class="line">              labelSelector:</span><br><span class="line">                matchExpressions:</span><br><span class="line">                - &#123;key: app, operator: In, values: [<span class="string">&quot;redis&quot;</span>]&#125;</span><br><span class="line">                - &#123;key: ctlr, operator: In, values: [<span class="string">&quot;redis-preferred&quot;</span>]&#125;</span><br><span class="line">              topologyKey: rack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处软亲和有2个选择</span></span><br><span class="line"><span class="comment"># 1.运行在和基准pod同一个节点之上</span></span><br><span class="line"><span class="comment"># 2.若无法运行在和基准pod同一节点之上时，运行在有rack标签的节点之上</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl apply -f pod-affinity-preferred-demo.yaml</span></span><br><span class="line">deployment.apps/redis-preferred created</span><br><span class="line">deployment.apps/pod-affinity-preferred created</span><br></pre></td></tr></table></figure>

<p>3.查看pod调度结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                                      READY   STATUS    RESTARTS   AGE    IP               NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">pod-affinity-preferred-5dcfdf44c5-9jlkl   1/1     Running   0          101s   192.168.30.13    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-affinity-preferred-5dcfdf44c5-jwqf2   1/1     Running   0          101s   192.168.131.15   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-affinity-preferred-5dcfdf44c5-k42xh   1/1     Running   0          101s   192.168.96.27    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-affinity-preferred-5dcfdf44c5-lcbwz   1/1     Running   0          101s   192.168.96.28    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-preferred-56c75b8669-98q6j          1/1     Running   0          17s    192.168.96.29    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看出redis运行在node02之上，大多数的pod也被运行在了node02之上。</span></span><br><span class="line"><span class="comment"># 当node02上节点资源不足时，pod被调度到了拥有rack标签的其他节点之上了。</span></span><br></pre></td></tr></table></figure>

<h5 id="pod反亲和示例"><a href="#pod反亲和示例" class="headerlink" title="pod反亲和示例"></a>pod反亲和示例</h5><p>1.编辑资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># vim pod-antiaffinity-required-demo.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: pod-antiaffinity-required</span><br><span class="line">spec:</span><br><span class="line">  replicas: 4</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      ctlr: pod-antiaffinity-required</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        ctlr: pod-antiaffinity-required</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:v1.0</span><br><span class="line">      affinity:</span><br><span class="line">        podAntiAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:    <span class="comment"># 强制反亲和</span></span><br><span class="line">          - labelSelector:</span><br><span class="line">              matchExpressions:</span><br><span class="line">              - &#123;key: app, operator: In, values: [<span class="string">&quot;demoapp&quot;</span>]&#125;      <span class="comment"># 此处两个label表示pod自身</span></span><br><span class="line">              - &#123;key: ctrl, operator: In, values: [<span class="string">&quot;pod-antiaffinity-required&quot;</span>]&#125;</span><br><span class="line">            topologyKey: kubernetes.io/hostname   <span class="comment"># 以节点名称为区域划分</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl apply -f pod-antiaffinity-required-demo.yaml</span></span><br><span class="line">deployment.apps/pod-antiaffinity-required created</span><br></pre></td></tr></table></figure>

<p>3.查看pod调度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE    IP               NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">pod-antiaffinity-required-645c87f57d-8jwsl   1/1     Running   0          17s    192.168.30.19    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-antiaffinity-required-645c87f57d-ncmct   1/1     Running   0          17s    192.168.131.21   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-antiaffinity-required-645c87f57d-njnjg   0/1     Pending   0          17s    &lt;none&gt;           &lt;none&gt;       &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod-antiaffinity-required-645c87f57d-q4jxq   1/1     Running   0          17s    192.168.96.32    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当亲有3个节点，第四个pod由于无法满足条件被挂起。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes调度器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s高级调度-节点污点和Pod容忍度</title>
    <url>/2021/07/19/Kubernetes/07Kubernetes%E8%B0%83%E5%BA%A6%E5%99%A8/05k8s%E9%AB%98%E7%BA%A7%E8%B0%83%E5%BA%A6-%E6%8B%93%E6%89%91%E5%88%86%E5%B8%83%E5%BC%8F%E8%B0%83%E5%BA%A6/k8s%E9%AB%98%E7%BA%A7%E8%B0%83%E5%BA%A6-%E6%8B%93%E6%89%91%E5%88%86%E5%B8%83%E5%BC%8F%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<p>更具指定的<code>topologyKey</code>可以将节点划分到拓扑结构中去，这种拓扑结构可以实现pod间的亲和和反亲和的关键所在，但是pod的亲和调度仅能将相关的pod分发到相关的单个拓扑中。并且其无法做到均匀的将pod分散到其他拓扑中。</p>
<p>如果我们要将某组pod均匀分布到多个不同的拓扑中去运行，那么我们需要让其去识别多个不同的位置。而拓扑分布式调度不经能实现将pod分散到不同的pod中去还能均匀的让其分布到所有的拓扑中去。</p>
<h3 id="拓扑分布式调度资源定义规范"><a href="#拓扑分布式调度资源定义规范" class="headerlink" title="拓扑分布式调度资源定义规范"></a>拓扑分布式调度资源定义规范</h3><p>Pod资源规范中的拓扑分布约束嵌套定义在<code>.spec.topologySpreadConstraints</code>字`段中，它用来指示调度器如何根据集群中现有的Pod放置待调度的该Pod规范的实例。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">topologyKey &lt;string&gt;：拓扑键，用来划分拓扑结构的节点标签，在指定的键上具有相同值的节点归属为同一拓扑；必选字段。</span><br><span class="line">labelSelector &lt;Object&gt;：Pod标签选择器，用于定义该Pod需要针对哪类Pod对象的位置来确定自身可放置的位置。</span><br><span class="line">maxSkew &lt;<span class="built_in">integer</span>&gt;：允许Pod分布不均匀的最大程度，也就是可接受的当前拓扑中由labelSelector匹配到的Pod数量与所有拓扑中匹配到的最少Pod数量的最大差值，可简单用公式表示为max(count(current_topo(matched_pods))-min(topo(matched_pods)))，其中的topo是表示拓扑关系伪函数名称。</span><br><span class="line">whenUnsatisfiable &lt;string&gt;：拓扑无法满足maxSkew时采取的调度策略，默认值DoNotSchedule是一种强制约束，即不予调度至该区域，而另一可用值ScheduleAnyway则是柔性约束，无法满足约束关系时仍可将Pod放入该拓扑中。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes调度器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s高级调度-节点污点和Pod容忍度</title>
    <url>/2021/07/19/Kubernetes/07Kubernetes%E8%B0%83%E5%BA%A6%E5%99%A8/04k8s%E9%AB%98%E7%BA%A7%E8%B0%83%E5%BA%A6-%E8%8A%82%E7%82%B9%E6%B1%A1%E7%82%B9%E5%92%8CPod%E5%AE%B9%E5%BF%8D%E5%BA%A6/k8s%E9%AB%98%E7%BA%A7%E8%B0%83%E5%BA%A6-%E8%8A%82%E7%82%B9%E6%B1%A1%E7%82%B9%E5%92%8CPod%E5%AE%B9%E5%BF%8D%E5%BA%A6/</url>
    <content><![CDATA[<p>无论是节点选择器，节点亲和或pod亲和都是让pod来选择节点的，节点只能被动等待。<br>而节点污点和Pod容忍度，则是用来让节点拒绝被调度，除非pod能够容忍节点上所拥有的污点。</p>
<p>污点是节点级的属性，我们可以在节点上设定一组特殊的影响调度的属性，这种属性叫做污点。</p>
<p>一旦节点上有污点，pod将无法调度到此节点之上。除非他能容忍这些污点。如果一个pod容忍了这些污点，从而使的pod被调度到此节点上，此节点还能再次修改容忍度，使的被调度到该节点上的pod的容忍度无法被满足从而起到驱离pod的效果。</p>
<p>这些效果需要在节点上添加一个效用标识（effect）来达成。</p>
<h3 id="污点和容忍度关系"><a href="#污点和容忍度关系" class="headerlink" title="污点和容忍度关系"></a>污点和容忍度关系</h3><p><img src="img1.png"></p>
<p>对于Pod-A来说能够容忍有螃蟹和小强标记的污点，那么其能够调度到node01和node03之上</p>
<p>对于Pod-B来说，其没有容忍度，那么其只能调度到node03上。</p>
<h4 id="k8s主节点上的污点"><a href="#k8s主节点上的污点" class="headerlink" title="k8s主节点上的污点"></a>k8s主节点上的污点</h4><p>k8s的主节点在部署完毕后就自动带有污点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe node k8s-master01  | grep Taints</span></span><br><span class="line">Taints:             node-role.kubernetes.io/master:NoSchedule</span><br><span class="line"><span class="comment">#                    污点名称：污点名称对用的值(可以为空，此处值为空)：效用标识</span></span><br></pre></td></tr></table></figure>

<p>这么做是为防止应用容器被调度到主机点之上，因为在主节点之上存在API Server、ControllerManager、kube-Scheduler，本身master节点上的系统压力就比较大。如果将应用pod调度到节点之上会导致主节点会不堪重负。</p>
<h4 id="效用标识"><a href="#效用标识" class="headerlink" title="效用标识"></a>效用标识</h4><p>效用标识主要由以下3种类型：</p>
<ul>
<li>NoSchedule：不能容忍此污点的Pod对象不可调度至当前节点，属于强制型约束关系，但添加污点对节点上现存的Pod对象不产生影响。</li>
<li>PreferNoSchedule：NoSchedule的柔性约束版本，即调度器尽量确保不会将那些不能容忍此污点的Pod对象调度至当前节点，除非不存在其他任何能够容忍此污点的节点可用；添加该类效用的污点同样对节点上现存的Pod对象不产生影响。</li>
<li>NoExecute：不能容忍此污点的新Pod对象不可调度至当前节点，属于强制型约束关系，而且节点上现存的Pod对象因节点污点变动或Pod容忍度变动而不再满足匹配条件时，Pod对象将会被驱逐。</li>
</ul>
<h4 id="效用标识匹配"><a href="#效用标识匹配" class="headerlink" title="效用标识匹配"></a>效用标识匹配</h4><p>在Pod对象上定义容忍度时，它支持两种操作符，一种是等值比较，表示容忍度与污点必须在key、value和effect三者之上完全匹配，另一种是存在性判断（Exists），表示二者的key和effect必须完全匹配，而容忍度中的value字段要使用空值。</p>
<p>一个节点可以配置使用多个污点，而一个Pod对象也可以有多个容忍度，将一个Pod对象的容忍度套用到特定节点的污点之上进行匹配度检测时，时将遵循如下逻辑：</p>
<ol>
<li>首先处理每个有着与之匹配的容忍度的污点；</li>
<li>对于不能匹配到容忍度的所有污点，若存在一个污点使用了NoSchedule或NoExecute效用标识，则拒绝调度当前Pod至该节点；</li>
<li>对于不能匹配到容忍度的所有污点，若都不具有NoSchedule效用标识，但至少有一个污点使用了PreferNoScheduler效用标准，则调度器会尽量避免将当前Pod对象调度至该节点。</li>
<li>如果至少有一个不能匹配容忍度的污点使用了NoExecute效用标识，节点将立即驱逐当前Pod对象，或者不允许该Pod调度至给定的节点；而且，即便容忍度可以匹配到使用了NoExecute效用标识的污点，若在Pod上定义容忍度时同时使用tolerationSeconds属性定义了容忍时限，则在超出时限后当前脚Pod也将会被节点所驱逐。</li>
</ol>
<h4 id="Pod容忍度资源配置"><a href="#Pod容忍度资源配置" class="headerlink" title="Pod容忍度资源配置"></a>Pod容忍度资源配置</h4><p>pod容忍度配置规范如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  tolerations:</span><br><span class="line">    effect:          <span class="comment"># 效用标识</span></span><br><span class="line">    key:						 <span class="comment"># 容忍度的键，容忍哪些污点</span></span><br><span class="line">    operator:				 <span class="comment"># 容忍哪些污点键上对应的值</span></span><br><span class="line">    tolerationSeconds:   <span class="comment"># 对于NoExecute而言能够容忍多长时间。</span></span><br><span class="line">    value:           <span class="comment"># 污点容忍度对应的键的值。</span></span><br></pre></td></tr></table></figure>

<h5 id="pod容忍度示例"><a href="#pod容忍度示例" class="headerlink" title="pod容忍度示例"></a>pod容忍度示例</h5><p>1.编辑资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># vim daemonset-demo.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: daemonset-demo</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">    component: node-exporter</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus</span><br><span class="line">      component: node-exporter</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: prometheus-node-exporter</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus</span><br><span class="line">        component: node-exporter</span><br><span class="line">    spec:</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: node-role.kubernetes.io/master   <span class="comment"># master上污点的键</span></span><br><span class="line">        effect: NoSchedule										<span class="comment"># master上的效用标识</span></span><br><span class="line">        operator: Exists										<span class="comment"># 由于master上的键没有值，所以此处只需要做存在性判断。并且无需定义value</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: promethous-node-exporter</span><br><span class="line">        image: prom/node-exporter:v0.18.0</span><br><span class="line">        ports:</span><br><span class="line">        - name: prom-node-exp</span><br><span class="line">          containerPort: 9100</span><br><span class="line">          hostPort: 9100</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      hostPID: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl apply -f daemonset-demo.yaml</span></span><br><span class="line">daemonset.apps/daemonset-demo created</span><br></pre></td></tr></table></figure>

<p>3.查看pod调度情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE     IP               NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">daemonset-demo-fr4zl                         1/1     Running   0          3m54s   172.16.11.82     k8s-node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">daemonset-demo-gz9hj                         1/1     Running   0          3m54s   172.16.11.83     k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">daemonset-demo-r9gs5                         1/1     Running   0          3m54s   172.16.11.81     k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">daemonset-demo-vjn42                         1/1     Running   0          3m54s   172.16.11.71     k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># pod被调度到了主机点上</span></span><br></pre></td></tr></table></figure>

<h3 id="节点标记污点"><a href="#节点标记污点" class="headerlink" title="节点标记污点"></a>节点标记污点</h3><p>节点标记污点只需使用kubctl taint即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 详细方法使用help查询</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl taint --help</span></span><br></pre></td></tr></table></figure>

<h4 id="污点标记示例"><a href="#污点标记示例" class="headerlink" title="污点标记示例"></a>污点标记示例</h4><p>给node03添加污点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl taint node k8s-node03 diskfull=true:NoExecute</span></span><br><span class="line">node/k8s-node03 tainted</span><br></pre></td></tr></table></figure>

<p>查看node03详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl describe node k8s-node03 | grep &quot;Taints&quot;</span></span><br><span class="line">Taints:             diskfull=<span class="literal">true</span>:NoExecute</span><br></pre></td></tr></table></figure>

<p>查看pod信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter11<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE    IP               NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">daemonset-demo-fr4zl                         1/1     Running   0          14m    172.16.11.82     k8s-node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">daemonset-demo-r9gs5                         1/1     Running   0          14m    172.16.11.81     k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">daemonset-demo-vjn42                         1/1     Running   0          14m    172.16.11.71     k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现此前运行在node03上的daemonset被驱离了。因为其无法容忍node03上的污点。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes调度器</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Ingress-nginx部署</title>
    <url>/2021/07/20/Kubernetes/08Ingress/02Ingress-nginx%E9%83%A8%E7%BD%B2/Ingress-nginx%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>官方部署文档：<br><a href="https://github.com/kubernetes/ingress-nginx/blob/main/docs/deploy/index.md">https://github.com/kubernetes/ingress-nginx/blob/main/docs/deploy/index.md</a></p>
<p>官方文档内提供了各种环境下的安装方式，由于当前使用的为虚拟机，所以使用bare-matel（裸机）的部署方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.48.1/deploy/static/provider/baremetal/deploy.yaml</span><br></pre></td></tr></table></figure>

<p>需要注意的是，此配置清单中的镜像在k8s.gcr.io无法访问，此处两种做法：</p>
<ol>
<li>预先下载好镜像和deploy.yaml文件，修改yaml文件中的镜像地址。</li>
<li>翻墙下载。</li>
</ol>
<p>此处使用配置代理进行翻墙</p>
<h3 id="Docker配置代理接口"><a href="#Docker配置代理接口" class="headerlink" title="Docker配置代理接口"></a>Docker配置代理接口</h3><p>1.修改Docker，systemd文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># vim /usr/lib/systemd/system/docker.service</span></span><br><span class="line"></span><br><span class="line">[Service]    <span class="comment"># service段中配置以下</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://172.16.22.104:10809&quot;</span>   <span class="comment"># 此为网络中可以翻墙的代理服务器地址端口</span></span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://172.16.22.104:10809&quot;</span>    <span class="comment"># 此为网络中可以翻墙的代理服务器地址端口</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=127.0.0.1/8,172.16.11.0/24&quot;</span>    <span class="comment"># 此为网络中无需进行代理的地址段。</span></span><br></pre></td></tr></table></figure>

<p>2.修改完毕后重读守护进程配置，重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>以上操作所有节点都需要操作，因为无法知晓pod会被调度到哪个节点。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>Ingress</category>
        <category>Ingress-nginx</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Ingress</title>
    <url>/2021/07/20/Kubernetes/08Ingress/01Ingress%E6%A6%82%E5%BF%B5/Ingress%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>Ingress可以认为在k8s集群边缘统一打了一个洞，而后用户的请求在进入集群时统一从这个名为Ingress的洞口流入进来。</p>
<p>通过Ingress进入集群的流量如何将其发放到各自不同的后端服务上去？有以下几种方式：</p>
<ol>
<li>基于不同虚拟主机来进行路由，将不同的服务发送到不同的pod上去。</li>
<li>基于同一个虚拟主机来路由，将后端的每一个服务映射为一个路径。</li>
</ol>
<p>Ingress: k8s上的标准资源。</p>
<p>Ingress Controller: Ingress控制器。兼具http/tcp代理服务，如Nginx,HAProxy,Envoy。</p>
<p>Ingress是一个配置文件的片段可以存在多个，Ingress Controlle可以存在多个，但是启用的只有一个。</p>
<p>所以如果有服务需要暴露到集群外部，就需要使用Ingress为其定义一个适用于<code>Ingress Controller</code>的配置文件，然后让其自动能够注入到Ingress Controller中。</p>
<h3 id="Ingress-controller"><a href="#Ingress-controller" class="headerlink" title="Ingress controller"></a>Ingress controller</h3><p>Ingress控制器是用来让ingress和代理服务进行适配的一个中间组件，这里的代理服务可以是Nginx，HAProxy，Envoy等等。</p>
<p>在k8s中ingress controller可以存在多个，但是在进行代理和调度时，只能启用其中一个，这是受控于ingress资源清单中 metadata.annotations.kubernetes.io/ingress.class 的定义。</p>
<h3 id="Ingress-controller工作逻辑"><a href="#Ingress-controller工作逻辑" class="headerlink" title="Ingress controller工作逻辑"></a>Ingress controller工作逻辑</h3><p>外部流量进入Ingress controller之后，Ingress Controller不会把流量转给Service由Service把流量转给pod，而是直接将流量转给pod。</p>
<p>此处Service只是负责将pod归组，Ingress通过Service去识别这组pod是谁，然后直接由Ingress自己代理给Pod。流量不再经由Service调度而是由Ingress Controller直接调度到后端服务器上去。</p>
<h3 id="Ingress资源规范"><a href="#Ingress资源规范" class="headerlink" title="Ingress资源规范"></a>Ingress资源规范</h3><p>Ingress是k8s上的标准资源，但是其从1.5开始引入，一直到1.18一直为beta版本，从1.19开始进入v1版本</p>
<h4 id="v1beta1-Ingress资源规范"><a href="#v1beta1-Ingress资源规范" class="headerlink" title="v1beta1 Ingress资源规范"></a>v1beta1 Ingress资源规范</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1   <span class="comment"># 资源所属的API群组和版本</span></span><br><span class="line">kind: Ingress   <span class="comment"># 资源类型标识符</span></span><br><span class="line">metadata:  <span class="comment"># 元数据</span></span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 资源名称</span></span><br><span class="line">  annotations:   <span class="comment"># 资源注解，v1beta1使用下面的注解来指定要解析该资源的控制器类型</span></span><br><span class="line">    kubernetes.io/ingress.class: &lt;string&gt;    <span class="comment"># 适配的Ingress控制器类别</span></span><br><span class="line">  namespace &lt;string&gt;  <span class="comment"># 名称空间</span></span><br><span class="line">spec:</span><br><span class="line">  rules &lt;[]Object&gt;   <span class="comment"># Ingress规则列表；</span></span><br><span class="line">  - host &lt;string&gt;   <span class="comment"># 虚拟主机的FQDN，支持“*”前缀通配，不支持IP，不支持指定端口</span></span><br><span class="line">    http &lt;Object&gt;</span><br><span class="line">      paths &lt;[]Object&gt;   <span class="comment"># 虚拟主机PATH定义的列表，由path和backend组成</span></span><br><span class="line">      - path &lt;string&gt;   <span class="comment"># 流量匹配的HTTP PATH，必须以/开头</span></span><br><span class="line">        pathType &lt;string&gt;  <span class="comment"># 匹配机制，支持Exact、Prefix和ImplementationSpecific</span></span><br><span class="line">        backend &lt;Object&gt;   <span class="comment"># 匹配到的流量转发到的目标后端</span></span><br><span class="line">          resource &lt;Object&gt;   <span class="comment"># 引用的同一名称空间下的资源，与下面两个字段互斥</span></span><br><span class="line">          serviceName &lt;string&gt;   <span class="comment"># 引用的Service资源的名称</span></span><br><span class="line">          servicePort &lt;string&gt;   <span class="comment"># Service用于提供服务的端口</span></span><br><span class="line">  tls &lt;[]Object&gt;   <span class="comment"># TLS配置，用于指定上rules中定义的哪些host需要工作HTTPS模式</span></span><br><span class="line">  - hosts &lt;[]string&gt;   <span class="comment"># 使用同一组证书的主机名称列表</span></span><br><span class="line">    secretName &lt;string&gt;   <span class="comment"># 保存于数字证书和私钥信息的secret资源名称</span></span><br><span class="line">  backend &lt;Object&gt;   <span class="comment"># 默认backend的定义，可嵌套字段及使用格式跟rules字段中的相同</span></span><br><span class="line">  ingressClassName  &lt;string&gt;   <span class="comment"># ingress类名称，用于指定适配的控制器</span></span><br></pre></td></tr></table></figure>

<h4 id="v1-Ingress资源规范"><a href="#v1-Ingress资源规范" class="headerlink" title="v1 Ingress资源规范"></a>v1 Ingress资源规范</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1   <span class="comment"># 资源所属的API群组和版本</span></span><br><span class="line">kind: Ingress   <span class="comment"># 资源类型标识符</span></span><br><span class="line">metadata:  <span class="comment"># 元数据</span></span><br><span class="line">  name &lt;string&gt;  <span class="comment"># 资源名称</span></span><br><span class="line">  annotations:   <span class="comment"># 资源注解，v1beta1使用下面的注解来指定要解析该资源的控制器类型</span></span><br><span class="line">    kubernetes.io/ingress.class: &lt;string&gt;    <span class="comment"># 适配的Ingress控制器类别</span></span><br><span class="line">  namespace &lt;string&gt;  <span class="comment"># 名称空间</span></span><br><span class="line">spec:</span><br><span class="line">  rules &lt;[]Object&gt;   <span class="comment"># Ingress规则列表</span></span><br><span class="line">  - host &lt;string&gt;   <span class="comment"># 虚拟主机的FQDN，支持“*”前缀通配，不支持IP，不支持指定端口</span></span><br><span class="line">    http &lt;Object&gt;</span><br><span class="line">      paths &lt;[]Object&gt;   <span class="comment"># 虚拟主机PATH定义的列表，由path和backend组成</span></span><br><span class="line">      - path &lt;string&gt;   <span class="comment"># 流量匹配的HTTP PATH，必须以/开头</span></span><br><span class="line">        pathType &lt;string&gt;  <span class="comment"># 支持Exact、Prefix和ImplementationSpecific，必选</span></span><br><span class="line">        backend &lt;Object&gt;   <span class="comment"># 匹配到的流量转发到的目标后端</span></span><br><span class="line">          resource &lt;Object&gt;   <span class="comment"># 引用的同一名称空间下的资源，与下面两个字段互斥</span></span><br><span class="line">          service &lt;object&gt;  <span class="comment"># 关联的后端Service对象</span></span><br><span class="line">            name &lt;string&gt;  <span class="comment"># 后端Service的名称</span></span><br><span class="line">            port &lt;object&gt;  <span class="comment"># 后端Service上的端口对象</span></span><br><span class="line">              name &lt;string&gt;   <span class="comment"># 端口名称</span></span><br><span class="line">              number &lt;<span class="built_in">integer</span>&gt;   <span class="comment"># 端口号</span></span><br><span class="line">  tls &lt;[]Object&gt;   <span class="comment"># TLS配置，用于指定上rules中定义的哪些host需要工作HTTPS模式</span></span><br><span class="line">  - hosts &lt;[]string&gt;   <span class="comment"># 使用同一组证书的主机名称列表</span></span><br><span class="line">    secretName &lt;string&gt;   <span class="comment"># 保存于数字证书和私钥信息的secret资源名称</span></span><br><span class="line">  backend &lt;Object&gt;   <span class="comment"># 默认backend的定义，可嵌套字段及使用格式跟rules字段中的相同</span></span><br><span class="line">  ingressClassName  &lt;string&gt;   <span class="comment"># ingress类名称，用于指定适配的控制器</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>Ingress</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Ingress配置示例v1beta1</title>
    <url>/2021/07/20/Kubernetes/08Ingress/03Ingress%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8Bv1beta1/Ingress%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8Bv1beta1/</url>
    <content><![CDATA[<h3 id="配置Ingress"><a href="#配置Ingress" class="headerlink" title="配置Ingress"></a>配置Ingress</h3><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># vim ingress-v1beta1-demo.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-v1beta1-demo</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: www.mylinuxops.com           <span class="comment"># 使用虚拟主机配置ingress</span></span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path:</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: demoapp</span><br><span class="line">          servicePort: 80</span><br><span class="line"><span class="comment">#  - host: www.mylinuxops.cn</span></span><br><span class="line"><span class="comment">#    http:</span></span><br><span class="line"><span class="comment">#      paths:</span></span><br><span class="line"><span class="comment">#      - path: /foo                 # 使用路径配置ingress</span></span><br><span class="line"><span class="comment">#        backend:</span></span><br><span class="line"><span class="comment">#          serviceName: foo-svc</span></span><br><span class="line"><span class="comment">#          servicePort: 80</span></span><br><span class="line"><span class="comment">#      - path: /bar</span></span><br><span class="line"><span class="comment">#        backend:</span></span><br><span class="line"><span class="comment">#          serviceName: bar-svc</span></span><br><span class="line"><span class="comment">#          servicePort: 8080</span></span><br><span class="line"><span class="comment">#  tls:</span></span><br><span class="line"><span class="comment">#  - hosts:</span></span><br><span class="line"><span class="comment">#    - www.mylinuxops.com</span></span><br><span class="line"><span class="comment">#    secretName: tls-mylinuxops</span></span><br><span class="line"><span class="comment">#  backend:</span></span><br><span class="line"><span class="comment">#    serviceName: default-backend</span></span><br><span class="line"><span class="comment">#    servicePort: 80</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl apply -f ingress-v1beta1-demo.yaml</span></span><br><span class="line">Warning: extensions/v1beta1 Ingress is deprecated <span class="keyword">in</span> v1.14+, unavailable <span class="keyword">in</span> v1.22+; use networking.k8s.io/v1 Ingress</span><br><span class="line"></span><br><span class="line"><span class="comment"># v1beta1版本将会在k8s v1.22之后废弃。</span></span><br></pre></td></tr></table></figure>

<h3 id="部署deployment"><a href="#部署deployment" class="headerlink" title="部署deployment"></a>部署deployment</h3><p>1.编写deployment</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># vim deployment.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deployment-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 4</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      release: stable</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        release: stable</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:v1.0</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: http</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: demoapp</span><br><span class="line">    release: stable</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl  apply -f deployment.yaml</span></span><br><span class="line">deployment.apps/deployment-demo created</span><br><span class="line">service/ik8s created</span><br></pre></td></tr></table></figure>

<h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;HOST:www.mylinuxops.com&quot; 172.16.11.83</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.131.3, ServerName: deployment-demo-fb544c5d8-d2k7v, ServerIP: 192.168.96.24!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;HOST:www.mylinuxops.com&quot; 172.16.11.83</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.131.3, ServerName: deployment-demo-fb544c5d8-h97bv, ServerIP: 192.168.96.23!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;HOST:www.mylinuxops.com&quot; 172.16.11.83</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.131.3, ServerName: deployment-demo-fb544c5d8-h97bv, ServerIP: 192.168.96.23!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>Ingress</category>
        <category>Ingress-nginx</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Ingress配置示例v1</title>
    <url>/2021/07/20/Kubernetes/08Ingress/04Ingress%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8Bv1/Ingress%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8Bv1/</url>
    <content><![CDATA[<h3 id="配置Ingress"><a href="#配置Ingress" class="headerlink" title="配置Ingress"></a>配置Ingress</h3><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># vim ingress-demo-v1.yaml</span></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-demo-v1</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: www.mylinuxops.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /              <span class="comment"># 路径</span></span><br><span class="line">        pathType: Prefix     <span class="comment"># 路径类型，有3种Exact、Prefix和ImplementationSpecific</span></span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: demoapp</span><br><span class="line">            port:</span><br><span class="line">              number: 80</span><br><span class="line">  tls:                             <span class="comment"># 以下为使用tls的配置方法</span></span><br><span class="line">  - hosts: </span><br><span class="line">    - www.mylinuxops.cn</span><br><span class="line">    secretName: mylinuxops-tls</span><br></pre></td></tr></table></figure>

<p>2.创建证书文件及secret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建私钥</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># (umask 077;openssl genrsa -out tls.key 2048)</span></span><br><span class="line">Generating RSA private key, 2048 bit long modulus (2 primes)</span><br><span class="line">.............................................................+++++</span><br><span class="line">...............................................................................+++++</span><br><span class="line">e is 65537 (0x010001)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建自签证书</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># openssl req -new -x509 -key tls.key -out tls.crt -subj &quot;/CN=www.mylinuxops.cn&quot; -days 365</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建secret</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl create secret tls mylinuxops-tls --cert=tls.crt --key=tls.key</span></span><br><span class="line">secret/mylinuxops-tls created</span><br></pre></td></tr></table></figure>

<p>3.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl  apply -f ingress-demo-v1.yaml</span></span><br><span class="line">ingress.networking.k8s.io/ingress-demo-v1 configured</span><br></pre></td></tr></table></figure>

<p>4.部署deployment</p>
<p>此处使用v1beta1中的deployment</p>
<p>5.测试访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;host:www.mylinuxops.cn&quot; 172.16.11.82:31684</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;308 Permanent Redirect&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;308 Permanent Redirect&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="comment"># 由于定义了tls，此处产生了跳转。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对ingress的https端口进行访问</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;host:www.mylinuxops.cn&quot; https://172.16.11.82:31556</span></span><br><span class="line">curl: (60) SSL certificate problem: unable to get <span class="built_in">local</span> issuer certificate</span><br><span class="line">More details here: https://curl.haxx.se/docs/sslcerts.html</span><br><span class="line"></span><br><span class="line">curl failed to verify the legitimacy of the server and therefore could not</span><br><span class="line">establish a secure connection to it. To learn more about this situation and</span><br><span class="line">how to fix it, please visit the web page mentioned above.</span><br><span class="line"><span class="comment"># 此处显示证书不被认可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对证书忽略</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -k -H &quot;host:www.mylinuxops.cn&quot; https://172.16.11.82:31556</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.131.3, ServerName: deployment-demo-fb544c5d8-d2k7v, ServerIP: 192.168.96.24!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -k -H &quot;host:www.mylinuxops.cn&quot; https://172.16.11.82:31556</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.131.3, ServerName: deployment-demo-fb544c5d8-n76d2, ServerIP: 192.168.131.19!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>Ingress</category>
        <category>Ingress-nginx</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Ingress发布kubernetes dashboard</title>
    <url>/2021/07/21/Kubernetes/08Ingress/05Ingress%E5%8F%91%E5%B8%83kubernetes%20dashboard/Ingress%E5%8F%91%E5%B8%83kubernetes%20dashboard/</url>
    <content><![CDATA[<h3 id="配置Ingress资源清单"><a href="#配置Ingress资源清单" class="headerlink" title="配置Ingress资源清单"></a>配置Ingress资源清单</h3><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Computer02 script]<span class="comment"># vim ingress-kubernetes-dashboard.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">&quot;nginx&quot;</span>               <span class="comment"># 被nginx所解析的ingress资源</span></span><br><span class="line">    ingress.kubernetes.io/ssl-passthrough: <span class="string">&quot;true&quot;</span>      <span class="comment"># 此处不是做http代理而是做TCP代理，由于dashboard是ssl会话，所以此处不做ssl卸载直接转给后端dashboard</span></span><br><span class="line">    nginx.ingress.kubernetes.io/backend-protocol: <span class="string">&quot;HTTPS&quot;</span>   </span><br><span class="line">    nginx.ingress.kubernetes.io/rewrite-target: /<span class="variable">$2</span>    <span class="comment"># 此处对/dashboard/做rewrite，$2表示path后面的(.*)，表示将/dashboard(/|$)(.*)转发到后端后都重写为以/(.*)为起始的，把/dashboard/前缀去除。</span></span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /dashboard(/|$)(.*)</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: kubernetes-dashboard</span><br><span class="line">          servicePort: 443</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl  apply -f ingress-kubernetes-dashboard.yaml</span></span><br><span class="line">Warning: extensions/v1beta1 Ingress is deprecated <span class="keyword">in</span> v1.14+, unavailable <span class="keyword">in</span> v1.22+; use networking.k8s.io/v1 Ingress</span><br><span class="line">ingress.extensions/dashboard created</span><br></pre></td></tr></table></figure>

<p>3.在浏览器中测试访问</p>
<p><img src="img1.png"></p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>Ingress</category>
        <category>Ingress-nginx</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Ingress发布kubernetes dashboard</title>
    <url>/2021/07/21/Kubernetes/08Ingress/06Ingress%E5%8F%91%E5%B8%83longhorn/Ingress%E5%8F%91%E5%B8%83longhorn/</url>
    <content><![CDATA[<p>在longhorn官网上存在longhorn的ingress部署清单可以直接使用</p>
<p><a href="https://longhorn.io/docs/1.1.2/deploy/accessing-the-ui/longhorn-ingress/">https://longhorn.io/docs/1.1.2/deploy/accessing-the-ui/longhorn-ingress/</a></p>
<p>longhorn的Dashboard默认没有进行认证，可以直接进行访问，这个做法是十分不安全的。所以需要对其进行一个basic认证</p>
<p>1.创建一个basic认证文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># USER=Masuri; PASSWORD=123456; echo &quot;$&#123;USER&#125;:$(openssl passwd -stdin -apr1 &lt;&lt;&lt; $&#123;PASSWORD&#125;)&quot; &gt;&gt; auth</span></span><br></pre></td></tr></table></figure>

<p>2.创建一个secret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl -n longhorn-system create secret generic basic-auth --from-file=auth</span></span><br></pre></td></tr></table></figure>

<p>3.创建ingress资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># vim longhorn-ingress.yaml</span></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: longhorn-ingress</span><br><span class="line">  namespace: longhorn-system</span><br><span class="line">  annotations:</span><br><span class="line">    <span class="comment"># type of authentication</span></span><br><span class="line">    nginx.ingress.kubernetes.io/auth-type: basic</span><br><span class="line">    <span class="comment"># prevent the controller from redirecting (308) to HTTPS</span></span><br><span class="line">    nginx.ingress.kubernetes.io/ssl-redirect: <span class="string">&#x27;false&#x27;</span></span><br><span class="line">    <span class="comment"># name of the secret that contains the user/password definitions</span></span><br><span class="line">    nginx.ingress.kubernetes.io/auth-secret: basic-auth</span><br><span class="line">    <span class="comment"># message to display with an appropriate context why the authentication is required</span></span><br><span class="line">    nginx.ingress.kubernetes.io/auth-realm: <span class="string">&#x27;Authentication Required &#x27;</span></span><br><span class="line">    nginx.ingress.kubernetes.io/rewrite-target: /<span class="variable">$2</span></span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - http:</span><br><span class="line">      paths:</span><br><span class="line">      - pathType: Prefix</span><br><span class="line">        path: <span class="string">&quot;/longhorn(/|$)(.*)&quot;</span></span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: longhorn-frontend</span><br><span class="line">            port:</span><br><span class="line">              number: 80</span><br></pre></td></tr></table></figure>

<p>4.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl apply -f longhorn-ingress.yaml</span></span><br><span class="line">ingress.networking.k8s.io/longhorn-ingress created</span><br></pre></td></tr></table></figure>

<p>5.测试访问</p>
<p><img src="img1.png"></p>
<p>输入密码后</p>
<p><img src="img2.png"></p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>Ingress</category>
        <category>Ingress-nginx</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Envoy简介</title>
    <url>/2021/07/21/Kubernetes/08Ingress/07Envoy%E7%AE%80%E4%BB%8B/Envoy%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Ingress-nginx只是众多Ingress controller中的一种。如OpenShift是k8s里红帽的一个发行版，其默认使用的ingress controller是HAProxy。<br>除了HAProxy外，还有Envoy等。。</p>
<p>Envoy由C++语言开发，功能非常强大。为动态环境而设计，支持XDS-API，支持动态加载配置信息。</p>
<p>基于Envoy的controller常见方法有Gloo，Contour。</p>
<h3 id="Envoy代理核心逻辑组件"><a href="#Envoy代理核心逻辑组件" class="headerlink" title="Envoy代理核心逻辑组件"></a>Envoy代理核心逻辑组件</h3><p><img src="img1.jpeg"></p>
<h3 id="contour部署示意图"><a href="#contour部署示意图" class="headerlink" title="contour部署示意图"></a>contour部署示意图</h3><p><img src="img2.jpeg"></p>
<p>contour在每一个节点上以DaemonSet的方式部署了一个Envoy。在每一个节点上使用NodePort的local流量策略，将流量至发送给本地的Envoy。</p>
<p>对Envoy的访问就可以转为对Service下的某个Pod的访问。</p>
<p>我们要改变Envoy配置中的信息，只需要写一个ingress提交给k8s，k8s会发送给contour从而转换为Envoy所能识别的配置格式。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>Ingress</category>
        <category>Envoy</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Envoy部署</title>
    <url>/2021/07/21/Kubernetes/08Ingress/08Envoy%E9%83%A8%E7%BD%B2/Envoy%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>官网：<a href="https://projectcontour.io/">https://projectcontour.io/</a></p>
<p>1.快速部署contour</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://projectcontour.io/quickstart/contour.yaml</span><br></pre></td></tr></table></figure>

<p>2.查看所部署的pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl get pods -n projectcontour -o wide</span></span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE     IP               NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">contour-65b455dccf-bkfpw   1/1     Running   0          6m11s   192.168.30.23    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">contour-65b455dccf-pqjzc   1/1     Running   0          6m11s   192.168.96.30    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">envoy-2x4sl                2/2     Running   0          6m11s   192.168.96.29    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">envoy-69v9c                2/2     Running   0          6m11s   192.168.30.24    k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">envoy-8dfpl                2/2     Running   0          6m11s   192.168.131.23   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>contour部署完毕后会生成2个coutour和与节点数量相同的daemonset的envoy。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>Ingress</category>
        <category>Envoy</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Contour使用</title>
    <url>/2021/07/21/Kubernetes/08Ingress/09Contour%E4%BD%BF%E7%94%A8/contour%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>coutour自身也是<code>Ingress控制器</code>，所以<code>v1beta1</code>和<code>v1</code>版本的ingress资源规范，在coutour上也能使用，只不过其<code>kubernetes.io/ingress.class</code>:为<code>contour</code>。</p>
<p>除了ingress之外，其还支持其独有的资源规范，是其通过CRD引入的，名字为<code>httpproxies.projectcontour.io</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看api-resources</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl api-resources | grep &quot;projectcontour&quot;</span></span><br><span class="line">extensionservices                 extensionservice,extensionservices   projectcontour.io/v1alpha1             <span class="literal">true</span>         ExtensionService</span><br><span class="line">httpproxies                       proxy,proxies                        projectcontour.io/v1                   <span class="literal">true</span>         HTTPProxy</span><br><span class="line">tlscertificatedelegations         tlscerts                             projectcontour.io/v1                   <span class="literal">true</span>         TLSCertificateDelegation</span><br></pre></td></tr></table></figure>

<p>我们要想通过contour实现各种高级功能是通过httpproxies来实现的。</p>
<h3 id="httpproxies资源规范"><a href="#httpproxies资源规范" class="headerlink" title="httpproxies资源规范"></a>httpproxies资源规范</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: projectcontour.io/v1   <span class="comment"># API群组及版本；</span></span><br><span class="line">kind: HTTPProxy   <span class="comment"># CRD资源的名称；</span></span><br><span class="line">metadata:</span><br><span class="line">  name &lt;string&gt;</span><br><span class="line">  namespace &lt;string&gt;   <span class="comment"># 名称空间级别的资源</span></span><br><span class="line">spec:</span><br><span class="line">  virtualhost &lt;VirtualHost&gt;   <span class="comment"># 定义FQDN格式的虚拟主机，类似于Ingress中host</span></span><br><span class="line">    fqdn &lt;string&gt;   <span class="comment"># 虚拟主机FQDN格式的名称</span></span><br><span class="line">    tls &lt;TLS&gt;   <span class="comment"># 启用HTTPS，且默认以301将HTTP请求重定向至HTTPS</span></span><br><span class="line">      secretName &lt;string&gt;   <span class="comment"># 存储于证书和私钥信息的Secret资源名称</span></span><br><span class="line">      minimumProtocolVersion &lt;string&gt;   <span class="comment"># 支持的SSL/TLS协议的最低版本</span></span><br><span class="line">      passthrough &lt;boolean&gt;   <span class="comment"># 是否启用透传模式，启用时控制器不卸载HTTPS会话</span></span><br><span class="line">      clientValidation &lt;DownstreamValidation&gt;   <span class="comment"># 验证客户端证书，可选配置</span></span><br><span class="line">        caSecret &lt;string&gt;   <span class="comment"># 用于验证客户端证书的CA的证书</span></span><br><span class="line">  routes &lt;[]Route&gt;  <span class="comment"># 定义路由规则</span></span><br><span class="line">    conditions &lt;[]Condition&gt;   <span class="comment"># 流量匹配条件，支持PATH前缀和标头匹配两种检测机制</span></span><br><span class="line">      prefix &lt;String&gt;   <span class="comment"># PATH路径前缀匹配，类似于Ingress中的path字段</span></span><br><span class="line">    permitInsecure &lt;Boolean&gt;   <span class="comment"># 是否禁止默认的将HTTP重定向到HTTPS的功能</span></span><br><span class="line">    services &lt;[]Service&gt;   <span class="comment"># 后端服务，会对应转换为Envoy的Cluster定义</span></span><br><span class="line">      name &lt;String&gt;    <span class="comment"># 服务名称</span></span><br><span class="line">      port &lt;Integer&gt;   <span class="comment"># 服务端口</span></span><br><span class="line">      protocol &lt;String&gt;   <span class="comment"># 到达后端服务的协议，可用值为tls、h2或者h2c</span></span><br><span class="line">      validation &lt;UpstreamValidation&gt;   <span class="comment"># 是否校验服务端证书</span></span><br><span class="line">        caSecret &lt;String&gt;  </span><br><span class="line">        subjectName &lt;string&gt;   <span class="comment"># 要求证书中使用的Subject值</span></span><br></pre></td></tr></table></figure>

<h4 id="httpproxy示例"><a href="#httpproxy示例" class="headerlink" title="httpproxy示例"></a>httpproxy示例</h4><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># vim httpproxy-demo.yaml</span></span><br><span class="line">apiVersion: projectcontour.io/v1</span><br><span class="line">kind: HTTPProxy</span><br><span class="line">metadata:</span><br><span class="line">  name: httpproxy-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  virtualhost:</span><br><span class="line">    fqdn: www.mylinuxops.cn                  <span class="comment"># 主机名称</span></span><br><span class="line">    tls:																		  <span class="comment"># 定义tls</span></span><br><span class="line">      secretName: mylinuxops-tls             <span class="comment"># 证书的私钥和证书</span></span><br><span class="line">      minimumProtocolVersion: <span class="string">&quot;tlsv1.1&quot;</span>       <span class="comment"># 定义tls的最低版本</span></span><br><span class="line">  routes:</span><br><span class="line">  - conditions:</span><br><span class="line">    - prefix: /                    <span class="comment"># 对于/的访问全部代理给后端</span></span><br><span class="line">    services:											 <span class="comment"># services</span></span><br><span class="line">    - name: demoapp</span><br><span class="line">      port: 80</span><br><span class="line">    permitInsecure: <span class="literal">true</span>          <span class="comment"># 不将HTTP重定向到HTTPS</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl  apply -f httpproxy-demo.yaml</span></span><br><span class="line">httpproxy.projectcontour.io/httpproxy-demo created</span><br></pre></td></tr></table></figure>

<p>3.测试访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看contour的端口</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl  get svc -n projectcontour</span></span><br><span class="line">NAME      TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">contour   ClusterIP      10.100.169.73    &lt;none&gt;        8001/TCP                     49m</span><br><span class="line">envoy     LoadBalancer   10.110.150.215   &lt;pending&gt;     80:32182/TCP,443:30273/TCP   49m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问http</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;HOST:www.mylinuxops.cn&quot; 172.16.11.81:32182</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.131.23, ServerName: deployment-demo-fb544c5d8-qbwtm, ServerIP: 192.168.131.20!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;HOST:www.mylinuxops.cn&quot; 172.16.11.81:32182</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.131.23, ServerName: deployment-demo-fb544c5d8-h97bv, ServerIP: 192.168.96.23!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;HOST:www.mylinuxops.cn&quot; 172.16.11.81:32182</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.131.23, ServerName: deployment-demo-fb544c5d8-d2k7v, ServerIP: 192.168.96.24!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问https</span></span><br><span class="line"><span class="comment"># root@k8s-master01:~/yaml/chapter13# curl -H &quot;HOST:www.mylinuxops.cn&quot; https://172.16.11.81:30273</span></span><br><span class="line">curl: (35) OpenSSL SSL_connect: Connection reset by peer <span class="keyword">in</span> connection to 172.16.11.81:30273</span><br><span class="line"><span class="comment"># 此处不能使用主机头的方式来进行访问</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># echo &quot;172.16.11.83 www.mylinuxops.cn&quot; &gt;&gt; /etc/hosts</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -k https://www.mylinuxops.cn:30273</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.30.24, ServerName: deployment-demo-fb544c5d8-qbwtm, ServerIP: 192.168.131.20!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -k https://www.mylinuxops.cn:30273</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 192.168.30.24, ServerName: deployment-demo-fb544c5d8-h97bv, ServerIP: 192.168.96.23!</span><br></pre></td></tr></table></figure>

<h3 id="HTTPProxy高级路由资源规范"><a href="#HTTPProxy高级路由资源规范" class="headerlink" title="HTTPProxy高级路由资源规范"></a>HTTPProxy高级路由资源规范</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  routes &lt;[]Route&gt;  <span class="comment"># 定义路由规则</span></span><br><span class="line">    conditions &lt;[]Condition&gt;</span><br><span class="line">      prefix &lt;String&gt;</span><br><span class="line">      header &lt;HeaderCondition&gt;   <span class="comment"># 请求报文标头匹配</span></span><br><span class="line">        name &lt;String&gt;        <span class="comment"># 标头名称</span></span><br><span class="line">        present &lt;Boolean&gt;   <span class="comment"># true表示存在该标头即满足条件，值false没有意义</span></span><br><span class="line">        contains &lt;String&gt;   <span class="comment"># 标头值必须包含的子串</span></span><br><span class="line">        notcontains &lt;String&gt;  <span class="comment"># 标头值不能包含的子串</span></span><br><span class="line">        exact &lt;String&gt;      <span class="comment"># 标头值精确的匹配</span></span><br><span class="line">        notexact &lt;String&gt;  <span class="comment"># 标头值精确反向匹配，即不能与指定的值相同</span></span><br><span class="line">    services &lt;[]Service&gt;   <span class="comment"># 后端服务，转换为Envoy的Cluster</span></span><br><span class="line">      name &lt;String&gt;</span><br><span class="line">      port &lt;Integer&gt;</span><br><span class="line">      protocol &lt;String&gt;  </span><br><span class="line">      weight &lt;Int64&gt;     <span class="comment"># 服务权重，用于流量分割</span></span><br><span class="line">      mirror &lt;Boolean&gt;   <span class="comment"># 流量镜像</span></span><br><span class="line">      requestHeadersPolicy &lt;HeadersPolicy&gt;   <span class="comment"># 到上游服务器请求报文的标头策略</span></span><br><span class="line">        <span class="built_in">set</span> &lt;[]HeaderValue&gt;   <span class="comment"># 添加标头或设置指定标头的值</span></span><br><span class="line">          name &lt;String&gt;</span><br><span class="line">          value &lt;String&gt;</span><br><span class="line">        remove &lt;[]String&gt;   <span class="comment"># 移除指定的标头</span></span><br><span class="line">      responseHeadersPolicy &lt;HeadersPolicy&gt;   <span class="comment"># 到下游客户端响应报文的标头策略</span></span><br><span class="line">    loadBalancerPolicy &lt;LoadBalancerPolicy&gt;   <span class="comment"># 指定要使用负载均衡策略</span></span><br><span class="line">      strategy &lt;String&gt;    <span class="comment"># 具体使用的策略，支持Random、RoundRobin、Cookie</span></span><br><span class="line"><span class="comment"># 和WeightedLeastRequest，默认为RoundRobin；</span></span><br><span class="line">    requestHeadersPolicy &lt;HeadersPolicy&gt;   <span class="comment"># 路由级别的请求报文标头策略</span></span><br><span class="line">    reHeadersPolicy &lt;HeadersPolicy&gt;         <span class="comment"># 路由级别的响应报文标头策略</span></span><br><span class="line">    pathRewritePolicy &lt;PathRewritePolicy&gt;  <span class="comment"># URL重写</span></span><br><span class="line">      replacePrefix &lt;[]ReplacePrefix&gt;</span><br><span class="line">        prefix &lt;String&gt;         <span class="comment"># PATH路由前缀</span></span><br><span class="line">        replacement &lt;String&gt;   <span class="comment"># 替换为的目标路径</span></span><br></pre></td></tr></table></figure>

<h4 id="HTTPProxy高级应用示例"><a href="#HTTPProxy高级应用示例" class="headerlink" title="HTTPProxy高级应用示例"></a>HTTPProxy高级应用示例</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>1.创建出名称空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl create ns test</span></span><br><span class="line">namespace/<span class="built_in">test</span> created</span><br></pre></td></tr></table></figure>

<p>2.部署出两个版本的deployment</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl create deployment demoappv11 --image=&quot;ikubernetes/demoapp:v1.1&quot; -n test</span></span><br><span class="line">deployment.apps/demoappv11 created</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl create deployment demoappv12 --image=&quot;ikubernetes/demoapp:v1.2&quot; -n test</span></span><br><span class="line">deployment.apps/demoappv12 created</span><br></pre></td></tr></table></figure>

<p>3.为两个版本的deployment创建service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl create service clusterip demoappv11 --tcp=80 -n test</span></span><br><span class="line">service/demoappv11 created</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl create service clusterip demoappv12 --tcp=80 -n test</span></span><br><span class="line">service/demoappv12 created</span><br></pre></td></tr></table></figure>

<h4 id="基于标头的路由"><a href="#基于标头的路由" class="headerlink" title="基于标头的路由"></a>基于标头的路由</h4><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># vim httpproxy-headers-routing.yaml</span></span><br><span class="line">apiVersion: projectcontour.io/v1</span><br><span class="line">kind: HTTPProxy</span><br><span class="line">metadata:</span><br><span class="line">  name: httpproxy-headers-routing</span><br><span class="line">  namespace: <span class="built_in">test</span></span><br><span class="line">spec:</span><br><span class="line">  virtualhost:</span><br><span class="line">    fqdn: www.myk8s.com</span><br><span class="line">  routes:</span><br><span class="line">  - conditions:                <span class="comment"># 此处的两个过滤条件为与关系</span></span><br><span class="line">    - header:</span><br><span class="line">        name: X-Canary         <span class="comment"># 如果请求首部带X-Canary</span></span><br><span class="line">        present: <span class="literal">true</span></span><br><span class="line">    - header:</span><br><span class="line">        name: User-Agent       <span class="comment"># 并且user-agent为curl</span></span><br><span class="line">        contains: curl</span><br><span class="line">    services:</span><br><span class="line">    - name: demoappv12         <span class="comment"># 对应的service为demoappv12</span></span><br><span class="line">      port: 80</span><br><span class="line">  - services:</span><br><span class="line">    - name: demoappv11        <span class="comment"># 或者service为demoappv11</span></span><br><span class="line">      port: 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上配置段表示，如果请求首部带X-Canary并且user-agent为curl的将其流量调度到demoappv12上。</span></span><br><span class="line"><span class="comment"># 非以上条件的全部调度到demoappv11上。</span></span><br></pre></td></tr></table></figure>

<p>2.应用后测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl apply -f httpproxy-headers-routing.yaml</span></span><br><span class="line">httpproxy.projectcontour.io/httpproxy-headers-routing created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一条本地解析。</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># echo &quot;172.16.11.83 www.myk8s.com&quot; &gt;&gt; /etc/hosts</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl  get svc -n projectcontour</span></span><br><span class="line">NAME      TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">contour   ClusterIP      10.100.169.73    &lt;none&gt;        8001/TCP                     114m</span><br><span class="line">envoy     LoadBalancer   10.110.150.215   &lt;pending&gt;     80:32182/TCP,443:30273/TCP   114m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问</span></span><br><span class="line"><span class="comment"># 不带X-Canary进行访问，结果全部调度到v1.1</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl www.myk8s.com:32182</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl www.myk8s.com:32182</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问带X-Canary首部</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;X-Canary:true&quot; www.myk8s.com:32182</span></span><br><span class="line">iKubernetes demoapp v1.2 !! ClientIP: 192.168.30.24, ServerName: demoappv12-64c664955b-skq7g, ServerIP: 192.168.30.27!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;X-Canary:true&quot; www.myk8s.com:32182</span></span><br><span class="line">iKubernetes demoapp v1.2 !! ClientIP: 192.168.30.24, ServerName: demoappv12-64c664955b-skq7g, ServerIP: 192.168.30.27!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl -H &quot;X-Canary:true&quot; www.myk8s.com:32182</span></span><br><span class="line">iKubernetes demoapp v1.2 !! ClientIP: 192.168.30.24, ServerName: demoappv12-64c664955b-skq7g, ServerIP: 192.168.30.27!</span><br><span class="line"><span class="comment"># 全部被调度到v1.2上</span></span><br></pre></td></tr></table></figure>

<h4 id="流量拆分"><a href="#流量拆分" class="headerlink" title="流量拆分"></a>流量拆分</h4><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># vim httpproxy-traffic-splitting.yaml</span></span><br><span class="line">apiVersion: projectcontour.io/v1</span><br><span class="line">kind: HTTPProxy</span><br><span class="line">metadata:</span><br><span class="line">  name: httpproxy-traffic-splitting</span><br><span class="line">  namespace: <span class="built_in">test</span></span><br><span class="line">spec:</span><br><span class="line">  virtualhost:</span><br><span class="line">    fqdn: www.myk8s.com</span><br><span class="line">  routes:</span><br><span class="line">  - conditions:</span><br><span class="line">    - prefix: /</span><br><span class="line">    services:</span><br><span class="line">    - name: demoappv11            </span><br><span class="line">      port: 80</span><br><span class="line">      weight: 90           <span class="comment"># 90%流量到达v11  </span></span><br><span class="line">    - name: demoappv12</span><br><span class="line">      port: 80</span><br><span class="line">      weight: 10					<span class="comment"># 10%流量到达v12</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单并测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl apply -f httpproxy-traffic-splitting.yaml</span></span><br><span class="line">httpproxy.projectcontour.io/httpproxy-traffic-splitting configured</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># while true; do curl http://www.myk8s.com:32182; sleep .1; done</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.2 !! ClientIP: 192.168.30.24, ServerName: demoappv12-64c664955b-skq7g, ServerIP: 192.168.30.27!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">iKubernetes demoapp v1.2 !! ClientIP: 192.168.30.24, ServerName: demoappv12-64c664955b-skq7g, ServerIP: 192.168.30.27!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看出v1.1与v1.2比例为9:1</span></span><br></pre></td></tr></table></figure>

<h4 id="流量镜像"><a href="#流量镜像" class="headerlink" title="流量镜像"></a>流量镜像</h4><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># vim httpproxy-traffic-mirror.yaml</span></span><br><span class="line">apiVersion: projectcontour.io/v1</span><br><span class="line">kind: HTTPProxy</span><br><span class="line">metadata:</span><br><span class="line">  name: httpproxy-traffic-mirror</span><br><span class="line">  namespace: <span class="built_in">test</span></span><br><span class="line">spec:</span><br><span class="line">  virtualhost:</span><br><span class="line">    fqdn: www.myk8s.com</span><br><span class="line">  routes:</span><br><span class="line">  - conditions:</span><br><span class="line">    - prefix: /</span><br><span class="line">    services:</span><br><span class="line">    - name: demoappv11</span><br><span class="line">      port: 80</span><br><span class="line">    - name: demoappv12</span><br><span class="line">      port: 80</span><br><span class="line">      mirror: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 此配置表示当请求v11时，会同时发送一份到v12</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置并测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl apply -f httpproxy-traffic-mirror.yaml</span></span><br><span class="line">httpproxy.projectcontour.io/httpproxy-traffic-mirror created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问v1.1版本</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl www.myk8s.com</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl www.myk8s.com</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl www.myk8s.com</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl www.myk8s.com</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl www.myk8s.com:32182</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl www.myk8s.com:32182</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># curl www.myk8s.com:32182</span></span><br><span class="line">iKubernetes demoapp v1.1 !! ClientIP: 192.168.30.24, ServerName: demoappv11-59544d568d-5tpb9, ServerIP: 192.168.30.28!</span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl logs -n test demoappv1</span></span><br><span class="line">demoappv11-59544d568d-5tpb9  demoappv12-64c664955b-skq7g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看v1.2中的访问日志</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># kubectl logs -n test demoappv12-64c664955b-skq7g</span></span><br><span class="line"> * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)</span><br><span class="line">192.168.30.24 - - [23/Aug/2021 09:43:10] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.30.24 - - [23/Aug/2021 09:43:16] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.30.24 - - [23/Aug/2021 09:43:18] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.30.24 - - [23/Aug/2021 09:43:22] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.30.24 - - [23/Aug/2021 09:43:37] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.30.24 - - [23/Aug/2021 09:43:39] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">192.168.30.24 - - [23/Aug/2021 09:43:40] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看出流量被发往了v1.2</span></span><br></pre></td></tr></table></figure>

<h4 id="负载均衡模式"><a href="#负载均衡模式" class="headerlink" title="负载均衡模式"></a>负载均衡模式</h4><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># vim httpproxy-lb-strategy.yaml</span></span><br><span class="line">apiVersion: projectcontour.io/v1</span><br><span class="line">kind: HTTPProxy</span><br><span class="line">metadata:</span><br><span class="line">  name: httpproxy-lb-strategy</span><br><span class="line">  namespace: <span class="built_in">test</span></span><br><span class="line">spec:</span><br><span class="line">  virtualhost:</span><br><span class="line">    fqdn: www.myk8s.com</span><br><span class="line">  routes:</span><br><span class="line">  - conditions:</span><br><span class="line">    - prefix: /</span><br><span class="line">    services:</span><br><span class="line">    - name: demoappv11</span><br><span class="line">      port: 80</span><br><span class="line">    - name: demoappv12</span><br><span class="line">      port: 80</span><br><span class="line">    loadBalancerPolicy:</span><br><span class="line">      strategy: Random</span><br></pre></td></tr></table></figure>

<h4 id="HTTPProxy服务弹性"><a href="#HTTPProxy服务弹性" class="headerlink" title="HTTPProxy服务弹性"></a>HTTPProxy服务弹性</h4><p>如果后端服务器挂了可以定义超时策略，重试策略，也可以自己设定健康状态检测</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  routes &lt;[]Route&gt; </span><br><span class="line">    timeoutPolicy &lt;TimeoutPolicy&gt;   <span class="comment"># 超时策略</span></span><br><span class="line">      response &lt;String&gt;   <span class="comment"># 等待服务器响应报文的超时时长</span></span><br><span class="line">      idle &lt;String&gt;   <span class="comment"># 超时后，Envoy维持与客户端之间连接的空闲时长</span></span><br><span class="line">    retryPolicy &lt;RetryPolicy&gt;   <span class="comment"># 重试策略</span></span><br><span class="line">      count &lt;Int64&gt;   <span class="comment"># 重试的次数，默认为1</span></span><br><span class="line">      perTryTimeout &lt;String&gt;   <span class="comment"># 每次重试的超时时长</span></span><br><span class="line">    healthCheckPolicy &lt;HTTPHealthCheckPolicy&gt;   <span class="comment"># 主动健康状态检测</span></span><br><span class="line">      path &lt;String&gt;   <span class="comment"># 检测针对的路径（HTTP端点）</span></span><br><span class="line">      host &lt;String&gt;   <span class="comment"># 检测时请求的虚拟主机</span></span><br><span class="line">      intervalSeconds &lt;Int64&gt;   <span class="comment"># 时间间隔，即检测频度，默认为5秒</span></span><br><span class="line">      timeoutSeconds &lt;Int64&gt;   <span class="comment"># 超时时长，默认为2秒</span></span><br><span class="line">      unhealthyThresholdCount &lt;Int64&gt;   <span class="comment"># 判定为非健康状态的阈值，即连续错误次数</span></span><br><span class="line">      healthyThresholdCount &lt;Int64&gt;   <span class="comment"># 判定为健康状态的阈值</span></span><br></pre></td></tr></table></figure>

<h5 id="服务弹性示例"><a href="#服务弹性示例" class="headerlink" title="服务弹性示例"></a>服务弹性示例</h5><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter13<span class="comment"># vim httpproxy-retry-timeout.yaml</span></span><br><span class="line">apiVersion: projectcontour.io/v1</span><br><span class="line">kind: HTTPProxy</span><br><span class="line">metadata:</span><br><span class="line">  name: httpproxy-retry-timeout</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  virtualhost:</span><br><span class="line">    fqdn: www.myk8s.com</span><br><span class="line">  routes:</span><br><span class="line">  - timeoutPolicy:</span><br><span class="line">      response: 2s    <span class="comment"># 两秒没有相应就算超时</span></span><br><span class="line">      idle: 5s				<span class="comment"># 空闲5s</span></span><br><span class="line">    retryPolicy:</span><br><span class="line">      count: 3        <span class="comment"># 重试3次     </span></span><br><span class="line">      perTryTimeout: 500ms  <span class="comment"># 重试的超时时间500ms</span></span><br><span class="line">    services:</span><br><span class="line">    - name: demoapp</span><br><span class="line">      port: 80</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>Ingress</category>
        <category>Envoy</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>URL获取资源完整格式</title>
    <url>/2021/09/10/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/URL%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E5%AE%8C%E6%95%B4%E6%A0%BC%E5%BC%8F/URL%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E5%AE%8C%E6%95%B4%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p>命名资源和核心群组资源的路径不同，其格式如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命名群组</span></span><br><span class="line">/apis/GROUP/VERSION/namespaces/NAMESPACE/pods/POD_NAME</span><br><span class="line"><span class="comment"># 核心群组</span></span><br><span class="line">/api/v1/namespaces/NAMESPACE/pods/POD_NAME</span><br></pre></td></tr></table></figure>

<h3 id="命令资源获取资源完整格式"><a href="#命令资源获取资源完整格式" class="headerlink" title="命令资源获取资源完整格式"></a>命令资源获取资源完整格式</h3><p>使用url来获取pod的资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl get --raw /apis/apps/v1/namespaces/default/deployments/demoapp | jq</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;Deployment&quot;</span>,</span><br><span class="line">  <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;apps/v1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;demoapp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;namespace&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;679b3a30-5e68-43c4-8f71-9321f361129d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;resourceVersion&quot;</span>: <span class="string">&quot;17498&quot;</span>,</span><br><span class="line">    <span class="string">&quot;generation&quot;</span>: 2,</span><br><span class="line">    <span class="string">&quot;creationTimestamp&quot;</span>: <span class="string">&quot;2021-06-28T11:15:19Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;app&quot;</span>: <span class="string">&quot;demoapp&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;deployment.kubernetes.io/revision&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;managedFields&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;manager&quot;</span>: <span class="string">&quot;kubectl-create&quot;</span>,</span><br><span class="line">        <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;Update&quot;</span>,</span><br><span class="line">        <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;apps/v1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2021-06-28T11:15:19Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fieldsType&quot;</span>: <span class="string">&quot;FieldsV1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fieldsV1&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;f:metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;f:labels&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">              <span class="string">&quot;f:app&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;f:spec&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;f:progressDeadlineSeconds&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:replicas&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:revisionHistoryLimit&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:selector&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:strategy&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;f:rollingUpdate&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:maxSurge&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:maxUnavailable&quot;</span>: &#123;&#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">&quot;f:type&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;f:template&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;f:metadata&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;f:labels&quot;</span>: &#123;</span><br><span class="line">                  <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">                  <span class="string">&quot;f:app&quot;</span>: &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">&quot;f:spec&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;f:containers&quot;</span>: &#123;</span><br><span class="line">                  <span class="string">&quot;k:&#123;\&quot;name\&quot;:\&quot;demoapp\&quot;&#125;&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">                    <span class="string">&quot;f:image&quot;</span>: &#123;&#125;,</span><br><span class="line">                    <span class="string">&quot;f:imagePullPolicy&quot;</span>: &#123;&#125;,</span><br><span class="line">                    <span class="string">&quot;f:name&quot;</span>: &#123;&#125;,</span><br><span class="line">                    <span class="string">&quot;f:resources&quot;</span>: &#123;&#125;,</span><br><span class="line">                    <span class="string">&quot;f:terminationMessagePath&quot;</span>: &#123;&#125;,</span><br><span class="line">                    <span class="string">&quot;f:terminationMessagePolicy&quot;</span>: &#123;&#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;f:dnsPolicy&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:restartPolicy&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:schedulerName&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:securityContext&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:terminationGracePeriodSeconds&quot;</span>: &#123;&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;manager&quot;</span>: <span class="string">&quot;kube-controller-manager&quot;</span>,</span><br><span class="line">        <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;Update&quot;</span>,</span><br><span class="line">        <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;apps/v1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2021-06-28T14:02:05Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fieldsType&quot;</span>: <span class="string">&quot;FieldsV1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fieldsV1&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;f:metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;f:annotations&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">              <span class="string">&quot;f:deployment.kubernetes.io/revision&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;f:status&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;f:availableReplicas&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:conditions&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;type\&quot;:\&quot;Available\&quot;&#125;&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:lastTransitionTime&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:lastUpdateTime&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:message&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:reason&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:status&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:type&quot;</span>: &#123;&#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;type\&quot;:\&quot;Progressing\&quot;&#125;&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:lastTransitionTime&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:lastUpdateTime&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:message&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:reason&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:status&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:type&quot;</span>: &#123;&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;f:observedGeneration&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:readyReplicas&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:replicas&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:updatedReplicas&quot;</span>: &#123;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;spec&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;replicas&quot;</span>: 3,</span><br><span class="line">    <span class="string">&quot;selector&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;matchLabels&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;app&quot;</span>: <span class="string">&quot;demoapp&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;template&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;creationTimestamp&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;app&quot;</span>: <span class="string">&quot;demoapp&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;spec&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;containers&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;demoapp&quot;</span>,</span><br><span class="line">            <span class="string">&quot;image&quot;</span>: <span class="string">&quot;ikubernetes/demoapp:v1.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;resources&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;terminationMessagePath&quot;</span>: <span class="string">&quot;/dev/termination-log&quot;</span>,</span><br><span class="line">            <span class="string">&quot;terminationMessagePolicy&quot;</span>: <span class="string">&quot;File&quot;</span>,</span><br><span class="line">            <span class="string">&quot;imagePullPolicy&quot;</span>: <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;restartPolicy&quot;</span>: <span class="string">&quot;Always&quot;</span>,</span><br><span class="line">        <span class="string">&quot;terminationGracePeriodSeconds&quot;</span>: 30,</span><br><span class="line">        <span class="string">&quot;dnsPolicy&quot;</span>: <span class="string">&quot;ClusterFirst&quot;</span>,</span><br><span class="line">        <span class="string">&quot;securityContext&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;schedulerName&quot;</span>: <span class="string">&quot;default-scheduler&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;strategy&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;RollingUpdate&quot;</span>,</span><br><span class="line">      <span class="string">&quot;rollingUpdate&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;maxUnavailable&quot;</span>: <span class="string">&quot;25%&quot;</span>,</span><br><span class="line">        <span class="string">&quot;maxSurge&quot;</span>: <span class="string">&quot;25%&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;revisionHistoryLimit&quot;</span>: 10,</span><br><span class="line">    <span class="string">&quot;progressDeadlineSeconds&quot;</span>: 600</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;status&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;observedGeneration&quot;</span>: 2,</span><br><span class="line">    <span class="string">&quot;replicas&quot;</span>: 3,</span><br><span class="line">    <span class="string">&quot;updatedReplicas&quot;</span>: 3,</span><br><span class="line">    <span class="string">&quot;readyReplicas&quot;</span>: 3,</span><br><span class="line">    <span class="string">&quot;availableReplicas&quot;</span>: 3,</span><br><span class="line">    <span class="string">&quot;conditions&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Progressing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastUpdateTime&quot;</span>: <span class="string">&quot;2021-06-28T11:15:34Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2021-06-28T11:15:19Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;reason&quot;</span>: <span class="string">&quot;NewReplicaSetAvailable&quot;</span>,</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;ReplicaSet \&quot;demoapp-5f7d8f9847\&quot; has successfully progressed.&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Available&quot;</span>,</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastUpdateTime&quot;</span>: <span class="string">&quot;2021-06-28T14:02:05Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2021-06-28T14:02:05Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;reason&quot;</span>: <span class="string">&quot;MinimumReplicasAvailable&quot;</span>,</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Deployment has minimum availability.&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="核心资源获取资源完整格式"><a href="#核心资源获取资源完整格式" class="headerlink" title="核心资源获取资源完整格式"></a>核心资源获取资源完整格式</h3><p>使用url获取pod资源完整格式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master01:~<span class="comment"># kubectl get --raw /api/v1/namespaces/default/pods/mypod | jq</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;Pod&quot;</span>,</span><br><span class="line">  <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mypod&quot;</span>,</span><br><span class="line">    <span class="string">&quot;namespace&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;035d200b-0ab7-4713-91a1-64d7dc906b92&quot;</span>,</span><br><span class="line">    <span class="string">&quot;resourceVersion&quot;</span>: <span class="string">&quot;1308416&quot;</span>,</span><br><span class="line">    <span class="string">&quot;creationTimestamp&quot;</span>: <span class="string">&quot;2021-11-10T06:18:04Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;app&quot;</span>: <span class="string">&quot;mypod&quot;</span>,</span><br><span class="line">      <span class="string">&quot;release&quot;</span>: <span class="string">&quot;canary&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;cni.projectcalico.org/containerID&quot;</span>: <span class="string">&quot;05e93e6e2b77735ed1df7afb724247480c4aa12d6544cdc3113a103f13322205&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cni.projectcalico.org/podIP&quot;</span>: <span class="string">&quot;192.168.208.40/32&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cni.projectcalico.org/podIPs&quot;</span>: <span class="string">&quot;192.168.208.40/32&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;managedFields&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;manager&quot;</span>: <span class="string">&quot;kubectl-create&quot;</span>,</span><br><span class="line">        <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;Update&quot;</span>,</span><br><span class="line">        <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2021-11-10T06:18:04Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fieldsType&quot;</span>: <span class="string">&quot;FieldsV1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fieldsV1&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;f:metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;f:labels&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">              <span class="string">&quot;f:app&quot;</span>: &#123;&#125;,</span><br><span class="line">              <span class="string">&quot;f:release&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;f:spec&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;f:containers&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;name\&quot;:\&quot;myapp\&quot;&#125;&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:image&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:imagePullPolicy&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:name&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:resources&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:terminationMessagePath&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:terminationMessagePolicy&quot;</span>: &#123;&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;f:dnsPolicy&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:enableServiceLinks&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:restartPolicy&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:schedulerName&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:securityContext&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:terminationGracePeriodSeconds&quot;</span>: &#123;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;manager&quot;</span>: <span class="string">&quot;calico&quot;</span>,</span><br><span class="line">        <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;Update&quot;</span>,</span><br><span class="line">        <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2021-11-10T06:18:06Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fieldsType&quot;</span>: <span class="string">&quot;FieldsV1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fieldsV1&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;f:metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;f:annotations&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">              <span class="string">&quot;f:cni.projectcalico.org/containerID&quot;</span>: &#123;&#125;,</span><br><span class="line">              <span class="string">&quot;f:cni.projectcalico.org/podIP&quot;</span>: &#123;&#125;,</span><br><span class="line">              <span class="string">&quot;f:cni.projectcalico.org/podIPs&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;manager&quot;</span>: <span class="string">&quot;kubelet&quot;</span>,</span><br><span class="line">        <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;Update&quot;</span>,</span><br><span class="line">        <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2021-11-10T06:18:08Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fieldsType&quot;</span>: <span class="string">&quot;FieldsV1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fieldsV1&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;f:status&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;f:conditions&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;type\&quot;:\&quot;ContainersReady\&quot;&#125;&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:lastProbeTime&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:lastTransitionTime&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:status&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:type&quot;</span>: &#123;&#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;type\&quot;:\&quot;Initialized\&quot;&#125;&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:lastProbeTime&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:lastTransitionTime&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:status&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:type&quot;</span>: &#123;&#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;type\&quot;:\&quot;Ready\&quot;&#125;&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:lastProbeTime&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:lastTransitionTime&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:status&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:type&quot;</span>: &#123;&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;f:containerStatuses&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:hostIP&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:phase&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:podIP&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;f:podIPs&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;ip\&quot;:\&quot;192.168.208.40\&quot;&#125;&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;f:ip&quot;</span>: &#123;&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;f:startTime&quot;</span>: &#123;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;spec&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;volumes&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kube-api-access-mm2zx&quot;</span>,</span><br><span class="line">        <span class="string">&quot;projected&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;sources&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;serviceAccountToken&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;expirationSeconds&quot;</span>: 3607,</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: <span class="string">&quot;token&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;configMap&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kube-root-ca.crt&quot;</span>,</span><br><span class="line">                <span class="string">&quot;items&quot;</span>: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;ca.crt&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;ca.crt&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;downwardAPI&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;items&quot;</span>: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;namespace&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;fieldRef&quot;</span>: &#123;</span><br><span class="line">                      <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;fieldPath&quot;</span>: <span class="string">&quot;metadata.namespace&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;defaultMode&quot;</span>: 420</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;containers&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;myapp&quot;</span>,</span><br><span class="line">        <span class="string">&quot;image&quot;</span>: <span class="string">&quot;ikubernetes/demoapp:v1.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;resources&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;volumeMounts&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kube-api-access-mm2zx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;readOnly&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;mountPath&quot;</span>: <span class="string">&quot;/var/run/secrets/kubernetes.io/serviceaccount&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;terminationMessagePath&quot;</span>: <span class="string">&quot;/dev/termination-log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;terminationMessagePolicy&quot;</span>: <span class="string">&quot;File&quot;</span>,</span><br><span class="line">        <span class="string">&quot;imagePullPolicy&quot;</span>: <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;restartPolicy&quot;</span>: <span class="string">&quot;Always&quot;</span>,</span><br><span class="line">    <span class="string">&quot;terminationGracePeriodSeconds&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;dnsPolicy&quot;</span>: <span class="string">&quot;ClusterFirst&quot;</span>,</span><br><span class="line">    <span class="string">&quot;serviceAccountName&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;serviceAccount&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nodeName&quot;</span>: <span class="string">&quot;node01.mylinuxops.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;securityContext&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&quot;schedulerName&quot;</span>: <span class="string">&quot;default-scheduler&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tolerations&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;node.kubernetes.io/not-ready&quot;</span>,</span><br><span class="line">        <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;Exists&quot;</span>,</span><br><span class="line">        <span class="string">&quot;effect&quot;</span>: <span class="string">&quot;NoExecute&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tolerationSeconds&quot;</span>: 300</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;node.kubernetes.io/unreachable&quot;</span>,</span><br><span class="line">        <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;Exists&quot;</span>,</span><br><span class="line">        <span class="string">&quot;effect&quot;</span>: <span class="string">&quot;NoExecute&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tolerationSeconds&quot;</span>: 300</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;priority&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;enableServiceLinks&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;preemptionPolicy&quot;</span>: <span class="string">&quot;PreemptLowerPriority&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;status&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;phase&quot;</span>: <span class="string">&quot;Running&quot;</span>,</span><br><span class="line">    <span class="string">&quot;conditions&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Initialized&quot;</span>,</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastProbeTime&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2021-11-10T06:18:04Z&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Ready&quot;</span>,</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastProbeTime&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2021-11-10T06:18:08Z&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;ContainersReady&quot;</span>,</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastProbeTime&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2021-11-10T06:18:08Z&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;PodScheduled&quot;</span>,</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastProbeTime&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2021-11-10T06:18:04Z&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;hostIP&quot;</span>: <span class="string">&quot;172.16.11.81&quot;</span>,</span><br><span class="line">    <span class="string">&quot;podIP&quot;</span>: <span class="string">&quot;192.168.208.40&quot;</span>,</span><br><span class="line">    <span class="string">&quot;podIPs&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: <span class="string">&quot;192.168.208.40&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;startTime&quot;</span>: <span class="string">&quot;2021-11-10T06:18:04Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;containerStatuses&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;myapp&quot;</span>,</span><br><span class="line">        <span class="string">&quot;state&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;running&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;startedAt&quot;</span>: <span class="string">&quot;2021-11-10T06:18:07Z&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;lastState&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;ready&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;restartCount&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;image&quot;</span>: <span class="string">&quot;ikubernetes/demoapp:v1.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;imageID&quot;</span>: <span class="string">&quot;docker-pullable://ikubernetes/demoapp@sha256:6698b205eb18fb0171398927f3a35fe27676c6bf5757ef57a35a4b055badf2c3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;containerID&quot;</span>: <span class="string">&quot;docker://55654b984ecc93b619f692888efdd54a54e7db53144b336779185af7f59b560a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;started&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;qosClass&quot;</span>: <span class="string">&quot;BestEffort&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用jq来获取指定资源的信息"><a href="#使用jq来获取指定资源的信息" class="headerlink" title="使用jq来获取指定资源的信息"></a>使用jq来获取指定资源的信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl get --raw /api/v1/namespaces/default/pods/mypod | jq .kind</span></span><br><span class="line"><span class="string">&quot;Pod&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>dashboard admin-user</title>
    <url>/2021/07/16/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/dashboard%20admin-user/dashboard%20admin-user/</url>
    <content><![CDATA[<p>dashboard admin-user资源配置清单。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>使用变量实现资源清单复用</title>
    <url>/2021/10/08/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/kubeadm%E5%8A%A0%E8%8A%82%E7%82%B9%E6%8A%A5%E9%94%99/kubeadm%E5%8A%A0%E8%8A%82%E7%82%B9%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>kubeadm join 超时报错 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error execution phase kubelet-start: error uploading crisocket: timed out waiting <span class="keyword">for</span> the condition</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">kubeadm reset</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br><span class="line">iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm多主master添加</title>
    <url>/2021/08/12/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/kubeadm%E5%A4%9A%E4%B8%BBmaster%E6%B7%BB%E5%8A%A0/kubeadm%E5%A4%9A%E4%B8%BBmaster%E6%B7%BB%E5%8A%A0/</url>
    <content><![CDATA[<p>kubeadm在第一个主节点部署成功后会提示添加节点的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and <span class="keyword">then</span> running the following as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join kube-api.mylinuxops.com:6443 --token syobva.l8seeqnrb5rllti8 \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:f523ee56092c8318607e579ba8d227c5ccf33feab644b351b3b93e9da1864ea8 \</span><br><span class="line">        --control-plane</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join kube-api.mylinuxops.com:6443 --token syobva.l8seeqnrb5rllti8 \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:f523ee56092c8318607e579ba8d227c5ccf33feab644b351b3b93e9da1864ea8</span><br></pre></td></tr></table></figure>

<p>需要注意的是此处添加控制节点的命令无法直接使用，因为在部署第二个控制节点时，其节点上没有证书信息，需要在第一个已经部署完毕的主节点上上传证书。</p>
<p>1.在第一个已经部署成功主节点上传cert</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master01:~<span class="comment"># kubeadm init phase upload-certs --upload-certs</span></span><br><span class="line">[upload-certs] Storing the certificates <span class="keyword">in</span> Secret <span class="string">&quot;kubeadm-certs&quot;</span> <span class="keyword">in</span> the <span class="string">&quot;kube-system&quot;</span> Namespace</span><br><span class="line">[upload-certs] Using certificate key:</span><br><span class="line">d61e8442365eef892db3fb3b3e0de6ea18b03d94c4f2a010275228567f8a16c4</span><br></pre></td></tr></table></figure>

<p>2.在第二个master节点上添加控制节点，在原先的添加控制平面的命令基础上添加–certificate-key参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@master02:~<span class="comment"># kubeadm join kube-api.mylinuxops.com:6443 --token syobva.l8seeqnrb5rllti8 \</span></span><br><span class="line">--discovery-token-ca-cert-hash sha256:f523ee56092c8318607e579ba8d227c5ccf33feab644b351b3b93e9da1864ea8 \</span><br><span class="line">--control-plane --certificate-key d61e8442365eef892db3fb3b3e0de6ea18b03d94c4f2a010275228567f8a16c4</span><br><span class="line"><span class="comment"># 使用--certificate-key来指定第一个主节点上上传的证书key.</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm重置节点</title>
    <url>/2021/08/12/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/kubeadm%E9%87%8D%E7%BD%AE%E8%8A%82%E7%82%B9/kubeadm%E9%87%8D%E7%BD%AE%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p>在需要reset的节点上执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure>

<p>如果重置的为master节点，需要将config文件删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p>如果重置的worker节点，则需要在master上删除相对应的node资源。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete node <span class="variable">$NODENAME</span></span><br><span class="line"><span class="comment"># NODENAME:为被重置的NODENAME</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl命令使用</title>
    <url>/2021/07/12/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/kubectl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/kubectl%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>kubernetes创建容器分为命令式和声明式，以下为命令创建容器的使用方法</p>
<h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>在k8s集群上运行一个容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用kubectl创建pod</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl create deployment demoapp --image=ikubernetes/demoapp:v1.0</span></span><br><span class="line">deployment.apps/demoapp created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器创建中</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                       READY   STATUS              RESTARTS   AGE</span><br><span class="line">demoapp-5f7d8f9847-v7ft8   0/1     ContainerCreating   0          11s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用-o wide显示更详细信息</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE   IP           NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">demoapp-5f7d8f9847-v7ft8   1/1     Running   0          23s   10.244.3.2   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用curl进行访问</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.244.3.2</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-v7ft8, ServerIP: 10.244.3.2!</span><br></pre></td></tr></table></figure>

<h3 id="扩展实例"><a href="#扩展实例" class="headerlink" title="扩展实例"></a>扩展实例</h3><p>将demoapp的实例从一个扩展为3个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl scale deployment demoapp --replicas=3</span></span><br><span class="line">deployment.apps/demoapp scaled</span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE    IP           NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">demoapp-5f7d8f9847-8n9nv   1/1     Running   0          148m   10.244.1.3   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">demoapp-5f7d8f9847-jrfm6   1/1     Running   0          149m   10.244.2.3   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">demoapp-5f7d8f9847-v7ft8   1/1     Running   0          162m   10.244.3.2   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<h3 id="删除pod"><a href="#删除pod" class="headerlink" title="删除pod"></a>删除pod</h3><p>由于pod创建使用的是deployment控制器，所以当pod被删除时依旧会再次创建出pod补足3个副本但是其ip地址会发生变化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl delete pod demoapp-5f7d8f9847-8n9nv --force --grace-period=0</span></span><br><span class="line">warning: Immediate deletion does not <span class="built_in">wait</span> <span class="keyword">for</span> confirmation that the running resource has been terminated. The resource may <span class="built_in">continue</span> to run on the cluster indefinitely.</span><br><span class="line">pod <span class="string">&quot;demoapp-5f7d8f9847-8n9nv&quot;</span> force deleted</span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE    IP           NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">demoapp-5f7d8f9847-jrfm6   1/1     Running   0          153m   10.244.2.3   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">demoapp-5f7d8f9847-r7h7b   1/1     Running   0          12s    10.244.1.4   k8s-node01   &lt;none&gt;           &lt;none&gt;					<span class="comment"># 新生成的容器ip已经变化</span></span><br><span class="line">demoapp-5f7d8f9847-v7ft8   1/1     Running   0          166m   10.244.3.2   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<h3 id="创建service"><a href="#创建service" class="headerlink" title="创建service"></a>创建service</h3><p>pod被删除后，控制器重新创建的pod其地址会发生改变，此时用户访问原ip将无法访问到pod容器。这时候就需要在pod之上创建出service资源，作为访问pod的固定地址。</p>
<p>创建clusterIP类型的service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建出service资源</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl create service clusterip demoapp --tcp=80:80</span></span><br><span class="line">service/demoapp created</span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get service</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">demoapp      ClusterIP   10.101.199.51   &lt;none&gt;        80/TCP    7s</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   3h25m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对serivce IP 进行访问</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.101.199.51</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-r7h7b, ServerIP: 10.244.1.4!</span><br></pre></td></tr></table></figure>

<p>clusterIP类型的service只能在k8s集群内部被访问，集群外部无法直接访问到pod。如果要让集群外部的用户直接访问到service则需要使用NodePort类型的service。</p>
<h3 id="创建NodePort类型的service"><a href="#创建NodePort类型的service" class="headerlink" title="创建NodePort类型的service"></a>创建NodePort类型的service</h3><p>删除之前的service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除service的方法和删除pod的方法相同</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl delete servcie demoapp</span></span><br></pre></td></tr></table></figure>

<p>创建一个NodePort类型service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl create service nodeport demoapp --tcp=80</span></span><br><span class="line">service/demoapp created</span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get svc</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">demoapp      NodePort    10.111.8.128   &lt;none&gt;        80:31156/TCP   5s</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP        14h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用nodeport后会在集群内的所有宿主机上开启一个随机的端口，用来向后端pod进行转发</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 127.0.0.1:31156</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-r7h7b, ServerIP: 10.244.1.4!</span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 127.0.0.1:31156</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-jrfm6, ServerIP: 10.244.2.3!</span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 127.0.0.1:31156</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-v7ft8, ServerIP: 10.244.3.2!</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl命令自动补全</title>
    <url>/2021/07/12/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/kubectl%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/kubectl%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
    <content><![CDATA[<p>安装bash-completion</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ubuntu安装bash-completion</span></span><br><span class="line">apt install bash-completion</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos安装bash-completion</span></span><br><span class="line">yum install bash-completion -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重读配置文件</span></span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br></pre></td></tr></table></figure>

<p>配置k8s命令自动补全</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上命令可以通过以下命令查询获得</span></span><br><span class="line">kubectl completion --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>token过期新增节点</title>
    <url>/2021/08/12/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/token%E8%BF%87%E6%9C%9F%E6%96%B0%E5%A2%9Enode/token%E8%BF%87%E6%9C%9F%E6%96%B0%E5%A2%9Enode/</url>
    <content><![CDATA[<p>新增节点时，如果token过期则需要重新创建一个token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter05<span class="comment"># kubeadm token create --print-join-command</span></span><br><span class="line">kubeadm join kube-api:6443 --token y8j1og.5zhw05eys35l6tqv --discovery-token-ca-cert-hash sha256:ad0b9c735d6a55dd1f04b2ba137bfaa82b19068c2391e39478513fc7b8c23c81</span><br></pre></td></tr></table></figure>

<p>使用以上命令的结果在新的节点上使用。</p>
<p>需要注意新的节点能解析到kube-api。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Go模板输出字段</title>
    <url>/2021/09/10/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/%E4%BD%BF%E7%94%A8Go%E6%A8%A1%E6%9D%BF%E8%BE%93%E5%87%BA%E5%AD%97%E6%AE%B5/%E4%BD%BF%E7%94%A8Go%E6%A8%A1%E6%9D%BF%E8%BE%93%E5%87%BA%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<p>若知道pod名称，想要获取pod的ip地址可以使用go-template来获取。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get pods configmaps-volume-demo -o go-template=&#123;&#123;.status.podIP&#125;&#125;</span></span><br><span class="line">10.244.2.13</span><br></pre></td></tr></table></figure>

<p>要知道其字段的名称，需要层级的查看，查看完整的字段可以使用-o json来输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter06<span class="comment"># kubectl get pods configmaps-volume-demo -o json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;Pod&quot;</span>,</span><br><span class="line">    <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;kubectl.kubernetes.io/last-applied-configuration&quot;</span>: <span class="string">&quot;&#123;\&quot;apiVersion\&quot;:\&quot;v1\&quot;,\&quot;kind\&quot;:\&quot;Pod\&quot;,\&quot;metadata\&quot;:&#123;\&quot;annotations\&quot;:&#123;&#125;,\&quot;name\&quot;:\&quot;configmaps-volume-demo\&quot;,\&quot;namespace\&quot;:\&quot;default\&quot;&#125;,\&quot;spec\&quot;:&#123;\&quot;containers\&quot;:[&#123;\&quot;image\&quot;:\&quot;nginx:alpine\&quot;,\&quot;name\&quot;:\&quot;nginx-server\&quot;,\&quot;volumeMounts\&quot;:[&#123;\&quot;mountPath\&quot;:\&quot;/etc/nginx/conf.d/\&quot;,\&quot;name\&quot;:\&quot;ngxconfs\&quot;,\&quot;readOnly\&quot;:true&#125;]&#125;],\&quot;volumes\&quot;:[&#123;\&quot;configMap\&quot;:&#123;\&quot;name\&quot;:\&quot;nginx-config-files\&quot;,\&quot;optional\&quot;:false&#125;,\&quot;name\&quot;:\&quot;ngxconfs\&quot;&#125;]&#125;&#125;\n&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;creationTimestamp&quot;</span>: <span class="string">&quot;2021-07-16T05:06:17Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;configmaps-volume-demo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;namespace&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="string">&quot;resourceVersion&quot;</span>: <span class="string">&quot;189501&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;c122066f-715e-4a24-afad-8b7c07d597b9&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;spec&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;containers&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;image&quot;</span>: <span class="string">&quot;nginx:alpine&quot;</span>,</span><br><span class="line">                <span class="string">&quot;imagePullPolicy&quot;</span>: <span class="string">&quot;IfNotPresent&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;nginx-server&quot;</span>,</span><br><span class="line">                <span class="string">&quot;resources&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;terminationMessagePath&quot;</span>: <span class="string">&quot;/dev/termination-log&quot;</span>,</span><br><span class="line">                <span class="string">&quot;terminationMessagePolicy&quot;</span>: <span class="string">&quot;File&quot;</span>,</span><br><span class="line">                <span class="string">&quot;volumeMounts&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;mountPath&quot;</span>: <span class="string">&quot;/etc/nginx/conf.d/&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ngxconfs&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;readOnly&quot;</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;mountPath&quot;</span>: <span class="string">&quot;/var/run/secrets/kubernetes.io/serviceaccount&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kube-api-access-rjvg6&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;readOnly&quot;</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;dnsPolicy&quot;</span>: <span class="string">&quot;ClusterFirst&quot;</span>,</span><br><span class="line">        <span class="string">&quot;enableServiceLinks&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;nodeName&quot;</span>: <span class="string">&quot;k8s-node02&quot;</span>,</span><br><span class="line">        <span class="string">&quot;preemptionPolicy&quot;</span>: <span class="string">&quot;PreemptLowerPriority&quot;</span>,</span><br><span class="line">        <span class="string">&quot;priority&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;restartPolicy&quot;</span>: <span class="string">&quot;Always&quot;</span>,</span><br><span class="line">        <span class="string">&quot;schedulerName&quot;</span>: <span class="string">&quot;default-scheduler&quot;</span>,</span><br><span class="line">        <span class="string">&quot;securityContext&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;serviceAccount&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="string">&quot;serviceAccountName&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="string">&quot;terminationGracePeriodSeconds&quot;</span>: 30,</span><br><span class="line">        <span class="string">&quot;tolerations&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;effect&quot;</span>: <span class="string">&quot;NoExecute&quot;</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span>: <span class="string">&quot;node.kubernetes.io/not-ready&quot;</span>,</span><br><span class="line">                <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;Exists&quot;</span>,</span><br><span class="line">                <span class="string">&quot;tolerationSeconds&quot;</span>: 300</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;effect&quot;</span>: <span class="string">&quot;NoExecute&quot;</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span>: <span class="string">&quot;node.kubernetes.io/unreachable&quot;</span>,</span><br><span class="line">                <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;Exists&quot;</span>,</span><br><span class="line">                <span class="string">&quot;tolerationSeconds&quot;</span>: 300</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;volumes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;configMap&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;defaultMode&quot;</span>: 420,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;nginx-config-files&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;optional&quot;</span>: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ngxconfs&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kube-api-access-rjvg6&quot;</span>,</span><br><span class="line">                <span class="string">&quot;projected&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;defaultMode&quot;</span>: 420,</span><br><span class="line">                    <span class="string">&quot;sources&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">&quot;serviceAccountToken&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;expirationSeconds&quot;</span>: 3607,</span><br><span class="line">                                <span class="string">&quot;path&quot;</span>: <span class="string">&quot;token&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">&quot;configMap&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;items&quot;</span>: [</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;ca.crt&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;path&quot;</span>: <span class="string">&quot;ca.crt&quot;</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                ],</span><br><span class="line">                                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kube-root-ca.crt&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">&quot;downwardAPI&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;items&quot;</span>: [</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="string">&quot;fieldRef&quot;</span>: &#123;</span><br><span class="line">                                            <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;fieldPath&quot;</span>: <span class="string">&quot;metadata.namespace&quot;</span></span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        <span class="string">&quot;path&quot;</span>: <span class="string">&quot;namespace&quot;</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;conditions&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;lastProbeTime&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2021-07-16T05:06:17Z&quot;</span>,</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Initialized&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;lastProbeTime&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2021-07-16T05:06:32Z&quot;</span>,</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;Ready&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;lastProbeTime&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2021-07-16T05:06:32Z&quot;</span>,</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;ContainersReady&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;lastProbeTime&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;lastTransitionTime&quot;</span>: <span class="string">&quot;2021-07-16T05:06:17Z&quot;</span>,</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;True&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;PodScheduled&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;containerStatuses&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;containerID&quot;</span>: <span class="string">&quot;docker://83ed060f9731a87033d8cbd76f671bcda8aa44da657534a12170dbeb4c7b6f7f&quot;</span>,</span><br><span class="line">                <span class="string">&quot;image&quot;</span>: <span class="string">&quot;nginx:alpine&quot;</span>,</span><br><span class="line">                <span class="string">&quot;imageID&quot;</span>: <span class="string">&quot;docker-pullable://nginx@sha256:91528597e842ab1b3b25567191fa7d4e211cb3cc332071fa031cfed2b5892f9e&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lastState&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;nginx-server&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ready&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;restartCount&quot;</span>: 0,</span><br><span class="line">                <span class="string">&quot;started&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;state&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;running&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;startedAt&quot;</span>: <span class="string">&quot;2021-07-16T05:06:32Z&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;hostIP&quot;</span>: <span class="string">&quot;172.16.11.82&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phase&quot;</span>: <span class="string">&quot;Running&quot;</span>,</span><br><span class="line">        <span class="string">&quot;podIP&quot;</span>: <span class="string">&quot;10.244.2.13&quot;</span>,</span><br><span class="line">        <span class="string">&quot;podIPs&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.244.2.13&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;qosClass&quot;</span>: <span class="string">&quot;BestEffort&quot;</span>,</span><br><span class="line">        <span class="string">&quot;startTime&quot;</span>: <span class="string">&quot;2021-07-16T05:06:17Z&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JsonPath获取资源信息</title>
    <url>/2021/09/10/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/%E4%BD%BF%E7%94%A8JsonPath%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E4%BF%A1%E6%81%AF/%E4%BD%BF%E7%94%A8JsonPath%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用jsonPath查看某个pod的信息</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods replicaset-demo-5fmvs -o jsonpath=&#123;.metadata.ownerReferences&#125;</span></span><br><span class="line">[&#123;<span class="string">&quot;apiVersion&quot;</span>:<span class="string">&quot;apps/v1&quot;</span>,<span class="string">&quot;blockOwnerDeletion&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;controller&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;kind&quot;</span>:<span class="string">&quot;ReplicaSet&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;replicaset-demo&quot;</span>,<span class="string">&quot;uid&quot;</span>:<span class="string">&quot;d16ab83c-c9a6-486f-b202-72e93f982750&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用该项上的第0项的name信息</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods replicaset-demo-5fmvs -o jsonpath=&#123;.metadata.ownerReferences[0].name&#125;</span></span><br><span class="line">replicaset-demor</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>更改默认存储类</title>
    <url>/2021/09/15/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E7%B1%BB/%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="列出你的集群中的-StorageClasses"><a href="#列出你的集群中的-StorageClasses" class="headerlink" title="列出你的集群中的 StorageClasses"></a>列出你的集群中的 StorageClasses</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get storageclass</span><br></pre></td></tr></table></figure>

<p>输出类似这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME                 PROVISIONER               AGE</span><br><span class="line">standard (default)   kubernetes.io/gce-pd      1d</span><br><span class="line">gold                 kubernetes.io/gce-pd      1d</span><br></pre></td></tr></table></figure>

<p>默认 StorageClass 以 (default) 标记。</p>
<h3 id="标记默认-StorageClass-非默认"><a href="#标记默认-StorageClass-非默认" class="headerlink" title="标记默认 StorageClass 非默认"></a>标记默认 StorageClass 非默认</h3><p>默认 StorageClass 的注解 storageclass.kubernetes.io/is-default-class 设置为 true。 注解的其它任意值或者缺省值将被解释为 false。</p>
<p>要标记一个 StorageClass 为非默认的，你需要改变它的值为 false：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch storageclass standard -p <span class="string">&#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;false&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这里的 standard 是你选择的 StorageClass 的名字。</p>
<h3 id="标记一个-StorageClass-为默认的"><a href="#标记一个-StorageClass-为默认的" class="headerlink" title="标记一个 StorageClass 为默认的"></a>标记一个 StorageClass 为默认的</h3><p>和前面的步骤类似，你需要添加/设置注解 storageclass.kubernetes.io/is-default-class=true。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch storageclass &lt;your-class-name&gt; -p <span class="string">&#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>请注意，最多只能有一个 StorageClass 能够被标记为默认。 如果它们中有两个或多个被标记为默认，Kubernetes 将忽略这个注解， 也就是它将表现为没有默认 StorageClass。</p>
<h3 id="验证你选用的-StorageClass-为默认的"><a href="#验证你选用的-StorageClass-为默认的" class="headerlink" title="验证你选用的 StorageClass 为默认的"></a>验证你选用的 StorageClass 为默认的</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get storageclass</span><br></pre></td></tr></table></figure>

<p>输出类似这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME             PROVISIONER               AGE</span><br><span class="line">standard         kubernetes.io/gce-pd      1d</span><br><span class="line">gold (default)   kubernetes.io/gce-pd      1d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>使用变量实现资源清单复用</title>
    <url>/2021/07/08/Kubernetes/%E5%A4%87%E5%BF%98%E5%BD%95/%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%B5%84%E6%BA%90%E6%B8%85%E5%8D%95%E5%A4%8D%E7%94%A8/%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%B5%84%E6%BA%90%E6%B8%85%E5%8D%95%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<p>简单的版本更新可能会使用到多个资源清单，而资源清单内仅部分不同，我们可以将这些不同的地方使用变量进行替换。</p>
<p>需要注意的是yaml格式的文件不支持变量，所以我们需要使用Shell命令来将变量替换后发送给kubectl</p>
<h4 id="使用单个资源清单实现蓝绿部署示例"><a href="#使用单个资源清单实现蓝绿部署示例" class="headerlink" title="使用单个资源清单实现蓝绿部署示例"></a>使用单个资源清单实现蓝绿部署示例</h4><p>1.编写replicaset资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim replicaset-blue-gren.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">  name: rs-<span class="variable">$&#123;DEPLOY&#125;</span></span><br><span class="line">spec:</span><br><span class="line">  minReadySeconds: 3</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp</span><br><span class="line">      ctr: rs-<span class="variable">$&#123;DEPLOY&#125;</span></span><br><span class="line">      version: <span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp</span><br><span class="line">        ctr: rs-<span class="variable">$&#123;DEPLOY&#125;</span></span><br><span class="line">        version: <span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:<span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用envsubst来替换变量。</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># DEPLOY=blue VERSION=v1.0 envsubst &lt; replicaset-blue-gren.yaml | kubectl apply -f -</span></span><br><span class="line">replicaset.apps/rs-blue created</span><br></pre></td></tr></table></figure>

<p>3.为replicaset编写svc资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># vim service-blue-green.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp-svc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">  selector:</span><br><span class="line">    app: demoapp</span><br><span class="line">    ctr: rs-<span class="variable">$&#123;DEPLOY&#125;</span></span><br><span class="line">    version: <span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br></pre></td></tr></table></figure>

<p>4.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter08<span class="comment"># DEPLOY=blue VERSION=v1.0 envsubst &lt; service-blue-green.yaml | kubectl apply -f -</span></span><br><span class="line">service/demoapp-svc created</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod资源</title>
    <url>/2021/07/03/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/01Pod%E8%B5%84%E6%BA%90/Pod%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>Pod就是共享Network名称空间，IPC名称空间，UTS名称空间的一组容器。在Pod的底层还存在一个基础设施容器Pause。</p>
<p><img src="img1.png" alt="pod"></p>
<p>Pause的主要作用是用来提供存储卷和名称空间。</p>
<h3 id="Pod的生命周期"><a href="#Pod的生命周期" class="headerlink" title="Pod的生命周期"></a>Pod的生命周期</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">demoapp-5f7d8f9847-jrfm6   1/1     Running   0          40h</span><br><span class="line">demoapp-5f7d8f9847-r7h7b   1/1     Running   0          37h</span><br><span class="line">demoapp-5f7d8f9847-v7ft8   1/1     Running   0          40h</span><br><span class="line">mypod                      1/1     Running   0          18h</span><br></pre></td></tr></table></figure>

<p>在使用kubectl get pods时，其中的status信息，又称为pod的相位。一个pod的相位共有5种相位：</p>
<ul>
<li>Running：运行状态</li>
<li>Pending：挂起状态（未调度成功，或仍处于下载镜像过程中）</li>
<li>Succeeded：成功终止。一般出现在Job中。</li>
<li>Failed：未成功终止。</li>
<li>Unknown：未知。kubelet没有报告pod的健康状况。表示apiserver无法获取到pod的健康状态信息。通常由于其无法和所在节点的kubelet进行通信所导致。</li>
</ul>
<p>其他状态信息：</p>
<ul>
<li>CrashLoopBackOff：</li>
<li>Error：</li>
</ul>
<p>以上2中信息并非pod的相位，而是pod内部容器的状态。一般出现在容器内部未运行在前台，或者容器内的端口被占用等等情况。</p>
<h3 id="Pod运行逻辑"><a href="#Pod运行逻辑" class="headerlink" title="Pod运行逻辑"></a>Pod运行逻辑</h3><p>Pod内可以存在多个容器，常用设计模式：</p>
<ul>
<li>SideCar：为主容器提供辅助功能</li>
<li>Adapter：若某个pod内数据输出格式与某个规定的引用接受数据的格式不兼容，用适配器来将其转换以达到兼容的目的</li>
<li>Ambassador：主容器中的引用不方便对外联络，可以专门制作一个容器来实现对外联络的功能。如redis集群联络其他节点可以专门做一个大使来进行联络。</li>
</ul>
<h3 id="Pod内容器启动顺序"><a href="#Pod内容器启动顺序" class="headerlink" title="Pod内容器启动顺序"></a>Pod内容器启动顺序</h3><p><img src="img2.png" alt="Pod内容器启动顺序"></p>
<p>Pod内容器启动时，先启动的为<code>init containers</code>(初始化容器)，初始化任务结束后容器推出结束。而后运行主容器，主容器之后还存在<code>SideCar</code>、<code>Adapter</code>、<code>Ambassador</code>等等容器，这些容器并行启动，先后将顺序无法控制。</p>
<p>在Pod运行时还存在2个钩子和3个探针，这些钩子允许人为的在某个时刻运行一些自定义的功能：</p>
<ul>
<li>pod start hook：在主容器启动完毕后运行</li>
<li>pre stop hook：在主容器运行结束前运行</li>
<li>startup probe：启动探针，</li>
<li>liveness probe：存活探针，用来判断容器健康与否。</li>
<li>readiness probe：就绪探针，用来判断容器内应用是否就绪。</li>
</ul>
<p>Pod启动时其内部的所有容器都可以存在此3个探针，2个钩子，并且探针进行周期性的探测。</p>
<h3 id="Pod资源规范"><a href="#Pod资源规范" class="headerlink" title="Pod资源规范"></a>Pod资源规范</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata: &#123;…&#125;</span><br><span class="line">spec:</span><br><span class="line">  securityContext:        <span class="comment"># Pod级别的安全上下文，对内部所有容器均有效</span></span><br><span class="line">    runAsUser &lt;<span class="built_in">integer</span>&gt;   <span class="comment"># 以指定的用户身份运行容器进程，默认由镜像中的USER指定</span></span><br><span class="line">    runAsGroup &lt;<span class="built_in">integer</span>&gt;   <span class="comment"># 以指定的用户组运行容器进程，默认使用的组随容器运行时</span></span><br><span class="line">    supplementalGroups  &lt;[]<span class="built_in">integer</span>&gt;  <span class="comment"># 为容器中1号进程的用户添加的附加组；</span></span><br><span class="line">    fsGroup &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 为容器中的1号进程附加的一个专用组，其功能类似于sgid</span></span><br><span class="line">    runAsNonRoot &lt;boolean&gt;  <span class="comment"># 是否以非root身份运行</span></span><br><span class="line">    seLinuxOptions &lt;Object&gt;  <span class="comment"># SELinux的相关配置</span></span><br><span class="line">    sysctls  &lt;[]Object&gt;  <span class="comment"># 应用到当前Pod上的名称空间级别的sysctl参数设置列表</span></span><br><span class="line">    windowsOptions &lt;Object&gt;  <span class="comment"># Windows容器专用的设置</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: …</span><br><span class="line">    image: …</span><br><span class="line">    securityContext:       <span class="comment"># 容器级别的安全上下文，仅生效于当前容器</span></span><br><span class="line">      runAsUser &lt;<span class="built_in">integer</span>&gt;   <span class="comment"># 以指定的用户身份运行容器进程</span></span><br><span class="line">      runAsGroup &lt;<span class="built_in">integer</span>&gt;   <span class="comment"># 以指定的用户组运行容器进程</span></span><br><span class="line">      runAsNonRoot &lt;boolean&gt;  <span class="comment"># 是否以非root身份运行</span></span><br><span class="line">      allowPrivilegeEscalation &lt;boolean&gt; <span class="comment"># 是否允许特权升级</span></span><br><span class="line">      capabilities &lt;Object&gt;  <span class="comment"># 于当前容器上添加（add）或删除（drop）的内核能力</span></span><br><span class="line">        add  &lt;[]string&gt;  <span class="comment"># 添加由列表定义的各内核能力</span></span><br><span class="line">        drop  &lt;[]string&gt;  <span class="comment"># 移除由列表定义的各内核能力</span></span><br><span class="line">      privileged &lt;boolean&gt;  <span class="comment"># 是否运行为特权容器</span></span><br><span class="line">      procMount &lt;string&gt;   <span class="comment"># 设置容器的procMount类型，默认为DefaultProcMount；</span></span><br><span class="line">      readOnlyRootFilesystem &lt;boolean&gt; <span class="comment"># 是否将根文件系统设置为只读模式</span></span><br><span class="line">      seLinuxOptions &lt;Object&gt;  <span class="comment"># SELinux的相关配置</span></span><br><span class="line">      windowsOptions &lt;Object&gt;  <span class="comment"># windows容器专用的设置</span></span><br></pre></td></tr></table></figure>

<h3 id="Podd的简单yaml配置"><a href="#Podd的简单yaml配置" class="headerlink" title="Podd的简单yaml配置"></a>Podd的简单yaml配置</h3><p>1.定义一个pod的yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mypod</span><br><span class="line">  labels:</span><br><span class="line">    app: mypod</span><br><span class="line">	release: canary</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br></pre></td></tr></table></figure>

<p>2.创建Pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl create -f mypod.yaml</span></span><br><span class="line">pod/mypod created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所创建的容器</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl  get pods</span></span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">demoapp-5f7d8f9847-jrfm6   1/1     Running   0          22h</span><br><span class="line">demoapp-5f7d8f9847-r7h7b   1/1     Running   0          19h</span><br><span class="line">demoapp-5f7d8f9847-v7ft8   1/1     Running   0          22h</span><br><span class="line">mypod                      1/1     Running   0          46s					<span class="comment"># mypod容器已经创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示pod的详细信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl get pods mypod -o wide --show-labels</span></span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES   LABELS</span><br><span class="line">mypod   1/1     Running   0          3m52s   10.244.2.13   k8s-node02   &lt;none&gt;           &lt;none&gt;            app=mypod,release=canary</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上Pod不会被控制器所管理，删除将直接消失。这种Pod称为自主式Pod。Pod故障将会被K8s重启，但是若节点宕机或手动删除则不会被重启。</span></span><br></pre></td></tr></table></figure>

<p>3.以yaml格式来显示Pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl get pods mypod -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-06-29T09:30:06Z&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    app: mypod</span><br><span class="line">    release: canary</span><br><span class="line">  name: mypod</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;146436&quot;</span></span><br><span class="line">  uid: cb1f9543-5927-4517-93e6-c120b8824165</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    name: demoapp</span><br><span class="line">    resources: &#123;&#125;</span><br><span class="line">    terminationMessagePath: /dev/termination-log</span><br><span class="line">    terminationMessagePolicy: File</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount</span><br><span class="line">      name: kube-api-access-hbs44</span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  dnsPolicy: ClusterFirst</span><br><span class="line">  enableServiceLinks: <span class="literal">true</span></span><br><span class="line">  nodeName: k8s-node02</span><br><span class="line">  preemptionPolicy: PreemptLowerPriority</span><br><span class="line">  priority: 0</span><br><span class="line">  restartPolicy: Always</span><br><span class="line">  schedulerName: default-scheduler</span><br><span class="line">  securityContext: &#123;&#125;</span><br><span class="line">  serviceAccount: default</span><br><span class="line">  serviceAccountName: default</span><br><span class="line">  terminationGracePeriodSeconds: 30</span><br><span class="line">  tolerations:</span><br><span class="line">  - effect: NoExecute</span><br><span class="line">    key: node.kubernetes.io/not-ready</span><br><span class="line">    operator: Exists</span><br><span class="line">    tolerationSeconds: 300</span><br><span class="line">  - effect: NoExecute</span><br><span class="line">    key: node.kubernetes.io/unreachable</span><br><span class="line">    operator: Exists</span><br><span class="line">    tolerationSeconds: 300</span><br><span class="line">  volumes:</span><br><span class="line">  - name: kube-api-access-hbs44</span><br><span class="line">    projected:</span><br><span class="line">      defaultMode: 420</span><br><span class="line">      sources:</span><br><span class="line">      - serviceAccountToken:</span><br><span class="line">          expirationSeconds: 3607</span><br><span class="line">          path: token</span><br><span class="line">      - configMap:</span><br><span class="line">          items:</span><br><span class="line">          - key: ca.crt</span><br><span class="line">            path: ca.crt</span><br><span class="line">          name: kube-root-ca.crt</span><br><span class="line">      - downwardAPI:</span><br><span class="line">          items:</span><br><span class="line">          - fieldRef:</span><br><span class="line">              apiVersion: v1</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">            path: namespace</span><br><span class="line">status:</span><br><span class="line">  conditions:</span><br><span class="line">  - lastProbeTime: null</span><br><span class="line">    lastTransitionTime: <span class="string">&quot;2021-06-29T09:30:06Z&quot;</span></span><br><span class="line">    status: <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="built_in">type</span>: Initialized</span><br><span class="line">  - lastProbeTime: null</span><br><span class="line">    lastTransitionTime: <span class="string">&quot;2021-06-29T09:30:10Z&quot;</span></span><br><span class="line">    status: <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="built_in">type</span>: Ready</span><br><span class="line">  - lastProbeTime: null</span><br><span class="line">    lastTransitionTime: <span class="string">&quot;2021-06-29T09:30:10Z&quot;</span></span><br><span class="line">    status: <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="built_in">type</span>: ContainersReady</span><br><span class="line">  - lastProbeTime: null</span><br><span class="line">    lastTransitionTime: <span class="string">&quot;2021-06-29T09:30:06Z&quot;</span></span><br><span class="line">    status: <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="built_in">type</span>: PodScheduled</span><br><span class="line">  containerStatuses:</span><br><span class="line">  - containerID: docker://be93c1053049f1c98ccd7b3c3b1083edf35093ba0a4c916cd3445440ffee928f</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imageID: docker-pullable://ikubernetes/demoapp@sha256:6698b205eb18fb0171398927f3a35fe27676c6bf5757ef57a35a4b055badf2c3</span><br><span class="line">    lastState: &#123;&#125;</span><br><span class="line">    name: demoapp</span><br><span class="line">    ready: <span class="literal">true</span></span><br><span class="line">    restartCount: 0</span><br><span class="line">    started: <span class="literal">true</span></span><br><span class="line">    state:</span><br><span class="line">      running:</span><br><span class="line">        startedAt: <span class="string">&quot;2021-06-29T09:30:09Z&quot;</span></span><br><span class="line">  hostIP: 172.16.11.82</span><br><span class="line">  phase: Running</span><br><span class="line">  podIP: 10.244.2.13</span><br><span class="line">  podIPs:</span><br><span class="line">  - ip: 10.244.2.13</span><br><span class="line">  qosClass: BestEffort</span><br><span class="line">  startTime: <span class="string">&quot;2021-06-29T09:30:06Z&quot;</span></span><br></pre></td></tr></table></figure>

<p>4.打印Pod详细描述信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe pod mypod</span></span><br><span class="line">Name:         mypod                                 <span class="comment"># pod名字</span></span><br><span class="line">Namespace:    default																<span class="comment"># 所处的名称空间</span></span><br><span class="line">Priority:     0																			<span class="comment"># 优先级</span></span><br><span class="line">Node:         k8s-node02/172.16.11.82								<span class="comment"># 被调度到的节点</span></span><br><span class="line">Start Time:   Tue, 29 Jun 2021 09:30:06 +0000				<span class="comment"># 启动时间</span></span><br><span class="line">Labels:       app=mypod															<span class="comment"># 标签</span></span><br><span class="line">              release=canary</span><br><span class="line">Annotations:  &lt;none&gt;																<span class="comment"># 注解</span></span><br><span class="line">Status:       Running																<span class="comment"># 相位</span></span><br><span class="line">IP:           10.244.2.13														<span class="comment"># pod ip</span></span><br><span class="line">IPs:</span><br><span class="line">  IP:  10.244.2.13</span><br><span class="line">Containers:																					<span class="comment"># 内部的容器列表和容器信息</span></span><br><span class="line">  demoapp:</span><br><span class="line">    Container ID:   docker://be93c1053049f1c98ccd7b3c3b1083edf35093ba0a4c916cd3445440ffee928f</span><br><span class="line">    Image:          ikubernetes/demoapp:v1.0</span><br><span class="line">    Image ID:       docker-pullable://ikubernetes/demoapp@sha256:6698b205eb18fb0171398927f3a35fe27676c6bf5757ef57a35a4b055badf2c3</span><br><span class="line">    Port:           &lt;none&gt;</span><br><span class="line">    Host Port:      &lt;none&gt;</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Tue, 29 Jun 2021 09:30:09 +0000</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0																<span class="comment"># 容器重启次数</span></span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-hbs44 (ro)</span><br><span class="line">Conditions:																					<span class="comment"># Pod的处境</span></span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             True</span><br><span class="line">  ContainersReady   True</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  kube-api-access-hbs44:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             <span class="literal">true</span></span><br><span class="line">QoS Class:                   BestEffort						<span class="comment"># 服务质量类别</span></span><br><span class="line">Node-Selectors:              &lt;none&gt;</span><br><span class="line">Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists <span class="keyword">for</span> 300s			<span class="comment"># 污点容忍度</span></span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">Events:                      &lt;none&gt;								<span class="comment"># pod相关事件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod的创建和删除过程</title>
    <url>/2021/07/03/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/02Pod%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4%E8%BF%87%E7%A8%8B/Pod%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="Pod创建过程"><a href="#Pod创建过程" class="headerlink" title="Pod创建过程"></a>Pod创建过程</h3><p><img src="img1.png"></p>
<ol>
<li>用户使用kubectl创建一个pod，将请求发送给<code>API Server</code>，<code>API Server</code>将其存入etcd</li>
<li>Scheduler会看到Pod未被处于调度状态，其会为Pod选择一个Node并建立绑定关系，然后写入etcd.</li>
<li>Node上的kubelet监视到<code>API Server</code>上与自己有关的Pod创建了，于是kubelet拿到配置并运行容器，容器运行完毕后将其存回到<code>API Server</code>，由<code>API server</code>写入到etcd中。</li>
</ol>
<p>能与<code>etcd</code>交互的只有<code>API Server</code>，所有组件彼此间协作都是通过<code>API Server</code>来完成的。</p>
<h3 id="Pod删除过程"><a href="#Pod删除过程" class="headerlink" title="Pod删除过程"></a>Pod删除过程</h3><p><img src="img2.png"></p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>向Pod中传递环境变量</title>
    <url>/2021/07/03/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/03%E5%90%91Pod%E4%B8%AD%E4%BC%A0%E9%80%92%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/%E5%90%91Pod%E4%B8%AD%E4%BC%A0%E9%80%92%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>环境变量是用来做容器配置的非常重要的环节，容器制作时，如果配置文件已经被固定，这就意味着容器只能适用于一种环境。所以在容器制作过程中如果需要向容器内部传送环境变量来改变配置，则需要使用卷挂载或使用<code>enterypoint</code>脚本来实现。否则k8s向容器中传递的变量除了能出现在容器内的<code>printenv</code>中之外，其他将毫无意义。</p>
<p>以下以<code>ikubernetes/demoapp:v1.0</code>镜像为例，此境支持<code>HOST</code>和<code>PORT</code>变量的接收。</p>
<h3 id="变量传递HOST"><a href="#变量传递HOST" class="headerlink" title="变量传递HOST"></a>变量传递HOST</h3><p>1.创建资源清单。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># vim mypod-with-env-var.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mypod-with-env-var</span><br><span class="line">  labels:</span><br><span class="line">    app: mypod</span><br><span class="line">    release: canary</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    env:</span><br><span class="line">    - name: HOST</span><br><span class="line">      value: <span class="string">&quot;127.0.0.1&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.引用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl apply -f mypod-with-env-var.yaml</span></span><br><span class="line">pod/mypod-with-env-var created</span><br></pre></td></tr></table></figure>

<p>3.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl exec mypod-with-env-var -- ss -tnl</span></span><br><span class="line">State    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port  Process</span><br><span class="line">LISTEN   0        128            127.0.0.1:80            0.0.0.0:*              </span><br><span class="line"><span class="comment"># 容器已经监听在回环地址上</span></span><br></pre></td></tr></table></figure>

<h3 id="变量传递HOST-PORT"><a href="#变量传递HOST-PORT" class="headerlink" title="变量传递HOST,PORT"></a>变量传递HOST,PORT</h3><p>1.修改资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># vim mypod-with-env-var.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mypod-with-env-var</span><br><span class="line">  labels:</span><br><span class="line">    app: mypod</span><br><span class="line">    release: canary</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    env:</span><br><span class="line">    - name: HOST</span><br><span class="line">      value: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    - name: PORT</span><br><span class="line">      value: <span class="string">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl apply -f mypod-with-env-var.yaml</span></span><br><span class="line">pod/mypod-with-env-var created</span><br></pre></td></tr></table></figure>

<p>3.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl exec mypod-with-env-var -- ss -tnl</span></span><br><span class="line">State    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port  Process</span><br><span class="line">LISTEN   0        128            127.0.0.1:8080          0.0.0.0:*              </span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>向容器内传递的变量，容器内必须存在，否则将没有意义</li>
<li>ENV是容器级别的字段，只在容器内部生效，一个pod内可以存在多个容器</li>
</ol>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>暴露容器端口</title>
    <url>/2021/07/03/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/04%E6%9A%B4%E9%9C%B2%E5%AE%B9%E5%99%A8%E7%AB%AF%E5%8F%A3/%E6%9A%B4%E9%9C%B2%E5%AE%B9%E5%99%A8%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<p>在<code>Docker</code>中经常需要使用<code>expose</code>来暴露容器中的端口。但是在<code>Pod</code>上暴露端口看上去没有什么用，因为<code>Pod</code>与<code>Pod</code>之间跨主机能直接访问。而<code>Pod</code>与宿主机之外的流量也无法直接访问，除非使用宿主机的<code>NodePort</code>，或者与<code>Service</code>进行通信。</p>
<h3 id="Pod向外部暴露端口"><a href="#Pod向外部暴露端口" class="headerlink" title="Pod向外部暴露端口"></a>Pod向外部暴露端口</h3><p>1.创建配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># vim mypod-with-ports.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mypod-with-ports</span><br><span class="line">  labels:</span><br><span class="line">    app: mypod</span><br><span class="line">    release: canary</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      containerPort: 80		<span class="comment"># 指定容器内的监听的端口，可以不指定Pod在k8s内可以直接访问到</span></span><br><span class="line">      protocol: TCP</span><br><span class="line">      hostPort: 10080			<span class="comment"># 指定Pod所在的主机上开放指定的端口</span></span><br><span class="line"><span class="comment"># 如果所有节点上的此端口都被占pod将被pending</span></span><br></pre></td></tr></table></figure>

<p>2.创建出容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl apply -f mypod-with-ports.yaml</span></span><br><span class="line">pod/mypod-with-ports created</span><br></pre></td></tr></table></figure>

<p>3.获取容器信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl get pods mypod-with-ports -o wide</span></span><br><span class="line">NAME               READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">mypod-with-ports   1/1     Running   0          7m31s   10.244.3.13   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>4.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># curl k8s-node03:10080</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 172.16.11.71, ServerName: mypod-with-ports, ServerIP: 10.244.3.13!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>共享宿主机网络名称空间</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/05%E5%85%B1%E4%BA%AB%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4/%E5%85%B1%E4%BA%AB%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>使用<code>hostPort</code>引入外部流量存在着无法确定<code>pod</code>调度到后端的哪个节点的缺陷。</p>
<p>以下为另一种引入外部流量的实现方法，让容器共享宿主机的网络名称空间。</p>
<h3 id="共享Network示例"><a href="#共享Network示例" class="headerlink" title="共享Network示例"></a>共享Network示例</h3><p>1.创建资源配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># vim mypod-host-network.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mypod-host-network</span><br><span class="line">  labels:</span><br><span class="line">    app: demoapp</span><br><span class="line">    release: canary</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: mypod-host-network</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    env:</span><br><span class="line">    - name: PORT</span><br><span class="line">      value: <span class="string">&quot;8080&quot;</span></span><br><span class="line">  hostNetwork: <span class="literal">true</span>    <span class="comment"># 共享宿主机的网络名称空间，默认为false</span></span><br></pre></td></tr></table></figure>

<p>2.创建容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl apply -f mypod-host-network.yaml</span></span><br><span class="line">pod/mypod-host-network created</span><br></pre></td></tr></table></figure>

<p>3.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看容器被调度的节点</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl get pods -o wide mypod-host-network</span></span><br><span class="line">NAME                 READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">mypod-host-network   1/1     Running   0          21s   172.16.11.81   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># curl 172.16.11.81:8080</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 172.16.11.71, ServerName: k8s-node01, ServerIP: 172.16.11.81!</span><br><span class="line"><span class="comment"># serverName显示的为k8s-node01因为使用的是宿主机的网络名称空间。</span></span><br></pre></td></tr></table></figure>

<p>4.在node01上查看端口监听</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-node01:~<span class="comment"># ss -tnlp</span></span><br><span class="line">State               Recv-Q              Send-Q                           Local Address:Port                            Peer Address:Port             Process</span><br><span class="line">LISTEN              0                   128                                    0.0.0.0:8080                                 0.0.0.0:*                 users:((<span class="string">&quot;python3&quot;</span>,pid=3226710,fd=3))</span><br><span class="line">LISTEN              0                   20480                                  0.0.0.0:31156                                0.0.0.0:*                 users:((<span class="string">&quot;kube-proxy&quot;</span>,pid=15562,fd=10))</span><br><span class="line">LISTEN              0                   4096                             127.0.0.53%lo:53                                   0.0.0.0:*                 users:((<span class="string">&quot;systemd-resolve&quot;</span>,pid=685,fd=13))</span><br><span class="line">LISTEN              0                   128                                    0.0.0.0:22                                   0.0.0.0:*                 users:((<span class="string">&quot;sshd&quot;</span>,pid=762,fd=3))</span><br><span class="line">LISTEN              0                   128                                  127.0.0.1:6010                                 0.0.0.0:*                 users:((<span class="string">&quot;sshd&quot;</span>,pid=3247420,fd=10))</span><br><span class="line">LISTEN              0                   20480                                127.0.0.1:11910                                0.0.0.0:*                 users:((<span class="string">&quot;kubelet&quot;</span>,pid=14915,fd=13))</span><br><span class="line">LISTEN              0                   20480                                127.0.0.1:10248                                0.0.0.0:*                 users:((<span class="string">&quot;kubelet&quot;</span>,pid=14915,fd=30))</span><br><span class="line">LISTEN              0                   20480                                127.0.0.1:10249                                0.0.0.0:*                 users:((<span class="string">&quot;kube-proxy&quot;</span>,pid=15562,fd=22))</span><br><span class="line">LISTEN              0                   20480                                        *:10250                                      *:*                 users:((<span class="string">&quot;kubelet&quot;</span>,pid=14915,fd=38))</span><br><span class="line">LISTEN              0                   20480                                        *:10256                                      *:*                 users:((<span class="string">&quot;kube-proxy&quot;</span>,pid=15562,fd=20))</span><br><span class="line">LISTEN              0                   128                                       [::]:22                                      [::]:*                 users:((<span class="string">&quot;sshd&quot;</span>,pid=762,fd=4))</span><br><span class="line">LISTEN              0                   128                                      [::1]:6010                                    [::]:*                 users:((<span class="string">&quot;sshd&quot;</span>,pid=3247420,fd=9))</span><br></pre></td></tr></table></figure>

<p>5.查看容器内的网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter01<span class="comment"># kubectl exec mypod-host-network -- ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:4f:07:f6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.11.81/24 brd 172.16.11.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::5054:ff:fe4f:7f6/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    link/ether 02:42:8e:85:75:5f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN group default</span><br><span class="line">    link/ether 7e:c5:0b:9e:6a:5c brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.244.1.0/32 brd 10.244.1.0 scope global flannel.1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::7cc5:bff:fe9e:6a5c/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: cni0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether ca:45:cb:f7:14:54 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.244.1.1/24 brd 10.244.1.255 scope global cni0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::c845:cbff:fef7:1454/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment">#...以下省略...</span></span><br></pre></td></tr></table></figure>

<p>6.查看宿主机网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-node01:~<span class="comment"># ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:4f:07:f6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.11.81/24 brd 172.16.11.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::5054:ff:fe4f:7f6/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    link/ether 02:42:8e:85:75:5f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN group default</span><br><span class="line">    link/ether 7e:c5:0b:9e:6a:5c brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.244.1.0/32 brd 10.244.1.0 scope global flannel.1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::7cc5:bff:fe9e:6a5c/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: cni0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether ca:45:cb:f7:14:54 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.244.1.1/24 brd 10.244.1.255 scope global cni0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::c845:cbff:fef7:1454/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...以下省略...</span></span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>不建议使用hostNetwork共享网络名称空间。这种操作具有危险性，使用hostNetwork能使得容器内部可以操作宿主机的网络。</p>
<p>如果容器内存在漏洞，整个节点的流量均会被控制，进而使得整个k8s集群被劫持。</p>
<p>所以容器创建时，出于安全考虑应该禁止共享宿主机网路名称空间。这些操作需要在容器的安全上下文中进行解决。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>容器的安全上下文</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/06%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87/%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<p>在容器上内嵌了<code>containers</code>字段，额外还定义了<code>hostPort</code>，就意味着可以像<code>docker</code>一样，让<code>pod</code>运行的那个主机打开一个<code>DNAT</code>的端口映射，把宿主机的某个请求做地址转换后转发至内部的容器之上。而<code>hostNetwork</code>所提供的功能是让<code>pod</code>直接共享了它所在的宿主机的网路名称空间。</p>
<p>以上的两个操作都属于特权操作，正常情况下，一个多租户的<code>K8S</code>，使用以上两种方式来让外部的流量进入<code>k8s</code>将会造成隔离级的开放。而k8s为了安全运行<code>pod</code>级容器专门设计了一种叫安全上下文的概念（<code>SecurityContext</code>）。</p>
<ul>
<li><code>SecuritContext</code>：安全上下文主要是允许用户和管理员定义容器或Pod的特权或访问控制机制，以配置容器、主机以及主机之上的其他容器之间的隔离方式或隔离级别。安全上下文就是一组决定容器如何创建和运行的约束条件，他们代表创建和运行容器时使用的运行时参数。</li>
</ul>
<h3 id="SecurityContext级别"><a href="#SecurityContext级别" class="headerlink" title="SecurityContext级别"></a>SecurityContext级别</h3><p><code>Pod</code>上的<code>SecurityContext</code>有两个级别：</p>
<ul>
<li>Pod级别：对Pod内的所有容器生效</li>
<li>容器级别：只对Pod内的单个容器生效</li>
</ul>
<h4 id="安全上下文相关资源定义"><a href="#安全上下文相关资源定义" class="headerlink" title="安全上下文相关资源定义"></a>安全上下文相关资源定义</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata: &#123;…&#125;</span><br><span class="line">spec:</span><br><span class="line">  securityContext:        <span class="comment"># Pod级别的安全上下文，对内部所有容器均有效</span></span><br><span class="line">    runAsUser &lt;<span class="built_in">integer</span>&gt;   <span class="comment"># 以指定的用户身份运行容器进程，默认由镜像中的USER指定</span></span><br><span class="line">    runAsGroup &lt;<span class="built_in">integer</span>&gt;   <span class="comment"># 以指定的用户组运行容器进程，默认使用的组随容器运行时</span></span><br><span class="line">    supplementalGroups  &lt;[]<span class="built_in">integer</span>&gt;  <span class="comment"># 为容器中1号进程的用户添加的附加组；</span></span><br><span class="line">    fsGroup &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 为容器中的1号进程附加的一个专用组，其功能类似于sgid</span></span><br><span class="line">    runAsNonRoot &lt;boolean&gt;  <span class="comment"># 是否以非root身份运行</span></span><br><span class="line">    seLinuxOptions &lt;Object&gt;  <span class="comment"># SELinux的相关配置</span></span><br><span class="line">    sysctls  &lt;[]Object&gt;  <span class="comment"># 应用到当前Pod上的名称空间级别的sysctl参数设置列表</span></span><br><span class="line">    windowsOptions &lt;Object&gt;  <span class="comment"># Windows容器专用的设置</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: …</span><br><span class="line">    image: …</span><br><span class="line">    securityContext:       <span class="comment"># 容器级别的安全上下文，仅生效于当前容器</span></span><br><span class="line">      runAsUser &lt;<span class="built_in">integer</span>&gt;   <span class="comment"># 以指定的用户身份运行容器进程</span></span><br><span class="line">      runAsGroup &lt;<span class="built_in">integer</span>&gt;   <span class="comment"># 以指定的用户组运行容器进程</span></span><br><span class="line">      runAsNonRoot &lt;boolean&gt;  <span class="comment"># 是否以非root身份运行</span></span><br><span class="line">      allowPrivilegeEscalation &lt;boolean&gt; <span class="comment"># 是否允许特权升级</span></span><br><span class="line">      capabilities &lt;Object&gt;  <span class="comment"># 于当前容器上添加（add）或删除（drop）的内核能力</span></span><br><span class="line">        add  &lt;[]string&gt;  <span class="comment"># 添加由列表定义的各内核能力</span></span><br><span class="line">        drop  &lt;[]string&gt;  <span class="comment"># 移除由列表定义的各内核能力</span></span><br><span class="line">      privileged &lt;boolean&gt;  <span class="comment"># 是否运行为特权容器，一般开放给k8s系统级别容器。不到万不得已不启用。</span></span><br><span class="line">      procMount &lt;string&gt;   <span class="comment"># 设置容器的procMount类型，默认为DefaultProcMount；</span></span><br><span class="line">      readOnlyRootFilesystem &lt;boolean&gt; <span class="comment"># 是否将根文件系统设置为只读模式</span></span><br><span class="line">      seLinuxOptions &lt;Object&gt;  <span class="comment"># SELinux的相关配置</span></span><br><span class="line">      windowsOptions &lt;Object&gt;  <span class="comment"># windows容器专用的设置</span></span><br></pre></td></tr></table></figure>

<h3 id="SecurityContext示例"><a href="#SecurityContext示例" class="headerlink" title="SecurityContext示例"></a>SecurityContext示例</h3><h4 id="以普通用户运行容器"><a href="#以普通用户运行容器" class="headerlink" title="以普通用户运行容器"></a>以普通用户运行容器</h4><p>1.创建配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim securitycontext-runasuser-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: securitycontext-runasuser-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demo</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    env:</span><br><span class="line">    - name: PORT</span><br><span class="line">      value: <span class="string">&quot;8080&quot;</span></span><br><span class="line">    securityContext:</span><br><span class="line">      runAsUser: 1001   <span class="comment"># 使用普通用户，普通用户默认不具备监听1024内端口</span></span><br><span class="line">      runAsGroup: 1001</span><br></pre></td></tr></table></figure>

<p>2.应用配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f securitycontext-runasuser-demo.yaml</span></span><br><span class="line">pod/securitycontext-runasuser-demo created</span><br></pre></td></tr></table></figure>

<p>3.验证pod是否运行为普通用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec securitycontext-runasuser-demo -- ps aux</span></span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    1 1001      0:00 python3 /usr/<span class="built_in">local</span>/bin/demo.py</span><br><span class="line">   14 1001      0:00 ps aux</span><br><span class="line"><span class="comment"># 已运行为普通用户1001</span></span><br></pre></td></tr></table></figure>

<h4 id="设定容器级capabilities"><a href="#设定容器级capabilities" class="headerlink" title="设定容器级capabilities"></a>设定容器级capabilities</h4><p>可设定的<code>capabilities</code>有以下：</p>
<ul>
<li><code>CAP_CHOWN</code>：改变文件UID和GID</li>
<li><code>CAP_MKNOD</code>：能使用mknod()，创建设备文件；</li>
<li><code>CAP_NET_ADMIN</code>：网络管理权限。</li>
<li><code>CAP_SYS_ADMIN</code>：大部分管理权限</li>
<li><code>CAP_SYS_TIME</code>：管理内核时钟</li>
<li><code>CAP_SYS_MODULE</code>：装卸载内核模块</li>
<li><code>CAP_NET_BIND_SERVICE</code>：是否允许能够将绑定1024以内端口</li>
</ul>
<h4 id="设定网络管理权限能力"><a href="#设定网络管理权限能力" class="headerlink" title="设定网络管理权限能力"></a>设定网络管理权限能力</h4><p>1.编写配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim securitycontext-capabilities-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: securitycontext-capabilities-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demo</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>]</span><br><span class="line">    args: [<span class="string">&quot;/sbin/iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-port 80 &amp;&amp; /usr/bin/python3 /usr/local/bin/demo.py&quot;</span>]</span><br><span class="line">    securityContext:</span><br><span class="line">      capabilities:</span><br><span class="line">        add: [<span class="string">&#x27;NET_ADMIN&#x27;</span>]     <span class="comment"># 给与网络管理权限能力，容器默认启动为root权限，但是没有修改iptable规则的能力，需要添加。</span></span><br><span class="line">        drop: [<span class="string">&#x27;CHOWN&#x27;</span>]				 <span class="comment"># 删除修改文件属主属组能力</span></span><br></pre></td></tr></table></figure>

<p>2.引用容器清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f securitycontext-capabilities-demo.yaml</span></span><br><span class="line">pod/securitycontext-capabilities-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods securitycontext-capabilities-demo -o wide</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">securitycontext-capabilities-demo   1/1     Running   0          49s   10.244.2.18   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>3.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试请求8080嫩否被转发</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl 10.244.2.18:8080</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: securitycontext-capabilities-demo, ServerIP: 10.244.2.18!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器内iptables规则</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec securitycontext-capabilities-demo -- iptables -t nat -nvL</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">    1    60 REDIRECT   tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 redir ports 80</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 1 packets, 60 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试chown能否使用</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec securitycontext-capabilities-demo -- chown 2:2 /etc/fstab</span></span><br><span class="line">chown: /etc/fstab: Operation not permitted</span><br><span class="line"><span class="built_in">command</span> terminated with <span class="built_in">exit</span> code 1</span><br></pre></td></tr></table></figure>

<h4 id="设定容器内sysctls的参数"><a href="#设定容器内sysctls的参数" class="headerlink" title="设定容器内sysctls的参数"></a>设定容器内sysctls的参数</h4><p>我们还可以改变pod内部的网络名称空间的内核参数，而事实上目前在容器能安全允许pod修改的参数只有三个，并且其作用并非很大。如果要启用其他非安全参数，则需要在k8s启动时，允许非安全参数也能在pod内进行设定。</p>
<h5 id="pod内可安全设定的内核参数"><a href="#pod内可安全设定的内核参数" class="headerlink" title="pod内可安全设定的内核参数"></a>pod内可安全设定的内核参数</h5><p>k8s默认允许设定的安全的内核参数有以下三个：</p>
<ul>
<li><code>kernel.shm_rmid_forced</code></li>
<li><code>net.ipv4.ip_local_port_range</code></li>
<li><code>net.ipv4.tcp_syncookies</code></li>
</ul>
<p>除此之外都不允许设定，如要设定需要修改k8s启动参数。</p>
<h5 id="非安全参数设定方法示例"><a href="#非安全参数设定方法示例" class="headerlink" title="非安全参数设定方法示例"></a>非安全参数设定方法示例</h5><p>1.修改<code>/etc/default/kubelet</code>文件，加入需要启用的非安全参数，如果没有此文件可以自己创建，<code>kubelet</code>会自动读取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim /etc/default/kubelet</span></span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">&#x27;--allowed-unsafe-sysctls=net.core.somaxconn,net.ipv4.ip_unprivileged_port_start&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># net.core.somaxconn 设定系统级别默认入栈队列大小，默认128</span></span><br><span class="line"><span class="comment"># net.ipv4.ip_unprivileged_port_start 设定非特权用户默认可以使用的端口的起始值，默认1024</span></span><br></pre></td></tr></table></figure>

<p>2.重启kubelet</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># systemctl restart kubelet</span></span><br></pre></td></tr></table></figure>

<p>注意：以上操作所有节点都需要修改，因为pod调度到那个节点上是未知的。</p>
<h5 id="参数设定示例"><a href="#参数设定示例" class="headerlink" title="参数设定示例"></a>参数设定示例</h5><p>1.创建配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim securitycontext-sysctls-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: securitycontext-sysctls-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  securityContext:</span><br><span class="line">    sysctls:</span><br><span class="line">    - name: kernel.shm_rmid_forced</span><br><span class="line">      value: <span class="string">&quot;0&quot;</span></span><br><span class="line">    - name: net.ipv4.ip_unprivileged_port_start    <span class="comment"># 设定非特权用户监听的端口</span></span><br><span class="line">      value: <span class="string">&quot;0&quot;</span></span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    securityContext:</span><br><span class="line">      runAsUser: 1001            <span class="comment"># 为了显示出非特权用户监听的特权端口的效果此处使用1001用户</span></span><br><span class="line">      runAsGroup: 1001</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于此清单中net.ipv4.ip_unprivileged_port_start为非安全参数所以需要修改/etc/default/kubelet文件</span></span><br></pre></td></tr></table></figure>

<p>2.在所有节点修改<code>/etc/default/kubelet</code>文件，加入允许设定的非安全参数，并重启kubelet</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim /etc/default/kubelet</span></span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">&#x27;--allowed-unsafe-sysctls=net.ipv4.ip_unprivileged_port_start&#x27;</span></span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># systemctl restart kubelet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上操作在所有节点上执行</span></span><br></pre></td></tr></table></figure>

<p>3.引用配置清单创建pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f securitycontext-sysctls-demo.yaml</span></span><br><span class="line">pod/securitycontext-sysctls-demo created</span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods securitycontext-sysctls-demo -o wide</span></span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">securitycontext-sysctls-demo   1/1     Running   0          15s   10.244.3.18   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>4.验证用户及监听</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听端口为80</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec securitycontext-sysctls-demo -- ss -tnl</span></span><br><span class="line">State    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port  Process</span><br><span class="line">LISTEN   0        128              0.0.0.0:80            0.0.0.0:*              </span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户为1001</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec securitycontext-sysctls-demo -- ps aux</span></span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    1 1001      0:00 python3 /usr/<span class="built_in">local</span>/bin/demo.py</span><br><span class="line">   15 1001      0:00 ps aux</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod探针</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/07Pod%E6%8E%A2%E9%92%88/Pod%E6%8E%A2%E9%92%88/</url>
    <content><![CDATA[<p>以镜像格式打包并托管运行于编排系统或容器引擎上的容器就是一个黑盒，因此想要探测容器内部引用进程到底运行健康与否都被容器边界所阻挡，因此正常情况下任何一个为云原生环境所开发的应用都应该考虑到此问题，所以为了便于监测容器自身运行健康与否都应该拥有一个用于探测容器内部应用的探测接口。</p>
<p>一般而言一个云原生应用需要以下接口：</p>
<p><img src="img1.png"></p>
<p>为了便于探测一个Pod内的容器运行健康与否，Pod在设计上直接在Pod级别或Pod内的容器级别就支持允许用户下探针的接口。</p>
<h3 id="Pod内置的三种探针探测"><a href="#Pod内置的三种探针探测" class="headerlink" title="Pod内置的三种探针探测"></a>Pod内置的三种探针探测</h3><ul>
<li>LivenessProbe: 存活探针。周期性检测，检测未通过时，kubelet会更具restartPolicy的定义来决定是否会重启该容器；未定义时，kubelet认为容器未终止，即为健康；</li>
<li>ReadinessProbe: 就绪性探针。周期性检测，检测未通过时，与该Pod关联的Service，会将该Pod从Service的后端可用端点中删除；直到再次就绪，重新添加回来。未定义时，只要容器未终止，即未就绪；</li>
<li>StartupProbe: 启动状态检测。用于检测容器刚运行时，检测其启动是否成功。StartupProbe探针正常退出后，livenessProbe才会工作。便于用户同时使用livenessProbe不同参数或阈值。</li>
</ul>
<h4 id="探针相关清单列表"><a href="#探针相关清单列表" class="headerlink" title="探针相关清单列表"></a>探针相关清单列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: …</span><br><span class="line">    image: …</span><br><span class="line">    livenessProbe:</span><br><span class="line">      <span class="built_in">exec</span> &lt;Object&gt;     <span class="comment"># 命令式探针</span></span><br><span class="line">      httpGet &lt;Object&gt;  <span class="comment"># http GET类型的探针</span></span><br><span class="line">      tcpSocket &lt;Object&gt;  <span class="comment"># tcp Socket类型的探针</span></span><br><span class="line">      initialDelaySeconds &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 发起初次探测请求的延后时长</span></span><br><span class="line">      periodSeconds &lt;<span class="built_in">integer</span>&gt;         <span class="comment"># 请求周期</span></span><br><span class="line">      timeoutSeconds &lt;<span class="built_in">integer</span>&gt;        <span class="comment"># 超时时长</span></span><br><span class="line">      successThreshold &lt;<span class="built_in">integer</span>&gt;      <span class="comment"># 成功阈值</span></span><br><span class="line">      failureThreshold &lt;<span class="built_in">integer</span>&gt;       <span class="comment"># 失败阈值</span></span><br></pre></td></tr></table></figure>

<h4 id="探针的内置检测方法"><a href="#探针的内置检测方法" class="headerlink" title="探针的内置检测方法"></a>探针的内置检测方法</h4><p>Pod的3种探针检测都内置了3种检测方法：</p>
<ul>
<li>ExecAction：直接执行命令，命令成功返回表示探测成功；</li>
<li>TCPSocketAction：端口能正常打开，即成功；</li>
<li>HTTPGetAction：向指定的path发HTTP请求，2xx, 3xx的响应码表示成功；</li>
</ul>
<h3 id="存活探针示例"><a href="#存活探针示例" class="headerlink" title="存活探针示例"></a>存活探针示例</h3><h4 id="ExecAction示例"><a href="#ExecAction示例" class="headerlink" title="ExecAction示例"></a>ExecAction示例</h4><figure class="highlight plaintext"><figcaption><span>探针是在容器内周期性执行某命令，若命令成功则表示容器健康的一种探测方法。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.编写配置清单</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">root@k8s-master01:~/yaml/chapter04# vim liveness-exec-demo.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: liveness-exec-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demo</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    livenessProbe:</span><br><span class="line">      exec:</span><br><span class="line">        command: [&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;[ &quot;$(curl -s 127.0.0.1/livez)&quot; == &quot;OK&quot; ]&#x27;]</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      timeoutSeconds: 1</span><br><span class="line">      periodSeconds: 5</span><br></pre></td></tr></table></figure>

<p>2.启动容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f liveness-exec-demo.yaml</span></span><br><span class="line">pod/liveness-exec-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods liveness-exec-demo -o wide</span></span><br><span class="line">NAME                 READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">liveness-exec-demo   1/1     Running   0          68s   10.244.1.20   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>3.测试存活性探针</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问容器内的/livez，获得ok</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl 10.244.1.20/livez</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该容器支持POST,将livez改成FAIL后再次访问</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl -XPOST -d &#x27;livez=FAIL&#x27; 10.244.1.20/livez</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl 10.244.1.20/livez</span></span><br><span class="line">FAIL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监视容器的变化。</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods liveness-exec-demo -w</span></span><br><span class="line">NAME                 READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-exec-demo   1/1     Running   0          11m</span><br><span class="line">liveness-exec-demo   1/1     Running   1          11m    <span class="comment"># 容器被重启了。</span></span><br></pre></td></tr></table></figure>

<h4 id="TCPSocketAction示例"><a href="#TCPSocketAction示例" class="headerlink" title="TCPSocketAction示例"></a>TCPSocketAction示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.编写配置清单</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">root@k8s-master01:~/yaml/chapter04# vim liveness-tcpsocket-demo.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: liveness-tcpsocket-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demo</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      containerPort: 80</span><br><span class="line">    securityContext:</span><br><span class="line">      capabilities:</span><br><span class="line">        add:</span><br><span class="line">          - NET_ADMIN     # 给与网络控制权限</span><br><span class="line">    livenessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: http</span><br><span class="line">      periodSeconds: 5</span><br><span class="line">      initialDelaySeconds: 5</span><br></pre></td></tr></table></figure>

<p>2.引用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f liveness-tcpsocket-demo.yaml</span></span><br><span class="line">pod/liveness-tcpsocket-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods liveness-tcpsocket-demo -o wide</span></span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">liveness-tcpsocket-demo   1/1     Running   0          7m29s   10.244.3.19   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试存活性探针</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在容器内将送往80端口的请求全部DROP</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl exec liveness-tcpsocket-demo -- iptables -A INPUT -p TCP --dport 80 -j DROP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Pod的描述信息，看Events部分</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe pod liveness-tcpsocket-demo</span></span><br><span class="line">Name:         liveness-tcpsocket-demo</span><br><span class="line">Namespace:    default</span><br><span class="line">Priority:     0</span><br><span class="line">Node:         k8s-node03/172.16.11.83</span><br><span class="line">Start Time:   Fri, 02 Jul 2021 01:15:08 +0000</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Running</span><br><span class="line">IP:           10.244.3.19</span><br><span class="line">IPs:</span><br><span class="line">  IP:  10.244.3.19</span><br><span class="line">Containers:</span><br><span class="line">  demo:</span><br><span class="line">    Container ID:   docker://9d3b43e56ff1ddfb12be7315402193d4ce086f943a8aae2a70805982e5730712</span><br><span class="line">    Image:          ikubernetes/demoapp:v1.0</span><br><span class="line">    Image ID:       docker-pullable://ikubernetes/demoapp@sha256:6698b205eb18fb0171398927f3a35fe27676c6bf5757ef57a35a4b055badf2c3</span><br><span class="line">    Port:           80/TCP</span><br><span class="line">    Host Port:      0/TCP</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Fri, 02 Jul 2021 01:15:11 +0000</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Liveness:       tcp-socket :http delay=5s timeout=1s period=5s <span class="comment">#success=1 #failure=3</span></span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-rq2n7 (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             True</span><br><span class="line">  ContainersReady   True</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  kube-api-access-rq2n7:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             <span class="literal">true</span></span><br><span class="line">QoS Class:                   BestEffort</span><br><span class="line">Node-Selectors:              &lt;none&gt;</span><br><span class="line">Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                From               Message</span><br><span class="line">  ----     ------     ----               ----               -------</span><br><span class="line">  Normal   Scheduled  21m                default-scheduler  Successfully assigned default/liveness-tcpsocket-demo to k8s-node03</span><br><span class="line">  Normal   Pulled     21m                kubelet            Container image <span class="string">&quot;ikubernetes/demoapp:v1.0&quot;</span> already present on machine</span><br><span class="line">  Normal   Created    21m                kubelet            Created container demo</span><br><span class="line">  Normal   Started    21m                kubelet            Started container demo</span><br><span class="line">  Warning  Unhealthy  14s (x3 over 24s)  kubelet            Liveness probe failed: dial tcp 10.244.3.19:80: i/o timeout</span><br><span class="line">  Normal   Killing    14s                kubelet            Container demo failed liveness probe, will be restarted</span><br><span class="line"><span class="comment"># 已经被探测到容器不监健康被重启</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># watch Pod的状态</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods liveness-tcpsocket-demo -o wide -w</span></span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">liveness-tcpsocket-demo   1/1     Running   0          15m   10.244.3.19   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">liveness-tcpsocket-demo   1/1     Running   1          21m   10.244.3.19   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="comment"># pod被重启一次。</span></span><br></pre></td></tr></table></figure>

<h4 id="HTTPGetAction示例"><a href="#HTTPGetAction示例" class="headerlink" title="HTTPGetAction示例"></a>HTTPGetAction示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1. 编写配置清单</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">root@k8s-master01:~/yaml/chapter04# vim liveness-httpget-demo.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: liveness-httpget-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        port: 80</span><br><span class="line">        path: &quot;/livez&quot;</span><br><span class="line">        scheme: HTTP</span><br><span class="line">      initialDelaySeconds: 5</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>应用配置清单</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f liveness-httpget-demo.yaml</span></span><br><span class="line">pod/liveness-httpget-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods liveness-httpget-demo -o wide</span></span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">liveness-httpget-demo   1/1     Running   0          10s   10.244.2.21   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试httpGet探针</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此容器内支持一种策略当/livez的返回值不为ture时，则返回5XX</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl 10.244.2.21/livez</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将livez的值改为FAIL，后返回值为506</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl -XPOST -d &#x27;livez=FAIL&#x27; 10.244.2.21/livez</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl -I 10.244.2.21/livez</span></span><br><span class="line">HTTP/1.0 506 VARIANT ALSO NEGOTIATES</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 4</span><br><span class="line">Server: Werkzeug/1.0.0 Python/3.8.2</span><br><span class="line">Date: Fri, 02 Jul 2021 03:20:15 GMT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监视容器变化，被重启一次</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods liveness-httpget-demo -o wide -w</span></span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">liveness-httpget-demo   1/1     Running   0          56m   10.244.2.21   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">liveness-httpget-demo   1/1     Running   1          57m   10.244.2.21   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该容器描述信息</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl describe pod liveness-httpget-demo</span></span><br><span class="line">Name:         liveness-httpget-demo</span><br><span class="line">Namespace:    default</span><br><span class="line">Priority:     0</span><br><span class="line">Node:         k8s-node02/172.16.11.82</span><br><span class="line">Start Time:   Fri, 02 Jul 2021 02:23:34 +0000</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Running</span><br><span class="line">IP:           10.244.2.21</span><br><span class="line">IPs:</span><br><span class="line">  IP:  10.244.2.21</span><br><span class="line">Containers:</span><br><span class="line">  demoapp:</span><br><span class="line">    Container ID:   docker://106715f35270b244563fddbca0bb6cd9dc0745623a24ddad4bb22e13c6754fb3</span><br><span class="line">    Image:          ikubernetes/demoapp:v1.0</span><br><span class="line">    Image ID:       docker-pullable://ikubernetes/demoapp@sha256:6698b205eb18fb0171398927f3a35fe27676c6bf5757ef57a35a4b055badf2c3</span><br><span class="line">    Port:           &lt;none&gt;</span><br><span class="line">    Host Port:      &lt;none&gt;</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Fri, 02 Jul 2021 02:23:36 +0000</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Liveness:       http-get http://:80/livez delay=5s timeout=1s period=10s <span class="comment">#success=1 #failure=3</span></span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-tv76f (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             True</span><br><span class="line">  ContainersReady   True</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  kube-api-access-tv76f:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             <span class="literal">true</span></span><br><span class="line">QoS Class:                   BestEffort</span><br><span class="line">Node-Selectors:              &lt;none&gt;</span><br><span class="line">Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                From               Message</span><br><span class="line">  ----     ------     ----               ----               -------</span><br><span class="line">  Normal   Scheduled  57m                default-scheduler  Successfully assigned default/liveness-httpget-demo to k8s-node02</span><br><span class="line">  Normal   Pulled     57m                kubelet            Container image <span class="string">&quot;ikubernetes/demoapp:v1.0&quot;</span> already present on machine</span><br><span class="line">  Normal   Created    57m                kubelet            Created container demoapp</span><br><span class="line">  Normal   Started    57m                kubelet            Started container demoapp</span><br><span class="line">  Warning  Unhealthy  57m                kubelet            Liveness probe failed: Get <span class="string">&quot;http://10.244.2.21:80/livez&quot;</span>: context deadline exceeded (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">  Warning  Unhealthy  15s (x3 over 35s)  kubelet            Liveness probe failed: HTTP probe failed with statuscode: 506</span><br><span class="line">  Normal   Killing    15s                kubelet            Container demoapp failed liveness probe, will be restarted</span><br><span class="line"><span class="comment"># 3次检测失败容器被重启。</span></span><br></pre></td></tr></table></figure>

<h3 id="就绪探针示例"><a href="#就绪探针示例" class="headerlink" title="就绪探针示例"></a>就绪探针示例</h3><h4 id="HTTPGetAction示例-1"><a href="#HTTPGetAction示例-1" class="headerlink" title="HTTPGetAction示例"></a>HTTPGetAction示例</h4><p>1.编写配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim readiness-httpget-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: readiness-httpget-demo.yaml</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    readinessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: <span class="string">&#x27;/readyz&#x27;</span></span><br><span class="line">        port: 80</span><br><span class="line">        scheme: HTTP</span><br><span class="line">      initialDelaySeconds: 15</span><br><span class="line">      timeoutSeconds: 2</span><br><span class="line">      periodSeconds: 5</span><br><span class="line">      failureThreshold: 3</span><br><span class="line">  restartPolicy: Always</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f readiness-httpget-demo.yaml</span></span><br><span class="line">pod/readiness-httpget-demo created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 15秒后就绪性弹探测成功，ready为1</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods readiness-httpget-demo -w</span></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE    IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">readiness-httpget-demo   0/1     Running   0          10s   10.244.1.23   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">readiness-httpget-demo   1/1     Running   0          35s   10.244.1.23   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>3.模拟就序探测失败</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl 10.244.1.23/readyz</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将readyz的值改为FAIL</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl -XPOST -d &#x27;readyz=FAIL&#x27; 10.244.1.23/readyz</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl 10.244.1.23/readyz</span></span><br><span class="line">FAIL</span><br><span class="line"></span><br><span class="line"><span class="comment"># ready失败变为0，此时会从service后端服务中删除</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods readiness-httpget-demo -o wide</span></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">readiness-httpget-demo   0/1     Running   0          4m26s   10.244.1.23   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod钩子</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/08Pod%E9%92%A9%E5%AD%90/Pod%E9%92%A9%E5%AD%90/</url>
    <content><![CDATA[<p><code>Pod</code>中的钩子分为启动后钩子<code>post start hook</code>和结束前钩子<code>pre stop hook</code>。</p>
<ul>
<li><code>post start hook</code>：主要是为了容器启动后做一些初始化工作。只有<code>post start hook</code>启动成功了<code>main container</code>才能正常工作。</li>
<li><code>pre stop hook</code>：一般在主进程结束之前做一些清理操作。清理操作可能会有一些要求，只有清理完成了<code>pod</code>才会终止，所以一定要确保<code>pre stop hook</code>的任务正常结束了，容器才能正常结束。</li>
</ul>
<h3 id="pod钩子示例"><a href="#pod钩子示例" class="headerlink" title="pod钩子示例"></a>pod钩子示例</h3><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f lifecycle-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: lifecycle-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: demo</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    securityContext:</span><br><span class="line">      capabilities:</span><br><span class="line">        add:</span><br><span class="line">        - NET_ADMIN</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: <span class="string">&#x27;/livez&#x27;</span></span><br><span class="line">        port: 80</span><br><span class="line">        scheme: HTTP</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">    lifecycle:</span><br><span class="line">      postStart:</span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-ports 80&#x27;</span>]</span><br><span class="line">      preStop:</span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;while killall python3; do sleep 1; done&#x27;</span>]</span><br><span class="line">  restartPolicy: Always</span><br></pre></td></tr></table></figure>

<p>2.应用清单文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f lifecycle-demo.yaml</span></span><br><span class="line">pod/lifecycle-demo created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已经运行说名内部命令已经启动成功</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods lifecycle-demo -o wide</span></span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">lifecycle-demo   1/1     Running   0          67s   10.244.2.22   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>3.测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器验证iptables规则</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec lifecycle-demo -- iptables -t nat -nvL</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 53 packets, 3180 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">    0     0 REDIRECT   tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 redir ports 80</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 53 packets, 3180 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 访问8080端口测试</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl 10.244.2.22:8080</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: lifecycle-demo, ServerIP: 10.244.2.22!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod初始化容器</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/09Pod%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%B9%E5%99%A8/Pod%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<p>在启动主容器之前还存在一个初始化容器（<code>init containers</code>）。初始化容器的特点在于其若是启动失败，后续的主容器将不会执行。</p>
<p>初始化容器可以存在多个，他们之间依次执行，当多有初始化容器执行完毕后，主容器开始执行。</p>
<p>在之前<code>post start hook</code>示例中，由于需要将送往8080的请求转发给80端口，不得不给主容器授予特权级别，用来让其在<code>postStart</code>中执行<code>iptables</code>规则，但是规则执行完毕后，主容器依旧拥有特权操作的权限，这种操作是不合理的。</p>
<p>所以我们可以将需要执行特权级别的操作放到初始化容器中，当初始化容器执行完毕就退出。免得主容器一直拥有特殊权限。</p>
<h3 id="初始化容器示例"><a href="#初始化容器示例" class="headerlink" title="初始化容器示例"></a>初始化容器示例</h3><p>1.编写配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim init-container-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: init-container-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  initContainers:</span><br><span class="line">  - name: iptables-init</span><br><span class="line">    image: ikubernetes/admin-box:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">    args: [<span class="string">&#x27;iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-port 80&#x27;</span>]</span><br><span class="line">    securityContext:</span><br><span class="line">      capabilities:</span><br><span class="line">        add:</span><br><span class="line">        - NET_ADMIN</span><br><span class="line">  containers:</span><br><span class="line">  - name: demoapp</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      containerPort: 80</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f init-container-demo.yaml</span></span><br><span class="line">pod/init-container-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods init-container-demo -o wide</span></span><br><span class="line">NAME                  READY   STATUS    RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">init-container-demo   1/1     Running   0          60s   10.244.3.20   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>3.测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在容器中执行iptables命令，会发现没权限</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec init-container-demo -- iptables -t nat -nvL</span></span><br><span class="line">Defaulted container <span class="string">&quot;demoapp&quot;</span> out of: demoapp, iptables-init (init)</span><br><span class="line">iptables v1.8.3 (legacy): can<span class="string">&#x27;t initialize iptables table `nat&#x27;</span>: Permission denied (you must be root)</span><br><span class="line">Perhaps iptables or your kernel needs to be upgraded.</span><br><span class="line"><span class="built_in">command</span> terminated with <span class="built_in">exit</span> code 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问容器的8080端口，被正常的转发到80</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl 10.244.3.20:8080</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: init-container-demo, ServerIP: 10.244.3.20!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>多容器Pod</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/10%E5%A4%9A%E5%AE%B9%E5%99%A8Pod/%E5%A4%9A%E5%AE%B9%E5%99%A8Pod/</url>
    <content><![CDATA[<p>容器设计模式中的单节点多容器模式支持三种多容器模式：</p>
<ul>
<li><code>SideCar</code>：为主容器提供辅助功能，如为主容器提供代理服务，为主容器提供数据收集。</li>
<li><code>Adapter</code>：若某个pod内数据输出格式与某个规定的引用接受数据的格式不兼容，用适配器来将其转换以达到兼容的目的。</li>
<li><code>Ambassador</code>：主容器中的引用不方便对外联络，可以专门制作一个容器来实现对外联络的功能。如redis集群联络其他节点可以专门做一个大使来进行联络</li>
</ul>
<h3 id="SideCar示例"><a href="#SideCar示例" class="headerlink" title="SideCar示例"></a>SideCar示例</h3><p>1.编写配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim sidecar-container-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: sidecar-container-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: proxy</span><br><span class="line">    image: envoyproxy/envoy-alpine:v1.14.1</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">    args: [<span class="string">&#x27;sleep 5 &amp;&amp; envoy -c /etc/envoy/envoy.yaml&#x27;</span>]</span><br><span class="line">    lifecycle:</span><br><span class="line">      postStart:</span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;wget -O /etc/envoy/envoy.yaml http://ilinux.io/envoy.yaml&#x27;</span>]</span><br><span class="line">  - name: demo</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    env:</span><br><span class="line">    - name: HOST</span><br><span class="line">      value: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    - name: PORT</span><br><span class="line">      value: <span class="string">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f sidecar-container-demo.yaml</span></span><br><span class="line">pod/sidecar-container-demo created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods sidecar-container-demo -o wide</span></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">sidecar-container-demo   2/2     Running   0          4m10s   10.244.1.25   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="comment"># 容器内存在2个pod，并且都ready。</span></span><br></pre></td></tr></table></figure>

<p>3.测试访问容器，看envoy是否将流量代理给8080端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试访问</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl 10.244.1.25</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 127.0.0.1, ServerName: sidecar-container-demo, ServerIP: 10.244.1.25!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看报文头部</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># curl -I 10.244.1.25</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">content-type: text/html; charset=utf-8</span><br><span class="line">content-length: 108</span><br><span class="line">server: envoy    <span class="comment">#此为envoy的代理</span></span><br><span class="line">date: Fri, 02 Jul 2021 09:24:45 GMT</span><br><span class="line">x-envoy-upstream-service-time: 1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod资源需求和资源限制</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/11Pod%E8%B5%84%E6%BA%90%E9%9C%80%E6%B1%82%E5%92%8C%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/Pod%E8%B5%84%E6%BA%90%E9%9C%80%E6%B1%82%E5%92%8C%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<p>在一个宿主机的内核之上可以运行多个容器，这些容器共享底层宿主机的内核，因此任何一个容器都可以请求占有这个内核管理的所有可用硬件资源。</p>
<p>但若是在多租户的环境下如果有人运行了恶意代码，那个这个容器会及大量的去占有宿主机上的资源，进而导致其他容器无法运行。</p>
<p>容器间的隔离默认情况下只是在内核的名称空间级别进行了隔离，但在进程运行时所用到的资源范围上没有做太多的隔离操作。</p>
<p>因而我们应该为每一个应用设定在其内部运行时的资源最小保证量(request)和最大保证量(limits)。</p>
<ul>
<li>request：确保节点至少为Pod或容器预留的资源最小量。</li>
<li>limits：限制pod或容器的最大使用量。</li>
</ul>
<h3 id="计算资源"><a href="#计算资源" class="headerlink" title="计算资源"></a>计算资源</h3><p>k8s中的计算资源有2种，CPU、Memory。</p>
<p>CPU是一种可压缩资源，一个应用在不运行时不会调度到CPU上。</p>
<p>memory是不可压缩资源。其所申请的资源会被占用的。任何一种扩缩容都可能导致程序的崩溃或者OOM的发生。</p>
<p>k8s中CPU不是按照占用百分比来分配的。 而是指定容器可以占用多少个核心。1核等于1000m核。</p>
<p>k8s的memery分配和一般的分配没有区别，1Ki、1Mi。i表示为1024进制的。</p>
<h4 id="计算资源限制参数"><a href="#计算资源限制参数" class="headerlink" title="计算资源限制参数"></a>计算资源限制参数</h4><p>k8s中根据计算资源的上下阈值为其设定了4个参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resource:</span><br><span class="line">  reuqests:</span><br><span class="line">    cpu:</span><br><span class="line">    memory:</span><br><span class="line">  limits:</span><br><span class="line">    cpu:</span><br><span class="line">    memory:</span><br></pre></td></tr></table></figure>

<h3 id="资源需求和限制示例"><a href="#资源需求和限制示例" class="headerlink" title="资源需求和限制示例"></a>资源需求和限制示例</h3><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim resource-requests-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: stress-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: stress</span><br><span class="line">    image: ikubernetes/stress-ng</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/usr/bin/stress-ng&quot;</span>,<span class="string">&quot;-c 1&quot;</span>,<span class="string">&quot;-m 1&quot;</span>,<span class="string">&quot;--metrics-brief&quot;</span>]   <span class="comment"># 启动一个进程，一个内存进程</span></span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        memory: <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">        cpu: <span class="string">&quot;200m&quot;</span></span><br><span class="line">      limits:</span><br><span class="line">        memory: <span class="string">&quot;512Mi&quot;</span></span><br><span class="line">        cpu: <span class="string">&quot;400m&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f resource-requests-demo.yaml</span></span><br><span class="line">pod/stress-pod created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods stress-pod -o wide</span></span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE    IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">stress-pod   1/1     Running   0          4m5s   10.244.2.23   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>3.在pod内观察资源消耗状况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec stress-pod -- top</span></span><br><span class="line">Mem: 5691452K used, 2460832K free, 6760K shrd, 517008K buff, 3715652K cached</span><br><span class="line">CPU:   8% usr   0% sys   0% nic  89% idle   0% io   0% irq   0% sirq</span><br><span class="line">Load average: 0.57 0.62 0.48 3/960 16</span><br><span class="line">  PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND</span><br><span class="line">    7     1 root     R     6900   0%   0   4% &#123;stress-ng-cpu&#125; /usr/bin/stress-ng</span><br><span class="line">    9     8 root     R     262m   3%   1   3% &#123;stress-ng-vm&#125; /usr/bin/stress-ng</span><br><span class="line">    1     0 root     S     6252   0%   5   0% /usr/bin/stress-ng -c 1 -m 1</span><br><span class="line">    8     1 root     S     6252   0%   4   0% &#123;stress-ng-vm&#125; /usr/bin/stress-ng</span><br><span class="line">   10     0 root     R     1512   0%   4   0% top</span><br></pre></td></tr></table></figure>

<p><code>cpu 8%</code>：k8s-node02上有6颗核心，正常情况下要启动一个cpu来运行进程，而在配置清单中定义了一个进程最大占用cpu为400m核。6个CPU最大占用其中一颗的0.4核，所以cpu占用8%。如果配置清单中不设置limits上限，CPU会占用17%左右。这是因为一个进程在设计时默认为单进程的，所以其最多也就绑定在一个CPU核心上，其最多也就占用一个CPU核心的资源。</p>
<p><code>memory占用262m</code>：在stress-ng这个压测容器中，一个进程默认做多占用256M，所以此处显示内存占用262M。</p>
<p>4.其他，查看pod内的内存信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec stress-pod --  free -m</span></span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          7961       6898       1062          6        592       4315</span><br><span class="line">-/+ buffers/cache:       1990       5970</span><br><span class="line">Swap:            0          0          0</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec stress-pod --  grep &quot;processor&quot; /proc/cpuinfo</span></span><br><span class="line">processor       : 0</span><br><span class="line">processor       : 1</span><br><span class="line">processor       : 2</span><br><span class="line">processor       : 3</span><br><span class="line">processor       : 4</span><br><span class="line">processor       : 5</span><br></pre></td></tr></table></figure>

<p>在上面的结果中可以看到，虽然资源清单中限制了pod的资源限制和资源需求，单pod内能看到的资源量还是其节点上的真正的资源量。这样就存在一个问题，有些程序默认运行时，所使用的CPU资源和memory资源是其自身所能看见的来设定的，而不是根据pod或容器上所设定requests和limits来设定的。这就会导致所运行的pod很快就崩溃。为了避免这个问题，需要使用downwardAPI来告诉容器有多少CPU和内存所使用，而不是其所看见的。</p>
<h4 id="内存泄漏示例2"><a href="#内存泄漏示例2" class="headerlink" title="内存泄漏示例2"></a>内存泄漏示例2</h4><p>1.编写资源配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim resource-limits-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: memleak-pod</span><br><span class="line">  labels:</span><br><span class="line">    app: memleak</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: simmemleak</span><br><span class="line">    image: ikubernetes/simmemleak</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    resources:</span><br><span class="line">      memory: <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">      cpu: <span class="string">&quot;1&quot;</span></span><br><span class="line">    limits:</span><br><span class="line">      memory: <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">      cpu: <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f resource-limits-demo.yaml</span></span><br><span class="line">pod/memleak-pod created</span><br></pre></td></tr></table></figure>

<p>3.查看pod状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods memleak-pod -o wide -w</span></span><br><span class="line">NAME          READY   STATUS      RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS G                                                                                                   ATES</span><br><span class="line">memleak-pod   0/1     OOMKilled   2          26s   10.244.2.25   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">memleak-pod   0/1     CrashLoopBackOff   2          40s   10.244.2.25   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">memleak-pod   0/1     OOMKilled          3          54s   10.244.2.25   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">memleak-pod   0/1     CrashLoopBackOff   3          66s   10.244.2.25   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">memleak-pod   0/1     OOMKilled          4          107s   10.244.2.25   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>k8s发现pod出现内存泄漏后，会发起OOMKilled。第一次出现pod将立即被重启，而后会根据回退算法来进程重启。分别间隔，0、10、20、40、80、160、300秒进程重启。至值CrashLoopBackOff状态。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod服务质量类别</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/12Pod%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E7%B1%BB%E5%88%AB/Pod%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E7%B1%BB%E5%88%AB/</url>
    <content><![CDATA[<p>在一个宿主机的内核之上可以运行多个容器，这些容器共享底层宿主机的内核，因此任何一个容器都可以请求占有这个内核管理的所有可用硬件资源。</p>
<p>但若是在多租户的环境下如果有人运行了恶意代码，那个这个容器会及大量的去占有宿主机上的资源，进而导致其他容器无法运行。</p>
<p>容器间的隔离默认情况下只是在内核的名称空间级别进行了隔离，但在进程运行时所用到的资源范围上没有做太多的隔离操作。</p>
<p>因而我们应该为每一个应用设定在其内部运行时的资源最小保证量(request)和最大保证量(limits)。</p>
<ul>
<li>request：确保节点至少为Pod或容器预留的资源最小量。</li>
<li>limits：限制pod或容器的最大使用量。</li>
</ul>
<h3 id="计算资源"><a href="#计算资源" class="headerlink" title="计算资源"></a>计算资源</h3><p>k8s中的计算资源有2种，CPU、Memory。</p>
<p>CPU是一种可压缩资源，一个应用在不运行时不会调度到CPU上。</p>
<p>memory是不可压缩资源。其所申请的资源会被占用的。任何一种扩缩容都可能导致程序的崩溃或者OOM的发生。</p>
<p>k8s中CPU不是按照占用百分比来分配的。 而是指定容器可以占用多少个核心。1核等于1000m核。</p>
<p>k8s的memery分配和一般的分配没有区别，1Ki、1Mi。i表示为1024进制的。</p>
<h4 id="计算资源限制参数"><a href="#计算资源限制参数" class="headerlink" title="计算资源限制参数"></a>计算资源限制参数</h4><p>k8s中根据计算资源的上下阈值为其设定了4个参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resource:</span><br><span class="line">  reuqests:</span><br><span class="line">    cpu:</span><br><span class="line">    memory:</span><br><span class="line">  limits:</span><br><span class="line">    cpu:</span><br><span class="line">    memory:</span><br></pre></td></tr></table></figure>

<h3 id="资源需求和限制示例"><a href="#资源需求和限制示例" class="headerlink" title="资源需求和限制示例"></a>资源需求和限制示例</h3><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>1.编写资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim resource-requests-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: stress-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: stress</span><br><span class="line">    image: ikubernetes/stress-ng</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&quot;/usr/bin/stress-ng&quot;</span>,<span class="string">&quot;-c 1&quot;</span>,<span class="string">&quot;-m 1&quot;</span>,<span class="string">&quot;--metrics-brief&quot;</span>]   <span class="comment"># 启动一个进程，一个内存进程</span></span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        memory: <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">        cpu: <span class="string">&quot;200m&quot;</span></span><br><span class="line">      limits:</span><br><span class="line">        memory: <span class="string">&quot;512Mi&quot;</span></span><br><span class="line">        cpu: <span class="string">&quot;400m&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.应用资源清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f resource-requests-demo.yaml</span></span><br><span class="line">pod/stress-pod created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods stress-pod -o wide</span></span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE    IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">stress-pod   1/1     Running   0          4m5s   10.244.2.23   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>3.在pod内观察资源消耗状况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec stress-pod -- top</span></span><br><span class="line">Mem: 5691452K used, 2460832K free, 6760K shrd, 517008K buff, 3715652K cached</span><br><span class="line">CPU:   8% usr   0% sys   0% nic  89% idle   0% io   0% irq   0% sirq</span><br><span class="line">Load average: 0.57 0.62 0.48 3/960 16</span><br><span class="line">  PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND</span><br><span class="line">    7     1 root     R     6900   0%   0   4% &#123;stress-ng-cpu&#125; /usr/bin/stress-ng</span><br><span class="line">    9     8 root     R     262m   3%   1   3% &#123;stress-ng-vm&#125; /usr/bin/stress-ng</span><br><span class="line">    1     0 root     S     6252   0%   5   0% /usr/bin/stress-ng -c 1 -m 1</span><br><span class="line">    8     1 root     S     6252   0%   4   0% &#123;stress-ng-vm&#125; /usr/bin/stress-ng</span><br><span class="line">   10     0 root     R     1512   0%   4   0% top</span><br></pre></td></tr></table></figure>

<p><code>cpu 8%</code>：k8s-node02上有6颗核心，正常情况下要启动一个cpu来运行进程，而在配置清单中定义了一个进程最大占用cpu为400m核。6个CPU最大占用其中一颗的0.4核，所以cpu占用8%。如果配置清单中不设置limits上限，CPU会占用17%左右。这是因为一个进程在设计时默认为单进程的，所以其最多也就绑定在一个CPU核心上，其最多也就占用一个CPU核心的资源。</p>
<p><code>memory占用262m</code>：在stress-ng这个压测容器中，一个进程默认做多占用256M，所以此处显示内存占用262M。</p>
<p>4.其他，查看pod内的内存信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec stress-pod --  free -m</span></span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          7961       6898       1062          6        592       4315</span><br><span class="line">-/+ buffers/cache:       1990       5970</span><br><span class="line">Swap:            0          0          0</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl exec stress-pod --  grep &quot;processor&quot; /proc/cpuinfo</span></span><br><span class="line">processor       : 0</span><br><span class="line">processor       : 1</span><br><span class="line">processor       : 2</span><br><span class="line">processor       : 3</span><br><span class="line">processor       : 4</span><br><span class="line">processor       : 5</span><br></pre></td></tr></table></figure>

<p>在上面的结果中可以看到，虽然资源清单中限制了pod的资源限制和资源需求，单pod内能看到的资源量还是其节点上的真正的资源量。这样就存在一个问题，有些程序默认运行时，所使用的CPU资源和memory资源是其自身所能看见的来设定的，而不是根据pod或容器上所设定requests和limits来设定的。这就会导致所运行的pod很快就崩溃。为了避免这个问题，需要使用downwardAPI来告诉容器有多少CPU和内存所使用，而不是其所看见的。</p>
<h4 id="内存泄漏示例2"><a href="#内存泄漏示例2" class="headerlink" title="内存泄漏示例2"></a>内存泄漏示例2</h4><p>1.编写资源配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># vim resource-limits-demo.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: memleak-pod</span><br><span class="line">  labels:</span><br><span class="line">    app: memleak</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: simmemleak</span><br><span class="line">    image: ikubernetes/simmemleak</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    resources:</span><br><span class="line">      memory: <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">      cpu: <span class="string">&quot;1&quot;</span></span><br><span class="line">    limits:</span><br><span class="line">      memory: <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">      cpu: <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl apply -f resource-limits-demo.yaml</span></span><br><span class="line">pod/memleak-pod created</span><br></pre></td></tr></table></figure>

<p>3.查看pod状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get pods memleak-pod -o wide -w</span></span><br><span class="line">NAME          READY   STATUS      RESTARTS   AGE   IP            NODE         NOMINATED NODE   READINESS G                                                                                                   ATES</span><br><span class="line">memleak-pod   0/1     OOMKilled   2          26s   10.244.2.25   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">memleak-pod   0/1     CrashLoopBackOff   2          40s   10.244.2.25   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">memleak-pod   0/1     OOMKilled          3          54s   10.244.2.25   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">memleak-pod   0/1     CrashLoopBackOff   3          66s   10.244.2.25   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">memleak-pod   0/1     OOMKilled          4          107s   10.244.2.25   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>k8s发现pod出现内存泄漏后，会发起OOMKilled。第一次出现pod将立即被重启，而后会根据回退算法来进程重启。分别间隔，0、10、20、40、80、160、300秒进程重启。至值CrashLoopBackOff状态。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>All-In-One-Pod-Demo</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/04Pod%E8%B5%84%E6%BA%90/13All-In-One-Pod-Demo/All-In-One-Pod-Demo/</url>
    <content><![CDATA[<p>以下是一个完整的pod清单示例，可以参考进行修改使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: all-in-one</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  initContainers:</span><br><span class="line">  - name: iptables-init</span><br><span class="line">    image: ikubernetes/admin-box:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">    args: [<span class="string">&#x27;iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-port 80&#x27;</span>]</span><br><span class="line">    securityContext:</span><br><span class="line">      capabilities:</span><br><span class="line">        add:</span><br><span class="line">        - NET_ADMIN</span><br><span class="line">  containers:</span><br><span class="line">  - name: sidecar-proxy</span><br><span class="line">    image: envoyproxy/envoy-alpine:v1.13.1</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">    args: [<span class="string">&#x27;sleep 3 &amp;&amp; envoy -c /etc/envoy/envoy.yaml&#x27;</span>]</span><br><span class="line">    lifecycle:</span><br><span class="line">      postStart:</span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;wget -O /etc/envoy/envoy.yaml http://ilinux.io/envoy.yaml&#x27;</span>]</span><br><span class="line">    livenessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 80</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">    readinessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 80</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">  - name: demo</span><br><span class="line">    image: ikubernetes/demoapp:v1.0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    env:</span><br><span class="line">    - name: PORT</span><br><span class="line">      value: <span class="string">&#x27;8080&#x27;</span></span><br><span class="line">    - name: HOST</span><br><span class="line">      value: <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: <span class="string">&#x27;/livez&#x27;</span></span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">    readinessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: <span class="string">&#x27;/readyz&#x27;</span></span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">    securityContext:</span><br><span class="line">      runAsUser: 1001</span><br><span class="line">      runAsGroup: 1001</span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        cpu: 0.5</span><br><span class="line">        memory: <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">      limits:</span><br><span class="line">        cpu: 2</span><br><span class="line">        memory: <span class="string">&quot;1024Mi&quot;</span></span><br><span class="line">  securityContext:</span><br><span class="line">    supplementalGroups: [1002,1003]</span><br><span class="line">    fsGroup: 2000</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Pod</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Service资源</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/05Service%E8%B5%84%E6%BA%90/01Service%E8%B5%84%E6%BA%90/Service%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>在k8s中Service是一个标准的资源类型，为动态的一组pod提供一个固定的访问入口，使用一个ClusterIP来标识的。ClusterIP存在于Cluser Network中。</p>
<h3 id="Service的工作原理"><a href="#Service的工作原理" class="headerlink" title="Service的工作原理"></a>Service的工作原理</h3><p>1.Service如何识别其背后有多少Pod?</p>
<p>在每一个对应的Pod之上添加一个独特的标签，前端对应的Service将使用标签选择器来挑选中一组pod。任何能被Service的标签选择器所选中的目标都将作为该Service的后端端点。</p>
<p>Service不但能把标签选择器选中的Pod识别为自己的后端端点，他还能对后端端点做就绪状态检测，如果后端端点就绪，那就么他就会将其加入到自己的后端可用端点列表中去，否则将移除。而此功能并非由Service自己实现的，而是借助了一个中间组件endpoint来实现的。</p>
<p>endpint也是一个标准的资源类型。只不过Service会自动去管理Endpoint资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter04<span class="comment"># kubectl get endpoints</span></span><br><span class="line">NAME         ENDPOINTS                                               AGE</span><br><span class="line">demoapp      10.244.1.4:80,10.244.2.3:80,10.244.3.2:80 + 1 more...   5d12h</span><br><span class="line">kubernetes   172.16.11.71:6443                                       6d3h</span><br></pre></td></tr></table></figure>

<p>Pod是APIServer中的一个数据Schema，Service和Endpoint也是。所以Service创建后真正能发挥作用是源自于Service Controller的组件。而Endpoint能发挥作用则是依赖于Endpint Controller。所以很多资源都会有其专用的控制器，来确保这个资源对应的意义能实现。</p>
<p>所以控制器至关重要，他们都打包在controller manager中，Service有Service的控制器来确保Service真正能工作。Endpoint有Endpoint控制器来确保其能正常工作。</p>
<p>一旦创建Service，需要为Service指定的基本的属性为标签选择器。随后Service控制器就会根据标签选择器创建一个同名的Endpoint资源。随后Endpoint控制器进行介入，他会使用endpoint标签选择器去查找究竟有多少个符合条件的Pod，他还会检查Pod的就绪状态。所以真正将Pod绑定到Service的并非Service控制器，而是Endpoint控制器。Service只负责调度，Endpoint一旦关联到了Pod，他会将其告诉给Service，从而这些Pod都将成为Service的后端端点。</p>
<p>Service是由ClusterIP来标识的。因此访问Service时可以直接从ClusterIP作为入口来进行访问。</p>
<p>在kubernetes中真正负责Service的组件叫做kube-Proxy的组件。</p>
<h3 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h3><p>kube-proxy其实就是一个Service Controller位于各节点的代理进程(agent)。</p>
<h4 id="kube-proxy代理模型"><a href="#kube-proxy代理模型" class="headerlink" title="kube-proxy代理模型"></a>kube-proxy代理模型</h4><h5 id="1-UserSpace模型：Pod访问Service"><a href="#1-UserSpace模型：Pod访问Service" class="headerlink" title="1.UserSpace模型：Pod访问Service"></a>1.UserSpace模型：Pod访问Service</h5><p>早期的kube-proxy是一个服务进程，他和nginx一样，所有的调度都是由kube-proxy实现的。所有的pod访问Service时，他的流量先从用户空间到达内核空间的Netfiliter上，而Service实现为iptables的一个拦截规则，iptables规则将流量拦截下来后不做调度，而是将其重定向回同样运行在该节点用户空间的kube-Proxy进程。而kube-proxy是一个代理服务器，能实现负载均衡，能实现虚拟主机。因此Pod的请求就被调度给用户空间的kube-proxy，由kube-proxy重新将其调度给其他节点上的Pod。</p>
<p>这种代理的性能极差，他的流量在用户空间和内核空间往返了2次再发往目标Pod。效率性能差。</p>
<h5 id="2-iptables模型："><a href="#2-iptables模型：" class="headerlink" title="2.iptables模型："></a>2.iptables模型：</h5><p>pod发送请求时，报文依然会被内核中的iptables规则拦截，iptables拦截后不会将其发送给用户空间的kube-proxy，其自己内部直接就添加了调度规则，因此iptables不但能拦截还能实现调度。这种称之为iptables模式。</p>
<p>在此模型中，kube-proxy的作用是监视着APIServer中的所有Service的定义，并将其转换为本地的iptables规则。</p>
<p>这种模型的调度规则，在内核中直接就能完成，其效率比第一种UserSpace模型好的多，但是此种模型依旧存在问题。</p>
<p>iptables既要负责拦截又要负责调度，所以一个Service将会生成大量的规则。而一个k8s集群动则几千个Service，其将生成几万的iptables规则，每一次的pod到Service的流量经过接近5万条iptables规则的匹配，其性能可想而知。</p>
<h5 id="3-ipvs模型："><a href="#3-ipvs模型：" class="headerlink" title="3.ipvs模型："></a>3.ipvs模型：</h5><p>ipvs一个调度只需要一到两条规则，一定义集群，二向集群中添加后端端点。而当后端端点增多时其最多将成为ipvs第二条规则中的一个可选的后端端点。</p>
<p>此种模型1万的service最多生成2万的规则，其性能比iptables模型性能好的多。</p>
<p>因此在规模较大的k8s集群中，必然使用ipvs模型。</p>
<h3 id="Service类型"><a href="#Service类型" class="headerlink" title="Service类型"></a>Service类型</h3><p>Service的类型一共有4种：ClusterIP、NodePort、LoadBalancer、ExternalName。</p>
<h4 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h4><p>Service创建后，为了让Service能够接受请求，并且能作为端点被访问，所以Service需要一个不变的IP地址，这个ip就成为ClusterIP，从而能作为接入内部Pod请求的IP地址，因而称之为ClusterIP。</p>
<p>通过集群内部IP地址来暴露服务，但是该地址仅在集群内部可达，他无法被集群外部的客户端访问。</p>
<h4 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h4><p>NodePort是一种ClusterIP的增强类型。NodePort的Service不仅能被集群内部的客户端可见，还能被集群外部的客户端可见。他会于ClusterIP的功能之外，在每一个节点上使用一个相同的端口号将外部流量引入到该Service上来。</p>
<p><img src="img1.png"></p>
<h4 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h4><p>LoadBalancer是NodePort的增强类型，此种类型多出现于公有云需要借助于云底层Iaas云服务上的LBaaS产品来按需管理LoadBalancer。如果没有这种条件，此类型将不可用</p>
<h4 id="ExternalName"><a href="#ExternalName" class="headerlink" title="ExternalName"></a>ExternalName</h4><p>k8s集群内的某个服务要访问集群外的服务时，需要借助集群上的KubeDNS来实现，服务的名称会被解析为一个CNAME记录，而CNAME名称会被DNS解析为集群外部的服务的IP地址。这种Service没有ClusterIP也没有NodePort.</p>
<h3 id="Service资源定义格式"><a href="#Service资源定义格式" class="headerlink" title="Service资源定义格式"></a>Service资源定义格式</h3><p>Service是名称空间级别的资源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: …</span><br><span class="line">  namespace: …</span><br><span class="line">  labels:</span><br><span class="line">    key1: value1</span><br><span class="line">    key2: value2</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span> &lt;string&gt;   <span class="comment"># Service类型，默认为ClusterIP</span></span><br><span class="line">  selector &lt;map[string]string&gt;  <span class="comment"># 等值类型的标签选择器，内含“与”逻辑</span></span><br><span class="line">  ports：  <span class="comment"># Service的端口对象列表</span></span><br><span class="line">  - name &lt;string&gt;  <span class="comment"># 端口名称</span></span><br><span class="line">    protocol &lt;string&gt;  <span class="comment"># 协议，目前仅支持TCP、UDP和SCTP，默认为TCP</span></span><br><span class="line">    port &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># Service的端口号</span></span><br><span class="line">    targetPort  &lt;string&gt;  <span class="comment"># 后端目标进程的端口号或名称，名称需由Pod规范定义</span></span><br><span class="line">    nodePort &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 节点端口号，仅适用于NodePort和LoadBalancer类型 30000-32767</span></span><br><span class="line">  clusterIP  &lt;string&gt;  <span class="comment"># Service的集群IP，建议由系统自动分配</span></span><br><span class="line">  externalTrafficPolicy  &lt;string&gt; <span class="comment"># 外部流量策略处理方式，Local表示由当前节点处理，Cluster表示向集群范围调度</span></span><br><span class="line">  loadBalancerIP  &lt;string&gt;  <span class="comment"># 外部负载均衡器使用的IP地址，仅适用于LoadBlancer</span></span><br><span class="line">  externalName &lt;string&gt;  <span class="comment"># 外部服务名称，该名称将作为Service的DNS CNAME值</span></span><br></pre></td></tr></table></figure>

<p>ClusterIP：建议由K8S动态指定一个； 也支持用户手动明确指定；</p>
<p>ServicePort：被映射进Pod上的应用程序监听的端口； 而且如果后端Pod有多个端口，并且每个端口都想通过SErvice暴露的话，每个都要单独定义。</p>
<p>最终接收请求的是PodIP和containerPort；</p>
<h3 id="service示例"><a href="#service示例" class="headerlink" title="service示例"></a>service示例</h3><h4 id="ClusterIP示例"><a href="#ClusterIP示例" class="headerlink" title="ClusterIP示例"></a>ClusterIP示例</h4><p>1.创建Service清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># vim service-clusterip-demo.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp-svc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.97.72.1</span><br><span class="line">  selector:</span><br><span class="line">    app: demoapp</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br></pre></td></tr></table></figure>

<p>2.创建出service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl apply -f service-clusterip-demo.yaml </span></span><br><span class="line">service/demoapp-svc created</span><br></pre></td></tr></table></figure>

<p>3.获取svc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get svc demoapp-svc </span></span><br><span class="line">NAME          TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">demoapp-svc   ClusterIP   10.97.72.1   &lt;none&gt;        80/TCP    78s</span><br></pre></td></tr></table></figure>

<p>4.查看svc的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl describe svc demoapp-svc </span></span><br><span class="line">Name:              demoapp-svc</span><br><span class="line">Namespace:         default</span><br><span class="line">Labels:            &lt;none&gt;</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          app=demoapp</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP Family Policy:  SingleStack</span><br><span class="line">IP Families:       IPv4</span><br><span class="line">IP:                10.97.72.1</span><br><span class="line">IPs:               10.97.72.1</span><br><span class="line">Port:              http  80/TCP</span><br><span class="line">TargetPort:        80/TCP</span><br><span class="line">Endpoints:         10.244.1.4:80,10.244.2.3:80,10.244.3.2:80 + 1 more...</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>5.查看对应的endpoint资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get endpoints</span></span><br><span class="line">NAME          ENDPOINTS                                               AGE</span><br><span class="line">demoapp       10.244.1.4:80,10.244.2.3:80,10.244.3.2:80 + 1 more...   6d8h</span><br><span class="line">demoapp-svc   10.244.1.4:80,10.244.2.3:80,10.244.3.2:80 + 1 more...   5m7s</span><br><span class="line">kubernetes    172.16.11.71:6443                                       6d22h</span><br><span class="line"></span><br><span class="line"><span class="comment"># ep中选择到了3个后端的端点。。</span></span><br></pre></td></tr></table></figure>

<p>6.对服务的ip发送请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.97.72.1</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-jrfm6, ServerIP: 10.244.2.3!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.97.72.1</span></span><br><span class="line">curl: (7) Failed to connect to 10.97.72.1 port 80: Connection refused</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.97.72.1</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-r7h7b, ServerIP: 10.244.1.4!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.97.72.1</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-v7ft8, ServerIP: 10.244.3.2!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.97.72.1</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-v7ft8, ServerIP: 10.244.3.2!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的请求会被轮询。</span></span><br></pre></td></tr></table></figure>

<h4 id="NodePort示例"><a href="#NodePort示例" class="headerlink" title="NodePort示例"></a>NodePort示例</h4><p>1.编写Service资源清单。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># vim service-nodeport-demo.yaml</span></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp-service-nodeport</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  clusterIP: 10.97.56.1   <span class="comment"># 不建议明确指定，会动态选定</span></span><br><span class="line">  selector:</span><br><span class="line">    app: demoapp</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">    nodePort: 31398     <span class="comment"># 不建议明确指定，会动态选定</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl apply -f service-nodeport-demo.yaml </span></span><br><span class="line">service/demoapp-service-nodeport created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get svc demoapp-service-nodeport </span></span><br><span class="line">NAME                       TYPE       CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">demoapp-service-nodeport   NodePort   10.97.56.1   &lt;none&gt;        80:31398/TCP   59s</span><br></pre></td></tr></table></figure>

<p>3.测试访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.97.56.1</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-v7ft8, ServerIP: 10.244.3.2!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.97.56.1</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-jrfm6, ServerIP: 10.244.2.3!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.97.56.1</span></span><br><span class="line">curl: (7) Failed to connect to 10.97.56.1 port 80: Connection refused</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.97.56.1</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-r7h7b, ServerIP: 10.244.1.4!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.97.56.1</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-jrfm6, ServerIP: 10.244.2.3!</span><br></pre></td></tr></table></figure>

<p>4.从集群外部访问时需要访问集群的各个节点的nodeport</p>
<p><img src="img2.png"></p>
<h4 id="LoadBalancer示例"><a href="#LoadBalancer示例" class="headerlink" title="LoadBalancer示例"></a>LoadBalancer示例</h4><p>LoadBalancer需要依赖于云供应商底层的LBaaS，如果没有LBaas将会降级为NodePort</p>
<p>1.编写配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># vim service-loadbalance-demo.yaml</span></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp-loadbalancer-svc</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: LoadBalancer</span><br><span class="line">  selector:</span><br><span class="line">    app: demoapp</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">  <span class="comment"># loadBalancerIP: 1.2.3.4</span></span><br><span class="line">  <span class="comment"># 1.loadBalancerIP不能随意指定，其需要看IaaS供应商是否支持，如果不支持则不能指定。</span></span><br><span class="line">  <span class="comment"># 2.如果loadBalancer底层没有IaaS，也没有LBaaS服务，那此处Service仅会把自己保留为NodePort的Service</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl apply -f service-loadbalance-demo.yaml </span></span><br><span class="line">service/demoapp-loadbalancer-svc created</span><br></pre></td></tr></table></figure>

<p>3.查看所创建出的svc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get svc demoapp-loadbalancer-svc -o wide</span></span><br><span class="line">NAME                       TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE    SELECTOR</span><br><span class="line">demoapp-loadbalancer-svc   LoadBalancer   10.98.79.128   &lt;pending&gt;     80:30373/TCP   105s   app=demoapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处外部IP为pending状态，因为其无法申请到外部IP。</span></span><br><span class="line"><span class="comment"># 除此之外他还存在一个NodePort 30373</span></span><br></pre></td></tr></table></figure>

<p>4.测试访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.98.79.128</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-r7h7b, ServerIP: 10.244.1.4!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.98.79.128</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-r7h7b, ServerIP: 10.244.1.4!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 10.98.79.128</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-jrfm6, ServerIP: 10.244.2.3!</span><br></pre></td></tr></table></figure>

<h4 id="ExternalIP示例"><a href="#ExternalIP示例" class="headerlink" title="ExternalIP示例"></a>ExternalIP示例</h4><p>以上示例都需要使用外部的负载均衡器来实现将外部流量引入节点内部。如果希望不使用节点外部的负载均衡器，而直接使用节点的IP加上众所周知的Port来进行访问，而无需共享宿主机的网络名称空间，这也是可以实现的。我们可以在Service上手动添加一个外部的IP来实现。</p>
<p>1.在集群内部添加一个外部IP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># ip addr add 172.16.11.75 dev eth0</span></span><br><span class="line"><span class="comment"># 查看eth0接口地址</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># ip a show eth0</span></span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:2b:c0:ec brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.11.71/24 brd 172.16.11.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.16.11.75/32 scope global eth0       <span class="comment"># 172.16.11.75已经添加</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::5054:ff:fe2b:c0ec/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>2.编写Service配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># vim services-externalip-demo.yaml</span></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp-externalip-svc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">  selector:</span><br><span class="line">    app: demoapp</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">  externalIPs:</span><br><span class="line">  - 172.16.11.75</span><br></pre></td></tr></table></figure>

<p>3.查看SVC</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl apply -f services-externalip-demo.yaml</span></span><br><span class="line">service/demoapp-externalip-svc created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已经生成了EXTERNAL-IP</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get svc demoapp-externalip-svc </span></span><br><span class="line">NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP    PORT(S)   AGE</span><br><span class="line">demoapp-externalip-svc   ClusterIP   10.96.141.139   172.16.11.75   80/TCP    17s</span><br></pre></td></tr></table></figure>

<p>4.测试访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 172.16.11.75</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-r7h7b, ServerIP: 10.244.1.4!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 172.16.11.75</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-v7ft8, ServerIP: 10.244.3.2!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 172.16.11.75</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-r7h7b, ServerIP: 10.244.1.4!</span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># curl 172.16.11.75</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp-5f7d8f9847-v7ft8, ServerIP: 10.244.3.2!</span><br></pre></td></tr></table></figure>

<p>有了这种方法我们只需要将此外部地址利用keepalived在多个结点间游走即可以防止单点失败问题。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Service</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Endpoint资源</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/05Service%E8%B5%84%E6%BA%90/02Endpoint%E8%B5%84%E6%BA%90/Endpoint%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>创建一个Service资源后，他会自动创建出一个同名的Endpoint资源。因为Service并不直接匹配其后端的标签，而是交由Endpoint进行匹配，而匹配过程是由Endpoint控制器完成的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统上存在的SVC</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get svc</span></span><br><span class="line">NAME                       TYPE           CLUSTER-IP      EXTERNAL-IP    PORT(S)        AGE</span><br><span class="line">demoapp                    NodePort       10.111.8.128    &lt;none&gt;         80:31156/TCP   7d</span><br><span class="line">demoapp-externalip-svc     ClusterIP      10.96.141.139   172.16.11.75   80/TCP         12h</span><br><span class="line">demoapp-loadbalancer-svc   LoadBalancer   10.98.79.128    &lt;pending&gt;      80:30373/TCP   12h</span><br><span class="line">demoapp-service-nodeport   NodePort       10.97.56.1      &lt;none&gt;         80:31398/TCP   15h</span><br><span class="line">demoapp-svc                ClusterIP      10.97.72.1      &lt;none&gt;         80/TCP         16h</span><br><span class="line">kubernetes                 ClusterIP      10.96.0.1       &lt;none&gt;         443/TCP        7d14h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看EP</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get ep</span></span><br><span class="line">NAME                       ENDPOINTS                                               AGE</span><br><span class="line">demoapp                    10.244.1.4:80,10.244.2.3:80,10.244.3.2:80 + 1 more...   7d</span><br><span class="line">demoapp-externalip-svc     10.244.1.4:80,10.244.2.3:80,10.244.3.2:80 + 1 more...   12h</span><br><span class="line">demoapp-loadbalancer-svc   10.244.1.4:80,10.244.2.3:80,10.244.3.2:80 + 1 more...   12h</span><br><span class="line">demoapp-service-nodeport   10.244.1.4:80,10.244.2.3:80,10.244.3.2:80 + 1 more...   15h</span><br><span class="line">demoapp-svc                10.244.1.4:80,10.244.2.3:80,10.244.3.2:80 + 1 more...   16h</span><br><span class="line">kubernetes                 172.16.11.71:6443                                       7d14h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比SVC和EP可以发现他们的名字相同</span></span><br></pre></td></tr></table></figure>

<p>Endpoint资源还与就绪探针存在关联关系，只有就绪后，才会被Endpoint捕获并添加为可用的后端端点。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe ep demoapp-svc</span></span><br><span class="line">Name:         demoapp-svc</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  endpoints.kubernetes.io/last-change-trigger-time: 2021-07-05T09:35:54Z</span><br><span class="line">Subsets:</span><br><span class="line">  Addresses:          10.244.1.4,10.244.2.3,10.244.3.2,172.16.11.81   <span class="comment"># 此处为已经就绪的端点</span></span><br><span class="line">  NotReadyAddresses:  &lt;none&gt;   <span class="comment"># 此处为未就绪的端点。</span></span><br><span class="line">  Ports:</span><br><span class="line">    Name  Port  Protocol</span><br><span class="line">    ----  ----  --------</span><br><span class="line">    http  80    TCP</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有未就绪的后端端点不会被Service接受流量。</span></span><br></pre></td></tr></table></figure>

<h3 id="未就绪状态演示"><a href="#未就绪状态演示" class="headerlink" title="未就绪状态演示"></a>未就绪状态演示</h3><p>1.编写配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: service-readiness-demo</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: demoapp-with-readiness</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp2</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: demoapp-with-readiness</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: demoapp-with-readiness</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: demoapp</span><br><span class="line">        image: ikubernetes/demoapp:v1.0</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: <span class="string">&#x27;/readyz&#x27;</span></span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 15</span><br><span class="line">          periodSeconds: 10</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl apply -f service-readiness-demo.yaml </span></span><br><span class="line">service/service-readiness-demo created</span><br><span class="line">deployment.apps/demoapp2 created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -l app=demoapp-with-readiness -o wide</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">demoapp2-5b5dc85587-p6l58   1/1     Running   0          8m21s   10.244.3.27   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">demoapp2-5b5dc85587-wtht9   1/1     Running   0          8m21s   10.244.3.26   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>3.查看endpoint</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe ep service-readiness-demo </span></span><br><span class="line">Name:         service-readiness-demo</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  endpoints.kubernetes.io/last-change-trigger-time: 2021-07-06T02:25:54Z</span><br><span class="line">Subsets:</span><br><span class="line">  Addresses:          10.244.3.26,10.244.3.27</span><br><span class="line">  NotReadyAddresses:  &lt;none&gt;</span><br><span class="line">  Ports:</span><br><span class="line">    Name  Port  Protocol</span><br><span class="line">    ----  ----  --------</span><br><span class="line">    http  80    TCP</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个后端端点已经就绪</span></span><br></pre></td></tr></table></figure>

<p>4.手动的将其中一个pod改为非ready状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># curl -XPOST -d &#x27;readyz=FAIL&#x27; 10.244.3.26/readyz</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.244.3.26/readyz</span></span><br><span class="line">FAIL</span><br></pre></td></tr></table></figure>

<p>5.再次查看endpoint</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe ep service-readiness-demo </span></span><br><span class="line">Name:         service-readiness-demo</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  endpoints.kubernetes.io/last-change-trigger-time: 2021-07-06T02:37:44Z</span><br><span class="line">Subsets:</span><br><span class="line">  Addresses:          10.244.3.27</span><br><span class="line">  NotReadyAddresses:  10.244.3.26</span><br><span class="line">  Ports:</span><br><span class="line">    Name  Port  Protocol</span><br><span class="line">    ----  ----  --------</span><br><span class="line">    http  80    TCP</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时10.244.3.26已经成为notReady状态。流量不会被Service引入</span></span><br></pre></td></tr></table></figure>

<p>6.对Service进行请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取service地址</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get svc service-readiness-demo </span></span><br><span class="line">NAME                     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service-readiness-demo   ClusterIP   10.97.181.65   &lt;none&gt;        80/TCP    14m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对Service进行访问，只会被调度到10.244.3.27</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.97.181.65</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp2-5b5dc85587-p6l58, ServerIP: 10.244.3.27!</span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.97.181.65</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp2-5b5dc85587-p6l58, ServerIP: 10.244.3.27!</span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.97.181.65</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp2-5b5dc85587-p6l58, ServerIP: 10.244.3.27!</span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.97.181.65</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp2-5b5dc85587-p6l58, ServerIP: 10.244.3.27!</span><br></pre></td></tr></table></figure>

<p>7.让后端端点变为就绪</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># curl -XPOST -d &#x27;readyz=OK&#x27; 10.244.3.26/readyz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看ep的详细信息，所由端点都已经就绪</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe ep service-readiness-demo</span></span><br><span class="line">Name:         service-readiness-demo</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  endpoints.kubernetes.io/last-change-trigger-time: 2021-07-06T02:49:54Z</span><br><span class="line">Subsets:</span><br><span class="line">  Addresses:          10.244.3.26,10.244.3.27</span><br><span class="line">  NotReadyAddresses:  &lt;none&gt;</span><br><span class="line">  Ports:</span><br><span class="line">    Name  Port  Protocol</span><br><span class="line">    ----  ----  --------</span><br><span class="line">    http  80    TCP</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>8.访问SVC</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后端端点可以被轮询调度</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.97.181.65</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp2-5b5dc85587-wtht9, ServerIP: 10.244.3.26!</span><br><span class="line">root@k8s-master01:~<span class="comment"># curl 10.97.181.65</span></span><br><span class="line">iKubernetes demoapp v1.0 !! ClientIP: 10.244.0.0, ServerName: demoapp2-5b5dc85587-p6l58, ServerIP: 10.244.3.27!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Service</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Endpoint资源</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/05Service%E8%B5%84%E6%BA%90/03%E8%87%AA%E5%AE%9A%E4%B9%89Endpoint%E8%B5%84%E6%BA%90/%E8%87%AA%E5%AE%9A%E4%B9%89Endpoint%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>自定义Endpoint资源可以将集群外部的服务如mysql、zookeeper，引入到集群内来。这种集群外的服务除非使用service的externalName，否则用Service来引入是不合适的，因为他不会自动创建出endpoint，也没有标签来选择集群外部的服务。</p>
<p>我们可以直接在集群上创建一个endpoint资源，为endpoint资源指定端点为集群外部的资源，前提是endpoint资源能和集群外部资源通信。在endpoint之上人为的创建一个Service资源。当客户端访问Service时就相当于访问到集群外部的服务。</p>
<p>手动创建的endpoint存在缺点，缺点在于手动创建的endpoint无法进行就绪状态检测。如果需要将某个端点定义为未就绪状态，则需要手动修改配置清单并重新应用。</p>
<h3 id="Endpoint资源使用格式"><a href="#Endpoint资源使用格式" class="headerlink" title="Endpoint资源使用格式"></a>Endpoint资源使用格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoint</span><br><span class="line">metadata:  <span class="comment"># 对象元数据</span></span><br><span class="line">  name:</span><br><span class="line">  namespace:</span><br><span class="line">subsets:      <span class="comment"># 端点对象的列表</span></span><br><span class="line">- addresses:  <span class="comment"># 处于“就绪”状态的端点地址对象列表</span></span><br><span class="line">  - hostname  &lt;string&gt;  <span class="comment"># 端点主机名</span></span><br><span class="line">    ip &lt;string&gt;          <span class="comment"># 端点的IP地址，必选字段</span></span><br><span class="line">    nodeName &lt;string&gt;   <span class="comment"># 节点主机名</span></span><br><span class="line">    targetRef：              <span class="comment"># 提供了该端点的对象引用</span></span><br><span class="line">      apiVersion &lt;string&gt;  <span class="comment"># 被引用对象所属的API群组及版本</span></span><br><span class="line">      kind &lt;string&gt;  <span class="comment"># 被引用对象的资源类型，多为Pod</span></span><br><span class="line">      name &lt;string&gt;  <span class="comment"># 对象名称</span></span><br><span class="line">      namespace &lt;string&gt;  <span class="comment"># 对象所属的名称究竟</span></span><br><span class="line">      fieldPath &lt;string&gt;  <span class="comment"># 被引用的对象的字段，在未引用整个对象时使用，常用于仅引用</span></span><br><span class="line"><span class="comment"># 指定Pod对象中的单容器，例如spec.containers[1]</span></span><br><span class="line">      uid &lt;string&gt;     <span class="comment"># 对象的标识符；</span></span><br><span class="line">  notReadyAddresses:  <span class="comment"># 处于“未就绪”状态的端点地址对象列表，格式与address相同</span></span><br><span class="line">  ports:                <span class="comment"># 端口对象列表</span></span><br><span class="line">  - name &lt;string&gt;  <span class="comment"># 端口名称；</span></span><br><span class="line">    port &lt;<span class="built_in">integer</span>&gt;  <span class="comment"># 端口号，必选字段；</span></span><br><span class="line">    protocol &lt;string&gt;     <span class="comment"># 协议类型，仅支持UDP、TCP和SCTP，默认为TCP；</span></span><br><span class="line">    appProtocol &lt;string&gt;  <span class="comment"># 应用层协议；</span></span><br></pre></td></tr></table></figure>

<h4 id="Endpoint资源清单示例"><a href="#Endpoint资源清单示例" class="headerlink" title="Endpoint资源清单示例"></a>Endpoint资源清单示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-external</span><br><span class="line">  namespace: default</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">  - ip: 172.16.11.51</span><br><span class="line">  - ip: 172.16.11.52</span><br><span class="line">  ports:</span><br><span class="line">  - name: mysql</span><br><span class="line">    port: 3306</span><br><span class="line">    protocol: TCP</span><br><span class="line">  notReadyAddresses:</span><br><span class="line">  - ip: 172.16.11.53</span><br><span class="line">--- </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-external</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">  ports:</span><br><span class="line">  - name: mysql</span><br><span class="line">    port: 3306</span><br><span class="line">    targetPort: 3306</span><br><span class="line">    protocol: TCP</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Service</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables类型Service</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/05Service%E8%B5%84%E6%BA%90/04iptables%E7%B1%BB%E5%9E%8BService/iptables%E7%B1%BB%E5%9E%8BService/</url>
    <content><![CDATA[<h3 id="iptables代理模式下的ClusterIP"><a href="#iptables代理模式下的ClusterIP" class="headerlink" title="iptables代理模式下的ClusterIP"></a>iptables代理模式下的ClusterIP</h3><p>iptables代理模式下的ClusterIP，每个Service在每个节点上（由kube-proxy负责生成）都会生成相应的iptables规则：</p>
<ul>
<li>KUBE-SERVICES：包含所有ClusterIP类型的Service的流量匹配规则，由PREROUTING和OUTPUT两个内置链直接调用；每个Service对象包含两条规则定义，对于所有发往该Service（目标IP为Service_IP且目标端口为Service_Port）的请求报文，前一条用于为那些非源自Pod网络（! -s 10.244.0.0/16）中请求报文借助于KUBE-MARQ-MASK自定义链中的规则打上特有的防火墙标记，后一条负责将所有报文转至专用的以KUBE-SVC为名称前缀的自定义链，后缀是Service信息hash值。</li>
</ul>
<h4 id="代码块1"><a href="#代码块1" class="headerlink" title="代码块1"></a>代码块1</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户空间的所有pod或进程的出栈报文全都跳转给KUBE-SERVICES，如果目标地址是某个Services之一其必然会被KUBE-SERVICE中规则所匹配。</span></span><br><span class="line">root@k8s-node01:~<span class="comment"># iptables -t nat -S OUTPUT</span></span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">-A OUTPUT -m comment --comment <span class="string">&quot;kubernetes service portals&quot;</span> -j KUBE-SERVICES     <span class="comment"># 所有出栈流量跳转给KUBE-SERVICES，以下为追踪demoapp-svc的流量，直接进入第16行。</span></span><br><span class="line">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A OUTPUT -m addrtype --dst-type LOCAL -j CNI-HOSTPORT-DNAT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处针对demoapp-svc进行对整个iptables规则进行理解</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get svc demoapp-svc </span></span><br><span class="line">NAME          TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">demoapp-svc   ClusterIP   10.97.72.1   &lt;none&gt;        80/TCP    3d16h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该svc的iptables规则</span></span><br><span class="line">root@k8s-node01:~<span class="comment"># iptables -t nat -S KUBE-SERVICES | grep &quot;demoapp-svc&quot;</span></span><br><span class="line"><span class="comment"># 如果源地址非10.244.0.0/16的网络，目标地址为10.97.72.1/32(此为service的clusterIP)，协议为tcp，目标端口为80，做跳转，将其转给KUBE-MARK-MASQ。进入代码块2。</span></span><br><span class="line">-A KUBE-SERVICES ! -s 10.244.0.0/16 -d 10.97.72.1/32 -p tcp -m comment --comment <span class="string">&quot;default/demoapp-svc:http cluster IP&quot;</span> -m tcp --dport 80 -j KUBE-MARK-MASQ</span><br><span class="line"><span class="comment"># 如果上一条没有匹配到，进入下一条规则</span></span><br><span class="line"><span class="comment"># 目标地址为10.97.72.1/32(此为service的clusterIP)，协议为tcp，目标端口为80，将其转给KUBE-SVC-ZAGXFVDPX7HH4UMW，进入代码块3</span></span><br><span class="line">-A KUBE-SERVICES -d 10.97.72.1/32 -p tcp -m comment --comment <span class="string">&quot;default/demoapp-svc:http cluster IP&quot;</span> -m tcp --dport 80 -j KUBE-SVC-ZAGXFVDPX7HH4UMW</span><br></pre></td></tr></table></figure>

<ul>
<li>KUBE-MARK-MASQ：专用目的自定义链，所有转至该自定义链的报文都将被置入特有的防火墙标记（0x4000）以便于将特定的类型的报文定义为单独的分类，目的在将该类报文转发到目标端点之前由POSTROUTING规则链进行源地址转换。</li>
</ul>
<h4 id="代码块2"><a href="#代码块2" class="headerlink" title="代码块2"></a>代码块2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有非pod网络的流量都会被跳转到此自定义链。</span></span><br><span class="line">root@k8s-node01:~<span class="comment"># iptables -t nat -S KUBE-MARK-MASQ</span></span><br><span class="line">-N KUBE-MARK-MASQ</span><br><span class="line"><span class="comment"># 此规则会给非pod网络的出栈报文打一个0x4000/0x4000标记符号。</span></span><br><span class="line">-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于此自定义链，没有后续的操作，其流量将会被return，跳回给调用它的链，也就是KUBE-SERVICES链。</span></span><br><span class="line"><span class="comment"># 而后被代码块1中19行规则所处理</span></span><br></pre></td></tr></table></figure>

<ul>
<li>KUBE-SVC-<HASH>：定义一个服务的流量调度规则，它通过随机调度算法（RANDOM）将请求分发给该Service的所有后端端点，每个后端端点定义在以KUBE-SEP为前缀名称的自定链上，后缀是端点信息的hash值。</li>
</ul>
<h4 id="代码块3"><a href="#代码块3" class="headerlink" title="代码块3"></a>代码块3</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看KUBE-SVC-ZAGXFVDPX7HH4UMW链的规则。</span></span><br><span class="line">root@k8s-node01:~<span class="comment"># iptables -t nat -S KUBE-SVC-ZAGXFVDPX7HH4UMW</span></span><br><span class="line">-N KUBE-SVC-ZAGXFVDPX7HH4UMW</span><br><span class="line"><span class="comment"># 6-8行3条自定义链代表了该Service背后所关联的4个pod，可在第11行查看。</span></span><br><span class="line"><span class="comment"># statistic模块为请求报文数量统计模块，其支持随机调度算法的调度模块--mode random，以下查看其中KUBE-SEP-W5CYPK4IZKSNY6AN链即可，进入代码块4</span></span><br><span class="line">-A KUBE-SVC-ZAGXFVDPX7HH4UMW -m comment --comment <span class="string">&quot;default/demoapp-svc:http&quot;</span> -m statistic --mode random --probability 0.25000000000 -j KUBE-SEP-W5CYPK4IZKSNY6AN</span><br><span class="line">-A KUBE-SVC-ZAGXFVDPX7HH4UMW -m comment --comment <span class="string">&quot;default/demoapp-svc:http&quot;</span> -m statistic --mode random --probability 0.33333333349 -j KUBE-SEP-SNI6ZIEBIF6J7SOT</span><br><span class="line">-A KUBE-SVC-ZAGXFVDPX7HH4UMW -m comment --comment <span class="string">&quot;default/demoapp-svc:http&quot;</span> -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-SLUESE2KECGDKA4X</span><br><span class="line">-A KUBE-SVC-ZAGXFVDPX7HH4UMW -m comment --comment <span class="string">&quot;default/demoapp-svc:http&quot;</span> -j KUBE-SEP-5NZKGQCCADX66CX7</span><br><span class="line"><span class="comment"># 以上0.25，为100%/4个pod所得的流量，0.3为去除0.25的pod后的所有流量除以剩下的3个pod所得其表示为100%/3，0.5为去除2个pod的所有流量除以剩下的2个pod所得其表示为100%/2，最后一个没有标识的为100%</span></span><br><span class="line"><span class="comment"># 查看该svc的ep</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe ep demoapp</span></span><br><span class="line">Name:         demoapp</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       app=demoapp</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Subsets:</span><br><span class="line">  Addresses:          10.244.1.4,10.244.2.3,10.244.3.2,172.16.11.81</span><br><span class="line">  NotReadyAddresses:  &lt;none&gt;</span><br><span class="line">  Ports:</span><br><span class="line">    Name  Port  Protocol</span><br><span class="line">    ----  ----  --------</span><br><span class="line">    80    80    TCP</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>KUBE-SEP-<HASH>：定义一个端点相关的流量处理规则，它通常包含两条规则，前一条用于为那些源自该端点自身（-s ep_ip）的请求流量调用自定义链KUBE-MARQ-MASK打上特有的防火墙标记，后一条负责将发往该端点的所有流量进行目标IP地址和端口转换，新目标为该端点的IP和端口（-j DNAT –to-destination ep_ip:ep_port）。</li>
</ul>
<h4 id="代码块4"><a href="#代码块4" class="headerlink" title="代码块4"></a>代码块4</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-node01:~<span class="comment"># iptables -t nat -S KUBE-SEP-W5CYPK4IZKSNY6AN</span></span><br><span class="line">-N KUBE-SEP-W5CYPK4IZKSNY6AN</span><br><span class="line"><span class="comment"># 源ip为10.244.1.4也就是当前pod的流量发送给KUBE-MARK-MASQ进行打标。进入代码块2打标，打完标后回到此规则链，进入下一条规则。</span></span><br><span class="line">-A KUBE-SEP-W5CYPK4IZKSNY6AN -s 10.244.1.4/32 -m comment --comment <span class="string">&quot;default/demoapp-svc:http&quot;</span> -j KUBE-MARK-MASQ</span><br><span class="line"><span class="comment"># 将所有流量做目标地址转换，目标地址为10.244.1.4，端口为80</span></span><br><span class="line">-A KUBE-SEP-W5CYPK4IZKSNY6AN -p tcp -m comment --comment <span class="string">&quot;default/demoapp-svc:http&quot;</span> -m tcp -j DNAT --to-destination 10.244.1.4:80</span><br><span class="line"><span class="comment"># 报文被处理完毕后将发送给KUBE-POSTROUTING，进入代码块5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>KUBE-POSTROUTING：专用的自定义链，由内置链POSTROUTING无条件调用，负责将拥有特有防火墙标记0x4000的请求报文进行源地址转换（Target为实现地址伪装的MASQUERADE），新的源地址为报文离开协议栈时流经接口的主IP（primary ip）地址。</li>
</ul>
<h4 id="代码块5"><a href="#代码块5" class="headerlink" title="代码块5"></a>代码块5</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看POSTROUTING内的规则</span></span><br><span class="line">root@k8s-node01:~<span class="comment"># iptables -t nat -S POSTROUTING</span></span><br><span class="line">-P POSTROUTING ACCEPT</span><br><span class="line">-A POSTROUTING -m comment --comment <span class="string">&quot;CNI portfwd requiring masquerade&quot;</span> -j CNI-HOSTPORT-MASQ</span><br><span class="line"><span class="comment"># iptables规则会将pod的流量跳转给KUBE-POSTROUTING。</span></span><br><span class="line">-A POSTROUTING -m comment --comment <span class="string">&quot;kubernetes postrouting rules&quot;</span> -j KUBE-POSTROUTING</span><br><span class="line">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class="line">-A POSTROUTING -s 10.244.0.0/16 -d 10.244.0.0/16 -j RETURN</span><br><span class="line">-A POSTROUTING -s 10.244.0.0/16 ! -d 224.0.0.0/4 -j MASQUERADE --random-fully</span><br><span class="line">-A POSTROUTING ! -s 10.244.0.0/16 -d 10.244.1.0/24 -j RETURN</span><br><span class="line">-A POSTROUTING ! -s 10.244.0.0/16 -d 10.244.0.0/16 -j MASQUERADE --random-fully</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看KUBE-POSTROUTING链内容</span></span><br><span class="line">root@k8s-node01:~<span class="comment"># iptables -t nat -S KUBE-POSTROUTING</span></span><br><span class="line">-N KUBE-POSTROUTING</span><br><span class="line"><span class="comment"># 对所有不具有0x4000标记的都返回到POSTROUTING</span></span><br><span class="line">-A KUBE-POSTROUTING -m mark ! --mark 0x4000/0x4000 -j RETURN</span><br><span class="line"><span class="comment">#	对于所有存在0x4000标记的都置为0，然后进入下一条规则</span></span><br><span class="line">-A KUBE-POSTROUTING -j MARK --set-xmark 0x4000/0x0</span><br><span class="line"><span class="comment"># 对某些流量(源地址!10.244.0.0/16地址段的流量，源地址为pod自身的流量)进行动态SNAT。为了具有通用性使用MASQUERADE。</span></span><br><span class="line">-A KUBE-POSTROUTING -m comment --comment <span class="string">&quot;kubernetes service traffic requiring SNAT&quot;</span> -j MASQUERADE --random-fully</span><br><span class="line"><span class="comment"># 此处KUBE-POSTROUTING做源地址转换是为了以下2个目的：</span></span><br><span class="line"><span class="comment"># 1.确保非k8s集群内的终端访问集群内的service中跨节点的某个端点时，流量能正确的返回过来所以需要使用SNAT。否则Service的后端的端点将无法得知报文来自哪里。</span></span><br><span class="line"><span class="comment"># 2.源地址为自身的流量，若不进行SNAT直接发回给自身这种流量是不会被处理的，所以也需要进行SNAT。</span></span><br><span class="line"><span class="comment">##########################################################################################################################</span></span><br><span class="line"><span class="comment"># k8s在部署时，允许我们向APIServer的控制器平面的进程传递参数--masquerade-all，用来不区分以上两种情况，所有的流量都做地址伪装。</span></span><br><span class="line"><span class="comment"># 额外加一层地址伪装将导致规则更复杂，所以其性能更低。不建议开启--masquerade-all。</span></span><br></pre></td></tr></table></figure>

<h3 id="iptable代理模式下NodePort"><a href="#iptable代理模式下NodePort" class="headerlink" title="iptable代理模式下NodePort"></a>iptable代理模式下NodePort</h3><p>NodePort的流量的来源都为集群外部，所以其是由PREROUTING链调用的KUBE-SERVICE</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看PREROUTING链</span></span><br><span class="line">root@k8s-node01:~<span class="comment"># iptables -t nat -S PREROUTING</span></span><br><span class="line">-P PREROUTING ACCEPT</span><br><span class="line"><span class="comment"># 此处可以看到所有集群外部的流量全部都被跳转给KUBE-SERVICES，需要注意的是集群外访问的只可能是节点IP不可能为Service IP所以ClusterIP的做法在此不适用。</span></span><br><span class="line">-A PREROUTING -m comment --comment <span class="string">&quot;kubernetes service portals&quot;</span> -j KUBE-SERVICES</span><br><span class="line">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A PREROUTING -m addrtype --dst-type LOCAL -j CNI-HOSTPORT-DNAT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追踪一条NodePort的Service.</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># iptables -t nat -S KUBE-SERVICES | grep &quot;nodeport&quot;</span></span><br><span class="line"><span class="comment"># 群外访问的只可能是节点IP不可能为Service IP所以以下2条规则不会被匹配搭到。其会被KUBE-SERVICE中的最后一条匹配</span></span><br><span class="line">-A KUBE-SERVICES ! -s 10.244.0.0/16 -d 10.97.56.1/32 -p tcp -m comment --comment <span class="string">&quot;default/demoapp-service-nodeport:http cluster IP&quot;</span> -m tcp --dport 80 -j KUBE-MARK-MASQ</span><br><span class="line">-A KUBE-SERVICES -d 10.97.56.1/32 -p tcp -m comment --comment <span class="string">&quot;default/demoapp-service-nodeport:http cluster IP&quot;</span> -m tcp --dport 80 -j KUBE-SVC-YDLXCW2IFVSJIZMR</span><br><span class="line"><span class="comment"># 此条规则用来做addrtype地址类型判断，判断目标地址类型是否为LOCAL本节点所拥有的IP，如果不是则送往forward链转发，是则调转到KUBE-NODEPORTS链。</span></span><br><span class="line">-A KUBE-SERVICES -m comment --comment <span class="string">&quot;kubernetes service nodeports; NOTE: this must be the last rule in this chain&quot;</span> -m addrtype --dst-type LOCAL -j KUBE-NODEPORTS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追踪KUBE-NODEPORTS链</span></span><br><span class="line"><span class="comment"># 每个Service可以在KUBE-NODEPORTS链上生成2条规则。</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># iptables -t nat -S KUBE-NODEPORTS</span></span><br><span class="line">-N KUBE-NODEPORTS</span><br><span class="line"><span class="comment"># 目标端口为31156的跳转给KUBE-MARK-MASQ进行打标，打标完毕后进入下一条规则</span></span><br><span class="line">-A KUBE-NODEPORTS -p tcp -m comment --comment <span class="string">&quot;default/demoapp:80&quot;</span> -m tcp --dport 31156 -j KUBE-MARK-MASQ</span><br><span class="line"><span class="comment"># 目标端口为31156的跳转给KUBE-SVC-AZ2VLIOX5VGKTCYB链，继续追踪KUBE-SVC-AZ2VLIOX5VGKTCYB链</span></span><br><span class="line">-A KUBE-NODEPORTS -p tcp -m comment --comment <span class="string">&quot;default/demoapp:80&quot;</span> -m tcp --dport 31156 -j KUBE-SVC-AZ2VLIOX5VGKTCYB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看KUBE-SVC-AZ2VLIOX5VGKTCYB链内容</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># iptables -t nat -S KUBE-SVC-AZ2VLIOX5VGKTCYB</span></span><br><span class="line">-N KUBE-SVC-AZ2VLIOX5VGKTCYB</span><br><span class="line"><span class="comment"># 可以看到该链内的规则是将流量通过算法，负载均衡给后端的KUBE-SEP链。继续追踪KUBE-SEP-A5X3QL25Q5UGSWY7</span></span><br><span class="line">-A KUBE-SVC-AZ2VLIOX5VGKTCYB -m comment --comment <span class="string">&quot;default/demoapp:80&quot;</span> -m statistic --mode random --probability 0.25000000000 -j KUBE-SEP-A5X3QL25Q5UGSWY7</span><br><span class="line">-A KUBE-SVC-AZ2VLIOX5VGKTCYB -m comment --comment <span class="string">&quot;default/demoapp:80&quot;</span> -m statistic --mode random --probability 0.33333333349 -j KUBE-SEP-WSKJMSX5XPODQ46G</span><br><span class="line">-A KUBE-SVC-AZ2VLIOX5VGKTCYB -m comment --comment <span class="string">&quot;default/demoapp:80&quot;</span> -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-ZCPJGBG3WJTOIVRD</span><br><span class="line">-A KUBE-SVC-AZ2VLIOX5VGKTCYB -m comment --comment <span class="string">&quot;default/demoapp:80&quot;</span> -j KUBE-SEP-EKC65ZBALV67XSBV</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看KUBE-SEP-A5X3QL25Q5UGSWY7链内容</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># iptables -t nat -S KUBE-SEP-A5X3QL25Q5UGSWY7</span></span><br><span class="line">-N KUBE-SEP-A5X3QL25Q5UGSWY7</span><br><span class="line"><span class="comment"># 源地址为10.244.1.4的，跳转到KUBE-MARK-MASQ进行打标。此条规则类似于pod自身访问了自身的Service服务。</span></span><br><span class="line">-A KUBE-SEP-A5X3QL25Q5UGSWY7 -s 10.244.1.4/32 -m comment --comment <span class="string">&quot;default/demoapp:80&quot;</span> -j KUBE-MARK-MASQ</span><br><span class="line"><span class="comment"># 对所有的流量做目标地址转换，转换后地址为10.244.1.4:80，而后发往POSTROUTING链。</span></span><br><span class="line">-A KUBE-SEP-A5X3QL25Q5UGSWY7 -p tcp -m comment --comment <span class="string">&quot;default/demoapp:80&quot;</span> -m tcp -j DNAT --to-destination 10.244.1.4:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 而后的流量转发与ClusterIP相同。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Service</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>ipvs类型Service</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/05Service%E8%B5%84%E6%BA%90/05ipvs%E7%B1%BB%E5%9E%8BService/ipvs%E7%B1%BB%E5%9E%8BService/</url>
    <content><![CDATA[<h3 id="ipvs代理模式下的ClusterIP"><a href="#ipvs代理模式下的ClusterIP" class="headerlink" title="ipvs代理模式下的ClusterIP"></a>ipvs代理模式下的ClusterIP</h3><p>在iptables代理模式下，每一个Service会生成很多的iptables规则，在Service较多的情况下，itpables规则会更多，在性能上将会由很大的影响。而ipvs的代理模式则比iptables相对简单的多。</p>
<p>ipvs代理模式下，kube-proxy会在每个节点上创建一个名为kube-ipvs0的虚拟接口，并将集群所有Service对象的ClusterIP和ExternalIP都配置在该接口； kube-proxy为每个service生成一个虚拟服务器（Virtual Server）的定义。</p>
<p>ipvs类型：默认使用nat类型；仅需要借助于极少量的iptables规则完成源地址及端口转换等功能。</p>
<h3 id="iptables代理模式改ipvs"><a href="#iptables代理模式改ipvs" class="headerlink" title="iptables代理模式改ipvs"></a>iptables代理模式改ipvs</h3><p>云原生应用支持直接修改环境变量或修改配置文件中非关键配置后动态加载，我们修改配置后会通过配置中心加载信息后自动重载，用户对此无所感知。我们只需要提供配置中心，将需要修改的配置在配置中心上进行替换，经过一段时间后就自动生效了。</p>
<p>k8s上提供了一个非常重要的资源ConfigMap来模拟为所有pod中的应用提供配置中心。</p>
<p>代理模式是kube-proxy的特性，kubeadm部署的k8s中，kube-proxy是以集群附件的方式进行部署的。他的配置文件放kube-system名称空间中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># configmaps中kube-system名称空间下kube-proxy的配置</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get configmaps kube-proxy -n kube-system </span></span><br><span class="line">NAME         DATA   AGE</span><br><span class="line">kube-proxy   2      12d</span><br></pre></td></tr></table></figure>

<p>1.修改该ConfigMap配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a &#x27;#&#x27; will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  config.conf: |-</span><br><span class="line">    apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">    bindAddress: 0.0.0.0</span><br><span class="line">    bindAddressHardFail: <span class="literal">false</span></span><br><span class="line">    clientConnection:</span><br><span class="line">      acceptContentTypes: <span class="string">&quot;&quot;</span></span><br><span class="line">      burst: 0</span><br><span class="line">      contentType: <span class="string">&quot;&quot;</span></span><br><span class="line">      kubeconfig: /var/lib/kube-proxy/kubeconfig.conf</span><br><span class="line">      qps: 0</span><br><span class="line">    clusterCIDR: 10.244.0.0/16</span><br><span class="line">    configSyncPeriod: 0s</span><br><span class="line">    conntrack:</span><br><span class="line">      maxPerCore: null</span><br><span class="line">      min: null</span><br><span class="line">      tcpCloseWaitTimeout: null</span><br><span class="line">      tcpEstablishedTimeout: null</span><br><span class="line">    detectLocalMode: <span class="string">&quot;&quot;</span></span><br><span class="line">    enableProfiling: <span class="literal">false</span></span><br><span class="line">    healthzBindAddress: <span class="string">&quot;&quot;</span></span><br><span class="line">    hostnameOverride: <span class="string">&quot;&quot;</span></span><br><span class="line">    iptables:															   <span class="comment"># 此处为iptables代理模式下相关的配置</span></span><br><span class="line">      masqueradeAll: <span class="literal">false</span>                   <span class="comment"># false表示只为集群外以及源地址为自身的流量做源地址转换，true则表示所有流量都做转换。</span></span><br><span class="line">      masqueradeBit: null</span><br><span class="line">      minSyncPeriod: 0s</span><br><span class="line">      syncPeriod: 0s</span><br><span class="line">    ipvs:</span><br><span class="line">      excludeCIDRs: null</span><br><span class="line">      minSyncPeriod: 0s</span><br><span class="line">      scheduler: <span class="string">&quot;&quot;</span>													<span class="comment"># 此项为调度算法，如果不给出k8s设定的默认调度算法为轮询(RR)</span></span><br><span class="line">      strictARP: <span class="literal">false</span></span><br><span class="line">      syncPeriod: 0s</span><br><span class="line">      tcpFinTimeout: 0s</span><br><span class="line">      tcpTimeout: 0s</span><br><span class="line">      udpTimeout: 0s</span><br><span class="line">    kind: KubeProxyConfiguration</span><br><span class="line">    metricsBindAddress: <span class="string">&quot;&quot;</span></span><br><span class="line">    mode: <span class="string">&quot;ipvs&quot;</span>                              <span class="comment"># mode默认留空表示使用iptables，将其改为ipvs</span></span><br><span class="line">    nodePortAddresses: null</span><br><span class="line">    oomScoreAdj: null</span><br><span class="line">    portRange: <span class="string">&quot;&quot;</span></span><br><span class="line">    showHiddenMetricsForVersion: <span class="string">&quot;&quot;</span></span><br><span class="line">    udpIdleTimeout: 0s</span><br><span class="line">    winkernel:</span><br><span class="line">      enableDSR: <span class="literal">false</span></span><br><span class="line">      networkName: <span class="string">&quot;&quot;</span></span><br><span class="line">      sourceVip: <span class="string">&quot;&quot;</span></span><br><span class="line">  kubeconfig.conf: |-</span><br><span class="line">    apiVersion: v1</span><br><span class="line">    kind: Config</span><br><span class="line">    clusters:</span><br><span class="line">    - cluster:</span><br><span class="line">        certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">        server: https://kube-api:6443</span><br><span class="line">      name: default</span><br><span class="line">    contexts:</span><br><span class="line">    - context:</span><br><span class="line">        cluster: default</span><br><span class="line">        namespace: default</span><br><span class="line">        user: default</span><br><span class="line">      name: default</span><br><span class="line">    current-context: default</span><br><span class="line">    users:</span><br><span class="line">    - name: default</span><br><span class="line">      user:</span><br><span class="line">        tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubeadm.kubernetes.io/component-config.hash: sha256:1ea36ed7ad141bac9baf431205bd45f2383ab0257b11569ca33dbe9255c70197</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-06-28T10:53:47Z&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    app: kube-proxy</span><br><span class="line">  name: kube-proxy</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">&quot;274&quot;</span></span><br><span class="line">  uid: 5e6d2b07-cb9a-4e72-a67b-3ee5305ea559</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 修改完毕后保存退出</span></span><br><span class="line">  configmap/kube-proxy edited</span><br><span class="line">  <span class="comment"># 提示edited表示修改成功</span></span><br></pre></td></tr></table></figure>

<p>2.一段时间后即可生效，既可以看到kube-ipvs0的网卡信息。如果长时间不生效可以将kube-proxy的pod手动删除，让其强制重读配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除kube-proxy相关pod强制重新生成新的pod</span></span><br><span class="line"><span class="comment"># 此处直接删除全部，生产中注意以灰度方式删除，或集群部署时直接设置为ipvs代理模式</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods  -n kube-system --show-labels -l &quot;k8s-app=kube-proxy&quot;</span></span><br><span class="line">NAME               READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">kube-proxy-5splm   1/1     Running   0          12d   controller-revision-hash=bb6f59455,k8s-app=kube-proxy,pod-template-generation=1</span><br><span class="line">kube-proxy-d67gm   1/1     Running   0          12d   controller-revision-hash=bb6f59455,k8s-app=kube-proxy,pod-template-generation=1</span><br><span class="line">kube-proxy-p8md8   1/1     Running   0          12d   controller-revision-hash=bb6f59455,k8s-app=kube-proxy,pod-template-generation=1</span><br><span class="line">kube-proxy-tf5pd   1/1     Running   0          12d   controller-revision-hash=bb6f59455,k8s-app=kube-proxy,pod-template-generation=1</span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl delete pods  -n kube-system  -l &quot;k8s-app=kube-proxy&quot;</span></span><br><span class="line">pod <span class="string">&quot;kube-proxy-5splm&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;kube-proxy-d67gm&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;kube-proxy-p8md8&quot;</span> deleted</span><br><span class="line">pod <span class="string">&quot;kube-proxy-tf5pd&quot;</span> deleted</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看pod已经被重新生成</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods  -n kube-system --show-labels -l &quot;k8s-app=kube-proxy&quot;</span></span><br><span class="line">NAME               READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">kube-proxy-82ph8   1/1     Running   0          22s   controller-revision-hash=bb6f59455,k8s-app=kube-proxy,pod-template-generation=1</span><br><span class="line">kube-proxy-lpw4v   1/1     Running   0          21s   controller-revision-hash=bb6f59455,k8s-app=kube-proxy,pod-template-generation=1</span><br><span class="line">kube-proxy-m89z4   1/1     Running   0          15s   controller-revision-hash=bb6f59455,k8s-app=kube-proxy,pod-template-generation=1</span><br><span class="line">kube-proxy-rr8r2   1/1     Running   0          20s   controller-revision-hash=bb6f59455,k8s-app=kube-proxy,pod-template-generation=1</span><br></pre></td></tr></table></figure>

<p>3.查看kube-ipvs0网卡是否生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># ifconfig kube-ipvs0</span></span><br><span class="line">kube-ipvs0: flags=130&lt;BROADCAST,NOARP&gt;  mtu 1500</span><br><span class="line">        inet 10.98.79.128  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        ether 8a:0b:01:0b:4f:04  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

<p>4.每一个Service的地址都会被配置在kube-ipvs0的接口上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># ip addr show kube-ipvs0</span></span><br><span class="line">30: kube-ipvs0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default </span><br><span class="line">    link/ether 8a:0b:01:0b:4f:04 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.98.79.128/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.96.0.10/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.97.72.1/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.103.164.125/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.96.141.139/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.16.11.75/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.102.104.28/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.104.238.122/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.98.184.16/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.104.237.74/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.104.57.104/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.101.148.66/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.97.181.65/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.96.0.1/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.107.36.136/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.111.8.128/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.104.124.18/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.16.11.72/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.97.56.1/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 10.98.63.248/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.16.11.73/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>5.使用ipvsadm查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有的service都变为ipvs的规则。</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># ipvsadm -ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  172.16.11.71:30373 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.71:31156 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.71:31398 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.71:31828 rr</span><br><span class="line">  -&gt; 10.244.3.54:80               Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.72:80 rr</span><br><span class="line">  -&gt; 10.244.3.4:8000              Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.72:30373 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.72:31156 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.72:31398 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.72:31828 rr</span><br><span class="line">  -&gt; 10.244.3.54:80               Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.73:80 rr</span><br><span class="line">  -&gt; 10.244.3.53:80               Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.73:30373 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.73:31156 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.73:31398 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.73:31828 rr</span><br><span class="line">  -&gt; 10.244.3.54:80               Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.75:80 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.75:30373 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.75:31156 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.75:31398 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.16.11.75:31828 rr</span><br><span class="line">  -&gt; 10.244.3.54:80               Masq    1      0          0         </span><br><span class="line">TCP  172.17.0.1:30373 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.17.0.1:31156 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  172.17.0.1:31398 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.96.0.1:443 rr</span><br><span class="line">  -&gt; 172.16.11.71:6443            Masq    1      0          0         </span><br><span class="line">TCP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.2:53                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.3:53                Masq    1      0          0         </span><br><span class="line">TCP  10.96.0.10:9153 rr</span><br><span class="line">  -&gt; 10.244.0.2:9153              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.3:9153              Masq    1      0          0         </span><br><span class="line">TCP  10.96.141.139:80 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.97.56.1:80 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.97.72.1:80 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.97.181.65:80 rr</span><br><span class="line">  -&gt; 10.244.3.26:80               Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.27:80               Masq    1      0          0         </span><br><span class="line">TCP  10.98.63.248:80 rr</span><br><span class="line">  -&gt; 10.244.3.53:80               Masq    1      0          0         </span><br><span class="line">TCP  10.98.79.128:80 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.98.184.16:12345 rr</span><br><span class="line">  -&gt; 10.244.1.14:12345            Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.11:12345            Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.12:12345            Masq    1      0          0         </span><br><span class="line">TCP  10.101.148.66:80 rr</span><br><span class="line">  -&gt; 10.244.3.54:80               Masq    1      0          0         </span><br><span class="line">TCP  10.102.104.28:80 rr</span><br><span class="line">  -&gt; 10.244.3.46:80               Masq    1      0          0         </span><br><span class="line">TCP  10.103.164.125:9500 rr persistent 10800</span><br><span class="line">  -&gt; 10.244.1.5:9500              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.4:9500              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.3:9500              Masq    1      0          0         </span><br><span class="line">TCP  10.104.57.104:12345 rr</span><br><span class="line">  -&gt; 10.244.1.13:12345            Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.11:12345            Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.9:12345             Masq    1      0          0         </span><br><span class="line">TCP  10.104.124.18:80 rr</span><br><span class="line">  -&gt; 10.244.3.4:8000              Masq    1      0          0         </span><br><span class="line">TCP  10.104.237.74:3306 rr</span><br><span class="line">  -&gt; 172.16.11.79:3306            Masq    1      0          0         </span><br><span class="line">TCP  10.104.238.122:12345 rr</span><br><span class="line">  -&gt; 10.244.1.10:12345            Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.11:12345            Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.8:12345             Masq    1      0          0         </span><br><span class="line">TCP  10.107.36.136:12345 rr</span><br><span class="line">  -&gt; 10.244.1.12:12345            Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.9:12345             Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.10:12345            Masq    1      0          0         </span><br><span class="line">TCP  10.111.8.128:80 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.244.0.0:30373 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.244.0.0:31156 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.244.0.0:31398 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.244.0.0:31828 rr</span><br><span class="line">  -&gt; 10.244.3.54:80               Masq    1      0          0         </span><br><span class="line">TCP  10.244.0.1:30373 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.244.0.1:31156 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  10.244.0.1:31398 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  127.0.0.1:30373 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  127.0.0.1:31156 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  127.0.0.1:31398 rr</span><br><span class="line">  -&gt; 172.16.11.81:80              Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.1.4:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.2.3:80                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.3.2:80                Masq    1      0          0         </span><br><span class="line">TCP  127.0.0.1:31828 rr</span><br><span class="line">  -&gt; 10.244.3.54:80               Masq    1      0          0         </span><br><span class="line">TCP  172.17.0.1:31828 rr</span><br><span class="line">  -&gt; 10.244.3.54:80               Masq    1      0          0         </span><br><span class="line">TCP  10.244.0.1:31828 rr</span><br><span class="line">  -&gt; 10.244.3.54:80               Masq    1      0          0         </span><br><span class="line">UDP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.2:53                Masq    1      0          0         </span><br><span class="line">  -&gt; 10.244.0.3:53                Masq    1      0          0        </span><br></pre></td></tr></table></figure>

<p>6.再次查看iptables中的规则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># iptables -t nat -S </span></span><br><span class="line">-P PREROUTING ACCEPT</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">-P POSTROUTING ACCEPT</span><br><span class="line">-N DOCKER</span><br><span class="line">-N KUBE-FIREWALL</span><br><span class="line">-N KUBE-KUBELET-CANARY</span><br><span class="line">-N KUBE-LOAD-BALANCER</span><br><span class="line">-N KUBE-MARK-DROP</span><br><span class="line">-N KUBE-MARK-MASQ</span><br><span class="line">-N KUBE-NODE-PORT</span><br><span class="line">-N KUBE-POSTROUTING</span><br><span class="line">-N KUBE-SERVICES</span><br><span class="line">-A PREROUTING -m comment --comment <span class="string">&quot;kubernetes service portals&quot;</span> -j KUBE-SERVICES</span><br><span class="line">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A OUTPUT -m comment --comment <span class="string">&quot;kubernetes service portals&quot;</span> -j KUBE-SERVICES</span><br><span class="line">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A POSTROUTING -m comment --comment <span class="string">&quot;kubernetes postrouting rules&quot;</span> -j KUBE-POSTROUTING</span><br><span class="line">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class="line">-A POSTROUTING -s 10.244.0.0/16 -d 10.244.0.0/16 -j RETURN</span><br><span class="line">-A POSTROUTING -s 10.244.0.0/16 ! -d 224.0.0.0/4 -j MASQUERADE --random-fully</span><br><span class="line">-A POSTROUTING ! -s 10.244.0.0/16 -d 10.244.0.0/24 -j RETURN</span><br><span class="line">-A POSTROUTING ! -s 10.244.0.0/16 -d 10.244.0.0/16 -j MASQUERADE --random-fully</span><br><span class="line">-A DOCKER -i docker0 -j RETURN</span><br><span class="line">-A KUBE-FIREWALL -j KUBE-MARK-DROP</span><br><span class="line">-A KUBE-LOAD-BALANCER -j KUBE-MARK-MASQ</span><br><span class="line">-A KUBE-MARK-DROP -j MARK --set-xmark 0x8000/0x8000</span><br><span class="line">-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000</span><br><span class="line">-A KUBE-NODE-PORT -p tcp -m comment --comment <span class="string">&quot;Kubernetes nodeport TCP port for masquerade purpose&quot;</span> -m <span class="built_in">set</span> --match-set KUBE-NODE-PORT-TCP dst -j KUBE-MARK-MASQ</span><br><span class="line">-A KUBE-POSTROUTING -m comment --comment <span class="string">&quot;Kubernetes endpoints dst ip:port, source ip for solving hairpin purpose&quot;</span> -m <span class="built_in">set</span> --match-set KUBE-LOOP-BACK dst,dst,src -j MASQUERADE</span><br><span class="line">-A KUBE-POSTROUTING -m mark ! --mark 0x4000/0x4000 -j RETURN</span><br><span class="line">-A KUBE-POSTROUTING -j MARK --set-xmark 0x4000/0x0</span><br><span class="line">-A KUBE-POSTROUTING -m comment --comment <span class="string">&quot;kubernetes service traffic requiring SNAT&quot;</span> -j MASQUERADE --random-fully</span><br><span class="line">-A KUBE-SERVICES ! -s 10.244.0.0/16 -m comment --comment <span class="string">&quot;Kubernetes service cluster ip + port for masquerade purpose&quot;</span> -m <span class="built_in">set</span> --match-set KUBE-CLUSTER-IP dst,dst -j KUBE-MARK-MASQ</span><br><span class="line">-A KUBE-SERVICES -m comment --comment <span class="string">&quot;Kubernetes service external ip + port for masquerade and filter purpose&quot;</span> -m <span class="built_in">set</span> --match-set KUBE-EXTERNAL-IP dst,dst -j KUBE-MARK-MASQ</span><br><span class="line">-A KUBE-SERVICES -m comment --comment <span class="string">&quot;Kubernetes service external ip + port for masquerade and filter purpose&quot;</span> -m <span class="built_in">set</span> --match-set KUBE-EXTERNAL-IP dst,dst -m physdev ! --physdev-is-in -m addrtype ! --src-type LOCAL -j ACCEPT</span><br><span class="line">-A KUBE-SERVICES -m comment --comment <span class="string">&quot;Kubernetes service external ip + port for masquerade and filter purpose&quot;</span> -m <span class="built_in">set</span> --match-set KUBE-EXTERNAL-IP dst,dst -m addrtype --dst-type LOCAL -j ACCEPT</span><br><span class="line">-A KUBE-SERVICES -m addrtype --dst-type LOCAL -j KUBE-NODE-PORT</span><br><span class="line">-A KUBE-SERVICES -m <span class="built_in">set</span> --match-set KUBE-CLUSTER-IP dst,dst -j ACCEPT</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Service</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Service的服务注册和服务发现</title>
    <url>/2021/07/04/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/05Service%E8%B5%84%E6%BA%90/06Service%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/Service%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<p>即便Service有了IP，但是若集群上有1000+Service，使用IP地址去访问是不可能的事情，所以我们需要以Service的名称来访问服务。</p>
<p>由于k8s上的服务是动态管理的，随时有可能创建删除。如果使用传统的DNS解析那么每一次创建一个服务就得去手动管理其解析记录。</p>
<p>服务发现在it领域有很多种解决方法，如Zookeeper，Euraka，Consul等。如果使用这些方法的话服务注册和发现能很好解决，但名称解析依然无法联动，因而k8s没有使用这总服务发现机制，而是将传统的DNS服务直接提供了一个云原生解决方案，它支持从APIServer上动态加载相关的Service信息及端点信息，并自动生成资源记录。</p>
<p>这种DNS就成了k8s上服务注册和服务发现的动态总线：kubeDNS。</p>
<p>其实现方案上有3代：</p>
<ul>
<li>第一代：SkyDNS</li>
<li>第二代：KubeDNS</li>
<li>第三代：CoreDNS</li>
</ul>
<h3 id="K8S的服务发现"><a href="#K8S的服务发现" class="headerlink" title="K8S的服务发现"></a>K8S的服务发现</h3><p>在K8S中服务发现有两种方法，基于环境变量或基于DNS服务。</p>
<h4 id="基于环境变量的服务发现"><a href="#基于环境变量的服务发现" class="headerlink" title="基于环境变量的服务发现"></a>基于环境变量的服务发现</h4><p>在k8s中基于环境变量的方法又有两种：</p>
<h5 id="（1）Kubernetes-Service环境变量"><a href="#（1）Kubernetes-Service环境变量" class="headerlink" title="（1）Kubernetes Service环境变量"></a>（1）Kubernetes Service环境变量</h5><p>Kubernetes为每个Service资源生成包括以下形式的环境变量在内一系列环境变量，在同一名称空间中创建的Pod对象都会自动拥有这些变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;SVCNAME&#125;_SERVICE_HOST</span><br><span class="line">&#123;SVCNAME&#125;_SERVICE_PORT</span><br></pre></td></tr></table></figure>

<p>default名称空间：创建的demoapp Service，意味着default名称空间下的每个Pod内部会被自动注入 DEMOAPP_SERVICE_HOST:ClusterIP ， DEMOAPP_SERVICE_PORT=80 </p>
<p>#####（2）Docker Link形式的环境变量</p>
<p>Docker使用–link选项实现容器连接时所设置的环境变量形式，具体使用方式请参考Docker的相关文档。在创建Pod对象时，kubernetes也会把与此形式兼容的一系列环境变量注入到Pod对象中。</p>
<h4 id="基于DNS的服务发现"><a href="#基于DNS的服务发现" class="headerlink" title="基于DNS的服务发现"></a>基于DNS的服务发现</h4><p>基于DNS的服务发现，对于每个Service对象，都会具有以下3个类型的DNS资源记录。</p>
<h5 id="1）根据ClusterIP的地址类型，为IPv4生成A记录，为IPv6生成AAAA记录；"><a href="#1）根据ClusterIP的地址类型，为IPv4生成A记录，为IPv6生成AAAA记录；" class="headerlink" title="1）根据ClusterIP的地址类型，为IPv4生成A记录，为IPv6生成AAAA记录；"></a>1）根据ClusterIP的地址类型，为IPv4生成A记录，为IPv6生成AAAA记录；</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt;  IN  A  &lt;cluster-ip&gt;</span><br><span class="line">&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt; IN AAAA &lt;cluster-ip&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如有个service为demoapp，其固定的DNS名称即为:</span></span><br><span class="line">demoapp.default.svc.cluster.local.   </span><br><span class="line"><span class="comment"># 如果部署集群时没有指定域名那么其&lt;zone&gt;即为cluster.local.</span></span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前集群上有一个demoapp的svc地址为10.111.8.128。</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get svc demoapp</span></span><br><span class="line">NAME      TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">demoapp   NodePort   10.111.8.128   &lt;none&gt;        80:31156/TCP   13d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入一个pod进行解析</span></span><br><span class="line">[root@demoapp-5f7d8f9847-jrfm6 /]<span class="comment"># nslookup demoapp.default.svc.cluster.local.</span></span><br><span class="line">Server:         10.96.0.10     <span class="comment"># dns服务器地址，此为CoreDNS服务的地址</span></span><br><span class="line">Address:        10.96.0.10<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Name:   demoapp.default.svc.cluster.local</span><br><span class="line">Address: 10.111.8.128    <span class="comment"># 得到的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CoreDNS服务地址</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get svc -n kube-system</span></span><br><span class="line">NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">kube-dns   ClusterIP   10.96.0.10   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   13d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每创建一个pod都会在其/etc/resolve.conf中指定其nameserver为kube-dns的地址</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl exec demoapp-5f7d8f9847-jrfm6 -- cat /etc/resolv.conf</span></span><br><span class="line">nameserver 10.96.0.10</span><br><span class="line">search default.svc.cluster.local svc.cluster.local cluster.local</span><br><span class="line">options ndots:5</span><br><span class="line"><span class="comment"># 上述search参数中指定的DNS各搜索域，是以次序指定的几个域名后缀，它们各自的如下所示。  </span></span><br><span class="line"><span class="comment"># &lt;ns&gt;.svc.&lt;zone&gt;：附带有特定名称空间的域名，例如default.svc.cluster.local；</span></span><br><span class="line"><span class="comment"># svc. &lt;zone&gt;：附带了Kubernetes标识Service专用子域svc的域名，例如svc.cluster.local</span></span><br><span class="line"><span class="comment"># &lt;zone&gt;：集群本地域名，例如cluster.local。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看kube-dns详细信息</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl describe svc kube-dns -n kube-system</span></span><br><span class="line">Name:              kube-dns</span><br><span class="line">Namespace:         kube-system</span><br><span class="line">Labels:            k8s-app=kube-dns</span><br><span class="line">                   kubernetes.io/cluster-service=<span class="literal">true</span></span><br><span class="line">                   kubernetes.io/name=CoreDNS</span><br><span class="line">Annotations:       prometheus.io/port: 9153</span><br><span class="line">                   prometheus.io/scrape: <span class="literal">true</span></span><br><span class="line">Selector:          k8s-app=kube-dns</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP Family Policy:  SingleStack</span><br><span class="line">IP Families:       IPv4</span><br><span class="line">IP:                10.96.0.10</span><br><span class="line">IPs:               10.96.0.10</span><br><span class="line">Port:              dns  53/UDP</span><br><span class="line">TargetPort:        53/UDP</span><br><span class="line">Endpoints:         10.244.0.4:53,10.244.0.5:53      <span class="comment"># 其后端有两个端点</span></span><br><span class="line">Port:              dns-tcp  53/TCP</span><br><span class="line">TargetPort:        53/TCP</span><br><span class="line">Endpoints:         10.244.0.4:53,10.244.0.5:53</span><br><span class="line">Port:              metrics  9153/TCP</span><br><span class="line">TargetPort:        9153/TCP</span><br><span class="line">Endpoints:         10.244.0.4:9153,10.244.0.5:9153</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看kube-dns的后端端点。</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get pods -o wide -n kube-system -l &#x27;k8s-app=kube-dns&#x27;</span></span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE   IP           NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-57d4cbf879-p5c58   1/1     Running   1          13d   10.244.0.4   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-57d4cbf879-rfdsk   1/1     Running   1          13d   10.244.0.5   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="comment"># coredns会始终监视着APIServer中的资源变动，删除一个Service其将无法解析。</span></span><br></pre></td></tr></table></figure>

<h5 id="2）为每个定义了名称的端口生成一个SRV记录，未命名的端口号则不具有该记录；"><a href="#2）为每个定义了名称的端口生成一个SRV记录，未命名的端口号则不具有该记录；" class="headerlink" title="2）为每个定义了名称的端口生成一个SRV记录，未命名的端口号则不具有该记录；"></a>2）为每个定义了名称的端口生成一个SRV记录，未命名的端口号则不具有该记录；</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SRV是用来实现服务发现的</span></span><br><span class="line">_&lt;port&gt;._&lt;protocol&gt;.&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;. &lt;ttl&gt;  IN  SRV  &lt;weight&gt; &lt;priority&gt;  &lt;port-number&gt;  &lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;.</span><br></pre></td></tr></table></figure>

<h5 id="3）对于每个给定的A记录或AAAA记录都要生成PTR记录，"><a href="#3）对于每个给定的A记录或AAAA记录都要生成PTR记录，" class="headerlink" title="3）对于每个给定的A记录或AAAA记录都要生成PTR记录，"></a>3）对于每个给定的A记录或AAAA记录都要生成PTR记录，</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PTR记录各自的格式如下所示</span></span><br><span class="line">&lt;d&gt;.&lt;c&gt;.&lt;b&gt;.&lt;a&gt;.in-addr.arpa.  &lt;ttl&gt;  IN  PTR &lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;.</span><br><span class="line">h4.h3.h2.h1.g4.g3.g2.g1.f4.f3.f2.f1.e4.e3.e2.e1.d4.d3.d2.d1.c4.c3.c2.c1.b4.b3.b2.b1.a4.a3.a2.a1.ip6.arpa &lt;ttl&gt; IN PTR &lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;.</span><br></pre></td></tr></table></figure>

<p>验证PTR记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询demoapp-svc的ServiceIP </span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl get svc demoapp-svc</span></span><br><span class="line">NAME          TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">demoapp-svc   ClusterIP   10.97.72.1   &lt;none&gt;        80/TCP    6d22h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在pod中对其进行反向解析</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl exec demoapp-5f7d8f9847-jrfm6 -- nslookup -A 10.97.72.1</span></span><br><span class="line">*** Invalid option: A</span><br><span class="line">1.72.97.10.in-addr.arpa name = demoapp-svc.default.svc.cluster.local.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在pod中做正向解析</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl exec demoapp-5f7d8f9847-jrfm6 -- nslookup 10.97.72.1</span></span><br><span class="line">1.72.97.10.in-addr.arpa name = demoapp-svc.default.svc.cluster.local.</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl exec demoapp-5f7d8f9847-jrfm6 -- nslookup demoapp-svc.default.svc.cluster.local.</span></span><br><span class="line">Server:         10.96.0.10</span><br><span class="line">Address:        10.96.0.10<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Name:   demoapp-svc.default.svc.cluster.local</span><br><span class="line">Address: 10.97.72.1</span><br></pre></td></tr></table></figure>

<p>前面在default名称空间中创建Service对象demoapp-svc的地址为10.97.72.1，且为TCP协议的80端口取名http，对于默认的cluster.local域名来说，此它会拥有如下3个DNS资源记录。</p>
<ul>
<li>A记录：demoapp-svc.default.svc.cluster.local. 30 IN A  10.97.72.1；</li>
<li>SRV记录：_http._tcp.demoapp-svc.default.svc.cluster.local. 30 IN SRV 0 100 80 demoapp-svc.default.svc.cluster.local.</li>
<li>PTR记录：1.72.97.10.in-addr.arpa. 30     IN      PTR     demoapp-svc.default.svc.cluster.local.</li>
</ul>
<h3 id="CoreDNS配置"><a href="#CoreDNS配置" class="headerlink" title="CoreDNS配置"></a>CoreDNS配置</h3><p>有时候我们需要对CoreDNS进行配置，对其增加一些解析的功能，CoreDNS在kube-system名称空间下，其配置文件也是由ConfigMap来提供的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl get cm coredns -n kube-system</span></span><br><span class="line">NAME      DATA   AGE</span><br><span class="line">coredns   1      13d</span><br></pre></td></tr></table></figure>

<p>编辑coredns配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~<span class="comment"># kubectl edit cm coredns -n kube-system</span></span><br><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a &#x27;#&#x27; will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  Corefile: |</span><br><span class="line">    .:53 &#123;</span><br><span class="line">        errors           <span class="comment"># 表示将错误日志发往标准输出</span></span><br><span class="line">        health &#123;         <span class="comment"># 做健康状态检测</span></span><br><span class="line">           lameduck 5s</span><br><span class="line">        &#125;</span><br><span class="line">        ready            <span class="comment"># 所有状态就绪后才能报告自身为健康</span></span><br><span class="line">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;     <span class="comment"># 集群解析区域</span></span><br><span class="line">           pods insecure</span><br><span class="line">           fallthrough in-addr.arpa ip6.arpa</span><br><span class="line">           ttl 30</span><br><span class="line">        &#125;</span><br><span class="line">        prometheus :9153                   <span class="comment"># 向外输出prometheus兼容的指标数据</span></span><br><span class="line">        forward . /etc/resolv.conf &#123;			 <span class="comment"># 前向转发，若pod dns无法解析，就调用宿主机的/etc/resolv.conf文件中的dns服务器进行解析。</span></span><br><span class="line">           max_concurrent 1000</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">#       forward . 223.6.6.6 223.5.5.5 &#123;         # 可以自己指定公网上的dns服务器地址</span></span><br><span class="line"> <span class="comment">#          max_concurrect 1000</span></span><br><span class="line"> <span class="comment">#          except mylinuxops.com.                # 排除某个域名，不需要外网dns解析</span></span><br><span class="line"> <span class="comment">#       &#125;</span></span><br><span class="line"> <span class="comment">#       forward mylinuxops.com. 43.123.45.22     # 使用forward 对排除的域名进行单独解析</span></span><br><span class="line"> <span class="comment">#                                                 一个配置段中只能出现一个forward . 否则将冲突。</span></span><br><span class="line">        cache 30</span><br><span class="line">        loop</span><br><span class="line">        reload                    <span class="comment"># 修改后自动重载</span></span><br><span class="line">        loadbalance								<span class="comment"># 若某个记录后有多条A记录，他会在多个A记录中轮询</span></span><br><span class="line">    &#125;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2021-06-28T10:53:46Z&quot;</span></span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">&quot;264&quot;</span></span><br><span class="line">  uid: a7bb8e7b-90f1-416f-bbcc-111f715a0171</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Service</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Headless Service</title>
    <url>/2021/07/05/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/05Service%E8%B5%84%E6%BA%90/07Headless%20Service/Headless%20Service/</url>
    <content><![CDATA[<p>服务本身是为一组pod提供一个固定的入口，因此我们要能到达这些pod对象都要经由service ClusterIP来实现，因此配置在Service上的ClusterIP就称之为Service的头(Head)，而无头服务即指没有ClusterIP的服务。</p>
<p>在互联网中DNS本身就具有负载均衡功能，这种无头服务是依靠DNS自身的负载均衡功能来实现的。</p>
<p>Service的功能是提供一个访问入口并将请求调度给后端的Pod，现在前端有CoreDNS，那我们就能将Service ClusterIP进行省略，让用户访问时使用主机名或服务名来访问，而服务名解析的结果就不到ClusterIP，而是直接到达Pod IP，像这种服务称之为无头服务。</p>
<h3 id="Headless-Service作用"><a href="#Headless-Service作用" class="headerlink" title="Headless Service作用"></a>Headless Service作用</h3><p>应用分为两类，stateful和stateless。</p>
<ul>
<li>stateful：每一个个体都具有一定的独特性，由其存储的状态决定。</li>
<li>stateless：每一个个体没有特定的意义，随时可以替代。</li>
</ul>
<p>headless service在做名称解析时，每一个个体都有其Pod名称或Pod的唯一标识作为其名称来进行识别，于是这种DNS的解析记录就变为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a&gt;-&lt;b&gt;-&lt;c&gt;-&lt;d&gt;.&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;   A  PodIP</span><br><span class="line"><span class="comment"># 若该Service背后由多个pod，那么每一个Pod都具有一个自己独有的解析记录</span></span><br><span class="line"><span class="comment"># &lt;a&gt;-&lt;b&gt;-&lt;c&gt;-&lt;d&gt;标识pod的IP</span></span><br></pre></td></tr></table></figure>

<p>PTR记录则变为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PodIP   PTR   &lt;d&gt;.&lt;c&gt;.&lt;b&gt;.&lt;a&gt;.in-addr.arpa IN PTR H&lt;hostname&gt;.&lt;service&gt;.&lt;ns&gt;.svc.&lt;zone&gt;</span><br></pre></td></tr></table></figure>

<p>无头服务一般使用在Statefulset中。</p>
<h4 id="无头服务示例"><a href="#无头服务示例" class="headerlink" title="无头服务示例"></a>无头服务示例</h4><p>1.创建配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># vim demoapp-headless-svc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: demoapp-headless-svc</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: None         <span class="comment"># 无头服务和其他service的区别在于将ClusterIP置为None</span></span><br><span class="line">  selector:</span><br><span class="line">    app: demoapp</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    targetPort: 80</span><br><span class="line">    port: 80</span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl apply -f demoapp-headless-svc.yaml </span></span><br><span class="line">service/demoapp-headless-svc created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看svc</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get svc demoapp-headless-svc </span></span><br><span class="line">NAME                   TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">demoapp-headless-svc   ClusterIP   None         &lt;none&gt;        80/TCP    39s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看其后端ep是否被匹配到</span></span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl describe svc demoapp-headless-svc </span></span><br><span class="line">Name:              demoapp-headless-svc</span><br><span class="line">Namespace:         default</span><br><span class="line">Labels:            &lt;none&gt;</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          app=demoapp</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP Family Policy:  SingleStack</span><br><span class="line">IP Families:       IPv4</span><br><span class="line">IP:                None</span><br><span class="line">IPs:               None</span><br><span class="line">Port:              http  80/TCP</span><br><span class="line">TargetPort:        80/TCP</span><br><span class="line">Endpoints:         10.244.1.39:80,10.244.2.38:80,10.244.3.58:80 + 1 more...</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>3.验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在pod内解析做名称解析</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl exec demoapp-5f7d8f9847-jrfm6 -- nslookup 10-244-3-58.demoapp-headless-svc</span></span><br><span class="line">Server:         10.96.0.10</span><br><span class="line">Address:        10.96.0.10<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Name:   10-244-3-58.demoapp-headless-svc.default.svc.cluster.local</span><br><span class="line">Address: 10.244.3.58</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反解PTR记录</span></span><br><span class="line">root@k8s-master01:~<span class="comment"># kubectl exec demoapp-5f7d8f9847-jrfm6 -- nslookup 10.244.3.58</span></span><br><span class="line">58.3.244.10.in-addr.arpa        name = 10-244-3-58.demoapp-externalip-svc.default.svc.cluster.local.</span><br><span class="line">58.3.244.10.in-addr.arpa        name = 10-244-3-58.demoapp.default.svc.cluster.local.</span><br><span class="line">58.3.244.10.in-addr.arpa        name = 10-244-3-58.demoapp-svc.default.svc.cluster.local.</span><br><span class="line">58.3.244.10.in-addr.arpa        name = 10-244-3-58.demoapp-loadbalancer-svc.default.svc.cluster.local.</span><br><span class="line">58.3.244.10.in-addr.arpa        name = 10-244-3-58.demoapp-service-nodeport.default.svc.cluster.local.</span><br><span class="line">58.3.244.10.in-addr.arpa        name = 10-244-3-58.demoapp-headless-svc.default.svc.cluster.local.</span><br><span class="line"><span class="comment"># 反解PTR记录会查询到那么多记录是因为反解的pod不光被无头服务的serivce所关联，</span></span><br><span class="line"><span class="comment"># 还被其他serivce匹配并关联。</span></span><br></pre></td></tr></table></figure>

<h3 id="headless-service关键点"><a href="#headless-service关键点" class="headerlink" title="headless service关键点"></a>headless service关键点</h3><ul>
<li>svc_name的解析结果从常规Service的ClusterIP，转为各个Pod的IP地址；</li>
<li>反解，则从常规的clusterip解析为service name，转为从podip到hostname, <a>-<b>-<c>-<d>.<service>.<ns>.svc.<zone></li>
<li><hostname>指的是a-b-c-d格式，而非Pod自己的主机名； </li>
</ul>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Service</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>ExternalName</title>
    <url>/2021/07/05/Kubernetes/02Kubernetes%E8%B5%84%E6%BA%90/05Service%E8%B5%84%E6%BA%90/08ExternalName/ExternalName/</url>
    <content><![CDATA[<p>ExternalName是Service的第四种类型，其主要的作用是将集群外部服务的服务引入到集群内部来，能实现类似于常规服务一样的名称解析，服务发现等功能，但是它所有的对应的服务记录维护既不需要标签选择器关联任何对象，也无需定义任何端口和端点，但是必须在服务定义中使用ExternalName定义一个cname用于返回真正提供服务的名称的别名。</p>
<p>ExternalName类型Servcie在coreDNS中解析为一个cname，其对应的是一个外部服务的名称，该服务要能在外部DNS中被解析；此处的外部指的是公网DNS，或者在CoreDNS中通过forward转发给公司内部的DNS。</p>
<h3 id="ExternalName示例"><a href="#ExternalName示例" class="headerlink" title="ExternalName示例"></a>ExternalName示例</h3><p>1.编写配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># vim externalname-redis-svc.yaml</span></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: externalname-redis-svc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: ExternalName                <span class="comment"># 类型为ExternalName</span></span><br><span class="line">  externalName: redis.ik8s.io				<span class="comment"># externalname-redis-svc将会被解析为redis.ik8s.io</span></span><br><span class="line">  ports:</span><br><span class="line">  - name: redisport</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 6379</span><br><span class="line">    targetPort: 6379</span><br><span class="line">    nodePort: 0</span><br><span class="line">  selector: &#123;&#125;                      <span class="comment"># &#123;&#125;表示没有选择条件，无需标签选择器</span></span><br></pre></td></tr></table></figure>

<p>2.应用配置清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl apply -f externalname-redis-svc.yaml </span></span><br><span class="line">service/externalname-redis-svc created</span><br><span class="line"></span><br><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl get svc externalname-redis-svc </span></span><br><span class="line">NAME                     TYPE           CLUSTER-IP   EXTERNAL-IP     PORT(S)    AGE</span><br><span class="line">externalname-redis-svc   ExternalName   &lt;none&gt;       redis.ik8s.io   6379/TCP   12s</span><br></pre></td></tr></table></figure>

<p>3.验证ExternalName解析结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@k8s-master01:~/yaml/chapter07<span class="comment"># kubectl exec demoapp-5f7d8f9847-r7h7b -- nslookup externalname-redis-svc</span></span><br><span class="line">Server:         10.96.0.10</span><br><span class="line">Address:        10.96.0.10<span class="comment">#53</span></span><br><span class="line"><span class="comment"># 此为coreDNS中的Cname记录</span></span><br><span class="line">externalname-redis-svc.default.svc.cluster.local        canonical name = redis.ik8s.io. </span><br><span class="line">Name:   redis.ik8s.io</span><br><span class="line">Address: 1.2.3.4       <span class="comment"># 此为cname通过外部DNS解析的结果。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kubernetes</category>
        <category>kubernetes资源</category>
        <category>Service</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
</search>
